properties([
	buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3')), 
	[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], 
	[$class: 'ThrottleJobProperty', categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 0, maxConcurrentTotal: 0, paramsToUseForLimit: '', throttleEnabled: false, throttleOption: 'project'], 
	pipelineTriggers([cron('20 00 * * 6')])
])


def passed = false
def exception = null

timestamps
{
	node('SCVMM-AGENTS-POOL')
	{
		stage ('Checkout')
		{
			checkout scm
		}
		try
		{	    
			stage ('Static Security Analysis')
			{
				withCredentials(['usernamePassword'(credentialsId: 'checkie', passwordVariable: 'password', usernameVariable: 'username')])
				{					
					timeout(time: 36, unit: 'HOURS') 
					{
						step([
							$class: 'CxScanBuilder',
							comment: '',
							credentialsId: 'checkie',
							excludeFolders: 'Tests, Version, Applications, ApplicationsXML, DevelopmentScripts, PDBs',
							excludeOpenSourceFolders: 'Tests, Version, Applications, ApplicationsXML, DevelopmentScripts, PDBs',
							exclusionsSetting: 'job',
							failBuildOnNewResults: false,
							failBuildOnNewSeverity: 'HIGH',
							filterPattern: '''!**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
								!**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,
								!**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
								!**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
								!**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
								!**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
								!**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
								!**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
								!**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
								!**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
								!**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*''', 
							fullScanCycle: 10,
							fullScansScheduled: true,
							groupId: 'fec08cef-c196-40f6-bd58-872776f63fda',
							includeOpenSourceFolders: '',
							incremental: true,
							osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz',
							osaEnabled: true,
							osaInstallBeforeScan: false,
							password: "$password",
							preset: '100036',
							projectName: 'Integration_Points', 
							serverUrl: 'https://il1dpchmrxwb001.kcura.corp', 
							sourceEncoding: '5',
							useOwnServerCredentials: true,
							username: "$username",
							vulnerabilityThresholdResult: 'FAILURE',
							waitForResultsEnabled: true
						])
					}
				}
				passed = true
			}
		}
		catch(scanErr)
		{
			echo "FAILURE! Exception thrown: $scanErr"
			exception = scanErr
			throw scanErr
		}
		finally
		{
			if (!passed)
			{
				send_slack_message(["#cx_jenkins_status"], "${env.BRANCH_NAME} failed.\n${env.BUILD_URL}", 'danger')
				mail (
					subject: "FAILURE: Job '${env.JOB_NAME}'",
					body: "FAILURE: Job '${env.JOB_NAME}': Check console output at ${env.BUILD_URL}. Error reported: $exception",
					to: 'michal.pawlus@relativity.com'
				)
			}
		}
	}
}
