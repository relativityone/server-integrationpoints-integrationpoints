#!groovy

@Library('PipelineTools@master')

def version

timeout(time: 3, unit: 'HOURS')
{
    node('PolandBuild')
    {
        try
        {
            stage ('Checkout')
            {
                scmProps = checkout scm
                step([$class: 'StashNotifier', ignoreUnverifiedSSLPeer: true, commitSha1: scmProps.GIT_COMMIT])
            }
            stage ('Build')
            {            
                powershell ".\\build.ps1 build -buildConfig Release"
            }            
            stage ('Performance Tests')
            {
                powershell ".\\build.ps1 runPerformanceTests"
            }
        }
        catch (err)
        {
            currentBuild.result = 'FAILURE'
            echo err.toString()
            
            step([$class: 'StashNotifier', ignoreUnverifiedSSLPeer: true])
        }
        finally
        {
            if (currentBuild.result != 'SUCCESS')
            {
                send_slack_message(["#cd_relativity-sync"], "${env.BUILD_NUMBER} from ${env.BRANCH_NAME} failed.\n${env.BUILD_URL}", 'danger')
            }
        }
    }
}
