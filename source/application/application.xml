<?xml version="1.0" encoding="UTF-8"?>
<Application xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ArtifactViewFields>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002260</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>ArtifactID</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002267</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>Authentication</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002265</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>ConnectionPath</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002261</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>Edit</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002266</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>FilterString</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002272</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>LastRuntime</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002263</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>Name</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002271</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>NextScheduledRuntime</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002270</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>OverwriteFieldsonImport</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002269</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>Password</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002262</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>AccessControlListIsInherited</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002258</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>SystemCreatedBy</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002256</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>SystemCreatedOn</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002259</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>SystemLastModifiedBy</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002257</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>SystemLastModifiedOn</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002264</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>Test</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002268</ArtifactViewFieldId>
      <ArtifactTypeId>1000031</ArtifactTypeId>
      <ColumnName>UserName</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002285</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>ArtifactID</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002287</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>Edit</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002286</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>IntegrationPoints</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002289</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>Name</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002288</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>AccessControlListIsInherited</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002291</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>SourceField</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002283</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>SystemCreatedBy</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002281</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>SystemCreatedOn</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002284</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>SystemLastModifiedBy</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002282</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>SystemLastModifiedOn</ColumnName>
    </ArtifactViewField>
    <ArtifactViewField>
      <ArtifactViewFieldId>1002290</ArtifactViewFieldId>
      <ArtifactTypeId>1000033</ArtifactTypeId>
      <ColumnName>WorkspaceField</ColumnName>
    </ArtifactViewField>
  </ArtifactViewFields>
  <Assemblies>
    <Assembly>
      <ArtifactId>1016743</ArtifactId>
      <FileData></FileData>
      <Keywords />
      <Name>kCura.IntegrationPoints.dll</Name>
      <Notes />
    </Assembly>
  </Assemblies>
  <ResourceFiles />
  <ExternalTabs />
  <ExtractionDate>2014-11-11T21:49:22.3642919Z</ExtractionDate>
  <Guid>dcf6e9d1-22b6-4da3-98f6-41381e93c30c</Guid>
  <Name>Relativity Integration Points</Name>
  <Objects>
    <Object>
      <ActiveSyncs />
      <ArtifactId>1039498</ArtifactId>
      <DescriptorArtifactTypeId>1000031</DescriptorArtifactTypeId>
      <Fields>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039511</ArtifactId>
          <ArtifactViewFieldId>1002265</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Connection Path</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>4</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>4b4fcf54-8044-4f3b-bf66-92b090d96297</Guids>
          <Guid>4b4fcf54-8044-4f3b-bf66-92b090d96297</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>false</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039512</ArtifactId>
          <ArtifactViewFieldId>1002266</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Filter String</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>4</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>529e2dd7-7ace-4134-8b24-9f667976a4f0</Guids>
          <Guid>529e2dd7-7ace-4134-8b24-9f667976a4f0</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>false</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039513</ArtifactId>
          <ArtifactViewFieldId>1002267</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes>
            <Code>
              <ArtifactId>1039517</ArtifactId>
              <Guid>3aee95a7-00fe-4857-83f8-9b1e692f8210</Guid>
              <IsActive>true</IsActive>
              <Keywords />
              <Name>None</Name>
              <Notes />
              <OIHiliteStyleID>3</OIHiliteStyleID>
              <Order>0</Order>
              <ParentArtifactId>1003663</ParentArtifactId>
              <ParentIsCode>false</ParentIsCode>
              <UpdateInSearchEngine>false</UpdateInSearchEngine>
              <ApplicationVersion>0.0.0.6</ApplicationVersion>
            </Code>
            <Code>
              <ArtifactId>1039518</ArtifactId>
              <Guid>8be0fb4f-87c4-41f7-896b-8ae064b63ffc</Guid>
              <IsActive>true</IsActive>
              <Keywords />
              <Name>Anonymous</Name>
              <Notes />
              <OIHiliteStyleID>3</OIHiliteStyleID>
              <Order>10</Order>
              <ParentArtifactId>1003663</ParentArtifactId>
              <ParentIsCode>false</ParentIsCode>
              <UpdateInSearchEngine>false</UpdateInSearchEngine>
              <ApplicationVersion>0.0.0.6</ApplicationVersion>
            </Code>
            <Code>
              <ArtifactId>1039519</ArtifactId>
              <Guid>6a1c3445-5e10-4b53-915d-c9a70a796aa1</Guid>
              <IsActive>true</IsActive>
              <Keywords />
              <Name>FastBind</Name>
              <Notes />
              <OIHiliteStyleID>3</OIHiliteStyleID>
              <Order>20</Order>
              <ParentArtifactId>1003663</ParentArtifactId>
              <ParentIsCode>false</ParentIsCode>
              <UpdateInSearchEngine>false</UpdateInSearchEngine>
              <ApplicationVersion>0.0.0.6</ApplicationVersion>
            </Code>
          </Codes>
          <CodeTypeId>1001119</CodeTypeId>
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Authentication</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>5</FieldTypeId>
          <FilterType>List</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>b2f87d48-74e0-4648-b62e-b441769e3446</Guids>
          <Guid>b2f87d48-74e0-4648-b62e-b441769e3446</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>true</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039514</ArtifactId>
          <ArtifactViewFieldId>1002268</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>UserName</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>a0cd9730-e766-4b40-b028-57189328f052</Guids>
          <Guid>a0cd9730-e766-4b40-b028-57189328f052</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039515</ArtifactId>
          <ArtifactViewFieldId>1002269</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Password</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>da248e86-d7b1-42b7-9a78-2b28e21610d0</Guids>
          <Guid>da248e86-d7b1-42b7-9a78-2b28e21610d0</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039516</ArtifactId>
          <ArtifactViewFieldId>1002270</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Overwrite Fields on Import</DisplayName>
          <DisplayValueFalse>No</DisplayValueFalse>
          <DisplayValueTrue>Yes</DisplayValueTrue>
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>3</FieldTypeId>
          <FilterType>Boolean</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>d5624e1c-49ce-48b1-9402-3d844adf4a90</Guids>
          <Guid>d5624e1c-49ce-48b1-9402-3d844adf4a90</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039520</ArtifactId>
          <ArtifactViewFieldId>1002271</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Next Scheduled Runtime</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>2</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString>g</FormatString>
          <FriendlyName />
          <Guids>5b1c9986-f166-40e4-a0dd-a56f185ff30b</Guids>
          <Guid>5b1c9986-f166-40e4-a0dd-a56f185ff30b</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039521</ArtifactId>
          <ArtifactViewFieldId>1002272</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Last Runtime</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>2</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString>g</FormatString>
          <FriendlyName />
          <Guids>90d58af1-f79f-40ae-85fc-7e42f84dbcc1</Guids>
          <Guid>90d58af1-f79f-40ae-85fc-7e42f84dbcc1</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
      </Fields>
      <Guid>03d4f67e-22c9-488c-bee6-411f05c52e01</Guid>
      <KeyWords />
      <Layouts>
        <Layout>
          <OverwriteProtection>true</OverwriteProtection>
          <ArtifactId>1039522</ArtifactId>
          <Categories>
            <Category>
              <CategoryId>1001272</CategoryId>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>0</Order>
              <Title>Connection</Title>
              <Collapsible>false</Collapsible>
              <DefaultCollapsed>false</DefaultCollapsed>
            </Category>
            <Category>
              <CategoryId>1001273</CategoryId>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>10</Order>
              <Title>Import Configuration</Title>
              <Collapsible>false</Collapsible>
              <DefaultCollapsed>false</DefaultCollapsed>
            </Category>
            <Category>
              <CategoryId>1001274</CategoryId>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>20</Order>
              <Title>Import Scheduling</Title>
              <Collapsible>false</Collapsible>
              <DefaultCollapsed>false</DefaultCollapsed>
            </Category>
          </Categories>
          <Guid>d8bf50c1-ace1-488b-8781-54133a5794be</Guid>
          <Keywords />
          <LayoutArtifactTypeId>1000031</LayoutArtifactTypeId>
          <LayoutFields>
            <LayoutField>
              <CategoryId>1001272</CategoryId>
              <ColSpan>2</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039495</FieldArtifactId>
              <FieldDisplayTypeId>0</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>0</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>1</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
            <LayoutField>
              <CategoryId>1001272</CategoryId>
              <ColSpan>2</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039511</FieldArtifactId>
              <FieldDisplayTypeId>1</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>10</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>1</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
            <LayoutField>
              <CategoryId>1001272</CategoryId>
              <ColSpan>2</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039513</FieldArtifactId>
              <FieldDisplayTypeId>4</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>20</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>1</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
            <LayoutField>
              <CategoryId>1001272</CategoryId>
              <ColSpan>2</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039514</FieldArtifactId>
              <FieldDisplayTypeId>0</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>30</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>1</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
            <LayoutField>
              <CategoryId>1001272</CategoryId>
              <ColSpan>2</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039515</FieldArtifactId>
              <FieldDisplayTypeId>0</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>40</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>1</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
            <LayoutField>
              <CategoryId>1001273</CategoryId>
              <ColSpan>2</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039516</FieldArtifactId>
              <FieldDisplayTypeId>9</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <Order>10</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>1</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
          </LayoutFields>
          <LayoutTexts />
          <LayoutViews>
            <LayoutView>
              <ConnectorFieldArtifactId>0</ConnectorFieldArtifactId>
              <LayoutArtifactId>1039522</LayoutArtifactId>
              <LinkViewArtifactId>0</LinkViewArtifactId>
              <Order>30</Order>
              <RenderLinksInPopup>false</RenderLinksInPopup>
              <ViewArtifactId>1039540</ViewArtifactId>
            </LayoutView>
          </LayoutViews>
          <Name>Integration Points Layout</Name>
          <Notes />
          <Order>0</Order>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Layout>
      </Layouts>
      <Name>Integration Points</Name>
      <Notes />
      <ObjectRules />
      <MassOperations />
      <ParentArtifactTypeId>8</ParentArtifactTypeId>
      <EnableShapshotAuditing>true</EnableShapshotAuditing>
      <SamplingEnabled>true</SamplingEnabled>
      <PersistentListsEnabled>false</PersistentListsEnabled>
      <PivotEnabled>true</PivotEnabled>
      <CopyInstancesOnCaseCreation>false</CopyInstancesOnCaseCreation>
      <SystemFields>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039490</ArtifactId>
          <ArtifactViewFieldId>1002256</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Created On</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>2</FieldTypeId>
          <FilterType>CustomOnly</FilterType>
          <FormatString>g</FormatString>
          <FriendlyName />
          <Guids>d8865cc1-74ab-48ff-90ea-e493a907def0</Guids>
          <Guid>d8865cc1-74ab-48ff-90ea-e493a907def0</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039491</ArtifactId>
          <ArtifactViewFieldId>1002257</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Last Modified On</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>2</FieldTypeId>
          <FilterType>CustomOnly</FilterType>
          <FormatString>g</FormatString>
          <FriendlyName />
          <Guids>9aea1bf2-15a7-4f7e-a74c-d3dd8737f6da</Guids>
          <Guid>9aea1bf2-15a7-4f7e-a74c-d3dd8737f6da</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039492</ArtifactId>
          <ArtifactViewFieldId>1002258</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Created By</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>a2ba1a85-2441-4791-babc-f985b4b1fbf8</Guids>
          <Guid>a2ba1a85-2441-4791-babc-f985b4b1fbf8</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039493</ArtifactId>
          <ArtifactViewFieldId>1002259</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Last Modified By</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>71f4c8e4-f3ec-4f6d-8892-ae39e5c7f72b</Guids>
          <Guid>71f4c8e4-f3ec-4f6d-8892-ae39e5c7f72b</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039494</ArtifactId>
          <ArtifactViewFieldId>1002260</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Artifact ID</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>1</FieldTypeId>
          <FilterType>CustomOnly</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>a992c6fd-b6c2-4b97-aafb-2cfb3f666f62</Guids>
          <Guid>a992c6fd-b6c2-4b97-aafb-2cfb3f666f62</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039495</ArtifactId>
          <ArtifactViewFieldId>1002263</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Name</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000031</FieldArtifactTypeId>
          <FieldCategoryId>2</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>d534f433-dd92-4a53-b12d-bf85472e6d7a</Guids>
          <Guid>d534f433-dd92-4a53-b12d-bf85472e6d7a</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>true</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>true</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </SystemField>
      </SystemFields>
      <SystemLayouts />
      <SystemViews />
      <Tab>
        <ArtifactId>1039499</ArtifactId>
        <DisplayOrder>1000000000</DisplayOrder>
        <Guid>136c14c4-daa7-4542-abed-8d4e9b36a5dd</Guid>
        <IsDefault>false</IsDefault>
        <Name>Integration Points</Name>
        <ObjectArtifactTypeId>1000031</ObjectArtifactTypeId>
        <ParentArtifactId>1003663</ParentArtifactId>
        <TabDisplay>0</TabDisplay>
        <Visible>true</Visible>
        <ApplicationVersion>0.0.0.1</ApplicationVersion>
      </Tab>
      <Views>
        <View>
          <ArtifactId>1039496</ArtifactId>
          <ArtifactTypeId>1000031</ArtifactTypeId>
          <AvailableInObjectTab>true</AvailableInObjectTab>
          <Guid>181bf82a-e0dc-4a95-955a-0630bccb6afa</Guid>
          <IsRelationalIndexView>false</IsRelationalIndexView>
          <IsReport>false</IsReport>
          <IsVisible>true</IsVisible>
          <IsManualRerun>false</IsManualRerun>
          <Keywords />
          <Name>All Integration Pointss</Name>
          <Notes />
          <Order>1</Order>
          <QueryHint />
          <RenderLinks>true</RenderLinks>
          <Type>Admin Update</Type>
          <ViewByFamily>0</ViewByFamily>
          <ViewCriteria />
          <ViewFields>
            <ViewField>
              <ArtifactViewFieldId>1002261</ArtifactViewFieldId>
              <IsEditable>false</IsEditable>
              <Order>0</Order>
            </ViewField>
            <ViewField>
              <ArtifactViewFieldId>1002263</ArtifactViewFieldId>
              <IsEditable>false</IsEditable>
              <Order>1</Order>
            </ViewField>
          </ViewFields>
          <ViewOrders />
          <VisualizationType>0</VisualizationType>
          <ThreadMethod xsi:nil="true" />
          <PayloadArtifactViewFieldId xsi:nil="true" />
          <DisplayArtifactViewFieldId xsi:nil="true" />
          <GroupDefinitionArtifactViewFieldID xsi:nil="true" />
          <ApplicationVersion>0.0.0.1</ApplicationVersion>
        </View>
      </Views>
      <ApplicationVersion>0.0.0.1</ApplicationVersion>
    </Object>
    <Object>
      <ActiveSyncs />
      <ArtifactId>1039542</ArtifactId>
      <DescriptorArtifactTypeId>1000033</DescriptorArtifactTypeId>
      <Fields>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039543</ArtifactId>
          <ArtifactViewFieldId>1002290</ArtifactViewFieldId>
          <AssociativeArtifactTypeId>14</AssociativeArtifactTypeId>
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Workspace Field</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>10</FieldTypeId>
          <FilterType>None</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>3555568b-47eb-4218-b45d-af73c02495d2</Guids>
          <Guid>3555568b-47eb-4218-b45d-af73c02495d2</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
        <Field>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039544</ArtifactId>
          <ArtifactViewFieldId>1002291</ArtifactViewFieldId>
          <AssociativeArtifactTypeId>14</AssociativeArtifactTypeId>
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Source Field</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>10</FieldTypeId>
          <FilterType>None</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>6216686a-df54-4704-a020-25362d62084c</Guids>
          <Guid>6216686a-df54-4704-a020-25362d62084c</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>true</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>true</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Field>
      </Fields>
      <Guid>455e626a-17b1-42ec-9a75-ed81bedbf9c8</Guid>
      <KeyWords />
      <Layouts>
        <Layout>
          <OverwriteProtection>true</OverwriteProtection>
          <ArtifactId>1039541</ArtifactId>
          <Categories>
            <Category>
              <CategoryId>1001276</CategoryId>
              <LayoutArtifactId>1039541</LayoutArtifactId>
              <Order>0</Order>
              <Title>Default Category</Title>
              <Collapsible>false</Collapsible>
              <DefaultCollapsed>false</DefaultCollapsed>
            </Category>
          </Categories>
          <Guid>9c9625b7-a831-46cd-82e9-2bccdb5e74b5</Guid>
          <Keywords />
          <LayoutArtifactTypeId>1000033</LayoutArtifactTypeId>
          <LayoutFields>
            <LayoutField>
              <CategoryId>1001276</CategoryId>
              <ColSpan>1</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039538</FieldArtifactId>
              <FieldDisplayTypeId>16</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039541</LayoutArtifactId>
              <Order>0</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>0</Row>
              <Rows>0</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
            <LayoutField>
              <CategoryId>1001276</CategoryId>
              <ColSpan>1</ColSpan>
              <Column>1</Column>
              <FieldArtifactId>1039539</FieldArtifactId>
              <FieldDisplayTypeId>0</FieldDisplayTypeId>
              <FullTextFieldHeight xsi:nil="true" />
              <IsReadOnly>false</IsReadOnly>
              <LayoutArtifactId>1039541</LayoutArtifactId>
              <Order>1</Order>
              <PickerViewArtifactId xsi:nil="true" />
              <RepeatColumn xsi:nil="true" />
              <Row>1</Row>
              <Rows>0</Rows>
              <ShowNameColumn>true</ShowNameColumn>
            </LayoutField>
          </LayoutFields>
          <LayoutTexts />
          <LayoutViews />
          <Name>Mapped Fields Layout</Name>
          <Notes />
          <Order>0</Order>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </Layout>
      </Layouts>
      <Name>Mapped Fields</Name>
      <Notes />
      <ObjectRules />
      <MassOperations />
      <ParentArtifactTypeId>1000031</ParentArtifactTypeId>
      <EnableShapshotAuditing>true</EnableShapshotAuditing>
      <SamplingEnabled>true</SamplingEnabled>
      <PersistentListsEnabled>false</PersistentListsEnabled>
      <PivotEnabled>true</PivotEnabled>
      <CopyInstancesOnCaseCreation>false</CopyInstancesOnCaseCreation>
      <SystemFields>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039533</ArtifactId>
          <ArtifactViewFieldId>1002281</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Created On</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>2</FieldTypeId>
          <FilterType>CustomOnly</FilterType>
          <FormatString>g</FormatString>
          <FriendlyName />
          <Guids>ff76a41c-d251-4018-a2cc-d2a4a07dea45</Guids>
          <Guid>ff76a41c-d251-4018-a2cc-d2a4a07dea45</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039534</ArtifactId>
          <ArtifactViewFieldId>1002282</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Last Modified On</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>2</FieldTypeId>
          <FilterType>CustomOnly</FilterType>
          <FormatString>g</FormatString>
          <FriendlyName />
          <Guids>ec771634-7d90-4094-8e17-fa2ba9838a43</Guids>
          <Guid>ec771634-7d90-4094-8e17-fa2ba9838a43</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039535</ArtifactId>
          <ArtifactViewFieldId>1002283</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Created By</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>e485f354-4929-46df-8b0a-49a1236d84f6</Guids>
          <Guid>e485f354-4929-46df-8b0a-49a1236d84f6</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039536</ArtifactId>
          <ArtifactViewFieldId>1002284</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>System Last Modified By</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>6511e644-5cfc-4026-a061-891f17f69983</Guids>
          <Guid>6511e644-5cfc-4026-a061-891f17f69983</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039537</ArtifactId>
          <ArtifactViewFieldId>1002285</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Artifact ID</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>0</FieldCategoryId>
          <FieldTypeId>1</FieldTypeId>
          <FilterType>CustomOnly</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>1224d2e7-58f2-49fb-a5d6-f965fe9d6f3e</Guids>
          <Guid>1224d2e7-58f2-49fb-a5d6-f965fe9d6f3e</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>false</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039538</ArtifactId>
          <ArtifactViewFieldId>1002286</ArtifactViewFieldId>
          <AssociativeArtifactTypeId>1000031</AssociativeArtifactTypeId>
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>IntegrationPoints</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>11</FieldCategoryId>
          <FieldTypeId>10</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>2cf79fcf-619a-49f4-9486-c192e0dd7949</Guids>
          <Guid>2cf79fcf-619a-49f4-9486-c192e0dd7949</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>true</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>false</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>false</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>true</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength xsi:nil="true" />
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>false</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </SystemField>
        <SystemField>
          <AllowHTML>false</AllowHTML>
          <ArtifactId>1039539</ArtifactId>
          <ArtifactViewFieldId>1002289</ArtifactViewFieldId>
          <AssociativeArtifactTypeId xsi:nil="true" />
          <Codes />
          <CodeTypeId xsi:nil="true" />
          <ConnectorFieldArtifactId xsi:nil="true" />
          <DisplayName>Name</DisplayName>
          <DisplayValueFalse />
          <DisplayValueTrue />
          <FieldArtifactTypeId>1000033</FieldArtifactTypeId>
          <FieldCategoryId>2</FieldCategoryId>
          <FieldTypeId>0</FieldTypeId>
          <FilterType>Search</FilterType>
          <FormatString />
          <FriendlyName />
          <Guids>41277095-a69e-4df5-8a5e-56658606c522</Guids>
          <Guid>41277095-a69e-4df5-8a5e-56658606c522</Guid>
          <ImportBehavior xsi:nil="true" />
          <OverlayBehavior xsi:nil="true" />
          <IsAdditionalFileField>false</IsAdditionalFileField>
          <IsArtifactBaseField>false</IsArtifactBaseField>
          <IsAvailableInChoiceTree>false</IsAvailableInChoiceTree>
          <IsAvailableToAssociativeObjects>false</IsAvailableToAssociativeObjects>
          <IsEditable>true</IsEditable>
          <IsGroupByEnabled>true</IsGroupByEnabled>
          <IsIndexEnabled>false</IsIndexEnabled>
          <IsLinked>true</IsLinked>
          <IsRemovable>false</IsRemovable>
          <IsRequired>false</IsRequired>
          <IsSortable>true</IsSortable>
          <IsVisible>true</IsVisible>
          <Keywords />
          <LinkType>false</LinkType>
          <MaxLength>255</MaxLength>
          <Notes />
          <RelationalIndexViewArtifactID xsi:nil="true" />
          <SourceFieldArtifactId xsi:nil="true" />
          <UseUnicodeEncoding>true</UseUnicodeEncoding>
          <Width />
          <Wrapping>false</Wrapping>
          <AllowPivot>false</AllowPivot>
          <AllowGroupBy>false</AllowGroupBy>
          <AvailableInViewer>false</AvailableInViewer>
          <PopupPickerView xsi:nil="true" />
          <FieldTreeView xsi:nil="true" />
          <SiblingFieldArtifactID xsi:nil="true" />
          <AutoAddChoices>false</AutoAddChoices>
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </SystemField>
      </SystemFields>
      <SystemLayouts />
      <SystemViews />
      <Views>
        <View>
          <ArtifactId>1039540</ArtifactId>
          <ArtifactTypeId>1000033</ArtifactTypeId>
          <AvailableInObjectTab>true</AvailableInObjectTab>
          <Guid>ca6daca1-6399-4d71-8717-d77d12bbf067</Guid>
          <IsRelationalIndexView>false</IsRelationalIndexView>
          <IsReport>false</IsReport>
          <IsVisible>true</IsVisible>
          <IsManualRerun>false</IsManualRerun>
          <Keywords />
          <Name>All Mapped Fieldss</Name>
          <Notes />
          <Order>1</Order>
          <QueryHint />
          <RenderLinks>true</RenderLinks>
          <Type>Admin Update</Type>
          <ViewByFamily>0</ViewByFamily>
          <ViewCriteria />
          <ViewFields>
            <ViewField>
              <ArtifactViewFieldId>1002287</ArtifactViewFieldId>
              <IsEditable>false</IsEditable>
              <Order>0</Order>
            </ViewField>
            <ViewField>
              <ArtifactViewFieldId>1002290</ArtifactViewFieldId>
              <IsEditable>false</IsEditable>
              <Order>1</Order>
            </ViewField>
            <ViewField>
              <ArtifactViewFieldId>1002291</ArtifactViewFieldId>
              <IsEditable>false</IsEditable>
              <Order>2</Order>
            </ViewField>
          </ViewFields>
          <ViewOrders />
          <VisualizationType>0</VisualizationType>
          <ThreadMethod xsi:nil="true" />
          <PayloadArtifactViewFieldId xsi:nil="true" />
          <DisplayArtifactViewFieldId xsi:nil="true" />
          <GroupDefinitionArtifactViewFieldID xsi:nil="true" />
          <ApplicationVersion>0.0.0.6</ApplicationVersion>
        </View>
      </Views>
      <ApplicationVersion>0.0.0.6</ApplicationVersion>
    </Object>
  </Objects>
  <ParentTabs />
  <RelativityVersion>8.2.259.3</RelativityVersion>
  <Version>0.0.0.6</Version>
  <TabDisplay>true</TabDisplay>
  <OriginSignature>1c932e2a-7cf1-4143-b13d-df4926b5acf1</OriginSignature>
  <MasterScripts />
  <ApplicationScripts />
  <CustomPages>
    <CustomPage>
      <ArtifactID>1039501</ArtifactID>
      <Guid>c2c93191-7b15-4a9b-aa56-6a8c2dac5494</Guid>
      <ApplicationVersion>0.0.0.6</ApplicationVersion>
      <Name>Web</Name>
      <FileName>DCF6E9D1-22B6-4DA3-98F6-41381E93C30C.zip</FileName>
      <Size>2806361</Size>
      <FileText>

bin/Antlr3.Runtime.dll









		00004550
		
		0003
		50622b9a
		00000000
		00000000
		00e0
		







		010b
		11.00
		00017a00
		00000600
		00000000
		0001986e
		00002000
		0001a000
		10000000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0001e000
		00000200
		000222cc
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00019814
		00000057
		
		0001a000
		000003a8
		00018200
		00001a48
		
		0001c000
		0000000c
		000196dc
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00017874
		00002000
		00017a00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003a8
		0001a000
		00000400
		00017c00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0001c000
		00000200
		00018000
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/BCryptNET.dll









		00004550
		
		0003
		50aba8db
		00000000
		00000000
		00e0
		







		010b
		8.00
		00003000
		00000600
		00000000
		00004dfe
		00002000
		00006000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0000a000
		00000200
		00008108
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00004da8
		00000053
		
		00006000
		000002f8
		00003800
		00001970
		
		00008000
		0000000c
		00004d1c
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00002e04
		00002000
		00003000
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000002f8
		00006000
		00000400
		00003200
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00008000
		00000200
		00003600
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Castle.Core.dll









		00004550
		
		0003
		535cc28d
		00000000
		00000000
		00e0
		







		010b
		11.00
		00069e00
		00000800
		00000000
		0006bc5e
		00002000
		0006c000
		10000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00070000
		00000200
		0006ccbb
		
		34144
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0006bc0c
		0000004f
		
		0006c000
		00000470
		
		0006e000
		0000000c
		0006bad4
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00069c64
		00002000
		00069e00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000470
		0006c000
		00000600
		0006a000
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0006e000
		00000200
		0006a600
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Castle.Core.xml




    
        Castle.Core

    

    
        
            
            Specifies assignment by reference rather than by copying.
            

        

        
            
            Suppresses any on-demand behaviors.
            

        

        
            
            Removes a property if null or empty string, guid or collection.
            

        

        
            
            Removes a property if matches value.
            

        

        
            
            Assigns a specific dictionary key.
            

        

        
            
            Defines the contract for customizing dictionary access.
            

        

        
            
            Copies the dictionary behavior.
            

            null if should not be copied.  Otherwise copy.

        

        
            
            Determines relative order to apply related behaviors.
            

        

        
            
            Defines the contract for updating dictionary values.
            

        

        
            
            Sets the stored dictionary value.
            

            The dictionary adapter.

            The key.

            The stored value.

            The property.

            true if the property should be stored.

        

        
            
            Contract for value matching.
            

        

        
            
            Indicates that underlying values are changeable and should not be cached.
            

        

        
            
             Contract for dictionary initialization.
            

        

        
            
            Performs any initialization of the  
            

            The dictionary adapter.

            The dictionary behaviors.

        

        
            
            Abstract implementation of  .
            

        

        
            
            Conract for traversing a  .
            

        

        
            
            Contract for creating additional Dictionary adapters.
            

        

        
            
            Contract for manipulating the Dictionary adapter.
            

        

        
            
            Contract for editing the Dictionary adapter.
            

        

        
            
            Contract for managing Dictionary adapter notifications.
            

        

        
            
            Contract for validating Dictionary adapter.
            

        

        
            
            Defines the contract for building  s.
            

        

        
            
            Builds the dictionary behaviors.
            

            

        

        
            
            Abstract adapter for the   support
            needed by the  
            

        

        
            
            Adds an element with the provided key and value to the 
 object.
            

            The 
 to use as the key of the element to add.

            The 
 to use as the value of the element to add.

            An element with the same key already exists in the 
 object. 

            key is null. 

            The 
 is read-only.-or- The 
 has a fixed size. 

        

        
            
            Removes all elements from the 
 object.
            

            The 
 object is read-only. 

        

        
            
            Determines whether the 
 object contains an element with the specified key.
            

            The key to locate in the 
 object.

            
            true if the 
 contains an element with the key; otherwise, false.
            

            key is null. 

        

        
            
            Returns an 
 object for the 
 object.
            

            
            An 
 object for the 
 object.
            

        

        
            
            Removes the element with the specified key from the 
 object.
            

            The key of the element to remove.

            The 
 object is read-only.-or- The 
 has a fixed size. 

            key is null. 

        

        
            
            Copies the elements of the 
 to an 
, starting at a particular 
 index.
            

            The one-dimensional 
 that is the destination of the elements copied from 
. The 
 must have zero-based indexing.

            The zero-based index in array at which copying begins.

            array is null. 

            The type of the source 
 cannot be cast automatically to the type of the destination array. 

            index is less than zero. 

            array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source 
 is greater than the available space from index to the end of the destination array. 

        

        
            
            Returns an enumerator that iterates through a collection.
            

            
            An 
 object that can be used to iterate through the collection.
            

        

        
            
            Gets a value indicating whether the 
 object has a fixed size.
            

            

            true if the 
 object has a fixed size; otherwise, false.

        

        
            
            Gets a value indicating whether the 
 object is read-only.
            

            

            true if the 
 object is read-only; otherwise, false.

        

        
            
            Gets an 
 object containing the keys of the 
 object.
            

            

            An 
 object containing the keys of the 
 object.

        

        
            
            Gets an 
 object containing the values in the 
 object.
            

            

            An 
 object containing the values in the 
 object.

        

        
            
            Gets or sets the   with the specified key.
            

            

        

        
            
            Gets the number of elements contained in the 
.
            

            

            The number of elements contained in the 
.

        

        
            
            Gets a value indicating whether access to the 
 is synchronized (thread safe).
            

            

            true if access to the 
 is synchronized (thread safe); otherwise, false.

        

        
            
            Gets an object that can be used to synchronize access to the 
.
            

            

            An object that can be used to synchronize access to the 
.

        

        
            
              Provides a generic collection that supports data binding.
            

            
              This class wraps the CLR  
              in order to implement the Castle-specific  .
            

            The type of elements in the list.

        

        
            
              Initializes a new instance of the   class
              using default values.
            

        

        
            
              Initializes a new instance of the   class
              with the specified list.
            

            
              An   of items
              to be contained in the  .
            

        

        
            
              Initializes a new instance of the   class
              wrapping the specified   instance.
            

            
              A  
              to be wrapped by the  .
            

        

        
            
            Defines the contract for retrieving dictionary values.
            

        

        
            
            Gets the effective dictionary value.
            

            The dictionary adapter.

            The key.

            The stored value.

            The property.

            true if return only existing.

            The effective property value.

        

        
            
            Initializes a new instance of the   class
            that represents a child object in a larger object graph.
            

            

            

        

        
            
             Contract for dictionary meta-data initialization.
            

        

        
            
            	Initializes the given   object.
            

            The dictionary adapter factory.

            The dictionary adapter meta.

            
        

        
            
            	Determines whether the given behavior should be included in a new
            	  object.
            

            A dictionary behavior or annotation.

            True if the behavior should be included; otherwise, false.

            
            	  behaviors are always included,
            	regardless of the result of this method.
            

            
        

        
            
              Checks whether or not collection is null or empty. Assumes colleciton can be safely enumerated multiple times.
            

            

            

        

        
            
            Creates a message to inform clients that a proxy couldn't be created due to reliance on an
            inaccessible type (perhaps itself).
            

            the inaccessible type that prevents proxy creation

            the type that couldn't be proxied

        

        
            
            Find the best available name to describe a type.
            

            
            Usually the best name will be  , but
            sometimes that's null (see http://msdn.microsoft.com/en-us/library/system.type.fullname%28v=vs.110%29.aspx)
            in which case the method falls back to  .
            

            the type to name

            the best name

        

        
            
              Constant to use when making assembly internals visible to Castle.Core 
              [assembly: InternalsVisibleTo(CoreInternalsVisible.ToCastleCore)]

            

        

        
            
              Constant to use when making assembly internals visible to proxy types generated by DynamicProxy. Required when proxying internal types.
              [assembly: InternalsVisibleTo(CoreInternalsVisible.ToDynamicProxyGenAssembly2)]

            

        

        
            
            Identifies a property should be represented as a nested component.
            

        

        
            
            Defines the contract for building typed dictionary keys.
            

        

        
            
            Builds the specified key.
            

            The dictionary adapter.

            The current key.

            The property.

            The updated key

        

        
            
            Applies no prefix.
            

        

        
            
            Gets or sets the prefix.
            

            The prefix.

        

        
            
            Identifies the dictionary adapter types.
            

        

        
            
            Identifies an interface or property to be pre-fetched.
            

        

        
            
            Instructs fetching to occur.
            

        

        
            
            Instructs fetching according to  
            

            

        

        
            
            Gets whether or not fetching should occur.
            

        

        
            
            Assigns a property to a group.
            

        

        
            
            Constructs a group assignment.
            

            The group name.

        

        
            
            Constructs a group assignment.
            

            The group name.

        

        
            
            Gets the group the property is assigned to.
            

        

        
            
            Assigns a specific dictionary key.
            

        

        
            
            Initializes a new instance of the   class.
            

            The key.

        

        
            
            Initializes a new instance of the   class.
            

            The compound key.

        

        
            
            Assigns a prefix to the keyed properties of an interface.
            

            
            Key prefixes are not inherited by sub-interfaces.
            

        

        
            
            Initializes a default instance of the   class.
            

        

        
            
            Initializes a new instance of the   class.
            

            The prefix for the keyed properties of the interface.

        

        
            
            Gets the prefix key added to the properties of the interface.
            

        

        
            
            Substitutes part of key with another string.
            

        

        
            
            Initializes a new instance of the   class.
            

            The old value.

            The new value.

        

        
            
            Requests support for multi-level editing.
            

        

        
            
            Generates a new GUID on demand.
            

        

        
            
            Support for on-demand value resolution.
            

        

        
            
            Provides simple string formatting from existing properties.
            

        

        
            
            Gets the string format.
            

        

        
            
            Gets the format properties.
            

        

        
            
            Identifies a property should be represented as a delimited string value.
            

        

        
            
            Gets the separator.
            

        

        
            
            Converts all properties to strings.
            

        

        
            
            Gets or sets the format.
            

            The format.

        

        
            
            Suppress property change notifications.
            

        

        
            
             Contract for property descriptor initialization.
            

        

        
            
            Performs any initialization of the  
            

            The property descriptor.

            The property behaviors.

        

        
            
            Assigns a prefix to the keyed properties using the interface name.
            

        

        
            
            Manages conversion between property values.
            

        

        
            
            Initializes a new instance of the   class.
            

            The converter.

        

        
            
            Gets the effective dictionary value.
            

            The dictionary adapter.

            The key.

            The stored value.

            The property.

            true if return only existing.

            The effective property value.

        

        
            
            
            

        

        
            
            Uses Reflection.Emit to expose the properties of a dictionary
            through a dynamic implementation of a typed interface.
            

        

        
            
            Defines the contract for building typed dictionary adapters.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            An implementation of the typed interface bound to the dictionary.

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            An implementation of the typed interface bound to the dictionary.

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            The property descriptor.

            An implementation of the typed interface bound to the dictionary.

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            An implementation of the typed interface bound to the namedValues.

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            An implementation of the typed interface bound to the namedValues.

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            An implementation of the typed interface bound to the  .

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets a typed adapter bound to the  .
            

            The typed interface.

            The underlying source of properties.

            An implementation of the typed interface bound to the  .

            
            The type represented by T must be an interface with properties.
            

        

        
            
            Gets the   associated with the type.
            

            The typed interface.

            The adapter meta-data.

        

        
            
            Gets the   associated with the type.
            

            The typed interface.

            The property descriptor.

            The adapter meta-data.

        

        
            
            Gets the   associated with the type.
            

            The typed interface.

            Another   from which to copy behaviors.

            The adapter meta-data.

        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
             
        

        
            
            Contract for dictionary validation.
            

        

        
            
            Determines if   is valid.
            

            The dictionary adapter.

            true if valid.

        

        
            
            Validates the  .
            

            The dictionary adapter.

            The error summary information.

        

        
            
            Validates the   for a property.
            

            The dictionary adapter.

            The property to validate.

            The property summary information.

        

        
            
            Invalidates any results cached by the validator.
            

            The dictionary adapter.

        

        
            
            
            

        

        
            
            Initializes a new instance of the   class.
            

            The name values.

        

        
            
            Determines whether the 
 object contains an element with the specified key.
            

            The key to locate in the 
 object.

            
            true if the 
 contains an element with the key; otherwise, false.
            

            key is null. 

        

        
            
            Adapts the specified name values.
            

            The name values.

            

        

        
            
            Gets a value indicating whether the 
 object is read-only.
            

            

            true if the 
 object is read-only; otherwise, false.

        

        
            
            Gets or sets the   with the specified key.
            

            

        

        
            
            Describes a dictionary property.
            

        

        
            
            Initializes an empty   class.
            

        

        
            
            Initializes a new instance of the   class.
            

            The property.

            The annotations.

        

        
            
            Initializes a new instance   class.
            

        

        
            
             Copies an existinginstance of the   class.
            

            

            

        

        
            
            Gets the key.
            

            The dictionary adapter.

            The key.

            The descriptor.

            

        

        
            
            Gets the property value.
            

            The dictionary adapter.

            The key.

            The stored value.

            The descriptor.

            true if return only existing.

            

        

        
            
            Sets the property value.
            

            The dictionary adapter.

            The key.

            The value.

            The descriptor.

            

        

        
            
            Adds a single behavior.
            

            The behavior.

        

        
            
            Adds the behaviors.
            

            The behaviors.

        

        
            
            Adds the behaviors.
            

            The behaviors.

        

        
            
            Copies the behaviors to the other  
            

            

            

        

        
            
            Copies the  
            

            

        

        
            
            
            

        

        
            
            Gets the property name.
            

        

        
            
            Gets the property type.
            

        

        
            
            Gets the property.
            

            The property.

        

        
            
            Returns true if the property is dynamic.
            

        

        
            
            Gets additional state.
            

        

        
            
            Determines if property should be fetched.
            

        

        
            
            Determines if property must exist first.
            

        

        
            
            Determines if notifications should occur.
            

        

        
            
            Gets the property behaviors.
            

        

        
            
            Gets the type converter.
            

            The type converter.

        

        
            
            Gets the extended properties.
            

        

        
            
            Gets the setter.
            

            The setter.

        

        
            
            Gets the key builders.
            

            The key builders.

        

        
            
            Gets the setter.
            

            The setter.

        

        
            
            Gets the getter.
            

            The getter.

        

        
            
            Gets the initializers.
            

            The initializers.

        

        
            
            Gets the meta-data initializers.
            

            The meta-data initializers.

        

        
            
              Helper class for retrieving attributes.
            

        

        
            
              Gets the attribute.
            

            The member.

            The member attribute.

        

        
            
              Gets the attributes. Does not consider inherited attributes!
            

            The member.

            The member attributes.

        

        
            
              Gets the type attribute.
            

            The type.

            The type attribute.

        

        
            
              Gets the type attributes.
            

            The type.

            The type attributes.

        

        
            
              Gets the type converter.
            

            The member.

            

        

        
            
              Gets the attribute.
            

            The member.

            The member attribute.

        

        
            
            Contract for typed dynamic value resolution.
            

            

        

        
            
            Contract for dynamic value resolution.
            

        

        
            
              Supporting Logger levels.
            

        

        
            
              Logging will be off
            

        

        
            
              Fatal logging level
            

        

        
            
              Error logging level
            

        

        
            
              Warn logging level
            

        

        
            
              Info logging level
            

        

        
            
              Debug logging level
            

        

        
            
              Encapsulates an invocation of a proxied method.
            

        

        
            
              Gets the value of the argument at the specified  .
            

            The index.

            The value of the argument at the specified  .

        

        
            
              Returns the concrete instantiation of the   on the proxy, with any generic
              parameters bound to real types.
            

            
              The concrete instantiation of the   on the proxy, or the   if
              not a generic method.
            

            
              Can be slower than calling  .
            

        

        
            
              Returns the concrete instantiation of  , with any
              generic parameters bound to real types.
              For interface proxies, this will point to the   on the target class.
            

            The concrete instantiation of  , or
                if not a generic method.

            
              In debug builds this can be slower than calling  .
            

        

        
            
              Proceeds the call to the next interceptor in line, and ultimately to the target method.
            

            
              Since interface proxies without a target don't have the target implementation to proceed to,
              it is important, that the last interceptor does not call this method, otherwise a
                will be thrown.
            

        

        
            
              Overrides the value of an argument at the given   with the
              new   provided.
            

            
              This method accepts an  , however the value provided must be compatible
              with the type of the argument defined on the method, otherwise an exception will be thrown.
            

            The index of the argument to override.

            The new value for the argument.

        

        
            
              Gets the arguments that the   has been invoked with.
            

            The arguments the method was invoked with.

        

        
            
              Gets the generic arguments of the method.
            

            The generic arguments, or null if not a generic method.

        

        
            
              Gets the object on which the invocation is performed. This is different from proxy object
              because most of the time this will be the proxy target object.
            

             
            The invocation target.

        

        
            
              Gets the   representing the method being invoked on the proxy.
            

            The   representing the method being invoked.

        

        
            
              For interface proxies, this will point to the   on the target class.
            

            The method invocation target.

        

        
            
              Gets the proxy object on which the intercepted method is invoked.
            

            Proxy object on which the intercepted method is invoked.

        

        
            
              Gets or sets the return value of the method.
            

            The return value of the method.

        

        
            
              Gets the type of the target object for the intercepted method.
            

            The type of the target object.

        

        
            
              Used during the target type inspection process. Implementors have a chance to customize the
              proxy generation process.
            

        

        
            
              Invoked by the generation process to notify that the whole process has completed.
            

        

        
            
              Invoked by the generation process to notify that a member was not marked as virtual.
            

            The type which declares the non-virtual member.

            The non-virtual member.

            
              This method gives an opportunity to inspect any non-proxyable member of a type that has 
              been requested to be proxied, and if appropriate - throw an exception to notify the caller.
            

        

        
            
              Invoked by the generation process to determine if the specified method should be proxied.
            

            The type which declares the given method.

            The method to inspect.

            True if the given method should be proxied; false otherwise.

        

        
            
              Interface describing elements composing generated type
            

        

        
            
              Performs some basic screening and invokes the  
              to select methods.
            

            

            

            

            

        

        
            
              Provides functionality for disassembling instances of attributes to CustomAttributeBuilder form, during the process of emiting new types by Dynamic Proxy.
            

        

        
            
              Disassembles given attribute instance back to corresponding CustomAttributeBuilder.
            

            An instance of attribute to disassemble

              corresponding 1 to 1 to given attribute instance, or null reference.

            
              Implementers should return   that corresponds to given attribute instance 1 to 1,
              that is after calling specified constructor with specified arguments, and setting specified properties and fields with values specified
              we should be able to get an attribute instance identical to the one passed in  . Implementer can return null
              if it wishes to opt out of replicating the attribute. Notice however, that for some cases, like attributes passed explicitly by the user
              it is illegal to return null, and doing so will result in exception.
            

        

        
            
              Handles error during disassembly process
            

            Type of the attribute being disassembled

            Exception thrown during the process

            usually null, or (re)throws the exception

        

        
            
              Here we try to match a constructor argument to its value.
              Since we can't get the values from the assembly, we use some heuristics to get it.
              a/ we first try to match all the properties on the attributes by name (case insensitive) to the argument
              b/ if we fail we try to match them by property type, with some smarts about convertions (i,e: can use Guid for string).
            

        

        
            
              We have the following rules here.
              Try to find a matching type, failing that, if the parameter is string, get the first property (under the assumption that
              we can convert it.
            

        

        
            
              Attributes can only accept simple types, so we return null for null,
              if the value is passed as string we call to string (should help with converting), 
              otherwise, we use the value as is (enums, integer, etc).
            

        

        
            
              Returns list of all unique interfaces implemented given types, including their base interfaces.
            

             

             

        

        
            
              Applied to the assemblies saved by   in order to persist the cache data included in the persisted assembly.
            

        

        
            
              Base class that exposes the common functionalities
              to proxy generation.
            

        

        
            
              It is safe to add mapping (no mapping for the interface exists)
            

            

            

            

        

        
            
              Generates a parameters constructor that initializes the proxy
              state with   just to make it non-null.
              
                This constructor is important to allow proxies to be XML serializable
              

            

        

        
            
              Generates the constructor for the class that extends
               
            

            

            

            

        

        
            
              Default implementation of   interface producing in-memory proxy assemblies.
            

        

        
            
              Abstracts the implementation of proxy type construction.
            

        

        
            
              Creates a proxy type for given  , implementing  , using   provided.
            

            The class type to proxy.

            Additional interface types to proxy.

            The proxy generation options.

            The generated proxy type.

            
              Implementers should return a proxy type for the specified class and interfaces.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See   method.)
            

            Thrown when   or any of   is a generic type definition.

            Thrown when   or any of   is not public.
              Note that to avoid this exception, you can mark offending type internal, and define   
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.

             
        

        
            
              Creates a proxy type that proxies calls to   members on  , implementing  , using   provided.
            

            The interface type to proxy.

            Additional interface types to proxy.

            Type implementing   on which calls to the interface members should be intercepted.

            The proxy generation options.

            The generated proxy type.

            
              Implementers should return a proxy type for the specified interface that 'proceeds' executions to the specified target.
              Additional interfaces should be only 'mark' interfaces, that is, they should work like interface proxy without target. (See   method.)
            

            Thrown when   or any of   is a generic type definition.

            Thrown when   or any of   is not public.
              Note that to avoid this exception, you can mark offending type internal, and define   
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.

             
        

        
            
              Creates a proxy type for given   and   that delegates all calls to the provided interceptors and allows interceptors to switch the actual target of invocation.
            

            The interface type to proxy.

            Additional interface types to proxy.

            The proxy generation options.

            The generated proxy type.

            
              Implementers should return a proxy type for the specified interface(s) that delegate all executions to the specified interceptors
              and uses an instance of the interface as their targets (i.e.  ), rather than a class. All   classes should then implement   interface,
              to allow interceptors to switch invocation target with instance of another type implementing called interface.
            

            Thrown when   or any of   is a generic type definition.

            Thrown when   or any of   is not public.
              Note that to avoid this exception, you can mark offending type internal, and define   
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.

             
        

        
            
              Creates a proxy type for given   that delegates all calls to the provided interceptors.
            

            The interface type to proxy.

            Additional interface types to proxy.

            The proxy generation options.

            The generated proxy type.

            
              Implementers should return a proxy type for the specified interface and additional interfaces that delegate all executions to the specified interceptors.
            

            Thrown when   or any of   is a generic type definition.

            Thrown when   or any of   is not public.
              Note that to avoid this exception, you can mark offending type internal, and define   
              pointing to Castle Dynamic Proxy assembly, in assembly containing that type, if this is appropriate.

             
        

        
            
              Gets or sets the   that this   logs to.
            

        

        
            
              Gets the   associated with this builder.
            

            The module scope associated with this builder.

        

        
            
              Initializes a new instance of the   class with new  .
            

        

        
            
              Initializes a new instance of the   class.
            

            The module scope for generated proxy types.

        

        
            
              Registers custom disassembler to handle disassembly of specified type of attributes.
            

            Type of attributes to handle

            Disassembler converting existing instances of Attributes to CustomAttributeBuilders

            
              When disassembling an attribute Dynamic Proxy will first check if an custom disassembler has been registered to handle attributes of that type, 
              and if none is found, it'll use the  .
            

        

        
            
              Attributes should be replicated if they are non-inheritable,
              but there are some special cases where the attributes means
              something to the CLR, where they should be skipped.
            

        

        
            
              Initializes a new instance of the   class.
            

            Target element. This is either target type or target method for invocation types.

            The type of the proxy. This is base type for invocation types.

            The interfaces.

            The options.

        

        
            
              Initializes a new instance of the   class.
            

            Type of the target.

            The interfaces.

            The options.

        

        
            
              s
              Provides appropriate Ldc.X opcode for the type of primitive value to be loaded.
            

        

        
            
              Provides appropriate Ldind.X opcode for 
              the type of primitive value to be loaded indirectly.
            

        

        
            
              Emits a load indirect opcode of the appropriate type for a value or object reference.
              Pops a pointer off the evaluation stack, dereferences it and loads
              a value of the specified type.
            

            

            

        

        
            
              Emits a load opcode of the appropriate kind for a constant string or
              primitive value.
            

            

            

        

        
            
              Emits a load opcode of the appropriate kind for the constant default value of a
              type, such as 0 for value types and null for reference types.
            

        

        
            
              Emits a store indirectopcode of the appropriate type for a value or object reference.
              Pops a value of the specified type and a pointer off the evaluation stack, and
              stores the value.
            

            

            

        

        
            
              Summary description for PropertiesCollection.
            

        

        
            
              Wraps a reference that is passed 
              ByRef and provides indirect load/store support.
            

        

        
            
              Summary description for NewArrayExpression.
            

        

        
            
            

        

        
            
              Provides appropriate Stind.X opcode 
              for the type of primitive value to be stored indirectly.
            

        

        
            
              Initializes a new instance of the   class.
            

            The name.

            Type declaring the original event being overriten, or null.

            

            The add method.

            The remove method.

            The attributes.

        

        
            
              Represents the scope of uniquenes of names for types and their members
            

        

        
            
              Gets a unique name based on  
            

            Name suggested by the caller

            Unique name based on  .

            
              Implementers should provide name as closely resembling   as possible.
              Generally if no collision occurs it is suggested to return suggested name, otherwise append sequential suffix.
              Implementers must return deterministic names, that is when   is called twice 
              with the same suggested name, the same returned name should be provided each time. Non-deterministic return
              values, like appending random suffices will break serialization of proxies.
            

        

        
            
              Returns new, disposable naming scope. It is responsibilty of the caller to make sure that no naming collision
              with enclosing scope, or other subscopes is possible.
            

            New naming scope.

        

        
            
              Returns the methods implemented by a type. Use this instead of Type.GetMethods() to work around a CLR issue
              where duplicate MethodInfos are returned by Type.GetMethods() after a token of a generic type's method was loaded.
            

        

        
            
              Determines whether the specified method is internal.
            

            The method.

            
              true
 if the specified method is internal; otherwise, false
.
            

        

        
            
              Determines whether this assembly has internals visible to dynamic proxy.
            

            The assembly to inspect.

        

        
            
              Checks if the method is public or protected.
            

            

            

        

        
            
              Because we need to cache the types based on the mixed in mixins, we do the following here:
              - Get all the mixin interfaces
              - Sort them by full name
              - Return them by position
            
            The idea is to have reproducible behavior for the case that mixins are registered in different orders.
            This method is here because it is required 
            

        

        
            
              Summary description for ModuleScope.
            

        

        
            
              The default file name used when the assembly is saved using  .
            

        

        
            
              The default assembly (simple) name used for the assemblies generated by a   instance.
            

        

        
            
              Initializes a new instance of the   class; assemblies created by this instance will not be saved.
            

        

        
            
              Initializes a new instance of the   class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            

            If set to true
 saves the generated module.

        

        
            
              Initializes a new instance of the   class, allowing to specify whether the assemblies generated by this instance
              should be saved.
            

            If set to true
 saves the generated module.

            If set to true
 disables ability to generate signed module. This should be used in cases where ran under constrained permissions.

        

        
            
              Initializes a new instance of the   class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            

            If set to true
 saves the generated module.

            If set to true
 disables ability to generate signed module. This should be used in cases where ran under constrained permissions.

            The simple name of the strong-named assembly generated by this  .

            The path and file name of the manifest module of the strong-named assembly generated by this  .

            The simple name of the weak-named assembly generated by this  .

            The path and file name of the manifest module of the weak-named assembly generated by this  .

        

        
            
              Initializes a new instance of the   class, allowing to specify whether the assemblies generated by this instance
              should be saved and what simple names are to be assigned to them.
            

            If set to true
 saves the generated module.

            If set to true
 disables ability to generate signed module. This should be used in cases where ran under constrained permissions.

            Naming scope used to provide unique names to generated types and their members (usually via sub-scopes).

            The simple name of the strong-named assembly generated by this  .

            The path and file name of the manifest module of the strong-named assembly generated by this  .

            The simple name of the weak-named assembly generated by this  .

            The path and file name of the manifest module of the weak-named assembly generated by this  .

        

        
            
              Returns a type from this scope's type cache, or null if the key cannot be found.
            

            The key to be looked up in the cache.

            The type from this scope's type cache matching the key, or null if the key cannot be found

        

        
            
              Registers a type in this scope's type cache.
            

            The key to be associated with the type.

            The type to be stored in the cache.

        

        
            
              Gets the key pair used to sign the strong-named assembly generated by this  .
            

            

        

        
            
              Gets the specified module generated by this scope, creating a new one if none has yet been generated.
            

            If set to true, a strong-named module is returned; otherwise, a weak-named module is returned.

            A strong-named or weak-named module generated by this scope, as specified by the   parameter.

        

        
            
              Gets the strong-named module generated by this scope, creating a new one if none has yet been generated.
            

            A strong-named module generated by this scope.

        

        
            
              Gets the weak-named module generated by this scope, creating a new one if none has yet been generated.
            

            A weak-named module generated by this scope.

        

        
            
              Saves the generated assembly with the name and directory information given when this   instance was created (or with
              the   and current directory if none was given).
            

            
              
                This method stores the generated assembly in the directory passed as part of the module information specified when this instance was
                constructed (if any, else the current directory is used). If both a strong-named and a weak-named assembly
                have been generated, it will throw an exception; in this case, use the   overload.
              

              
                If this   was created without indicating that the assembly should be saved, this method does nothing.
              

            

            Both a strong-named and a weak-named assembly have been generated.

            The path of the generated assembly file, or null if no file has been generated.

        

        
            
              Saves the specified generated assembly with the name and directory information given when this   instance was created
              (or with the   and current directory if none was given).
            

            True if the generated assembly with a strong name should be saved (see  );
              false if the generated assembly without a strong name should be saved (see  .

            
              
                This method stores the specified generated assembly in the directory passed as part of the module information specified when this instance was
                constructed (if any, else the current directory is used).
              

              
                If this   was created without indicating that the assembly should be saved, this method does nothing.
              

            

            No assembly has been generated that matches the   parameter.
            

            The path of the generated assembly file, or null if no file has been generated.

        

        
            
              Loads the generated types from the given assembly into this  's cache.
            

            The assembly to load types from. This assembly must have been saved via   or
               , or it must have the   manually applied.

            
              This method can be used to load previously generated and persisted proxy types from disk into this scope's type cache, eg. in order
              to avoid the performance hit associated with proxy generation.
            

        

        
            
              Users of this   should use this lock when accessing the cache.
            

        

        
            
              Gets the strong-named module generated by this scope, or   if none has yet been generated.
            

            The strong-named module generated by this scope, or   if none has yet been generated.

        

        
            
              Gets the file name of the strongly named module generated by this scope.
            

            The file name of the strongly named module generated by this scope.

        

        
            
              Gets the directory where the strongly named module generated by this scope will be saved, or   if the current directory
              is used.
            

            The directory where the strongly named module generated by this scope will be saved when   is called
              (if this scope was created to save modules).

        

        
            
              Gets the weak-named module generated by this scope, or   if none has yet been generated.
            

            The weak-named module generated by this scope, or   if none has yet been generated.

        

        
            
              Gets the file name of the weakly named module generated by this scope.
            

            The file name of the weakly named module generated by this scope.

        

        
            
              Gets the directory where the weakly named module generated by this scope will be saved, or   if the current directory
              is used.
            

            The directory where the weakly named module generated by this scope will be saved when   is called
              (if this scope was created to save modules).

        

        
            
              ProxyBuilder that persists the generated type.
            

            
              The saved assembly contains just the last generated type.
            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Saves the generated assembly to a physical file. Note that this renders the   unusable.
            

            The path of the generated assembly file, or null if no assembly has been generated.

            
              This method does not support saving multiple files. If both a signed and an unsigned module have been generated, use the 
              respective methods of the  .
            

        

        
            
              Initializes a new instance of the   class.
            

            The hook.

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Provides proxy objects for classes and interfaces.
            

        

        
            
              Initializes a new instance of the   class.
            

            Proxy types builder.

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Initializes a new instance of the   class.
            

            If true
 forces all types to be generated into an unsigned module.

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            Object proxying calls to members of   on   object.

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given  is not an interface type.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method generates new proxy type for each type of  , which affects performance. If you don't want to proxy types differently depending on the type of the target
              use   method.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   on   object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given  is not an interface type.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method generates new proxy type for each type of  , which affects performance. If you don't want to proxy types differently depending on the type of the target
              use   method.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on   object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method generates new proxy type for each type of  , which affects performance. If you don't want to proxy types differently depending on the type of the target
              use   method.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on   object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method generates new proxy type for each type of  , which affects performance. If you don't want to proxy types differently depending on the type of the target
              use   method.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   and   types  on   object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method generates new proxy type for each type of  , which affects performance. If you don't want to proxy types differently depending on the type of the target
              use   method.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   and   types on   object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method generates new proxy type for each type of  , which affects performance. If you don't want to proxy types differently depending on the type of the target
              use   method.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
              Interceptors can use   interface to provide other target for method invocation than default  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on   object or alternative implementation swapped at runtime by an interceptor.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
              Interceptors can use   interface to provide other target for method invocation than default  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on   object or alternative implementation swapped at runtime by an interceptor.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is not an interface type.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
              Interceptors can use   interface to provide other target for method invocation than default  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on   object or alternative implementation swapped at runtime by an interceptor.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is not an interface type.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
              Interceptors can use   interface to provide other target for method invocation than default  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   and   types on   object or alternative implementation swapped at runtime by an interceptor.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
              Interceptors can use   interface to provide other target for method invocation than default  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on   object or alternative implementation swapped at runtime by an interceptor.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on   object with given  .
              Interceptors can use   interface to provide other target for method invocation than default  .
            

            Type of the interface implemented by   which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   and   types on   object or alternative implementation swapped at runtime by an interceptor.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not an interface type.

            Thrown when given   does not implement   interface.

            Thrown when no default constructor exists on actual type of   object.

            Thrown when default constructor of actual type of   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   types on generated target object.
            

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              As a result of that also at least one   implementation must be provided.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   types on generated target object.
            

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              As a result of that also at least one   implementation must be provided.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   types on generated target object.
            

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              As a result of that also at least one   implementation must be provided.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on generated target object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   type on generated target object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   and   types on generated target object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of interfaces to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   on generated target object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given    is a generic type definition.

            Thrown when given   is not an interface type.

            
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to members of interface   on target object generated at runtime with given  .
            

            Type of the interface which will be proxied.

            The proxy generation options used to influence generated proxy type and object.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              Object proxying calls to members of   and   types on generated target object.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   array is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not an interface type.

            
              Since this method uses an empty-shell implementation of   to proxy generated at runtime, the actual implementation of proxied methods must be provided by given   implementations.
              They are responsible for setting return value (and out parameters) on proxied methods. It is also illegal for an interceptor to call  , since there's no actual implementation to proceed with.
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   and   types.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            Arguments of constructor of type   which should be used to create a new instance of that type.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no constructor exists on type   with parameters matching  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The target object, calls to which will be intercepted.

            Arguments of constructor of type   which should be used to create a new instance of that type.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no constructor exists on type   with parameters matching  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The target object, calls to which will be intercepted.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no parameterless constructor exists on type  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   and   types.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The target object, calls to which will be intercepted.

            The proxy generation options used to influence generated proxy type and object.

            Arguments of constructor of type   which should be used to create a new instance of that type.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   and   types.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no constructor exists on type   with parameters matching  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   and   types.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The proxy generation options used to influence generated proxy type and object.

            Arguments of constructor of type   which should be used to create a new instance of that type.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no constructor exists on type   with parameters matching  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Arguments of constructor of type   which should be used to create a new instance of that type.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no constructor exists on type   with parameters matching  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no parameterless constructor exists on type  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   type.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The proxy generation options used to influence generated proxy type and object.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   and   types.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no default constructor exists on type  .

            Thrown when default constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates proxy object intercepting calls to virtual members of type   on newly created instance of that type with given  .
            

            Type of class which will be proxied.

            Additional interface types. Calls to their members will be proxied as well.

            The proxy generation options used to influence generated proxy type and object.

            Arguments of constructor of type   which should be used to create a new instance of that type.

            The interceptors called during the invocation of proxied methods.

            
              New object of type   proxying calls to virtual members of   and   types.
            

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   object is a null reference (Nothing in Visual Basic).

            Thrown when given   or any of   is a generic type definition.

            Thrown when given   is not a class type.

            Thrown when no constructor exists on type   with parameters matching  .

            Thrown when constructor of type   throws an exception.

            
              This method uses   implementation to generate a proxy type.
              As such caller should expect any type of exception that given   implementation may throw.
            

        

        
            
              Creates the proxy type for class proxy with given   class, implementing given   and using provided  .
            

            The base class for proxy type.

            The interfaces that proxy type should implement.

            The options for proxy generation process.

              of proxy.

        

        
            
              Creates the proxy type for interface proxy with target for given   interface, implementing given   on given   and using provided  .
            

            The interface proxy type should implement.

            The additional interfaces proxy type should implement.

            Actual type that the proxy type will encompass.

            The options for proxy generation process.

              of proxy.

        

        
            
              Creates the proxy type for interface proxy with target interface for given   interface, implementing given   on given   and using provided  .
            

            The interface proxy type should implement.

            The additional interfaces proxy type should implement.

            The options for proxy generation process.

              of proxy.

        

        
            
              Creates the proxy type for interface proxy without target for given   interface, implementing given   and using provided  .
            

            The interface proxy type should implement.

            The additional interfaces proxy type should implement.

            The options for proxy generation process.

              of proxy.

        

        
            
              Gets or sets the   that this   log to.
            

        

        
            
              Gets the proxy builder instance used to generate proxy types.
            

            The proxy builder.

        

        
            
            

            

        

        
            
            

        

        
            
              For interface proxies, this will point to the
                on the target class
            

        

        
            
              Handles the deserialization of proxies.
            

        

        
            
              Resets the   used for deserialization to a new scope.
            

            
              This is useful for test cases.
            

        

        
            
              Resets the   used for deserialization to a given  .
            

             The scope to be used for deserialization. 

            
              By default, the deserialization process uses a different scope than the rest of the application, which can lead to multiple proxies
              being generated for the same type. By explicitly setting the deserialization scope to the application's scope, this can be avoided.
            

        

        
            
              Gets the   used for deserialization.
            

             As   has no way of automatically determining the scope used by the application (and the application might use more than one scope at the same time),   uses a dedicated scope instance for deserializing proxy types. This instance can be reset and set to a specific value via   and   . 

        

        
            
              Holds   objects representing methods of   class.
            

        

        
            
              Holds   objects representing methods of   class.
            

        

        
            
               
            

        

        
            
               
            

        

        
            
               
            

        

        
            
               
            

        

        
            
               
            

        

        
            
              Provides an extension point that allows proxies to choose specific interceptors on
              a per method basis.
            

        

        
            
              Selects the interceptors that should intercept calls to the given  .
            

            The type declaring the method to intercept.

            The method that will be intercepted.

            All interceptors registered with the proxy.

            An array of interceptors to invoke upon calling the  .

            
              This method is called only once per proxy instance, upon the first call to the
               . Either an empty array or null are valid return values to indicate
              that no interceptor should intercept calls to the method. Although it is not advised, it is
              legal to return other   implementations than these provided in
               .
            

        

        
            
            Creates a new lock.
            

            

        

        
            
            This interface should be implemented by classes
            that are available in a bigger context, exposing
            the container to different areas in the same application.
            
            For example, in Web application, the (global) HttpApplication
            subclasses should implement this interface to expose 
            the configured container
            

            

        

        
            
              Exposes means to change target objects of proxies and invocations
            

        

        
            
              Changes the target object ( ) of current  .
            

            The new value of target of invocation.

            
              Although the method takes   the actual instance must be of type assignable to  , otherwise an   will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as  , for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call   or a   will be throws.
              Also while it's technically legal to pass proxy itself as  , this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call   or a   will be throws.
            

            Thrown when   is not assignable to the proxied type.

        

        
            
              Permanently changes the target object of the proxy. This does not affect target of the current invocation.
            

            The new value of target of the proxy.

            
              Although the method takes   the actual instance must be of type assignable to proxy's target type, otherwise an   will be thrown.
              Also while it's technically legal to pass null reference (Nothing in Visual Basic) as  , for obvious reasons Dynamic Proxy will not be able to call the intercepted method on such target.
              In this case last interceptor in the pipeline mustn't call   or a   will be throws.
              Also while it's technically legal to pass proxy itself as  , this would create stack overflow.
              In this case last interceptor in the pipeline mustn't call   or a   will be throws.
            

            Thrown when   is not assignable to the proxied type.

        

        
            
              New interface that is going to be used by DynamicProxy 2
            

        

        
            
              Get the proxy target (note that null is a valid target!)
            

            

        

        
            
              Gets the interceptors for the proxy
            

            

        

        
            
            Defines that the implementation wants a 
              in order to 
            access other components. The creator must be aware
            that the component might (or might not) implement 
            the interface.
            

            
            Used by Castle Project components to, for example, 
            gather logging factories
            

        

        
            
            Increments IServiceProvider
 with a generic service resolution operation.
            

        

        
            
              Provides a factory that can produce either   or
                classes.
            

        

        
            
              Manages the instantiation of  s.
            

        

        
            
              Creates a new logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new logger.
            

        

        
            
              Creates a new logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new logger.
            

        

        
            
              Creates a new extended logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new extended logger.
            

        

        
            
              Creates a new extended logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new extended logger.
            

        

        
            
              Creates a new extended logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new extended logger.
            

        

        
            
              Creates a new extended logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new extended logger.
            

        

        
            
              Creates a new logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new logger.
            

        

        
            
              Creates a new logger, getting the logger name from the specified type.
            

        

        
            
              Creates a new logger.
            

        

        
            
              Gets the configuration file.
            

            i.e. log4net.config

            

        

        
            
              Used to create the TraceLogger implementation of ILogger interface. See  .
            

        

        
            
              Gets the configuration file.
            

            i.e. log4net.config

            

        

        
            
              Interface for Context Properties implementations
            

            
              
                This interface defines a basic property get set accessor.
              

              
                Based on the ContextPropertiesBase of log4net, by Nicko Cadell.
              

            

        

        
            
              Gets or sets the value of a property
            

            
              The value for the property with the specified key
            

            
              
                Gets or sets the value of a property
              

            

        

        
            
            NullLogFactory used when logging is turned off.
            

        

        
            
              Creates an instance of ILogger with the specified name.
            

            Name.

            

        

        
            
              Creates an instance of ILogger with the specified name and LoggerLevel.
            

            Name.

            Level.

            

        

        
            
              Creates   outputing 
              to files. The name of the file is derived from the log name
              plus the 'log' extension.
            

        

        
            
              Provides an interface that supports   and
              allows the storage and retrieval of Contexts. These are supported in
              both log4net and NLog.
            

        

        
            
              Manages logging.
            

            
              This is a facade for the different logging subsystems.
              It offers a simplified interface that follows IOC patterns
              and a simplified priority/level/severity abstraction.
            

        

        
            
              Create a new child logger.
              The name of the child logger is [current-loggers-name].[passed-in-name]
            

            The Subname of this logger.

            The New ILogger instance.

            If the name has an empty element name.

        

        
            
              Logs a debug message.
            

            The message to log

        

        
            
              Logs a debug message with lazily constructed message. The message will be constructed only if the   is true.
            

            

        

        
            
              Logs a debug message.
            

            The exception to log

            The message to log

        

        
            
              Logs a debug message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a debug message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a debug message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a debug message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The message to log

        

        
            
              Logs an error message with lazily constructed message. The message will be constructed only if the   is true.
            

            

        

        
            
              Logs an error message.
            

            The exception to log

            The message to log

        

        
            
              Logs an error message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The message to log

        

        
            
              Logs a fatal message with lazily constructed message. The message will be constructed only if the   is true.
            

            

        

        
            
              Logs a fatal message.
            

            The exception to log

            The message to log

        

        
            
              Logs a fatal message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The message to log

        

        
            
              Logs a info message with lazily constructed message. The message will be constructed only if the   is true.
            

            

        

        
            
              Logs an info message.
            

            The exception to log

            The message to log

        

        
            
              Logs an info message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The message to log

        

        
            
              Logs a warn message with lazily constructed message. The message will be constructed only if the   is true.
            

            

        

        
            
              Logs a warn message.
            

            The exception to log

            The message to log

        

        
            
              Logs a warn message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Determines if messages of priority "debug" will be logged.
            

            True if "debug" messages will be logged.

        

        
            
              Determines if messages of priority "error" will be logged.
            

            True if "error" messages will be logged.

        

        
            
              Determines if messages of priority "fatal" will be logged.
            

            True if "fatal" messages will be logged.

        

        
            
              Determines if messages of priority "info" will be logged.
            

            True if "info" messages will be logged.

        

        
            
              Determines if messages of priority "warn" will be logged.
            

            True if "warn" messages will be logged.

        

        
            
              Exposes the Global Context of the extended logger.
            

        

        
            
              Exposes the Thread Context of the extended logger.
            

        

        
            
              Exposes the Thread Stack of the extended logger.
            

        

        
            
            The Logger sending everything to the standard output streams.
            This is mainly for the cases when you have a utility that
            does not have a logger to supply.
            

        

        
            
            The Level Filtered Logger class.  This is a base clase which
            provides a LogLevel attribute and reroutes all functions into
            one Log method.
            

        

        
            
              Creates a new LevelFilteredLogger
.
            

        

        
            
            Keep the instance alive in a remoting scenario
            

            

        

        
            
              Logs a debug message.
            

            The message to log

        

        
            
              Logs a debug message.
            

            The exception to log

            The message to log

        

        
            
              Logs a debug message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a debug message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a debug message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a debug message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The message to log

        

        
            
              Logs an info message.
            

            The exception to log

            The message to log

        

        
            
              Logs an info message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an info message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The message to log

        

        
            
              Logs a warn message.
            

            The exception to log

            The message to log

        

        
            
              Logs a warn message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a warn message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The message to log

        

        
            
              Logs an error message.
            

            The exception to log

            The message to log

        

        
            
              Logs an error message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs an error message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The message to log

        

        
            
              Logs a fatal message.
            

            The exception to log

            The message to log

        

        
            
              Logs a fatal message.
            

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The exception to log

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Logs a fatal message.
            

            The exception to log

            The format provider to use

            Format string for the message to log

            Format arguments for the message to log

        

        
            
              Implementors output the log content by implementing this method only.
              Note that exception can be null
            

            

            

            

            

        

        
            
              The LoggerLevel
 that this logger
              will be using. Defaults to LoggerLevel.Off

            

        

        
            
              The name that this logger will be using. 
              Defaults to String.Empty

            

        

        
            
              Determines if messages of priority "debug" will be logged.
            

            true
 if log level flags include the   bit

        

        
            
              Determines if messages of priority "info" will be logged.
            

            true
 if log level flags include the   bit

        

        
            
              Determines if messages of priority "warn" will be logged.
            

            true
 if log level flags include the   bit

        

        
            
              Determines if messages of priority "error" will be logged.
            

            true
 if log level flags include the   bit

        

        
            
              Determines if messages of priority "fatal" will be logged.
            

            true
 if log level flags include the   bit

        

        
            
              Creates a new ConsoleLogger with the Level

              set to LoggerLevel.Debug
 and the Name

              set to String.Empty
.
            

        

        
            
              Creates a new ConsoleLogger with the Name

              set to String.Empty
.
            

            The logs Level.

        

        
            
              Creates a new ConsoleLogger with the Level

              set to LoggerLevel.Debug
.
            

            The logs Name.

        

        
            
              Creates a new ConsoleLogger.
            

            The logs Name.

            The logs Level.

        

        
            
              A Common method to log.
            

            The level of logging

            The name of the logger

            The Message

            The Exception

        

        
            
              Returns a new ConsoleLogger
 with the name
              added after this loggers name, with a dot in between.
            

            The added hierarchical name.

            A new ConsoleLogger
.

        

        
            
              The Logger using standart Diagnostics namespace.
            

        

        
            
              Creates a logger based on  .
            

             

        

        
            
              Creates a logger based on  .
            

             

             

        

        
            
              Creates a logger based on  .
            

             

             

             

        

        
            
              The Null Logger class.  This is useful for implementations where you need
              to provide a logger to a utility class, but do not want any output from it.
              It also helps when you have a utility that does not have a logger to supply.
            

        

        
            
              Returns this NullLogger
.
            

            Ignored

            This ILogger instance.

        

        
            
              No-op.
            

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

        

        
            
              No-op.
            

            Ignored

            Ignored

            Ignored

            Ignored

        

        
            
              Returns empty context properties.
            

        

        
            
              Returns empty context properties.
            

        

        
            
              Returns empty context stacks.
            

        

        
            
              No-op.
            

            false

        

        
            
              No-op.
            

            false

        

        
            
              No-op.
            

            false

        

        
            
              No-op.
            

            false

        

        
            
              No-op.
            

            false

        

        
            
            The Stream Logger class.  This class can stream log information
            to any stream, it is suitable for storing a log file to disk,
            or to a MemoryStream
 for testing your components.
            

            
            This logger is not thread safe.
            

        

        
            
              Creates a new StreamLogger
 with default encoding 
              and buffer size. Initial Level is set to Debug.
            

            
              The name of the log.
            

            
              The stream that will be used for logging,
              seeking while the logger is alive 
            

        

        
            
              Creates a new StreamLogger
 with default buffer size.
              Initial Level is set to Debug.
            

            
              The name of the log.
            

            
              The stream that will be used for logging,
              seeking while the logger is alive 
            

            
              The encoding that will be used for this stream.
               
            

        

        
            
              Creates a new StreamLogger
. 
              Initial Level is set to Debug.
            

            
              The name of the log.
            

            
              The stream that will be used for logging,
              seeking while the logger is alive 
            

            
              The encoding that will be used for this stream.
               
            

            
              The buffer size that will be used for this stream.
               
            

        

        
            
              Creates a new StreamLogger
 with 
              Debug as default Level.
            

            The name of the log.

            The StreamWriter
 the log will write to.

        

        
            
              The TraceLogger sends all logging to the System.Diagnostics.TraceSource
              built into the .net framework.
            

            
              Logging can be configured in the system.diagnostics configuration 
              section. 
            
              If logger doesn't find a source name with a full match it will
              use source names which match the namespace partially. For example you can
              configure from all castle components by adding a source name with the
              name "Castle". 
            
              If no portion of the namespace matches the source named "Default" will
              be used.
            

        

        
            
            Build a new trace logger based on the named TraceSource
            

            The name used to locate the best TraceSource. In most cases comes from the using type's fullname.

        

        
            
            Build a new trace logger based on the named TraceSource
            

            The name used to locate the best TraceSource. In most cases comes from the using type's fullname.

            The default logging level at which this source should write messages. In almost all cases this
            default value will be overridden in the config file. 

        

        
            
            Create a new child logger.
            The name of the child logger is [current-loggers-name].[passed-in-name]
            

            The Subname of this logger.

            The New ILogger instance.
 
        

        
            
              This is an abstract   implementation
              that deals with methods that can be abstracted away
              from underlying implementations.
            

            
              AbstractConfiguration
 makes easier to implementers 
                to create a new version of  

            

        

        
            
              is a interface encapsulating a configuration node
            used to retrieve configuration values.
            

        

        
            
            Gets the value of the node and converts it 
            into specified  .
            

            The  

            
            The Default value returned if the conversion fails.
            

            The Value converted into the specified type.

        

        
            
            Gets the name of the node.
            

            
            The Name of the node.
            
 
        

        
            
            Gets the value of the node.
            

            
            The Value of the node.
            
 
        

        
            
            Gets an   of  
            elements containing all node children.
            

            The Collection of child nodes.

        

        
            
            Gets an   of the configuration attributes.
            

        

        
            
              Gets the value of the node and converts it
              into specified  .
            

            The  

            
              The Default value returned if the conversion fails.
            

            The Value converted into the specified type.

        

        
            
              Gets node attributes.
            

            
              All attributes of the node.
            

        

        
            
              Gets all child nodes.
            

            The   of child nodes.

        

        
            
              Gets the name of the  .
            

            
              The Name of the  .
            

        

        
            
              Gets the value of  .
            

            
              The Value of the  .
            

        

        
            
            A collection of   objects.
            

        

        
            
            Creates a new instance of ConfigurationCollection
.
            

        

        
            
            Creates a new instance of ConfigurationCollection
.
            

        

        
            
            Summary description for MutableConfiguration.
            

        

        
            
            Initializes a new instance of the   class.
            

            The name.

        

        
            
            Gets the value of  .
            

            
            The Value of the  .
            

        

        
            
              Deserializes the specified node into an abstract representation of configuration.
            

            The node.

            

        

        
            
              If a config value is an empty string we return null, this is to keep
              backward compatibility with old code
            

        

        
            
            General purpose class to represent a standard pair of values. 
            

            Type of the first value

            Type of the second value

        

        
            
            Constructs a pair with its values
            

            

            

        

        
            
            List of utility methods related to dynamic proxy operations
            

        

        
            
            Determines whether the specified type is a proxy generated by
            DynamicProxy (1 or 2).
            

            The type.

            
            	true
 if it is a proxy; otherwise, false
.
            

        

        
            
            Readonly implementation of   which uses an anonymous object as its source. Uses names of properties as keys, and property values as... well - values. Keys are not case sensitive.
            

        

        
            
              Initializes a new instance of the   class.
            

            The target.

        

        
            
              Adds an element with the provided key and value to the   object.
            

            The   to use as the key of the element to add.

            The   to use as the value of the element to add.

            
                is null. 

            An element with the same key already exists in the   object. 

            The   is read-only.-or- The   has a fixed size. 

        

        
            
              Removes all elements from the   object.
            

            The   object is read-only. 

        

        
            
              Determines whether the   object contains an element with the specified key.
            

            The key to locate in the   object.

            
              true if the   contains an element with the key; otherwise, false.
            

            
                is null. 

        

        
            
              Removes the element with the specified key from the   object.
            

            The key of the element to remove.

            
                is null. 

            The   object is read-only.-or- The   has a fixed size. 

        

        
            
              Returns an enumerator that iterates through a collection.
            

            
              An   object that can be used to iterate through the collection.
            

        

        
            
              Copies the elements of the   to an  , starting at a particular   index.
            

            The one-dimensional   that is the destination of the elements copied from  . The   must have zero-based indexing.

            The zero-based index in   at which copying begins.

            
                is null. 

            
                is less than zero. 

            
                is multidimensional.-or-   is equal to or greater than the length of  .-or- The number of elements in the source   is greater than the available space from   to the end of the destination  . 

            The type of the source   cannot be cast automatically to the type of the destination  . 

        

        
            
              Returns an   object for the   object.
            

            
              An   object for the   object.
            

        

        
            
              Reads values of properties from   and inserts them into   using property names as keys.
            

            

            

        

        
            
              Gets the number of elements contained in the  .
            

            

            The number of elements contained in the  .

        

        
            
              Gets a value indicating whether access to the   is synchronized (thread safe).
            

            

            true if access to the   is synchronized (thread safe); otherwise, false.

        

        
            
              Gets an object that can be used to synchronize access to the  .
            

            

            An object that can be used to synchronize access to the  .

        

        
            
              Gets a value indicating whether the   object is read-only.
            

            

            true if the   object is read-only; otherwise, false.

        

        
            
              Gets or sets the   with the specified key.
            

            

        

        
            
              Gets an   object containing the keys of the   object.
            

            

            An   object containing the keys of the   object.

        

        
            
              Gets an   object containing the values in the   object.
            

            

            An   object containing the values in the   object.

        

        
            
              Gets a value indicating whether the   object has a fixed size.
            

            

            true if the   object has a fixed size; otherwise, false.

        

        
            
            Represents a 'streamable' resource. Can
            be a file, a resource in an assembly.
            

        

        
            
            Returns a reader for the stream
            

            
            It's up to the caller to dispose the reader.
            

            

        

        
            
            Returns a reader for the stream
            

            
            It's up to the caller to dispose the reader.
            

            

            

        

        
            
            Returns an instance of  
            created according to the relativePath

            using itself as the root.
            

            

            

        

        
            
            
            

            
            Only valid for resources that
            can be obtained through relative paths
            

        

        
            
            
            

        

        
            
            This returns a new stream instance each time it is called.
            It is the responsibility of the caller to dispose of this stream
            

        

        
            
            Depicts the contract for resource factories.
            

        

        
            
            Used to check whether the resource factory
            is able to deal with the given resource
            identifier.
            

            
            Implementors should return true

            only if the given identifier is supported
            by the resource factory
            

            

            

        

        
            
            Creates an   instance
            for the given resource identifier
            

            

            

        

        
            
            Creates an   instance
            for the given resource identifier
            

            

            

            

        

        
            
            
            

        

        
            
            
            

        

        
            
            Adapts a static string content as an  
            

        

        
            
            Enable access to files on network shares
            

        

        
            
            Email sender abstraction.
            

        

        
            
            Sends a mail message.
            

            From field

            To field

            E-mail's subject

            message's body

        

        
            
            Sends a message
. 
            

            Message
 instance

        

        
            
            Sends multiple messages
. 
            

            List of messages


        

        
            
            Default   implementation.
            

        

        
            
            Initializes a new instance of the   class based on the   configuration provided in the application configuration file.
            

            
            This constructor is based on the default   configuration in the application configuration file.
            
 
        

        
            
            This service implementation
            requires a host name in order to work
            

            The smtp server name

        

        
            
            Sends a message. 
            

            If any of the parameters is null

            From field

            To field

            e-mail's subject

            message's body

        

        
            
            Sends a message. 
            

            If the message is null

            Message instance

        

        
            
            Configures the sender
            with port information and eventual credential
            informed
            

            Message instance

        

        
            
            Gets or sets the port used to 
            access the SMTP server
            

        

        
            
            Gets the hostname.
            

            The hostname.

        

        
            
            Gets or sets a value which is used to 
            configure if emails are going to be sent asynchronously or not.
            

        

        
            
            Gets or sets a value that specifies 
            the amount of time after which a synchronous Send call times out.
            

        

        
            
            Gets or sets a value indicating whether the email should be sent using 
            a secure communication channel.
            

            true
 if should use SSL; otherwise, false
.

        

        
            
            Gets or sets the domain.
            

            The domain.

        

        
            
            Gets or sets the name of the user.
            

            The name of the user.

        

        
            
            Gets or sets the password.
            

            The password.

        

        
            
            Gets a value indicating whether credentials were informed.
            

            
              if this instance has credentials; otherwise,  .
            

        

    







bin/Castle.Windsor.dll









		00004550
		
		0003
		537859f7
		00000000
		00000000
		00e0
		







		010b
		11.00
		0005ac00
		00000800
		00000000
		0005ca8e
		00002000
		0005e000
		10000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00062000
		00000200
		0005cbb7
		
		34144
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0005ca40
		0000004b
		
		0005e000
		00000490
		
		00060000
		0000000c
		0005c908
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0005aa94
		00002000
		0005ac00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000490
		0005e000
		00000600
		0005ae00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00060000
		00000200
		0005b400
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Castle.Windsor.xml




    
        Castle.Windsor

    

    
        
            
              Base class for facilities.
            

        

        
            
              Unit of extension. A facility should use 
              the extension points offered by the kernel
              to augment its functionality.
            

        

        
            
            

            

            

        

        
            
            

        

        
            
              The custom initialization for the Facility.
            

            
              It must be overridden.
            

        

        
            
              Performs the tasks associated with freeing, releasing, or resetting 
              the facility resources.
            

            
              It can be overriden.
            

        

        
            
              Initializes the facility. First it performs the initialization common for all 
              facilities, setting the   and the 
               . After it, the Init
 method is invoked
              and the custom initilization is perfomed.
            

            

            

        

        
            
              Terminates the Facility, invokes the   method and sets 
              the Kernel to a null reference.
            

        

        
            
              Gets the facility configuration.
            

            The   representing 
              the facility configuration.

        

        
            
              Gets the   where the facility is registered.
            

            The  .

        

        
            
                This method changes behavior of the facility. Deferred mode should be used when you have single call to   and register all your components there. Enabling
                this mode will optimize the behavior of the facility so that it will wait 'till the end of installation and only after all  s were ran it will instantiate and
                start all the startable components. An exception will be thrown if a startable component can't be instantiated and started. This will help you fail fast and diagnose issues quickly. If you don't
                want the exception to be thrown and you prefer the component to fail silently, use   method instead.
            

            It is recommended to use this method over   method.

        

        
            
                Startable components will be started when   method is invoked. This is particularily usedul when you need to perform some extra initialization outside of container
                before starting the Startable components.
            

        

        
            
                This method changes behavior of the facility. Deferred mode should be used when you have single call to   and register all your components there. Enabling
                this mode will optimize the behavior of the facility so that it will wait 'till the end of installation and only after all  s were ran it will instantiate and
                start all the startable components. No exception will be thrown if a startable component can't be instantiated and started. If you'd rather fail fast and diagnose issues quickly, use
                  method instead.
            

            It is recommended to use   method over this method.

        

        
            Don't check the waiting list while this flag is set as this could result in duplicate singletons.

        

        
            Request the component instance

            

        

        
            
            Attempts to dynamically load a UserControl by invoking Page.LoadControl. There are two uses of this class.
                 1) Add a component to the Kernel and add a VirtualPath attribute specifying the relative path of the .ascx file for the associated UserControl. (easy) 

                
                    
                  &lt;component id="BasketView" 
                  service="Castle.ShoppingCart.IBasketView, Castle.ShoppingCart"
                  type="Castle.ShoppingCart.BasketView, Castle.ShoppingCart" 
                  lifestyle="transient"
                  virtualPath="~/Views/BasketView.ascx"
                  /&gt;
                

                

                 2) Precompile a UserControl and add the pre-compiled class to the Kernel. (hard) Has not been tested with proxies. 

            

        

        
            
            	Standard implementation of  . Handles the selection of the best constructor, fills the writable properties the component exposes, run the commission and
            	decommission lifecycles, etc.
            

            
            	Custom implementors can just override the CreateInstance
 method. Please note however that the activator is responsible for the proxy creation when needed.
            

        

        
            
            Abstract implementation of  . The implementors must only override the InternalCreate and InternalDestroy methods in order to perform their creation and destruction
            logic.
            

        

        
            
              Implements the instance creation logic. The default
              implementation should rely on an ordinary call to 
              Activator.CreateInstance().
            

            
              This interface is provided in order to allow custom components
              to be created using a different logic, such as using a specific factory
              or builder.
              
                The constructor for implementation has the following signature:
              

              
                ComponentModel model, IKernel kernel, 
                ComponentInstanceDelegate onCreation, 
                ComponentInstanceDelegate onDestruction
              

              
                The Activator should raise the events onCreation and onDestruction
                in order to correctly implement the contract. Usually the best
                way of creating a custom activator is by extending the existing ones.
              

               
               
            

        

        
            
              Should return a new component instance.
            

            

        

        
            
              Should perform all necessary work to dispose the instance
              and/or any resource related to it.
            

            

        

        
            
            Constructs an AbstractComponentActivator
            

        

        
            
            	Initializes a new instance of the   class.
            

             

             

             

             

        

        
            
            Initializes a new instance of the   class.
            

             The model. 

             The kernel. 

             The on creation. 

             The on destruction. 

        

        
            
            Creates the instance.
            

             The context. 

             

             The arguments. 

             

        

        
            
              Indicates that the target components wants instance lifetime and reuse scope to be bound to another component further up the object graph.
              Good scenario for this would be unit of work bound to a presenter in a two tier MVP application.
              The   attribute must point to a type
              having default accessible constructor and public method matching signature of Func&lt;IHandler[], IHandler&gt;
 delegate.
            

        

        
            
              Base for Attributes that want to express lifestyle
              chosen by the component.
            

        

        
            
              Initializes a new instance of the   class.
            

            The type.

        

        
            
              Gets or sets the lifestyle.
            

            The lifestyle.

        

        
            
              Initializes a new instance of the   class.
            

            type having default accessible constructor and public method matching signature of Func&lt;IHandler[], IHandler&gt;
 delegate. The method will be used to pick   of the component current instance should be bound to.

        

        
            
              type having default accessible constructor and public method matching signature of Func&lt;IHandler[], IHandler&gt;
 delegate. The method will be used to pick   of the component current instance should be bound to.
            

        

        
            
              Represents a dependency (other component or a 
              fixed value available through external configuration).
            

        

        
            
              Initializes a new instance of the   class.
            

             The dependency key. 

             Type of the target. 

             if set to true
 [is optional]. 

        

        
            
              Returns a   that represents the current  .
            

             A   that represents the current   . 

        

        
            
            The default value of this dependency. Note that null
 is a valid default value. Use   to determine whether default value was provided.
            

        

        
            
              Gets or sets the dependency key.
            

             The dependency key. 

        

        
            
            Specifies whether dependency has a default value ( ). Note that null
 is a valid default value.
            

        

        
            
              Gets or sets whether this dependency is optional.
            

             true
 if this dependency is optional; otherwise, false
 . 

        

        
            
              Gets the service type of the dependency.
              This is the same type as   or if   is by ref,
              then it's the element type of the reference. (in other words if dependency 
              is out IFoo foo
 this will be IFoo
, while   will be &amp;IFoo
);
            

        

        
            
              Gets the type of the target.
            

             The type of the target. 

        

        
            Indicates that the target components wants a custom lifestyle.

        

        
            
                Initializes a new instance of the   class.
            

            The custom lifestyle type.

        

        
            
              Marks as constructor to be skipped and not be selected
              by the IoC container during new component activation
            

        

        
            
              This attribute is useful only when you want to register all components
              on an assembly as a batch process. 
              By doing so, the batch register will look 
              for this attribute to distinguish components from other classes.
            

        

        
            
              Associates a custom activator with a component
            

        

        
            
              Initializes a new instance of the   class.
            

            Type of the component activator.

        

        
            
              Gets the type of the component activator.
            

            The type of the component activator.

        

        
            
              Gets the default name for component implemented by   which will be used in case when user does not provide one explicitly.
            

            

            

        

        
            
              Gets the default name for component implemented by   which will be used in case when user does not provide one explicitly.
            

            

            

        

        
            
              Specifies the proxying behavior for a component.
            

        

        
            
              Gets or sets a value indicating whether the generated 
              interface proxy should inherit from  .
            

        

        
            
              Gets or sets the additional interfaces used during proxy generation.
            

        

        
            
              Marks as property to be skipped and not be wired
              by the IoC container
            

        

        
            
              Represents a concern that will be applied to a component instance
              during commission phase (right after component instance is activated).
            

        

        
            
              Implementors should act on the instance in response to 
              a commission phase.
            

            The model.

            The component.

        

        
            
              Represents a concern that will be applied to a component instance
              during decommission phase (right before component instance is destroyed).
            

        

        
            
              Implementors should act on the instance in response to 
              a decommission phase.
            

            The model.

            The component.

        

        
            
              Lifecycle interface. If implemented by a component,
              the method Initialized will be invoked by the container
              before making the component available to the external world.
            

        

        
            
              Implementors should perform any initialization logic.
            

        

        
            
              Used to declare that a component wants interceptors acting on it.
              Out of the box recognized only if applied on component's implementation class.
            

        

        
            
              Constructs the InterceptorAttribute pointing to a key to a interceptor
            

             

        

        
            
              Constructs the InterceptorAttribute pointing to a service
            

             

        

        
            
              Simple type for thread safe adding/reading to/from keyed store. The difference between this and built in concurrent dictionary is that in this case adding is happening under a lock so never more than one thread will be adding at a time.
            

             

             

        

        
            
              Returns all values and clears the dictionary
            

             

        

        
            
              Performs string comparison using  
            

            

            

            

        

        
            
              0 == false, 1 = =true
            

        

        
            
              Signals (sets) the flag.
            

            true
 if the current thread signaled the flag, false
 if some other thread signaled the flag before.

        

        
            
              Marker class used to denote components that have late bound type
              That is the actual type is not known exactly at the time when  
              is created. Those are for example components instantiated via abstract factory.
            

        

        
            
              If the extended type is a Foo[] or IEnumerable{Foo} which is assignable from Foo[] this method will return typeof(Foo)
              otherwise null
.
            

            

            

        

        
            
              Checkis if given   is a primitive type or collection of primitive types. Value types,   are considered primitive and can not be registered as components in Windsor
            

             

             

        

        
            
              Checkis if given   is a primitive type. Value types and   are considered primitive and can not be registered as components in Windsor
            

             

             

        

        
            
              Calls   and if a generic constraint is violated returns null
 instead of throwing  .
            

             

             

             

        

        
            
              Enumeration used to mark the component's lifestyle.
            

        

        
            
              No lifestyle specified.
            

        

        
            
              Singleton components are instantiated once, and shared
              between all clients.
            

        

        
            
              Thread components have a unique instance per thread.
            

        

        
            
              Transient components are created on demand.
            

        

        
            
              Optimization of transient components that keeps
              instance in a pool instead of always creating them.
            

        

        
            
              PerWebRequest components are created once per Http Request
            

        

        
            
              Any other logic to create/release components.
            

        

        
            
              Instances are reused within the scope provided.
            

        

        
            
              Instance lifetime and reuse scope is bound to another component further up the object graph.
              Good scenario for this would be unit of work bound to a presenter in a two tier MVP application.
              When specified in xml a scopeRootBinderType
 attribute must be specified pointing to a type
              having default accessible constructor and public method matching signature of Func&lt;IHandler[], IHandler&gt;
 delegate.
            

        

        
            
              Indicates that the target components wants a
              per thread lifestyle.
            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Indicates that the target components wants a
              per web request lifestyle.
            

        

        
            
              Indicates that the target components wants a
              pooled lifestyle.
            

        

        
            
              Initializes a new instance of the   class
              using the default initial pool size (5) and the max pool size (15).
            

        

        
            
              Initializes a new instance of the   class.
            

            Initial size of the pool.

            Max pool size.

        

        
            
              Gets the initial size of the pool.
            

            The initial size of the pool.

        

        
            
              Gets the maximum pool size.
            

            The size of the max pool.

        

        
            
              Specifies rules for designating settable properties on a component as dependencies, and controlling whether they are requred or not.
              This is a shortcut for most common scenarios. More advanced/custom scenarios can be defined dynamically in the registration API.
            

        

        
            
              Takes no action. By default that means all settable properties will be exposed as optional dependencies.
            

        

        
            
              Makes all property dependencies required.
            

        

        
            
              Makes all property dependencies defined at a base class/interfaces level required.
            

        

        
            
              Makes all properties ignored.
            

        

        
            
              Ignores all properties defined at a base class/interface level.
            

            
              This option is particularily useful in scenarios like UI controls which in .NET UI frameworks tend to have byzantine inheritance hierarchies.
            

        

        
            
              Indicates that the target components wants a
              per thread lifestyle.
            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Indicates that the target components wants a
              singleton lifestyle.
            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Indicates that the target components wants a
              transient lifestyle.
            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Implementors must inspect the component for 
              a given information or parameter.
            

        

        
            
              Usually the implementation will look in the configuration property 
              of the model or the service interface, or the implementation looking for
              something.
            

            The kernel instance

            The component model

        

        
            
              Selects one or both of component name and type, for given method 
              called on given typed factory type.
              When component should be requested by type only,
              componentName should be null.
              When component should be requested by name only,
              componentType should be null.
            

            

            

            

            

        

        
            If set to true
, all methods with names like 'GetSomething' will try to resolve by name component 'something'. Defaults to true
.

            If set to true
, will fallback to resolving by type, if can not find component with specified name. This property is here for backward compatibility. It is recommended not to use it. Defaults to false
.

        

        
            
              Builds   for given call.
              By default if   is a collection
              returns factory calling   on collection's item type,
              otherwise standard  .
            

            

            

            

            

            

        

        
            
              Selects arguments to be passed to resolution pipeline.
              By default passes all given   
              keyed by names of their corresponding   parameters.
            

            

            

            

        

        
            
              Selects name of the component to resolve.
              If   Name is GetFoo returns "Foo", otherwise null
.
            

            

            

            

        

        
            
              Selects type of the component to resolve. Uses   return type.
            

            

            

            

        

        
            
              If set to true
, will fallback to resolving by type, if can not find component with specified name. This property is here for backward compatibility. It is recommended not to use it.
            

        

        
            
              If set to true
, all methods with names like 'GetSomething' will try to resolve by name component 'something'.
            

        

        
            
            Implemented by   which don't necessarily need dependencies from the container to activate new instances of the component.
            

        

        
            
            Should return true
 if the activator can provide dependencies for the  .
            

            

            

        

        
            
            Should return true
 if the activated instances of the   are managed externally to the container. That means container will not try to track the objects in  .
            

            

            

        

        
            
              Provides lazy registration capabilities to the container.
            

            
              When a component is requested from a container and it was not registered, 
              container loads up all registered implementers of this interface and asks 
              them in turn whether they can provide that component, until it finds one that will.
            

        

        
            
              Used by container to allow the loader to register component for given   and   to the container at the time when it is requested
            

            Name of the requested component or null

            Type of requested service or null

            User supplied arguments or null

            Registration that registers component for given key and/or service or null.

            
              While either key or service can be null reference it is guaranteed that at least one of them will not be null.
              When implementer opts in to provide the requested component (by returning not-null registration) it is required
              to register component for requested key/service combination (when one of the elements is null, it should be ignored as well).
              When implementer does not want to register the requested component it must return null.
            

        

        
            
              Specifies default configuration for a typed factory. All Selector* properties are mutually exclusive, that is you're only meant to set one.
            

        

        
            
              Specifies component to use as selector for given factory. This works like any named service override.
            

        

        
            
              Specifies component to use as selector for given factory. This works like any typed service override.
            

        

        
            
              Specifies type of the selector to use for given factory. The type will be instantiated using default constructor. It must implement  
            

        

        
            
              Exception thrown whe a component could not be activated. THis should come from the component activator.
            

        

        
            
              Exception thrown when resolution process for a component was unsuccessful at some point for whatever reason.
            

        

        
            
              If
              true

              requires release by
               
              . If
              false

              , the object has a well defined, detectable end of life (web-request end, disposal of the container etc), and will be released externally.
            

        

        
            
              Represents collection of arguments used when resolving a component.
            

        

        
            
              Exception thrown when component has no resolvable constructor that can be used to create an instance.
            

        

        
            
              Possible states for a IHandler instance
            

        

        
            
              The component can be requested
            

        

        
            
              The component can not be requested 
              as it still depending on a external 
              dependency not yet available
            

        

        
            
              Inspects missings dependencies in the container. Default implementation is used to
              construct helpful message for exceptions and debugger views, but other implementations
              are also possible if needed.
            

        

        
            
              Summary description for DefaultHandler.
            

        

        
            
              Implements the basis of  
            

        

        
            
              Contract for the IHandler, which manages an
              component state and coordinates its creation 
              and destruction (dispatching to activators, lifestyle managers)
            

        

        
            
              Implementors should use a strategy to obtain 
              valid references to properties and/or services 
              requested in the dependency model.
            

        

        
            
              Returns true if the resolver is able to satisfy this dependency.
            

            Creation context, which is a resolver itself

            Parent resolver - normally the IHandler implementation

            Model of the component that is requesting the dependency

            The dependency model

            true
 if the dependency can be satisfied

        

        
            
              Should return an instance of a service or property values as
              specified by the dependency model instance. 
              It is also the responsibility of  
              to throw an exception in the case a non-optional dependency 
              could not be resolved.
            

            Creation context, which is a resolver itself

            Parent resolver - normally the IHandler implementation

            Model of the component that is requesting the dependency

            The dependency model

            The dependency resolved value or null

        

        
            
              Initializes the handler with a reference to the
              kernel.
            

            

        

        
            
              Tests whether the handler is already being resolved in given context.
            

        

        
            
              Implementors should dispose the component instance
            

            

            true if destroyed.

        

        
            
              Implementors should return a valid instance 
              for the component the handler is responsible.
              It should throw an exception in the case the component
              can't be created for some reason
            

            

        

        
            
              Returns true if this handler supports  
            

            

            

        

        
            
              Implementors should return a valid instance 
              for the component the handler is responsible.
              It should return null in the case the component
              can't be created for some reason. No exception should be thrown.
            

            

        

        
            
              Gets the model of the component being 
              managed by this handler.
            

        

        
            
              Gets the state of the handler
            

        

        
            
              Might be implemented by a handler 
              so it can expose access to dependency information 
              which is used to construct meaningful error messages
            

        

        
            
              Informs the   about missing dependencies.
              Implementers should ignore the call if no dependencies are missing and 
              call back the inspector with the information required otherwise
            

            

        

        
            
              Dictionary of key (string) to  
            

        

        
            
              Constructs and initializes the handler
            

             

        

        
            
              Should be implemented by derived classes: disposes the component instance (or recycle it)
            

             

             true if destroyed. 

        

        
            
              Returns an instance of the component this handler is responsible for
            

             

             when false
 , handler can not create valid instance and return null
 instead 

             

        

        
            
              Saves the kernel instance, subscribes to   event, creates the lifestyle manager instance and computes the handler state.
            

             

        

        
            
              disposes the component instance (or recycle it).
            

             

             

        

        
            
              Returns an instance of the component this handler is responsible for
            

             

             

        

        
            
              Invoked by   in order to check if a dependency can be satisfied. If not, the handler is set to a 'waiting dependency' state.
            

            
              This method registers the dependencies within the correct collection or dictionary and changes the handler state to  
            

             

        

        
            
              Invoked by the kernel when one of registered dependencies were satisfied by new components registered.
            

            
              Handler for the event  
            

             

        

        
            
              Invoked when the container receives a parent container reference.
            

            
              This method implementation checks whether the parent container is able to supply the dependencies for this handler.
            

             

             

        

        
            
              Gets the component model.
            

        

        
            
              Gets the handler state.
            

        

        
            
              Lifestyle manager instance
            

        

        
            
              Initializes a new instance of the
               
              class.
            

             

        

        
            
              disposes the component instance (or recycle it)
            

             

             true if destroyed 

        

        
            
              Returns an instance of the component this handler
              is responsible for
            

             

             

             

             

             

        

        
            
              Lifestyle manager instance
            

        

        
            
              Thrown when   can't create proper closed version of itself due to violation of generic constraints.
            

        

        
            
              Summary description for HandlerException.
            

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            

            

        

        
            
              Initializes a new instance of the   class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            

            

        

        
            
              Initializes a new instance of the   class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Used during a component request, passed along to the whole process.
              This allow some data to be passed along the process, which is used 
              to detected cycled dependency graphs and now it's also being used
              to provide arguments to components.
            

        

        
            
              The list of handlers that are used to resolve
              the component.
              We track that in order to try to avoid attempts to resolve a service
              with itself.
            

        

        
            
              Initializes a new instance of the   class.
            

             The type to extract generic arguments. 

             The parent context. 

             When set to true
 will clone     . 

        

        
            
              Initializes a new instance of the   class.
            

             The handler. 

             The release policy. 

             The type to extract generic arguments. 

             The additional arguments. 

             The conversion manager. 

             Parent context 

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Method used by handlers to test whether they are being resolved in the context.
            

             

             

            
              This method is provided as part of double dispatch mechanism for use by handlers.
              Outside of handlers, call   instead.
            

        

        
            
              Creates a new, empty   instance.
            

            
              A new CreationContext should be created every time, as the contexts keeps some state related to dependency resolution.
            

        

        
            
              Default implementation of  . This implementation is complete and also support a kernel hierarchy (sub containers).
            

            
              Default implementation of  . 
              This implementation is complete and also support a kernel 
              hierarchy (sub containers).
            

        

        
            
              The IKernel
 interface exposes all the functionality
              the MicroKernel implements.
            

            
              It allows you to register components and
              request them by their name or the services they expose.
              It also allow you to register facilities and subsystem, thus 
              augmenting the functionality exposed by the kernel alone to fit 
              your needs.
               
               
            

        

        
            
              Summary description for IKernelEvents.
            

        

        
            
              Event fired when a new component is registered 
              on the kernel.
            

        

        
            
              Event fired after the ComponentModel is created.
              Allows customizations that may affect the handler.
            

        

        
            
              Event fired when the kernel was added as child of
              another kernel.
            

        

        
            
              Event fired when the kernel was removed from being a child
              of another kernel.
            

        

        
            
              Event fired before the component is created.
            

        

        
            
              Event fired when a component instance destroyed.
            

        

        
            
              Event fired when a new handler is registered 
              (it might be in a valid or waiting dependency state)
            

        

        
            
              Event fired when a new handler is registered 
              (it might be in a valid or waiting dependency state)
            

        

        
            
              Event fired when a dependency is being resolved,
              it allows the dependency to be changed,
              but the client ComponentModel must not be changed.
            

        

        
            
              Event fired when registration / installation process is completed.
              That is when container is about to exit  method. This event is raised once regardless of how many components were registered.
              If the   is called by   the event is raised when that method exits.
            

        

        
            
              Event fired when a collection is being resolved (via   or another overload) and the collection is empty.
              Implementors would usually log that fact or potentially throw an exception (especially in development).
            

        

        
            
              Support for kernel hierarchy
            

            

        

        
            
              Adds a   to the kernel.
            

            

            

        

        
            
              Creates and adds an   facility to the kernel.
            

            The facility type.

            

        

        
            
              Creates and adds an   facility to the kernel.
            

            The facility type.

            The callback for creation.

            

        

        
            
              Register a new component resolver that can take part in the decision
              making about which handler to resolve
            

        

        
            
              Register a new component resolver that can take part in the decision
              making about which handler(s) to resolve and in which order
            

        

        
            
              Adds (or replaces) an  
            

            

            

        

        
            
              Return handlers for components that 
              implements the specified service. 
              The check is made using IsAssignableFrom
            

            

            

        

        
            
              Returns the facilities registered on the kernel.
            

            

        

        
            
              Returns the  
              for the specified component name.
            

            

            

        

        
            
              Returns the  
              for the specified service.
            

            

            

        

        
            
              Return handlers for components that 
              implements the specified service.
            

            

            

        

        
            
              Returns an implementation of  
              for the specified name. 
               
            

            

            

        

        
            
              Returns true
 if a component with given   was registered, otherwise false
.
            

            

            

        

        
            
              Returns true if the specified service was registered
            

            

            

        

        
            
              Registers the components with the  . The instances of   are produced by fluent registration API.
              Most common entry points are   method to register a single type or (recommended in most cases) 
               .
              Let the Intellisense drive you through the fluent API past those entry points. For details see the documentation at http://j.mp/WindsorApi
            

            
              
                kernel.Register(Component.For&lt;IService&gt;().ImplementedBy&lt;DefaultService&gt;().LifestyleTransient());
              

            

            
              
                kernel.Register(Classes.FromThisAssembly().BasedOn&lt;IService&gt;().WithServiceDefaultInterfaces().Configure(c =&gt; c.LifestyleTransient()));
              

            

            The component registrations created by  ,   or different entry method to the fluent API.

            The kernel.

        

        
            
              Releases a component instance. This allows
              the kernel to execute the proper decommission 
              lifecycles on the component instance.
            

            

        

        
            
              Remove child kernel
            

            

        

        
            
              Adds a   to the kernel.
            

            

            

            

        

        
            
              Creates and adds an   facility to the kernel.
            

            The facility type.

            

        

        
            
              Creates and adds an   facility to the kernel.
            

            The facility type.

            

            The callback for creation.

        

        
            
              Returns the component instance by the component key
              using dynamic arguments
            

            Key to resolve

            Arguments to resolve the services

            

        

        
            
              Returns the component instance by the component key
              using dynamic arguments
            

            

            

            

        

        
            
              Returns the component instance by the service type
            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            

            

            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            Service to resolve

            Arguments to resolve the services

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            

            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            Arguments to resolve the services

            

        

        
            
              Returns the component instance by the component key
            

            

        

        
            
              Returns a component instance by the key
            

            Component's key

            Service type

            The Component instance

        

        
            
              Returns a component instance by the key
            

            Service type

            Component's key

            

            The Component instance

        

        
            
              Returns a component instance by the key
            

            

            

            

            

        

        
            
              Returns all the valid component instances by
              the service type
            

            The service type

        

        
            
              Returns all the valid component instances by
              the service type
            

            The service type

            Arguments to resolve the services

        

        
            
              Returns all the valid component instances by
              the service type
            

            The service type

            Arguments to resolve the services

        

        
            
              Returns component instances that implement TService
            

            

            

        

        
            
              Returns component instances that implement TService
            

            

            

        

        
            
              Returns component instances that implement TService
            

            

            

        

        
            
              Returns the implementation of  
            

        

        
            
              Gets or sets the implementation of  
            

        

        
            
              Graph of components and interactions.
            

        

        
            
              Returns the implementation of  
            

        

        
            
              Returns the parent kernel
            

        

        
            
              Gets or sets the implementation of  
              allowing different strategies for proxy creation.
            

        

        
            
              Gets or sets the implementation for  
            

        

        
            
              Returns the implementation for  
            

        

        
            
              Returns the component instance by the key
            

        

        
            
              Returns the component instance by the service type
            

        

        
            
            Extended contract of kernel, used internally.
            

        

        
            
            Adds a custom made  . Used by facilities.
            

             

        

        
            
            Constructs an implementation of   for the given  
            

             

             

        

        
            
            Returns a component instance by the key
            

             

             

             

             

             

        

        
            
            Internal logger used by the container (not just   implementation itself but also other classes too) to log information about what's happening in the container.
            

        

        
            
              List of sub containers.
            

        

        
            
              List of   registered.
            

        

        
            
              Map of subsystems registered.
            

        

        
            
              The parent kernel, if exists.
            

        

        
            
              Constructs a DefaultKernel with no component proxy support.
            

        

        
            
              Constructs a DefaultKernel with the specified implementation of   and  
            

             

             

        

        
            
              Constructs a DefaultKernel with the specified implementation of  
            

        

        
            
              Starts the process of component disposal.
            

        

        
            
              Return handlers for components that implements the specified service. The check is made using IsAssignableFrom
            

             

             

        

        
            
              Returns the facilities registered on the kernel.
            

             

        

        
            
              Return handlers for components that implements the specified service.
            

             

             

        

        
            
              Registers the components with the  . The instances of   are produced by fluent registration API. Most common entry points are
                method to register a single type or (recommended in most cases)  . Let the Intellisense drive you through the
              fluent
              API past those entry points. For details see the documentation at http://j.mp/WindsorApi
            

            
              kernel.Register(Component.For&lt;IService&gt;().ImplementedBy&lt;DefaultService&gt;().LifestyleTransient());

            

            
              kernel.Register(Classes.FromThisAssembly().BasedOn&lt;IService&gt;().WithServiceDefaultInterfaces().Configure(c =&gt; c.LifestyleTransient()));

            

             The component registrations created by   ,   or different entry method to the fluent
            API. 

             The kernel. 

        

        
            
              Releases a component instance. This allows the kernel to execute the proper decommission lifecycles on the component instance.
            

             

        

        
            
              Creates an implementation of   based on   and invokes   to initialize the newly created manager.
            

             

             

             

        

        
            
              It is the responsibility of the kernel to ensure that handler is only ever disposed once.
            

        

        
            
              Returns the component instance by the component key
              using dynamic arguments
            

            

            

            

        

        
            
              Returns the component instance by the component key
              using dynamic arguments
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            

            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            

            

        

        
            
              Returns the component instance by the component key
            

            

        

        
            
              Returns a component instance by the key
            

            Component's key

            Service type

            
              The Component instance
            

        

        
            
              Returns a component instance by the key
            

            Service type

            Component's key

            

            
              The Component instance
            

        

        
            
              Returns the component instance by the service type
            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            

            

            

        

        
            
              Returns the component instance by the service type
              using dynamic arguments
            

            

            

            

        

        
            
              Returns all the valid component instances by
              the service type
            

            The service type

        

        
            
              Returns all the valid component instances by
              the service type
            

            The service type

            
              Arguments to resolve the services
            

        

        
            
              Returns all the valid component instances by
              the service type
            

            The service type

            
              Arguments to resolve the services
            

        

        
            
              Returns component instances that implement TService
            

            

            

            

        

        
            
              Returns component instances that implement TService
            

            

            

            

        

        
            
              Returns component instances that implement TService
            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

            

            

        

        
            
              Graph of components and interactions.
            

        

        
            
              Exception throw when a circular dependency is detected
            

        

        
            
              Initializes a new instance of the
               
              class.
            

            The message.

        

        
            
              Initializes a new instance of the
               
              class.
            

            The message.

            The inner exception.

        

        
            
              Initializes a new instance of the
               
              class.
            

            

            

        

        
            
              Initializes a new instance of the
               
              class.
            

            The
               
              that holds the serialized object data about the exception being thrown.

            The
               
              that contains contextual information about the source or destination.

            The
               
              parameter is
               
              .

            The class name is
               
              or
               
              is zero (0).

        

        
            
              Exception threw when a request for a component
              cannot be satisfied because the component does not
              exist in the container
            

        

        
            
              Initializes a new instance of the
               
              class.
            

            The name.

            Exception message.

        

        
            
              Initializes a new instance of the
               
              class.
            

            The service.

            Exception message.

        

        
            
              Initializes a new instance of the
               
              class.
            

            The service.

        

        
            
              Initializes a new instance of the
               
              class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Exception threw when there is a problem
              registering a component
            

        

        
            
              Initializes a new instance of the   class.
            

            The message.

        

        
            
              Initializes a new instance of the   class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Implementation of this interface allows for extension of the way
              the container looks up multiple handlers. It provides the necessary
              hook to allow for business logic to prioritize, filter, and sort
              handlers when resolving multiple handlers.
            

        

        
            
              Whatever the selector has an opinion about resolving a component with the 
              specified service and key.
            

            The service interface that we want to resolve

        

        
            
              Select the appropriate handlers (if any) from the list of defined handlers,
              returning them in the order they should be executed.
              The returned handlers should members from the   array.
            

            The service interface that we want to resolve

            The defined handlers

            The selected handlers, or an empty array, or null

        

        
            
              Exception threw by Kernel operations that failed
              for some reason.
            

        

        
            
              Initializes a new instance of the   class.
            

            The message.

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            The inner exception.

        

        
            
              Initializes a new instance of the   class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Base exception to be used by facilities.
            

        

        
            
              Assigns the start method for the startable.
            

            

            The start method.

            

            
              Be sure that you first added the   
              to the kernel, before registering this component.
            

        

        
            
              Assigns the start method for the startable.
            

            

            Method to use. something like: StartUsingMethod(s =&gt; s.Start)

            

            
              Be sure that you first added the   
              to the kernel, before registering this component.
            

        

        
            
              Assigns the stop method for the startable.
            

            

            The stop method.

            

            
              Be sure that you first added the   
              to the kernel, before registering this component.
            

        

        
            
              Assigns the stop method for the startable.
            

            

            Method to use. something like: StartUsingMethod(s =&gt; s.Start)

            

            
              Be sure that you first added the   
              to the kernel, before registering this component.
            

        

        
            
              Legacy class from old impl. of the facility. Do not use it.
            

        

        
            
              Legacy interceptor for old impl. of the facility.
            

        

        
            
              Interceptors might implement this to receive the
              ComponentModel on behalf of the component where the
              interceptor is acting.
            

        

        
            
              Represents a single component to be resolved via Typed Factory
            

        

        
            
              Resolves the component(s) from given kernel.
            

            

            

            Resolved component(s).

        

        
            
              Provides automatically generated factories on top of interfaces or delegates that
              you can use to pull components out of the container without ever referencing it 
              explicitly.
            

        

        
            
              Marks the component as typed factory.
            

            

            

            

            
              Only interfaces and delegates are legal to use as typed factories. Methods with out parameters are not allowed.
              When registering component as typed factory no implementation should be provided (in case there is any it will be ignored).
              Typed factories rely on   set internally, so users should not set interceptor selectors explicitly;
              otherwise the factory will not function correctly.
            

        

        
            
              Marks the component as typed factory.
            

            

            

            Name of the   component to be used for this factory

            

            
              Only interfaces and delegates are legal to use as typed factories. Methods with out parameters are not allowed.
              When registering component as typed factory no implementation should be provided (in case there is any it will be ignored).
              Typed factories rely on   set internally, so users should not set interceptor selectors explicitly;
              otherwise the factory will not function correctly.
            

        

        
            
              Marks the component as typed factory.
            

            

            

            Type of the   component to be used for this factory

            

            
              Only interfaces and delegates are legal to use as typed factories. Methods with out parameters are not allowed.
              When registering component as typed factory no implementation should be provided (in case there is any it will be ignored).
              Typed factories rely on   set internally, so users should not set interceptor selectors explicitly;
              otherwise the factory will not function correctly.
            

        

        
            
              Marks the component as typed factory.
            

            

            

            The   instance to be used for this factory

            

            
              Only interfaces and delegates are legal to use as typed factories. Methods with out parameters are not allowed.
              When registering component as typed factory no implementation should be provided (in case there is any it will be ignored).
              Typed factories rely on   set internally, so users should not set interceptor selectors explicitly;
              otherwise the factory will not function correctly.
            

        

        
            
              Marks the component as typed factory.
            

            

            

            

            

            
              Only interfaces and delegates are legal to use as typed factories. Methods with out parameters are not allowed.
              When registering component as typed factory no implementation should be provided (in case there is any it will be ignored).
              Typed factories rely on   set internally, so users should not set interceptor selectors explicitly;
              otherwise the factory will not function correctly.
            

        

        
            
              Initializes a new instance of the   class.
            

            The parent handler.

            The child resolver.

            Release policy of the parent container.

        

        
            
              Clone some of the parent componentmodel properties to the generic subhandler.
            

            
              The following properties are copied: 
                                                     
                                                       
                                                         The
                                                          
                                                       

                                                     

                                                     
                                                       
                                                         The
                                                          
                                                       

                                                     

                                                   

            

             the subhandler 

        

        
            
                Extension point to allow the developer to use his implementation of  
            

        

        
            
              Represents a delegate which holds basic information about a component.
            

            Key which identifies the component

            handler that holds this component and is capable of 
              creating an instance of it.
            

        

        
            
              Represents a delegate which holds basic information about a component
              and its instance.
            

            Component meta information

            Component instance

        

        
            
              Represents a delegate which holds the information about the 
              component
            

        

        
            
              Represents a delegate which holds the information about a service.
            

        

        
            
              Represents a delegate which holds a handler
            

            handler that holds a component and is capable of 
              creating an instance of it.
            

            

        

        
            
              Represents a delegate which holds dependency
              resolving information.
            

        

        
            
              Abstract representation of a vertex.
            

        

        
            The nodes that this node depends on

        

        
            
              The node has not been visited yet
            

        

        
            
              This node is in the process of being visited
            

        

        
            
              This now was visited
            

        

        
            
              Represents a collection of objects
              which are guaranteed to be unique 
              and holds a color for them
            

        

        
            
              Holds a timestamp (integer) 
              for a given item
            

        

        
            
            Summary description for DisposalConcern.
            

        

        
            
            Summary description for InitializationConcern.
            

        

        
            
              Lifetime concern that works for components that don't have their actual type determined upfront
            

        

        
            
              Lifetime concern that works for components that don't have their actual type determined upfront
            

        

        
            
              Lifetime concern that works for components that don't have their actual type determined upfront
            

        

        
            
              Summary description for SupportInitializeConcern.
            

        

        
            
              Only called for components that 
              belongs to a pool when the component
              comes back to the pool.
            

        

        
            
              Implementors should perform any 
              initialization/clean up.
            

        

        
            
              Interface for components that wish to be started and stopped by the container
            

        

        
            
              Starts this instance.
            

        

        
            
              Stops this instance.
            

        

        
            
              Base implementation of  
            

        

        
            
              The ILifestyleManager
 implements 
              a strategy for a given lifestyle, like singleton, per-thread
              and transient.
            

            
              The responsibility of ILifestyleManager

              is only the management of lifestyle. It should rely on
                to obtain a new component instance
            

        

        
            
              Initializes the ILifestyleManager
 with the 
               
            

            

            

            

        

        
            
              Implementors should release the component instance based
              on the lifestyle semantic, for example, singleton components
              should not be released on a call for release, instead they should
              release them when disposed is invoked.
            

            

        

        
            
              Implementors should return the component instance based on the lifestyle semantic.
              Also the instance should be set to  ,   should be also set if needed
              and if a new instance was created it should be passed on to   of  .
            

             
             
            

        

        
            
              Invoked when the container gets disposed. The container will not call it multiple times in multithreaded environments.
              However it may be called at the same time when some out of band release mechanism is in progress. Resolving those potential
              issues is the task of implementors
            

        

        
            
              Provides access to   held in whatever is appropriate for given scope.
            

            
              Implementors should also ensure proper initialization of   when accessed for the first time and ensure a thread safe implementation is used when scope or cache access can cause threading issues if non thread safe cache is used.
            

        

        
            
              Provides access to   for currently resolved component.
            

            Current creation context

             Thrown when scope cache could not be accessed.

        

        
            
              Returns current request's scope and detaches it from the request context.
              Does not throw if scope or context not present. To be used for disposing of the context.
            

            

        

        
            
              Manages a pool of objects.
            

        

        
            
              Pool implementation contract.
            

        

        
            
              Implementors should release the instance or put it
              on the pool
            

            

        

        
            Represents persistence mechanism for instances of components that are supposed to be reused within scope managing the cache.

        

        
            
                Saves or retrieves a   stored in the cache associated with the given  .
            

            
                Thrown when   is null.
            

            
                Thrown when there is already a   associated with given
                 
                value in the cache.
            

            The interface gives no thread safety guarantees. When the scope can be accessed from multiple threads the implementor should ensure thread safety.

        

        
            
              Provides explicit lifetime scoping within logical path of execution. Used for types with   .
            

            
              The scope is passed on to child threads, including ThreadPool threads. The capability is limited to single   and should be used cautiously as call to   may occur while the child thread is still executing, what in turn may lead to subtle threading bugs.
            

        

        
            
              Delegate used by   to request a new instance to be created (that would be the first instance in that scope, subsequently reused).
            

            Callback which should be invoken by provided delegate right after isntance gets created and before it burden gets tracked.
              The purpose if this callback is to include scope in decisions regarding tracking of the instance by  .
              Depending on the scope implementation it may or may not provide its own end of lifetime detection mechanism.

            

        

        
            
            	Contribute to component model before standard   run.
            

             

             

        

        
            
            	Contribute to component model after standard   run.
            

             

             

        

        
            
            	Contribute to component model after standard   run.
            

             

             

        

        
            
                Entry point to fluent way to register, by convention, multiple concrete (non-abstract) classes (that include also delegate types). Use static methods on the class to fluently build
                registration.
            

        

        
            Prepares to register types from a list of types.

             The list of types. 

            
                The corresponding  
            

        

        
            Prepares to register types from a list of types.

             The list of types. 

            
                The corresponding  
            

        

        
            Prepares to register types from an assembly.

             The assembly. 

            
                The corresponding  
            

        

        
            Prepares to register types from an assembly containing the type.

             The type belonging to the assembly. 

            
                The corresponding  
            

        

        
            Prepares to register types from an assembly containing the type.

             The type belonging to the assembly. 

            
                The corresponding  
            

        

        
            Prepares to register types from assemblies found in a given directory that meet additional optional restrictions.

             

             

        

        
            Scans current assembly and all refernced assemblies with the same first part of the name.

             

            
                Assemblies are considered to belong to the same application based on the first part of the name. For example if the method is called from within MyApp.exe
 and MyApp.exe
 references
                MyApp.SuperFeatures.dll
, mscorlib.dll
 and ThirdPartyCompany.UberControls.dll
 the MyApp.exe
 and MyApp.SuperFeatures.dll
 will be scanned for components, and other
                assemblies will be ignored.
            

        

        
            Prepares to register types from an assembly.

             The assembly name. 

            
                The corresponding  
            

        

        
            Prepares to register types from the assembly containing the code invoking this method.

            
                The corresponding  
            

        

        
            
                Entry point to fluent way to register, by convention, multiple types. No upfront filtering is done so literally every type will be considered. That means that usually some filtering done by user
                will be required. For a most common case where non-abstract classes only are to be considered use   class instead. Use static methods on the class to fluently build
                registration.
            

        

        
            Prepares to register types from a list of types.

             The list of types. 

            
                The corresponding  
            

        

        
            Prepares to register types from a list of types.

             The list of types. 

            
                The corresponding  
            

        

        
            Prepares to register types from an assembly.

             The assembly. 

            
                The corresponding  
            

        

        
            Prepares to register types from an assembly containing the type.

             The type belonging to the assembly. 

            
                The corresponding  
            

        

        
            Prepares to register types from an assembly containing the type.

             The type belonging to the assembly. 

            
                The corresponding  
            

        

        
            Prepares to register types from assemblies found in a given directory that meet additional optional restrictions.

             

             

        

        
            Scans current assembly and all refernced assemblies with the same first part of the name.

             

            
                Assemblies are considered to belong to the same application based on the first part of the name. For example if the method is called from within MyApp.exe
 and MyApp.exe
 references
                MyApp.SuperFeatures.dll
, mscorlib.dll
 and ThirdPartyCompany.UberControls.dll
 the MyApp.exe
 and MyApp.SuperFeatures.dll
 will be scanned for components, and other
                assemblies will be ignored.
            

        

        
            Prepares to register types from an assembly.

             The assembly name. 

            
                The corresponding  
            

        

        
            Prepares to register types from the assembly containing the code invoking this method.

            
                The corresponding  
            

        

        
            
              Only one instance is created first time an instance of the component is requested, and it is then reused for all subseque.
            

        

        
            
              Transient components are never reused. Since their lifetime does not have any externally constrained end, they have to be manually released if resolved explicitly, to ensure proper decomission.
            

        

        
            
              Summary description for DefaultComponentModelBuilder.
            

        

        
            
              Implementors must construct a populated
              instance of ComponentModel by inspecting the component
              and|or the configuration.
            

        

        
            
              "To give or supply in common with others; give to a 
              common fund or for a common purpose". The contributor
              should inspect the component, or even the configuration
              associated with the component, to add or change information
              in the model that can be used later.
            

        

        
            
              Constructs a new ComponentModel by invoking
              the registered contributors.
            

            

            

            

            

            

        

        
            
              Removes the specified contributor
            

            

        

        
            
              Initializes a new instance of the   class.
            

            The kernel.

        

        
            
              "To give or supply in common with others; give to a
              common fund or for a common purpose". The contributor
              should inspect the component, or even the configuration
              associated with the component, to add or change information
              in the model that can be used later.
            

            

        

        
            
              Constructs a new ComponentModel by invoking
              the registered contributors.
            

            

            

            

            

            

        

        
            
              Removes the specified contributor
            

            

        

        
            
              Initializes the default contributors.
            

        

        
            
              Gets the contributors.
            

            The contributors.

        

        
            
              Inspects the component configuration and the type looking for a
              definition of component activator type. The configuration preceeds whatever
              is defined in the component.
            

            
              This inspector is not guarantee to always set up an component activator type. 
              If nothing could be found it wont touch the model. In this case is up to
              the kernel to establish a default component activator for components.
            

        

        
            
              Searches for the component activator in the configuration and, if unsuccessful
              look for the component activator attribute in the implementation type.
            

            The kernel instance

            The model instance

        

        
            
              Reads the attribute "componentActivatorType" associated with the 
              component configuration and verifies it implements the   
              interface.
            

            
              If the type does not implement the proper interface
            

            

            

        

        
            
              Check if the type expose one of the component activator attributes
              defined in Castle.Core namespace.
            

            

        

        
            
              Validates that the provide type implements IComponentActivator
            

            The custom component activator.

        

        
            
              Inspects the component configuration and type looking for information
              that can influence the generation of a proxy for that component.
              
                We specifically look for additionalInterfaces
 and marshalByRefProxy
 
                on the component configuration or the   
                attribute.
              

            

        

        
            
              Searches for proxy behavior in the configuration and, if unsuccessful
              look for the   attribute in 
              the implementation type.
            

        

        
            
              Returns a   instance if the type
              uses the attribute. Otherwise returns null.
            

            

        

        
            
              Reads the proxy behavior associated with the 
              component configuration/type and applies it to the model.
            

            
              If the conversion fails
            

            

            

        

        
            
              Uses the ConfigurationStore registered in the kernel to obtain
              an   associated with the component.
            

        

        
            
              Queries the kernel's ConfigurationStore for a configuration
              associated with the component name.
            

            

            

        

        
            
              Check for a node 'parameters' within the component 
              configuration. For each child it, a ParameterModel is created
              and added to ComponentModel's Parameters collection
            

        

        
            
              Inspect the configuration associated with the component
              and populates the parameter model collection accordingly
            

            

            

        

        
            
              This implementation of  
              collects all available constructors and populates them in the model
              as candidates. The Kernel will pick up one of the candidates
              according to a heuristic.
            

        

        
            
              Only to hold internal constants and get rid of 
              magic numbers and hardcode names.
            

        

        
            
              Inspect the component for InterceptorAttribute
 and
              the configuration for the interceptors node
            

        

        
            
              Inspects the type looking for interfaces that constitutes
              lifecycle interfaces, defined in the Castle.Model namespace.
            

        

        
            
              Checks if the type implements   and or
                interfaces.
            

            

            

        

        
            Inspects the component configuration and the type looking for a definition of lifestyle type. The configuration preceeds whatever is defined in the component.

            
                This inspector is not guarantee to always set up an lifestyle type. If nothing could be found it wont touch the model. In this case is up to the kernel to establish a default lifestyle for
                components.
            

        

        
            Searches for the lifestyle in the configuration and, if unsuccessful look for the lifestyle attribute in the implementation type.

        

        
            
                Reads the attribute "lifestyle" associated with the component configuration and tries to convert to  
                enum type.
            

        

        
            Check if the type expose one of the lifestyle attributes defined in Castle.Model namespace.

        

        
            
              Base for inspectors that want configuration associated with methods.
              For each child a   is created
              and added to ComponentModel's methods collection
            

            
              Implementors should override the   return
              the name of the node to be inspected. For example:
              
                
              &lt;transactions&gt;
                &lt;method name="Save" transaction="requires" /&gt;
              &lt;/transactions&gt;
            

              

            

        

        
            
              This implementation of  
              collects all potential writable public properties exposed by the component 
              implementation and populates the model with them.
              The Kernel might be able to set some of these properties when the component 
              is requested.
            

        

        
            
              Adds the properties as optional dependencies of this component.
            

            

            

        

        
            
              Represents the collection of information and meta information collected about a component.
            

        

        
            
              Dependencies the kernel must resolve
            

        

        
            
              Interceptors associated
            

        

        
            
              External parameters
            

        

        
            
              All potential properties that can be setted by the kernel
            

        

        
            
              Constructs a ComponentModel
            

        

        
            
              Adds constructor dependency to this  
            

             

        

        
            
              Adds property dependency to this  
            

             

        

        
            
              Add service to be exposed by this  
            

             

        

        
            
              Requires the selected property dependencies.
            

             The property selector. 

        

        
            
              Requires the property dependencies of type   .
            

             The dependency type. 

        

        
            
              Gets or sets the configuration.
            

             The configuration. 

        

        
            
              Gets the constructors candidates.
            

             The constructors. 

        

        
            
              Gets or sets the custom component activator.
            

             The custom component activator. 

        

        
            
              Gets the custom dependencies.
            

             The custom dependencies. 

        

        
            
              Gets or sets the custom lifestyle.
            

             The custom lifestyle. 

        

        
            
              Dependencies are kept within constructors and properties. Others dependencies must be registered here, so the kernel (as a matter of fact the handler) can check them
            

        

        
            
              Gets or sets the extended properties.
            

             The extended properties. 

        

        
            
              Gets or sets the component implementation.
            

             The implementation. 

        

        
            
              Gets or sets the strategy for inspecting public properties on the components
            

        

        
            
              Gets the interceptors.
            

             The interceptors. 

        

        
            
              Gets the lifecycle steps.
            

             The lifecycle steps. 

        

        
            
              Gets or sets the lifestyle type.
            

             The type of the lifestyle. 

        

        
            
              Sets or returns the component key
            

        

        
            
              Gets the parameter collection.
            

             The parameters. 

        

        
            
              Gets the properties set.
            

             The properties. 

        

        
            
              Gets or sets a value indicating whether the component requires generic arguments.
            

             true
 if generic arguments are required; otherwise, false
 . 

        

        
            
              Represents a constructor of the component 
              that the container can use to initialize it properly.
            

        

        
            
              Initializes a new instance of the   class.
            

            The constructor info.

            The dependencies.

        

        
            
              Gets the ConstructorInfo (from reflection).
            

            The constructor.

        

        
            
              Gets the dependencies this constructor candidate exposes.
            

            The dependencies.

        

        
            
                Collection of  
            

        

        
            
                Collection of  .
            

        

        
            
              Represents an reference to a Interceptor component.
            

        

        
            
              Represents obtained just in time object.
            

            

        

        
            
              If the reference introduces dependency on a component, should return   for that dependency, otherwise null
.
            

            

            

        

        
            
              Resolves object referenced by this reference, optionally using provided  .
              If object is resolved from the kernel, the   should be used to guard
              against against cyclic dependencies.
            

            

            

            

        

        
            
              Initializes a new instance of the   class.
            

            The component key.

        

        
            
              Initializes a new instance of the   class.
            

            Type of the interceptor to use. This will reference the default component (ie. one with no explicitly assigned name) implemented by given type.

        

        
            
              Gets an   for the component key.
            

            The component key.

            The  

        

        
            
              Gets an   for the service.
            

            The service.

            The  

        

        
            
              Gets an   for the service.
            

            The service type.

            The  

        

        
            
                Collection of  
            

        

        
            Adds the specified interceptor as the first.

            The interceptor.

        

        
            Adds the interceptor to the end of the interceptors list if it does not exist already.

            The interceptor reference.

        

        
            Adds the specified interceptor as the last.

            The interceptor.

        

        
            Inserts the specified interceptor at the specified index.

            The index.

            The interceptor.

        

        
            Returns an enumerator that can iterate through a collection.

            
                An  
                that can be used to iterate through the collection.
            

        

        
            Adds the specified item.

            The interceptor.

        

        
            Gets a value indicating whether this instance has interceptors.

            
                true
 if this instance has interceptors; otherwise, false
.
            

        

        
            
              Represents a collection of ordered lifecycle concerns.
            

        

        
            
              Returns all concerns for the commission phase
            

            

        

        
            
              Returns all concerns for the decommission phase
            

            

        

        
            
              Gets a value indicating whether this instance has commission steps.
            

            
              true
 if this instance has commission steps; otherwise, false
.
            

        

        
            
              Gets a value indicating whether this instance has decommission steps.
            

            
              true
 if this instance has decommission steps; otherwise, false
.
            

        

        
            
              Represents meta information associated with a method
              (not yet defined)
            

        

        
            
              Initializes a new instance of the   class.
            

            The config node.

        

        
            
              Gets the config node.
            

            The config node.

        

        
            
              Collection of  
            

        

        
            
              Gets the method info2 model.
            

            The method info2 model.

        

        
            
              Represents a parameter. Usually the parameter
              comes from the external world, ie, an external configuration.
            

        

        
            
              Initializes a new instance of the   class.
            

            The name.

            The value.

        

        
            
              Initializes a new instance of the   class.
            

            The name.

            The value.

        

        
            
              Gets the config value.
            

            The config value.

        

        
            
              Gets the name.
            

            The name.

        

        
            
              Gets the value.
            

            The value.

        

        
            
              Collection of  
            

        

        
            
              Adds the specified name.
            

            The name.

            The value.

        

        
            
              Adds the specified name.
            

            The name.

            The config node.

        

        
            
              Adds the specified key.
            

            
              Not implemented
            

            The key.

            The value.

        

        
            
              Returns an enumerator that can iterate through a collection.
            

            
              An  
              that can be used to iterate through the collection.
            

        

        
            
              Gets the count.
            

            The count.

        

        
            
              Gets the   with the specified key.
            

            

        

        
            
            	Represents a property and the respective dependency.
            

            TODO: remove this class and instead create PropertyDependencyModel like we do for constructors
        

        
            
            	Initializes a new instance of the   class.
            

             The property info. 

             The dependency. 

        

        
            
            	Gets the dependency.
            

             The dependency. 

        

        
            
            	Gets the property.
            

             The property. 

        

        
            
                Collection of  
            

        

        
            Finds a PropertySet the by PropertyInfo.

            The info.

            

        

        
            
              Reference to component obtained from the container.
            

            

        

        
            
              Creates a new instance of   referencing default component implemented by  
            

            

        

        
            
              Creates a new instance of   referencing component  
            

            

        

        
            
              Select the appropriate interceptors based on the application specific
              business logic
            

        

        
            
              Determine whatever the specified has interceptors.
              The selector should only return true from this method if it has determined that is
              a model that it would likely add interceptors to.
            

            The model

            Whatever this selector is likely to add interceptors to the specified model

        

        
            
              Select the appropriate interceptor references.
              The interceptor references aren't necessarily registered in the model.Intereceptors
            

            The model to select the interceptors for

            The interceptors selected by previous selectors in the pipeline or   if this is the first interceptor in the pipeline.

            The interceptor for this model (in the current context) or a null reference

            
              If the selector is not interested in modifying the interceptors for this model, it 
              should return   and the next selector in line would be executed.
              If the selector wants no interceptors to be used it can either return null
 or empty array.
              However next interceptor in line is free to override this choice.
            

        

        
            
              Represents a reference to an existing object.
            

            

        

        
            
              Defines the contract used by the kernel 
              to obtain proxies for components. The implementor
              must return a proxied instance that dispatch 
              the invocation to the registered interceptors in the model
            

        

        
            
              Add the selector to the list of selectors that can affect interceptor's decisions
              in the container.
            

        

        
            
              Implementors must create a proxy based on 
              the information exposed by ComponentModel
            

            The kernel instance

            The component model

            The component instance to be proxy (only required in some cases)

            array of parameters to the constructor (if any)

            The creation context

            proxy instance

        

        
            
              Implementor should check the component model
              and determine if the caller must pass on the component 
              instance to the proxy
            

            The kernel instance

            The component model

            true
 if an instance must be passed to   

        

        
            
              Determines whatever we need to create a proxy for this model
            

            

            

        

        
            
              This is a placeholder implementation of  .
            

            
              The decision to supply no implementation for  
              is supported by the fact that the MicroKernel should be a thin
              assembly with the minimal set of features, although extensible.
              Providing the support for this interface would obligate 
              the user to import another assembly, even if the large majority of
              simple cases, no use use of interceptors will take place.
              If you want to use however, see the Windsor container.
            

        

        
            
              Holds the keys used by the proxy factories.
            

        

        
            
              Key used to supply custom proxy options.
            

        

        
            
            	Represents options to configure proxies.
            

        

        
            
            	Initializes a new instance of the   class.
            

        

        
            
            	Adds the additional interfaces to proxy.
            

             The interfaces. 

        

        
            
            	Adds the additional mix ins to integrate.
            

             The mix ins. 

        

        
            
            	Adds the additional mix in to integrate.
            

             The mix in. 

        

        
            
            	Equals the specified obj.
            

             The obj. 

             true if equal. 

        

        
            
            	Gets the hash code.
            

             

        

        
            
            	Gets the additional interfaces to proxy.
            

             The interfaces. 

        

        
            
            	Determines if the proxied component can change targets.
            

        

        
            
            	Determines if the interface proxied component should inherit 
            	from  
            

        

        
            
            	Gets or sets the proxy hook.
            

        

        
            
            	Gets the mix ins to integrate.
            

             The interfaces. 

        

        
            
            	Determines if the proxied component uses a target.
            

        

        
            
            	Gets or sets the interceptor selector.
            

        

        
            
              Helper support for proxy configuration.
            

        

        
            
              Obtains the   associated with the  .
            

            The component model.

            true if the options should be created if not present.

            The associated proxy options for the component model.

        

        
            
              Constructs the   descriptor with name and value.
            

            The attribute name.

            The attribute value.

        

        
            
              Constructs the   descriptor with name.
            

            The component.

            The attribute name.

        

        
            
              Builds the   with value.
            

            The attribute value.

            The  

        

        
            
              Factory for creating   objects. Use static methods on the class to fluently build registration.
            

        

        
            
              Creates a component registration for the  
            

            Type of the service.

            The component registration.

        

        
            
              Creates a component registration for the  
            

            Types of the service.

            The component registration.

            B
        

        
            
              Creates a component registration for the  
            

            Types of the service.

            The component registration.

        

        
            
              Creates a component registration for the service type.
            

            The service type.

            The component registration.

        

        
            
              Creates a component registration for the service types.
            

            The primary service type.

            The forwarded type.

            The component registration.

        

        
            
              Creates a component registration for the service types.
            

            The primary service type.

            The first forwarded type.

            The second forwarded type.

            The component registration.

        

        
            
              Creates a component registration for the service types.
            

            The primary service type.

            The first forwarded type.

            The second forwarded type.

            The third forwarded type.

            The component registration.

        

        
            
              Creates a component registration for the service types.
            

            The primary service type.

            The first forwarded type.

            The second forwarded type.

            The third forwarded type.

            The fourth forwarded type.

            The component registration.

        

        
            
              Helper method for filtering components based on presence of an Attribute.
            

            

            

            

            
              container.Register(
              Classes.FromThisAssembly()
              .Where(Component.HasAttribute&lt;UserAttribute&gt;) );
            

        

        
            
              Helper method for filtering components based on presence of an Attribute and value of predicate on that attribute.
            

            

            

            

            
              container.Register(
              Classes.FromThisAssembly()
              .Where(Component.HasAttribute&lt;UserAttribute&gt;(u =&gt; u.SomeFlag)) );
            

        

        
            
              Determines if the component is a Castle component, that is - if it has a  .
            

            true if the service is a Castle Component.

            
              This method is usually used as argument for   method.
            

        

        
            
              Creates a predicate to check if a component is in a namespace.
            

            The namespace.

            true if the component type is in the namespace.

        

        
            
              Creates a predicate to check if a component is in a namespace.
            

            The namespace.

            If set to true, will also include types from subnamespaces.

            true if the component type is in the namespace.

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

            The component type to test namespace against.

            true if the component is in the same namespace.

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

            The component type to test namespace against.

            If set to true, will also include types from subnamespaces.

            true if the component is in the same namespace.

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

            The component type to test namespace against.

            true if the component is in the same namespace.

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

            The component type to test namespace against.

            If set to true, will also include types from subnamespaces.

            true if the component is in the same namespace.

        

        
            
              Inserts a new named argument with given key. If an argument for this name already exists, it will be overwritten.
            

        

        
            
              Inserts a new typed argument with given type. If an argument for this type already exists, it will be overwritten.
            

        

        
            
              Inserts a set of typed arguments. Property names of the anonymous type will be used as key.
            

        

        
            
              Inserts a new typed argument with given type. If an argument for this type already exists, it will be overwritten.
            

        

        
            
              Inserts a set of typed arguments. Actual type of the arguments will be used as key.
            

        

        
            
            Registration for a single type as a component with the kernel.
                 
            You can create a new registration with the   factory.
            

             The service type 

        

        
            
              The contract for all registrations with the kernel.
            

        

        
            
              Performs the registration in the  .
            

            The kernel.

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Marks the components with one or more actors.
            

             The component actors. 

             

        

        
            
            Set a custom   which creates and destroys the component.
            

             

        

        
            
            Adds the attribute descriptor.
            

             The key. 

             The value. 

             

        

        
            
            Adds the descriptor.
            

             The descriptor. 

             

        

        
            
            Creates an attribute descriptor.
            

             The attribute key. 

             

        

        
            
            Apply more complex configuration to this component registration.
            

             The config nodes. 

             

        

        
            
            Apply more complex configuration to this component registration.
            

             The configuration   . 

             

        

        
            
            Defines additional dependencies for the component. Those can be any of  ,   and  . Use the static methods on
                  class to define the dependencies. See the example attached.
            

             The dependency. 

             

            
            Artificial example showing how to specify a service override. See other methods on   class for more options.
                DependsOn(Dependency.OnComponent(typeof(IRepository), typeof(IntranetRepository)));

            

        

        
            
            Defines additional dependencies for the component. Those can be any combibation of  ,   and  . Use the static methods
            on   class to define the dependencies. See the example attached.
            

             The dependencies. 

             

            
            Artificial example showing how to specify three different dependencies. If any of the methods shown is not self explanatory consult its documentation.
                DependsOn(Dependency.OnAppSettingsValue("connectionString", "intranet-connection-string"),
            		Dependency.OnComponent(typeof(IRepository), typeof(IntranetRepository)),
            		Dependency.OnValue("applicationName", "My Application"));

            

        

        
            
            Uses a dictionary of key/value pairs, to specify custom dependencies.
                 
            

             The dependencies. 

             

        

        
            
            Uses an (anonymous) object as a dictionary, to specify custom dependencies.
                 
            

             The dependencies. 

             

        

        
            
            Allows custom dependencies to by defined dyncamically. Calling this overload is synonymous to using  
            

             The delegate used for providing dynamic parameters. 

             

        

        
            
            Allows custom dependencies to by defined dynamically with releasing capability. Calling this overload is synonymous to using
                 
            

             The delegate used for providing dynamic parameters. 

             

        

        
            
            Allows custom dependencies to by defined dynamically with releasing capability. Calling this overload is synonymous to using
                 
            

             The delegate used for providing dynamic parameters. 

             

            
            Use   when resolving components from   in order to detect cycles.
            

        

        
            
            Allows custom dependencies to by defined dyncamically.
            

             The delegate used for providing dynamic parameters. 

             

        

        
            
            Allows custom dependencies to by defined dynamically with releasing capability.
            

             The delegate used for providing dynamic parameters. 

             

        

        
            
            Allows custom dependencies to by defined dynamically with releasing capability.
            

             The delegate used for providing dynamic parameters. 

             

            
            Use   when resolving components from   in order to detect cycles.
            

        

        
            
            Sets   for this component.
            

             The extended properties. 

             

        

        
            
            Sets   for this component.
            

             The extended properties. 

             

        

        
            
            Sets   for this component.
            

             The extendend properties as key/value pairs. 

             

        

        
            
            Adds   as additional services to be exposed by this component.
            

             The types to forward. 

             

        

        
            
            Adds   as additional service to be exposed by this component.
            

             The forwarded type. 

             The component registration. 

        

        
            
            Adds   and   as additional services to be exposed by this component.
            

             The first forwarded type. 

             The second forwarded type. 

             The component registration. 

        

        
            
            Adds   ,   and   as additional services to be exposed by this component.
            

             The first forwarded type. 

             The second forwarded type. 

             The third forwarded type. 

             The component registration. 

        

        
            
            Adds   ,   ,   and   as additional services to be exposed by
            this component.
            

             The first forwarded type. 

             The second forwarded type. 

             The third forwarded type. 

             The fourth forwarded type. 

             The component registration. 

        

        
            
            Adds   as additional services to be exposed by this component.
            

             The types to forward. 

             

        

        
            
            Sets the concrete type that implements the service to   .
                 
            If not set, the class service type or first registered interface will be used as the implementation for this component.
            

             The type that is the implementation for the service. 

             

        

        
            
            Sets the concrete type that implements the service to   .
                 
            If not set, the class service type or first registered interface will be used as the implementation for this component.
            

             The type that is the implementation for the service. 

             

        

        
            
            Sets the concrete type that implements the service to   .
                 
            If not set, the class service type or first registered interface will be used as the implementation for this component.
            

             The type that is the implementation for the service. 

             Provides ability to close open generic service. Ignored when registering closed or non-generic component. 

             

        

        
            
            Sets the concrete type that implements the service to   .
                 
            If not set, the class service type or first registered interface will be used as the implementation for this component.
            

             The type that is the implementation for the service. 

             Provides ability to select if open generic component supports particular closed version of a service. 

             

        

        
            
            Sets the concrete type that implements the service to   .
                 
            If not set, the class service type or first registered interface will be used as the implementation for this component.
            

             The type that is the implementation for the service. 

             Provides ability to close open generic service. Ignored when registering closed or non-generic component. 

             Provides ability to select if open generic component supports particular closed version of a service. 

             

        

        
            
            Assigns an existing instance as the component for this registration.
            

             The component instance. 

             

        

        
            
            Set the interceptors for this component.
            

             The interceptors. 

             

        

        
            
            Set the interceptors for this component.
            

             The interceptors. 

             

        

        
            
            Set the interceptor for this component.
            

             

        

        
            
            Set the interceptor for this component.
            

             

        

        
            
            Set the interceptor for this component.
            

             

        

        
            
            Sets component lifestyle to specified one.
            

             

        

        
            
            Sets component lifestyle to specified one.
            

             

        

        
            
            Sets component lifestyle to per thread.
            

             

        

        
            
            Sets component lifestyle to scoped per explicit scope. If   is provided, it will be used to access scope for the component. Otherwise the default scope accessor
            will be used.
            

             

        

        
            
            Sets component lifestyle to scoped per explicit scope.
            

             

        

        
            
            Sets component lifestyle to scoped per farthest component on the resolution stack where implementation type is assignable to   .
            

             

        

        
            
            Sets component lifestyle to scoped per nearest component on the resolution stack where implementation type is assignable to   .
            

             

        

        
            
            Sets component lifestyle to scoped per scope determined by  
            

             Custom algorithm for selection which component higher up the resolution stack should be the root of the lifetime scope for current component's instances. The delegate
            will be invoked when current component is about to be resolved and will be passed set of handlers to components higher up the resolution stack. It ought to return one which it designages as the root
            which shall scope the lifetime of current component's instance, or null
 

             

        

        
            
            Sets component lifestyle to instance per web request.
            

             

        

        
            
            Sets component lifestyle to pooled. If   or   are not set default values will be used.
            

             

        

        
            
            Sets component lifestyle to singleton.
            

             

        

        
            
            Sets component lifestyle to transient.
            

             

        

        
            
            Set a name of this registration. This is required if you have multiple components for a given service and want to be able to resolve some specific ones. Then you'd provide the name so that Windsor
            knows which one of the bunch you know. Otherwise don't bother setting the name.
                 
            If not set, the   of the   will be used as the key to register the component.
            

             The name of this registration. 

             

            
            Names have to be globally unique in the scope of the container.
            

        

        
            
            This method as opposed to   should be used by tools like facilities when the name is not provided by the user, but autogenerated and user has no interest in seing this name, for
            example in diagnostics reports. Set a name of this registration. This is required if you have multiple components for a given service and want to be able to resolve some specific ones. Then you'd
            provide the name so that Windsor knows which one of the bunch you know. Otherwise don't bother setting the name.
                 
            If not set, the   of the   will be used as the key to register the component.
            

             The name of this registration. 

             

            
            Names have to be globally unique in the scope of the container.
            

        

        
            
            Stores a set of   which will be invoked when the component is created and before it's returned from the container.
            

             A set of actions to be executed right after the component is created and before it's returned from the container. 

        

        
            
            Stores a set of   which will be invoked when the component is created and before it's returned from the container.
            

             A set of actions to be executed right after the component is created and before it's returned from the container. 

        

        
            
            Stores a set of   which will be invoked when the component is created and before it's returned from the container.
            

             A set of actions to be executed right after the component is created and before it's returned from the container. 

        

        
            
            Stores a set of   which will be invoked when the component is destroyed which means when it's released or it's lifetime scope ends. Notice that usage of this
            method will cause instsances of the component to be tracked, even if they wouldn't be otherwise.
            

             A set of actions to be executed when the component is destroyed. 

        

        
            
            Services that are already present in the container will be skipped. If no new service is left the registration will not happen at all.
            

             

        

        
            
            With the overwrite.
            

             

        

        
            
            Set configuration parameters with string or   values.
            

             The parameters. 

             

        

        
            
            Sets the interceptor selector for this component.
            

             

             

        

        
            
            Sets the interceptor selector for this component.
            

             

             

        

        
            
            Override (some of) the services that this component needs. Use   to create an override.
                 
            Each key represents the service dependency of this component, for example the name of a constructor argument or a property. The corresponding value is the key of an other component registered to the
            kernel, and is used to resolve the dependency.
                 
            To specify dependencies which are not services, use  
            

             The service overrides. 

             

        

        
            
            Override (some of) the services that this component needs, using a dictionary.
                 
            Each key represents the service dependency of this component, for example the name of a constructor argument or a property. The corresponding value is the key of an other component registered to the
            kernel, and is used to resolve the dependency.
                 
            To specify dependencies which are not services, use  
            

             The service overrides. 

             

        

        
            
            Override (some of) the services that this component needs, using an (anonymous) object as a dictionary.
                 
            Each key represents the service dependency of this component, for example the name of a constructor argument or a property. The corresponding value is the key of an other component registered to the
            kernel, and is used to resolve the dependency.
                 
            To specify dependencies which are not services, use  
            

             The service overrides. 

             

        

        
            
            Uses a factory to instantiate the component
            

             Factory type. This factory has to be registered in the kernel. 

             Implementation type. 

             Factory invocation 

             

        

        
            
            Uses a factory method to instantiate the component.
            

             Implementation type 

             Factory method 

             When set to true
 container will not assume ownership of this component, will not track it not apply and lifecycle concerns to it. 

             

        

        
            
            Uses a factory method to instantiate the component.
            

             Implementation type 

             Factory method 

             When set to true
 container will not assume ownership of this component, will not track it not apply and lifecycle concerns to it. 

             

        

        
            
            Uses a factory method to instantiate the component.
            

             Implementation type 

             Factory method 

             When set to true
 container will not assume ownership of this component, will not track it not apply and lifecycle concerns to it. 

             

        

        
            
            Uses a factory method to instantiate the component.
            

             Implementation type 

             Factory method 

             

        

        
            
            Registers this component with the   .
            

             The kernel. 

        

        
            
            Overrides default behavior by making the current component the default for every service it exposes. The   allows user to narrow down the number of services which
            should be make defaults.
            

             Invoked for each service exposed by given component if returns true
 this component will be the default for that service. 

             

            
            When specified for multiple components for any given service the one registered after will override the one selected before.
            

        

        
            
            Overrides default behavior by making the current component the default for every service it exposes.
            

             

            
            When specified for multiple components for any given service the one registered after will override the one selected before.
            

        

        
            
            Overrides default behavior by making the current component the fallback for every service it exposes that   returns true
 for. That is if another,
            non-fallback, component will be registered exposing any of these same services as this component, that other component will take precedence over this one, regardless of order in which they are
            registered.
            

             Invoked for each service exposed by given component if returns true
 this component will be the fallback for that service. 

        

        
            
            Overrides default behavior by making the current component the fallback for every service it exposes. That is if another, non-fallback, component will be registered exposing any of the same services
            as this component, that other component will take precedence over this one, regardless of order in which they are registered
            

             

        

        
            
            Filters (settable) properties of the component's implementation type to expose in the container.
            

             Predicate deciding whether a property is settable or not. If it returns false
 the property will not be added to   collection
            and Windsor will never try to set it. 

             

            
            Matched properties will be considered optional. Windsor will resolve the component even if it cannot provide value for those properties. If you want to make them mandatory use a different overload.
            

        

        
            
            Filters (settable) properties of the component's implementation type to expose in the container and specifies if matched properties are considered mandatory.
            

             Predicate deciding whether a property is settable or not. If it returns false
 the property will not be added to   collection
            and Windsor will never try to set it. 

             if true
 the properties matched by   will be considered mandatory dependencies. Windsor will only successfully resole the component if it
            can provide value for all of these properties. If false
 Windsor will still try to provide values for these properties, but if it can't it will not stop the component from being successfully
            resolved. 

             

        

        
            
            Filters (settable) properties of the component's implementation type to expose in the container and specifies if matched properties are considered mandatory.
            

             Predicate deciding whether a property is settable or not. If it returns false
 the property will not be added to   collection
            and Windsor will never try to set it. 

             if true
 the properties matched by   will be considered mandatory dependencies. Windsor will only successfully resole the component if it
            can provide value for all of these properties. If false
 Windsor will still try to provide values for these properties, but if it can't it will not stop the component from being successfully
            resolved. 

             

        

        
            
            Filters (settable) properties of the component's implementation type to ignore.
            

             Predicate finding properties to ignore. If it returns true
 the property will not be added to   collection and Windsor
            will never try to set it. 

        

        
            
            Filters (settable) properties of the component's implementation type to expose in the container as mandatory dependencies
            

             Predicate finding properties. If it returns true
 the property will be added to   collection and Windsor will make it
            a mandatory dependency. 

        

        
            
            Filters (settable) properties of the component's implementation type to ignore.
            

             Predicate finding properties to ignore. If it returns true
 the property will not be added to   collection and Windsor
            will never try to set it. 

        

        
            
            Filters (settable) properties of the component's implementation type to expose in the container as mandatory dependencies
            

             Predicate finding properties. If it returns true
 the property will be added to   collection and Windsor will make it
            a mandatory dependency. 

        

        
            
            Filters (settable) properties of the component's implementation type to expose in the container and specifies if matched properties are considered mandatory.
            

             Rules for deciding whether given properties are exposed in the container or ignored and if they are mandatory, that is Windsor will only successfully resole the component if
            it can provide value for all of these properties. 

             

        

        
            
            The concrete type that implements the service.
                 
            To set the implementation, use   .
            

             The implementation of the service. 

        

        
            
            Set the lifestyle of this component. For example singleton and transient (also known as 'factory').
            

             The with lifestyle. 

        

        
            
            The name of the component. Will become the key for the component in the kernel.
                 
            To set the name, use   .
                 
            If not set, the   of the   will be used as the key to register the component.
            

             The name. 

        

        
            
            Set proxy for this component.
            

             The proxy. 

        

        
            
              A non-generic  .
               
              You can create a new registration with the   factory.
            

        

        
            
              Represents a configuration child.
            

        

        
            
              Applies the configuration node.
            

            The configuration.

        

        
            
              Represents a configuration attribute.
            

        

        
            
              Applies the configuration node.
            

            The configuration.

        

        
            
              Create a   with name.
            

            The attribute name.

            The new  

        

        
            
              Represents a named attribute.
            

        

        
            
              Builds the   with name/value.
            

            The attribute value.

            The new  

        

        
            
              Builds the   with name/value.
            

            The attribute value.

            The new  

        

        
            
              Represents a configuration child.
            

        

        
            
              Create a   with name.
            

            The child name.

            The new  

        

        
            
              Represents a named child.
            

        

        
            
              Applies the configuration node.
            

            The configuration.

        

        
            
              Builds the   with name/value.
            

            The child value.

            The new  

        

        
            
              Builds the   with name/value.
            

            The child value.

            The new  

        

        
            
              Builds the   with name/config.
            

            The child configuration.

            The new  

        

        
            
              Builds the   with name/config.
            

            The child nodes.

            The new  

        

        
            
              Represents a simple child node.
            

        

        
            
              Applies the configuration node.
            

            The configuration.

        

        
            
              Represents a complex child node.
            

        

        
            
              Applies the configuration node.
            

            The configuration.

        

        
            
              Represents a compound child node.
            

        

        
            
              Applies the configuration node.
            

            The configuration.

        

        
            
            Specifies that value   should be used to satisfy dependencies matched by  . The value is provided as a string and will be
            converted to appropriate type when resolving.
            

             

             

             

        

        
            
            Specifies that value   should be used to satisfy dependencies matched by  . The value is provided as a string and will be converted to
            appropriate type when resolving.
            

             

             

             

        

        
            
            Specifies that value from application configuration file's appSettings section named   should be used to satisfy dependencies matched by
                 . The value is provided as a string and will be converted to appropriate type when resolving.
            

             

             

             

        

        
            
            Specifies that value from application configuration file's appSettings section named   should be used to satisfy dependencies matched by  . The value
            is provided as a string and will be converted to appropriate type when resolving.
            

             

             

        

        
            
            Specifies that component registered with   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that component registered with   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that component registered with   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that component registered with   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that component registered with   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that components registered with   should be used to satisfy collection dependencies matched by  
            

        

        
            
            Specifies that components registered with   should be used to satisfy collection dependencies matched by  
            

        

        
            
            Specifies that components registered with   should be used to satisfy collection dependencies matched by  
            

        

        
            
            Specifies that components registered with   should be used to satisfy collection dependencies matched by  
            

        

        
            
            Specifies that components registered with   should be used to satisfy collection dependencies matched by  
            

        

        
            
            Specifies that components registered with   should be used to satisfy collection dependencies matched by  
            

        

        
            
            Specifies that value   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that value   should be used to satisfy dependencies matched by  
            

        

        
            
            Specifies that value   should be used to satisfy dependencies matched by  
            

        

        
            
              The contract to install components in the container.
            

        

        
            
              Performs the installation in the  .
            

            The container.

            The configuration store.

        

        
            
              Adds the actions to ExtendedProperties.
            

            

        

        
            
              Sets the lifestyle to the specified
               
              .
            

             The type. 

             

        

        
            
              Assigns scoped lifestyle with scope accessed via
               
              instances.
            

             

             

        

        
            
              Assigns scoped lifestyle with scope accessed via
               
              instances if provided, or default accessor otherwise.
            

             

        

        
            
              Assigns scoped lifestyle with scope accessed via default accessor.
            

             

        

        
            
              Assign a custom lifestyle type, that implements
               
              .
            

             Type of the custom lifestyle. 

             

        

        
            
              Assign a custom lifestyle type, that implements
               
              .
            

             The type of the custom lifestyle 

             

        

        
            
              Represents a configuration parameter.
            

        

        
            
              Create a   with key.
            

            The parameter key.

            The new  

        

        
            
              Gets the parameter configuration.
            

        

        
            
              Gets the parameter key.
            

        

        
            
              Gets the parameter value.
            

        

        
            
              Represents a parameter key.
            

        

        
            
              Builds the   with key/value.
            

            The parameter value.

            The new  

        

        
            
              Builds the   with key/config.
            

            The parameter configuration.

            The new  

        

        
            
              The parameter key name.
            

        

        
            
              Represents a key/value pair.
            

        

        
            
              Create a   with key.
            

            The property key.

            The new  

        

        
            
              Create a   with key.
            

            The property key.

            The new  

        

        
            
              Create a   with key.
            

            The property key.

            The new  

        

        
            
              Gets the property key.
            

        

        
            
              Gets the property value.
            

        

        
            
              Represents a property key.
            

        

        
            
              Builds the   with key/value.
            

            The property value.

            The new  

        

        
            
              Builds a service override using other component registered with given   as value for dependency with given  .
            

            

            

        

        
            
              Builds a service override using other component registered with given   and no explicit name, as value for dependency with given  .
            

            

        

        
            
              Builds a service override using other component registered with given   and no explicit name, as value for dependency with given  .
            

            

        

        
            
              The property key key.
            

        

        
            
              Represents a service override.
            

        

        
            
              Creates a   with key.
            

            The service override key.

            The new  

        

        
            
              Creates a   with key.
            

            The service override key.

            The new  

        

        
            
              Creates a   with key.
            

            The service override key.

            The new  

        

        
            
              Implicitly converts service override to dependency. This is a API trick to keep the API clean and focused.
            

            

            

        

        
            
              Gets the optional value type specifier.
            

        

        
            
              Represents a service override key.
            

        

        
            
              Builds the   with key/value.
            

            The service override value.

            The new  

        

        
            
              Builds the   with key/values.
            

            The service override values.

            The new  

        

        
            
              Builds the   with key/values.
            

            The service override values.

            The new  

            The value type.

        

        
            
              Builds the   with key/values.
            

            The service override values.

            The new  

        

        
            
              Builds the   with key/values.
            

            The service override values.

            The new  

            The value type.

        

        
            
              Describes a set of components to register in the kernel. Use static methods on the class to fluently build registration.
            

        

        
            
              Prepares to register types from a list of types.
            

            The list of types.

            The corresponding  

        

        
            
              Prepares to register types from a list of types.
            

            The list of types.

            The corresponding  

        

        
            
              Prepares to register types from an assembly.
            

            The assembly.

            The corresponding  

        

        
            
              Prepares to register types from an assembly containing the type.
            

            The type belonging to the assembly.

            The corresponding  

        

        
            
              Prepares to register types from an assembly containing the type.
            

            The type belonging to the assembly.

            The corresponding  

        

        
            
              Prepares to register types from assemblies found in a given directory that meet additional optional restrictions.
            

            

            

        

        
            
              Prepares to register types from an assembly.
            

            The assembly name.

            The corresponding  

        

        
            
              Prepares to register types from the assembly containing the code invoking this method.
            

            The corresponding  

        

        
            
              Describes all the types based on basedOn
.
            

            The base type.

            

        

        
            
              Describes all the types based on type T.
            

            The base type.

            

        

        
            
              Describes any types that are supplied.
            

            

        

        
            
              Prepares to register types from a list of types.
            

            The list of types.

            The corresponding  

        

        
            
              Describes a related group of components to register in the kernel.
            

        

        
            
              Prepares to register types from a list of types.
            

            The list of types.

            The corresponding  

        

        
            
              Prepares to register types from a list of types.
            

            The list of types.

            The corresponding  

        

        
            
              Prepares to register types from an assembly.
            

            The assembly.

            The corresponding  

        

        
            
              Prepares to register types from an assembly.
            

            The assembly name.

            The corresponding  

        

        
            
              Prepares to register types from a list of types.
            

            The list of types.

            The corresponding  

        

        
            
              Selects a set of types from an assembly.
            

        

        
            
              Describes the source of types to register.
            

        

        
            
              Allows a type to be registered multiple times.
            

        

        
            
              Returns the descriptor for accepting a type.
            

             The base type. 

             The descriptor for the type. 

        

        
            
              Returns the descriptor for accepting a type.
            

             The base type. 

             The descriptor for the type. 

        

        
            
              Returns the descriptor for accepting a type.
            

             One or more base types. To be accepted a type must implement at least one of the given base types. 

             The descriptor for the type. 

        

        
            
              Returns the descriptor for accepting a type.
            

             One or more base types. To be accepted a type must implement at least one of the given base types. 

             The descriptor for the type. 

        

        
            
              Creates a predicate to check if a component is in a namespace.
            

             The namespace. 

             true if the component type is in the namespace. 

        

        
            
              Creates a predicate to check if a component is in a namespace.
            

             The namespace. 

             If set to true, will also include types from subnamespaces. 

             true if the component type is in the namespace. 

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

             The component type to test namespace against. 

             true if the component is in the same namespace. 

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

             The component type to test namespace against. 

             If set to true, will also include types from subnamespaces. 

             true if the component is in the same namespace. 

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

             The component type to test namespace against. 

             true if the component is in the same namespace. 

        

        
            
              Creates a predicate to check if a component shares a namespace with another.
            

             The component type to test namespace against. 

             If set to true, will also include types from subnamespaces. 

             true if the component is in the same namespace. 

        

        
            
              Returns the descriptor for accepting any type from given solutions.
            

             

        

        
            
              Returns the descriptor for accepting a type based on a condition.
            

             The accepting condition. 

             The descriptor for the type. 

        

        
            
              When called also non-public types will be scanned.
            

            
              Usually it is not recommended to register non-public types in the container so think twice before using this option.
            

        

        
            
              Selects an existing set of types to register.
            

        

        
            
              Describes how to select a types service.
            

        

        
            
              Uses all interfaces implemented by the type (or its base types) as well as their base interfaces.
            

            

        

        
            
              Uses the base type matched on.
            

            

        

        
            
              Uses all interfaces that have names matched by implementation type name.
              Matches Foo to IFoo, SuperFooExtended to IFoo and IFooExtended etc
            

            

        

        
            
              Uses the first interface of a type. This method has non-deterministic behavior when type implements more than one interface!
            

            

        

        
            
              Uses   to lookup the sub interface.
              For example: if you have IService and 
              IProductService : ISomeInterface, IService, ISomeOtherInterface.
              When you call FromInterface(typeof(IService)) then IProductService
              will be used. Useful when you want to register _all_ your services
              and but not want to specify all of them.
            

            

            

        

        
            
              Uses base type to lookup the sub interface.
            

            

        

        
            
              Assigns a custom service selection strategy.
            

            

            

        

        
            
              Assigns the supplied service types.
            

            

            

        

        
            
              Uses the type itself.
            

            

        

        
            
              This is a workaround for a CLR bug in
              which GetInterfaces() returns interfaces
              with no implementations.
            

            Type of the service.

            

        

        
            
              Describes how to register a group of related types.
            

        

        
            
              Initializes a new instance of the BasedOnDescriptor.
            

        

        
            
              Allows a type to be registered multiple times.
            

        

        
            
              Returns the descriptor for accepting a new type.
            

             The base type. 

             The descriptor for the type. 

        

        
            
              Returns the descriptor for accepting a new type.
            

             The base type. 

             The descriptor for the type. 

        

        
            
              Adds another type to be accepted as base.
            

             The base type. 

             The descriptor for the type. 

        

        
            
              Allows customized configurations of each matching type.
            

             The configuration action. 

             

        

        
            
              Allows customized configurations of each matching component with implementation type that is 
              assignable to
               
              .
            

             The type assignable from. 

             The configuration action. 

             

        

        
            
              Allows customized configurations of each matching component that satisfies supplied  .
            

             Condition to satisfy 

             The configuration action, executed only for components for which   evaluates to true
 . 

             

        

        
            
              Allows customized configurations of each matching component that satisfies supplied   and alternative configuration for the rest of components.
            

             Condition to satisfy 

             The configuration action, executed only for components for which   evaluates to true
 . 

             The configuration action, executed only for components for which   evaluates to false
 . 

             

        

        
            
              Assigns a conditional predication which must be satisfied.
            

             The predicate to satisfy. 

             

        

        
            
              Assigns a conditional predication which must not be satisfied.
            

             The predicate not to satisify. 

             

        

        
            
              Returns the descriptor for accepting a type based on a condition.
            

             The accepting condition. 

             The descriptor for the type. 

        

        
            
              Uses all interfaces implemented by the type (or its base types) as well as their base interfaces.
            

             

        

        
            
              Uses the base type matched on.
            

             

        

        
            
              Uses all interfaces that have names matched by implementation type name.
              Matches Foo to IFoo, SuperFooExtended to IFoo and IFooExtended etc
            

             

        

        
            
              Uses the first interface of a type. This method has non-deterministic behavior when type implements more than one interface!
            

             

        

        
            
              Uses   to lookup the sub interface.
              For example: if you have IService and 
              IProductService : ISomeInterface, IService, ISomeOtherInterface.
              When you call FromInterface(typeof(IService)) then IProductService
              will be used. Useful when you want to register _all_ your services
              and but not want to specify all of them.
            

             

             

        

        
            
              Uses base type to lookup the sub interface.
            

             

        

        
            
              Assigns a custom service selection strategy.
            

             

             

        

        
            
              Uses the type itself.
            

             

        

        
            
              Sets component lifestyle to specified one.
            

             

        

        
            
              Sets component lifestyle to specified one.
            

             

        

        
            
              Sets component lifestyle to per thread.
            

             

        

        
            
              Sets component lifestyle to scoped per explicit scope.
            

             

        

        
            
              Sets component lifestyle to scoped per explicit scope.
            

             

        

        
            
              Sets component lifestyle to scoped per explicit scope.
            

             

        

        
            
              Sets component lifestyle to scoped per component  .
            

             

        

        
            
              Sets component lifestyle to scoped per nearest component on the resolution stack where implementation type is assignable to   .
            

             

        

        
            
              Sets component lifestyle to instance per web request.
            

             

        

        
            
              Sets component lifestyle to pooled. If   or   are not set default values will be used.
            

             

        

        
            
              Sets component lifestyle to singleton.
            

             

        

        
            
              Sets component lifestyle to transient.
            

             

        

        
            
              Assigns the supplied service types.
            

             

             

        

        
            
              Assigns the supplied service types.
            

             

             

        

        
            
              Gets the service descriptor.
            

        

        
            
                Tracks all components requiring decomission ( )
            

        

        
            
              Policy managing lifetime of components, and in particular their release process.
            

        

        
            
              Creates nested policy for scoped object tracking.
            

            

        

        
            
              Returns true
 if   is being tracked by this release policy, false
 otherwise.
            

            

            

        

        
            
              Releases   if it's being tracked by this release policy, invoking its  s and stops tracking it so that it can be claimed by the Garbage Collector.
            

            

        

        
            
              Asks the policy to track given object. The object will be released when a call to   is made.
            

            

            

            Thrown when   does NOT have its   flag set.

        

        
            
                Used to obtain   if present.
            

        

        
            
                Creates new policy which publishes its tracking components count to
                 
                and exposes diagnostics into
                 
                .
            

            

            

        

        
            
                Obtains   from given   if present.
            

            

            

        

        
            
                Creates new   from given  .
            

            

            

        

        
            
              No tracking of component instances are made.
            

        

        
            Default implementation for  . This implementation is quite simple, but still should be useful for 99% of situations.

        

        
            
              Implementors should use a strategy to obtain 
              valid references to properties and/or services 
              requested in the dependency model.
            

        

        
            
              Registers a sub resolver instance
            

            The subresolver instance

        

        
            
              This method is called with a delegate for firing the
              IKernelEvents.DependencyResolving event.
            

            kernel

            The delegate used to fire the event

        

        
            
              Unregisters a sub resolver instance previously registered
            

            The subresolver instance

        

        
            Registers a sub resolver instance

            The subresolver instance

        

        
            Initializes this instance with the specified dependency delegate.

            kernel

            The dependency delegate.

        

        
            Unregisters a sub resolver instance previously registered

            The subresolver instance

        

        
            Returns true if the resolver is able to satisfy the specified dependency.

            Creation context, which is a resolver itself

            Parent resolver

            Model of the component that is requesting the dependency

            The dependency model

            
                true

                if the dependency can be satisfied
            

        

        
            Try to resolve the dependency by checking the parameters in the model or checking the Kernel for the requested service.

            
                The dependency resolver has the following precedence order:
                
                    
                        The dependency is checked within the
                             
                        

                    

                    
                        The dependency is checked within the
                             
                            instance for the component

                    

                    
                        The dependency is checked within the registered
                             
                            s

                    

                    
                        Finally the resolver tries the normal flow which is using the configuration or other component to satisfy the dependency

                    

                

            

            Creation context, which is a resolver itself

            Parent resolver

            Model of the component that is requesting the dependency

            The dependency model

            The dependency resolved value or null

        

        
            This method rebuild the context for the parameter type. Naive implementation.

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            The inner exception.

        

        
            
              Initializes a new instance of the   class.
            

            The message.

        

        
            
              Initializes a new instance of the   class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Lazily adds component for  .
            

        

        
            
              Handle dependencies of services in the format of typed arrays.
            

            
              This is a complimentary   implementation 
              that is capable of satisfying dependencies of services as typed arrays.
              
                Note that it will take precedence over service override for arrays defined 
                on the configuration.
              

            

            
              In order to install the resolver:
              
                var kernel = new DefaultKernel();
                kernel.Resolver.AddSubResolver(new ArrayResolver(kernel));
              

            
              
                To use it, assuming that IService is on the container:
              

            
              
                public class Component
                {
                public Component(IService[] services)
                {
                }
                }
              

            

        

        
            
              More generic alternative to   and  .
              It supports arrays as well as any generic interface type assignable from arrays.
            

            
              The collection instance that is provided is read only, even for interfaces like  
            

        

        
            
              Handle dependencies of services in the format of generic IList.
            

            
              This is a complimentary   implementation 
              that is capable of satisfying dependencies of services generic IList.
              
                Note that it will take precedence over service override for lists defined 
                on the configuration.
              

            

            
              In order to install the resolver:
              
                var kernel = new DefaultKernel();
                kernel.Resolver.AddSubResolver(new ListResolver(kernel));
              

            
              
                To use it, assuming that IService is on the container:
              

            
              
                public class Component
                {
                public Component(IList&lt;IService&gt; services)
                {
                }
                }
              

            

        

        
            
              A subsystem is used by the MicroKernel to deal 
              with a specific concern.
            

        

        
            
              Initializes the subsystem
            

            

        

        
            
              Should perform the termination
              of the subsystem instance.
            

        

        
            
              This implementation of  
              does not try to obtain an external configuration by any means.
              Its only purpose is to serve as a base class for subclasses
              that might obtain the configuration node from anywhere.
            

        

        
            
              The contract used by the kernel to obtain
              external configuration for the components and
              facilities.
            

        

        
            
              Adds the child container configuration.
            

            The container's name.

            The config.

        

        
            
              Associates a configuration node with a component key
            

            item key

            Configuration node

        

        
            
              Associates a configuration node with a facility key
            

            item key

            Configuration node

        

        
            
              Returns the configuration node associated with 
              the specified child container key. Should return null
              if no association exists.
            

            item key

            

        

        
            
              Returns the configuration node associated with 
              the specified component key. Should return null
              if no association exists.
            

            item key

            

        

        
            
              Returns all configuration nodes for components
            

            

        

        
            
              Gets the child containers configuration nodes.
            

            

        

        
            
              Returns all configuration nodes for facilities
            

            

        

        
            
              Returns the configuration node associated with 
              the specified facility key. Should return null
              if no association exists.
            

            item key

            

        

        
            
              Returns all configuration nodes for installers
            

            

        

        
            
            

            

            

            

        

        
            
              Adds the child container configuration.
            

            The key.

            The config.

        

        
            
              Associates a configuration node with a component key
            

            item key

            Configuration node

        

        
            
              Associates a configuration node with a facility key
            

            item key

            Configuration node

        

        
            
              Returns the configuration node associated with
              the specified child container key. Should return null
              if no association exists.
            

            item key

            

        

        
            
              Returns the configuration node associated with
              the specified component key. Should return null
              if no association exists.
            

            item key

            

        

        
            
              Returns all configuration nodes for components
            

            

        

        
            
              Returns all configuration nodes for child containers
            

            

        

        
            
              Returns all configuration nodes for facilities
            

            

        

        
            
              Returns the configuration node associated with
              the specified facility key. Should return null
              if no association exists.
            

            item key

            

        

        
            
              Base implementation of  
            

        

        
            
              Implements a conversion logic to a type of a
              set of types.
            

        

        
            
              Returns true if this instance of ITypeConverter

              is able to handle the specified type.
            

            

            

        

        
            
              Returns true if this instance of ITypeConverter

              is able to handle the specified type with the specified 
              configuration
            

            

            

            

        

        
            
              Should perform the conversion from the
              string representation specified to the type
              specified.
            

            

            

            

        

        
            
              Should perform the conversion from the
              configuration node specified to the type
              specified.
            

            

            

            

        

        
            
              Returns true if this instance of ITypeConverter

              is able to handle the specified type with the specified
              configuration
            

            

            

            

            
              The default behavior is to just pass it to the normal CanHadnleType
              peeking into the configuration is used for some advanced functionality
            

        

        
            
              Initializes a new instance of the   class.
            

            The message.

        

        
            
              Initializes a new instance of the   class.
            

            The message.

            The inner exception.

        

        
            
              Initializes a new instance of the   class.
            

            The object that holds the serialized object data.

            The contextual information about the source or destination.

        

        
            
              Looks for a   on the type to be converted. 
              If found, the TypeConverter defined by the attribute is used to perform the conversion.
            

        

        
            
              Marker interface that signals that a converter
              depends on IKernel to be able to perform 
              the conversion.
            

        

        
            
            Attempts to utilize an existing   for conversion
            

        

        
            
              Creates the target type instance.
            

            The type.

            The configuration.

            

        

        
            
              Chooses the first non default constructor. Throws an exception if more than 
              one non default constructor is found
            

            

            The chosen constructor, or null
 if none was found

        

        
            
              Converts the constructor parameters.
            

            The constructor.

            The configuration.

            

        

        
            
              Converts the property values.
            

            The instance.

            The type.

            The configuration.

        

        
            
              Finds the child (case insensitive).
            

            The config.

            The name.

            

        

        
            
              Gets the conversion manager.
            

            The conversion manager.

        

        
            
              Converts a string representation to an enum value
            

        

        
            
              This interface is needed because we want to isolate ourself from
              the generic parameters, so we can work type safe inside the implementations,
              and still call from non generic types outside.
            

        

        
            
              Implements all standard conversions.
            

        

        
            
              Convert a type name to a Type instance.
            

        

        
            
              Declares a type as being convertible by a   and optionally defines the converter to be used
            

        

        
            
              Defines the   to be used to convert the type
            

        

        
            
              Defines the   to be used to convert the type
            

            

        

        
            
              Composition of all available conversion managers
            

        

        
            
              Establish a composition interface and a subsystem.
              Implementors should delegate the conversion to 
              a instance of a type converter.
            

        

        
            
              Register a type converter instance.
            

            

        

        
            
              Contract for SubSystem that wishes to keep and coordinate
              component registration.
            

        

        
            
              Register a new component resolver that can take part in the decision
              making about which handler to resolve
            

        

        
            
              Register a new component resolver that can take part in the decision
              making about which handler(s) to resolve and in which order
            

        

        
            
              Returns true if there is a component registered 
              for the specified name
            

            

            

        

        
            
              Returns true if there is a component registered 
              for the specified service
            

            

            

        

        
            
              Returns all   registered.
            

            

        

        
            
              Return  s where components are compatible
              with the specified service.
            

            

            

        

        
            
              Returns the   associated with
              the specified name.
            

            

            

        

        
            
              Returns the   associated with
              the specified service.
            

        

        
            
              Returns an array of   associated with
              the specified service.
            

            

            

        

        
            
              Implementors should register the   with all   its   exposes.
              The handler should also be accessible via unique   of its  .
            

            

            Thrown if the   of  's   is not unique and a handler with the same name has already been registered.

        

        
            
              Returns the number of components registered.
            

        

        
            
              Map(String, IHandler) to map component names to   Items in this dictionary are sorted in insertion order.
            

        

        
            
              Map(Type, IHandler) to map a service to   . If there is more than a single service of the type, only the first registered services is stored in this dictionary. It serve as a fast lookup for the common case of having a single handler for a type.
            

        

        
            
              Implementors of this interface allow to extend the way the container perform
              component resolution based on some application specific business logic.
            

            
              This is the sibling interface to  .
              This is dealing strictly with root components, while the   is dealing with
              dependent components.
            

        

        
            
              Whatever the selector has an opinion about resolving a component with the 
              specified service and key.
            

            The service key - can be null

            The service interface that we want to resolve

        

        
            
              Select the appropriate handler from the list of defined handlers.
              The returned handler should be a member from the   array.
            

            The service key - can be null

            The service interface that we want to resolve

            The defined handlers

            The selected handler, or null

        

        
            
              Pendent
            

        

        
            
              An implementation of a
 should 
              be able to return instances of  
              for a given resource identifier.
            

        

        
            
              Holds the keys used by Kernel to register/request 
              a subsystem.
            

        

        
            
              Key used for the configuration store subsystem
            

        

        
            
              Key used for the conversion manager
            

        

        
            
              Key used for the diagnostics subsystem
            

        

        
            
              Key used for the naming subsystem
            

        

        
            
              Key used for the resource subsystem
            

        

        
            
              Implementation of  .
              Do not support configuration inheritance.
            

        

        
            
              Interpreter of a specific language to describe 
              configuration nodes in a hierarchical manner.
            

        

        
            
              Should obtain the contents from the resource,
              interpret it and populate the  
              accordingly.
            

            

            

            

        

        
            
              Gets or sets the name of the environment.
            

            The name of the environment.

        

        
            
              Exposes the reference to  
              which the interpreter is likely to hold
            

        

        
            
              Provides common methods for those who wants 
              to implement  
            

        

        
            
              Should obtain the contents from the resource,
              interpret it and populate the  
              accordingly.
            

            

            

            

        

        
            
              Exposes the reference to  
              which the interpreter is likely to hold
            

            

        

        
            
              Gets or sets the name of the environment.
            

            The name of the environment.

        

        
            
              Reads the configuration from a XmlFile. Sample structure:
              
                &lt;configuration&gt;
                &lt;facilities&gt;
                &lt;facility id="myfacility"&gt;
                
                &lt;/facility&gt;
                &lt;/facilities&gt;
              
                &lt;components&gt;
                &lt;component id="component1"&gt;
                
                &lt;/component&gt;
                &lt;/components&gt;
                &lt;/configuration&gt;
              

            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Initializes a new instance of the   class.
            

            The filename.

        

        
            
              Initializes a new instance of the   class.
            

            The source.

        

        
            
              Initializes a new instance of the   class.
            

            Name of the environment.

        

        
            
              Initializes a new instance of the   class.
            

            Name of the environment.

            The resource sub system.

        

        
            
              Processes the element.
            

            The element.

            

        

        
            
              Processes the element.
            

            The element.

            

        

        
            
              Make a shallow copy of the nodeList.
            

            The nodeList to be copied.

            

        

        
            
              Accepts the specified node.
              Check if node has the same name as the processor and the node.NodeType
              is in the AcceptNodeTypes List
            

            The node.

            

        

        
            
              Convert and return child parameter into an XmlElement
              An exception will be throw in case the child node cannot be converted
            

            Parent node

            Node to be converted

            child node as XmlElement

        

        
            
            

            

            

            
              
                
                  
                    attributeValue

                  

                  propertyValue

                

              

            

        

        
            
              Processes the specified node list.
            

            The node list.

            The engine.

        

        
            
              Processes element attributes.
              if the attribute is include will append to the element
              all contents from the file.
              if the attribute has a property reference the reference will be
              expanded
            

            The element.

            

        

        
            
              Properties names can contain a-zA-Z0-9_. 
              i.e. #!{ my_node_name } || #{ my.node.name }
              spaces are trimmed
            

        

        
            
              Processes the string.
            

            The node.

            The value.

            The context.

        

        
            
              Accepts the specified node.
              Check if node has the same name as the processor and the node.NodeType
              is in the AcceptNodeTypes List
              NOTE: since the BatchRegistrationFacility already uses an include
              element we will distinguish between both by looking for the presence of an uri attribute
              we should revisit this later by using xml-namespaces
            

            The node.

            

        

        
            
            

            

            

            
              
                
                  
                    attributeValue

                  

                  propertyValue

                

              

            

        

        
            
              Pendent
            

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Initializes a new instance of the   class.
            

            Name of the environment.

            The resource sub system.

        

        
            
              Initializes a new instance of the   class.
            

        

        
            
              Collects all handlers for components in hosting container.
            

        

        
            
            	Base inteface for exposing diagnostic information about container, its components and extensions
            

             

        

        
            
            	Collects specified diagnostic information.
            

             

        

        
            
            	Collects all handlers for components in hosting container grouped by services they expose.
            	Within the service group, first one would be the default (the one obtained when callling   for the service type)
            

        

        
            
              Hosts different diagnostics available in the container.
            

        

        
            
              Adds   and makes it available as  .
            

            
              Thrown when a diagnostic for
               
              has already been added.
            

        

        
            
              Returns diagnostic registered with   or null
 if not present.
            

             

             

        

        
            
              Stupid name, but debugger views in Visual Studio display items in alphabetical order so if we want
              to have that item on top its name must be alphabetically before  
            

        

        
            
              Collects dependencies that are duplicated between constructors and properties.
            

        

        
            
              Detects components that are not extending Windsor's infrastructure yet depend on the container which usually means they use the container as service locator
              which is a bad practice and should be avoided. Consult the documentation for more details: http://j.mp/WindsorSL
            

        

        
            
              Exposes diagnostics about itself to the  .
            

            Usually simple type containing information provided to the  .

            
              Can be implemented by any type constituting part of container infrastructure. Should have a matching   registred in the container that knows
              how to find it and that prepares information from it for consumption.
            

        

        
            
              Collects   for the   and calls   if any data available.
            

            

            pass-through context. Used by the inspector.

        

        
            
              Gets the environment information (name). Implementors should 
              use to define their environments and how those affect the configuration.
            

        

        
            
              Gets the name of the environment.
            

            

        

        
            
              Installs all the components from the App.Config file.
            

            

        

        
            
              Installs all the component from the xml configuration.
            

            The xml configuration resource.

            

        

        
            
              Installs all the component from the xml configuration file.
            

            The xml configuration file.

            

        

        
            
              Delegate to provide environment name.
            

            The environment name.

        

        
            
              Initializes a new instance of the ConfigurationInstaller class.
            

        

        
            
              Sets the configuration environment name.
            

            The environment name.

            

        

        
            
              Set the configuration environment strategy.
            

            The environment strategy.

            

        

        
            
              Default   implementation.
            

        

        
            
              Installs the components and facilities based on the
              information on the configuration store.
            

        

        
            
              Perform installation.
            

            Target container

            Configuration store

        

        
            
              Perform installation.
            

            Target container

            Configuration store

        

        
            
                Scans the assembly containing specified type for types implementing  , instantiates them and returns so that   can
                install them.
            

             

        

        
            
                Scans the assembly containing specified type for types implementing  , instantiates using given   and returns so that
                  can install them.
            

             

        

        
            
                Scans the assembly containing specified type for types implementing  , instantiates them and returns so that   can
                install them.
            

             

        

        
            
                Scans the assembly containing specified type for types implementing  , instantiates using given   and returns so that
                  can install them.
            

             

        

        
            
                Scans assemblies in directory specified by   for types implementing  , instantiates and returns so that
                  can install them.
            

             

             

        

        
            
                Scans assemblies in directory specified by   for types implementing  , instantiates using given   and
                returns so that   can install them.
            

             

             

             

        

        
            
                Scans current assembly and all refernced assemblies with the same first part of the name for types implementing  , instantiates and returns so that
                  can install them.
            

             

            
                Assemblies are considered to belong to the same application based on the first part of the name. For example if the method is called from within MyApp.exe
 and MyApp.exe
 references
                MyApp.SuperFeatures.dll
, mscorlib.dll
 and ThirdPartyCompany.UberControls.dll
 the MyApp.exe
 and MyApp.SuperFeatures.dll
 will be scanned for installers, and other
                assemblies will be ignored.
            

        

        
            
                Scans current assembly and all refernced assemblies with the same first part of the name for types implementing  , instantiates using given
                  and returns so that   can install them.
            

             

             

            
                Assemblies are considered to belong to the same application based on the first part of the name. For example if the method is called from within MyApp.exe
 and MyApp.exe
 references
                MyApp.SuperFeatures.dll
, mscorlib.dll
 and ThirdPartyCompany.UberControls.dll
 the MyApp.exe
 and MyApp.SuperFeatures.dll
 will be scanned for installers, and other
                assemblies will be ignored.
            

        

        
            
                Scans the specified assembly with specified name for types implementing  , instantiates them and returns so that   can
                install them.
            

             

        

        
            
                Scans the specified assembly with specified name for types implementing  , instantiates using given   and returns so that
                  can install them.
            

             

        

        
            
                Scans the assembly with specified name for types implementing  , instantiates them and returns so that   can install
                them.
            

             

        

        
            
                Scans the assembly with specified name for types implementing  , instantiates using given   and returns so that
                  can install them.
            

             

        

        
            
                Scans assembly that contains code calling this method for types implementing  , instantiates them and returns so that  
                can install them.
            

             

        

        
            
                Scans assembly that contains code calling this method for types implementing  , instantiates using given   and returns so that
                  can install them.
            

             

        

        
            
              Helper class used by   to filter/order and instantiate   implementations
            

        

        
            
              Performs custom instantiation of given  
            

            
              Default implementation uses public parameterless constructor to create the instance.
            

        

        
            
              Performs custom filtering/ordering of given set of types.
            

            Set of concrete class types implementing   interface.

            Transformed  .

            
              Default implementation simply returns types passed into it.
            

        

        
            
              The IWindsorContainer
 interface exposes all the 
              functionality the Windsor implements.
            

        

        
            
              Registers a subcontainer. The components exposed
              by this container will be accessible from subcontainers.
            

            

        

        
            
              Registers a facility within the container.
            

            The   to add to the container.

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            The callback for creation.

            

        

        
            
              Gets a child container instance by name.
            

            The container's name.

            The child container instance or null

        

        
            
              Runs the   so that they can register components in the container. For details see the documentation at http://j.mp/WindsorInstall
            

            
              In addition to instantiating and passing every installer inline you can use helper methods on   class to automatically instantiate and run your installers.
              You can also use   class to install components and/or run aditional installers specofied in a configuration file.
            

            The container.

            
              
                container.Install(new YourInstaller1(), new YourInstaller2(), new YourInstaller3());
              

            

            
              
                container.Install(FromAssembly.This(), Configuration.FromAppConfig(), new SomeOtherInstaller());
              

            

        

        
            
              Registers the components with the  . The instances of   are produced by fluent registration API.
              Most common entry points are   method to register a single type or (recommended in most cases) 
               .
              Let the Intellisense drive you through the fluent API past those entry points. For details see the documentation at http://j.mp/WindsorApi
            

            
              
                container.Register(Component.For&lt;IService&gt;().ImplementedBy&lt;DefaultService&gt;().LifestyleTransient());
              

            

            
              
                container.Register(Classes.FromThisAssembly().BasedOn&lt;IService&gt;().WithServiceDefaultInterfaces().Configure(c =&gt; c.LifestyleTransient()));
              

            

            The component registrations created by  ,   or different entry method to the fluent API.

            The container.

        

        
            
              Releases a component instance
            

            

        

        
            
              Remove a child container
            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            Service type

            The component instance

        

        
            
              Returns a component instance by the service
            

            Service type

            

            The component instance

        

        
            
              Returns a component instance by the service
            

            Service type

            

            The component instance

        

        
            
              Returns a component instance by the key
            

            Component's key

            Service type

            The Component instance

        

        
            
              Returns a component instance by the key
            

            Service type

            Component's key

            

            The Component instance

        

        
            
              Returns a component instance by the key
            

            Service type

            Component's key

            

            The Component instance

        

        
            
              Returns a component instance by the key
            

            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

            

        

        
            
              Resolve all valid components that match this type.
            

            The service type

        

        
            
              Resolve all valid components that match this service
              the service to match

            

        

        
            
              Resolve all valid components that match this service
              the service to match

              Arguments to resolve the service

            

        

        
            
              Resolve all valid components that match this service
              the service to match

              Arguments to resolve the service

            

        

        
            
              Resolve all valid components that match this type.
              The service type

              Arguments to resolve the service

            

        

        
            
              Resolve all valid components that match this type.
              The service type

              Arguments to resolve the service

            

        

        
            
              Registers a facility within the container.
            

            The key by which the   gets indexed.

            The   to add to the container.

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            

            

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            

            The callback for creation.

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns the inner instance of the MicroKernel
            

        

        
            
              Gets the container's name
            

            
              Only useful when child containers are being used
            

            The container's name.

        

        
            
              Gets or sets the parent container if this instance
              is a sub container.
            

        

        
            
              This interface should be implemented by classes
              that are available in a bigger context, exposing
              the container to different areas in the same application.
              
                For example, in Web application, the (global) HttpApplication
                subclasses should implement this interface to expose 
                the configured container
              

            

        

        
            
              Obtains the interceptors associated with the component.
            

            The kernel instance

            The component model

            The creation context

            interceptors array

        

        
            
              This implementation of   relies 
              on DynamicProxy to expose proxy capabilities.
            

            
              Note that only virtual methods can be intercepted in a 
              concrete class. However, if the component 
              was registered with a service interface, we proxy
              the interface and the methods don't need to be virtual,
            

        

        
            
              Constructs a DefaultProxyFactory
            

        

        
            
              Creates the proxy for the supplied component.
            

             The kernel. 

             The target. 

             The model. 

             The constructor arguments. 

             The creation context 

             The component proxy. 

        

        
            
              Determines if the component requires a target instance for proxying.
            

             The kernel. 

             The model. 

             true if an instance is required. 

        

        
            
              Implementation of  
              which delegates to   implementation.
            

        

        
            
              Constructs a container without any external 
              configuration reference
            

        

        
            
              Constructs a container using the specified 
                implementation.
            

            The instance of an   implementation.

        

        
            
              Constructs a container using the specified 
                implementation.
            

            The instance of an   implementation.

        

        
            
              Initializes a new instance of the   class.
            

            The interpreter.

            The environment info.

        

        
            
              Initializes a new instance of the   class using a
              resource pointed to by the parameter. That may be a file, an assembly embedded resource, a UNC path or a config file section.
              
                Equivalent to the use of new WindsorContainer(new XmlInterpreter(configurationUri))

              

            

            The XML file.

        

        
            
              Constructs a container using the specified  
              implementation. Rarely used.
            

            
              This constructs sets the Kernel.ProxyFactory property to
              Proxy.DefaultProxyFactory

            

            Kernel instance

            Installer instance

        

        
            
              Constructs a container using the specified  
              implementation. Rarely used.
            

            
              This constructs sets the Kernel.ProxyFactory property to
              Proxy.DefaultProxyFactory

            

            Container's name

            Kernel instance

            Installer instance

        

        
            
              Constructs with a given  .
            

            A instance of an  .

        

        
            
              Constructs a container assigning a parent container 
              before starting the dependency resolution.
            

            The instance of an  

            The instance of an   implementation

        

        
            
              Initializes a new instance of the   class.
            

            The container's name.

            The parent.

            The interpreter.

        

        
            
              Executes Dispose on underlying  
            

        

        
            
              Registers a subcontainer. The components exposed
              by this container will be accessible from subcontainers.
            

            

        

        
            
              Registers a facility within the container.
            

            

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            The callback for creation.

            

        

        
            
              Gets a child container instance by name.
            

            The container's name.

            The child container instance or null

        

        
            
              Runs the   so that they can register components in the container. For details see the documentation at http://j.mp/WindsorInstall
            

            
              In addition to instantiating and passing every installer inline you can use helper methods on   class to automatically instantiate and run your installers.
              You can also use   class to install components and/or run aditional installers specofied in a configuration file.
            

            The container.

            
              
                container.Install(new YourInstaller1(), new YourInstaller2(), new YourInstaller3());
              

            

            
              
                container.Install(FromAssembly.This(), Configuration.FromAppConfig(), new SomeOtherInstaller());
              

            

        

        
            
              Registers the components with the  . The instances of   are produced by fluent registration API.
              Most common entry points are   method to register a single type or (recommended in most cases) 
               .
              Let the Intellisense drive you through the fluent API past those entry points. For details see the documentation at http://j.mp/WindsorApi
            

            
              
                container.Register(Component.For&lt;IService&gt;().ImplementedBy&lt;DefaultService&gt;().LifestyleTransient());
              

            

            
              
                container.Register(Classes.FromThisAssembly().BasedOn&lt;IService&gt;().WithServiceDefaultInterfaces().Configure(c =&gt; c.LifestyleTransient()));
              

            

            The component registrations created by  ,   or different entry method to the fluent API.

            The container.

        

        
            
              Releases a component instance
            

            

        

        
            
              Removes (unregisters) a subcontainer.  The components exposed by this container
              will no longer be accessible to the child container.
            

            

        

        
            
              Returns a component instance by the service
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the service
            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

        

        
            
              Resolve all valid components that match this type.
            

            The service type

        

        
            
              Resolve all valid components that match this type.
              The service type

              Arguments to resolve the service

            

        

        
            
              Resolve all valid components that match this type.
              The service type

              Arguments to resolve the service

            

        

        
            
              Registers a facility within the container.
            

            

            

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            

            

        

        
            
              Creates and adds an   facility to the container.
            

            The facility type.

            

            The callback for creation.

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns a component instance by the key
            

            

            

            

        

        
            
              Returns the inner instance of the MicroKernel
            

        

        
            
              Gets the container's name
            

            
              Only useful when child containers are being used
            

            The container's name.

        

        
            
              Gets or sets the parent container if this instance
              is a sub container.
            

        

        
            
              Implementation of   and   that uses a   or   as its component's source.
            

        

    







bin/kCura.Config.dll









		00004550
		
		0003
		52b4d7ad
		00000000
		00000000
		00f0
		






		020b
		11.00
		00003e00
		00000600
		00000000
		00000000
		00002000
		0000000011000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		0000a000
		00000400
		00014286
		
		34144
		0000000000400000
		0000000000004000
		0000000000100000
		0000000000002000
		00000000
		00000010
		
		00008000
		000003c0
		00004800
		00001970
		00006000
		0000001c

		





		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.Crypto.dll









		00004550
		
		0003
		52b4d798
		00000000
		00000000
		00e0
		







		010b
		11.00
		00003200
		00000600
		00000000
		000050de
		00002000
		00006000
		11000000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0000a000
		00000200
		0000f452
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0000508c
		0000004f
		
		00006000
		000003c0
		00003a00
		00001970
		
		00008000
		0000000c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		000030e4
		00002000
		00003200
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003c0
		00006000
		00000400
		00003400
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00008000
		00000200
		00003800
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.Data.RowDataGateway.dll









		00004550
		
		0003
		52b4d7ad
		00000000
		00000000
		00f0
		






		020b
		11.00
		0000a600
		00000600
		00000000
		00000000
		00002000
		0000000011000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00012000
		00000400
		0000e9cc
		
		34144
		0000000000400000
		0000000000004000
		0000000000100000
		0000000000002000
		00000000
		00000010
		
		00010000
		000003f0
		0000b000
		00001970
		0000e000
		0000001c

		





		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.EventHandler.dll









		00004550
		
		0004
		52b4d79a
		00000000
		00000000
		00e0
		







		010b
		11.00
		0000a400
		00000800
		00000000
		0000c27e
		00002000
		0000e000
		11000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00014000
		00000400
		0000d6dc
		
		34144
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0000c22c
		0000004f
		
		00010000
		000003d8
		0000b000
		00001970
		
		00012000
		0000000c
		0000e000
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0000a284
		00002000
		0000a400
		00000400
		00000000
		00000000
		0000
		0000
		



		

		.sdata
		00000138
		0000e000
		00000200
		0000a800
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003d8
		00010000
		00000400
		0000aa00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00012000
		00000200
		0000ae00
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.IntegrationPoints.Core.dll









		00004550
		
		0002
		54627e21
		00000000
		00000000
		00f0
		






		020b
		11.00
		00000e00
		00000600
		00000000
		00000000
		00002000
		0000000180000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00006000
		00000200
		00000000
		
		34144
		0000000000400000
		0000000000004000
		0000000000100000
		0000000000002000
		00000000
		00000010
		
		00004000
		00000430

		





		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.IntegrationPoints.Data.dll









		00004550
		
		0002
		54627e20
		00000000
		00000000
		00f0
		






		020b
		11.00
		00004400
		00000600
		00000000
		00000000
		00002000
		0000000180000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		0000a000
		00000200
		00000000
		
		34144
		0000000000400000
		0000000000004000
		0000000000100000
		0000000000002000
		00000000
		00000010
		
		00008000
		00000430

		





		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.IntegrationPoints.Web.dll









		00004550
		
		0002
		54627e21
		00000000
		00000000
		00f0
		






		020b
		11.00
		00003000
		00000600
		00000000
		00000000
		00002000
		0000000180000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00008000
		00000200
		00000000
		
		34144
		0000000000400000
		0000000000004000
		0000000000100000
		0000000000002000
		00000000
		00000010
		
		00006000
		00000428

		





		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/kCura.Relativity.Client.dll









		00004550
		
		0003
		52b4d9eb
		00000000
		00000000
		00e0
		






		010b
		8.00
		00067800
		00000600
		00000000
		0006976a
		00002000
		0006a000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0006e000
		00000200
		00078096
		
		34144
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0006971c
		0000004c
		
		0006a000
		000003e0
		00068000
		00001970
		
		0006c000
		0000000c
		00069780
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		000677ef
		00002000
		00067800
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003e0
		0006a000
		00000400
		00067a00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0006c000
		00000200
		00067e00
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Microsoft.Web.Infrastructure.dll









		00004550
		
		0003
		4d25020a
		00000000
		00000000
		00e0
		







		010b
		8.00
		00009000
		00000800
		00000000
		0000aeee
		00002000
		0000c000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00010000
		00000200
		0000c175
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0000aea0
		0000004b
		
		0000c000
		00000440
		00009a00
		00001768
		
		0000e000
		0000000c
		000044e4
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00008ef4
		00002000
		00009000
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000440
		0000c000
		00000600
		00009200
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0000e000
		00000200
		00009800
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Microsoft.Web.Mvc.FixedDisplayModes.dll









		00004550
		
		0003
		51168d1b
		00000000
		00000000
		00e0
		







		010b
		11.00
		00003800
		00000800
		00000000
		0000577e
		00002000
		00006000
		10000000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0000a000
		00000200
		00010249
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00005724
		00000057
		
		00006000
		00000460
		00004200
		00001a58
		
		00008000
		0000000c
		000055ec
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00003784
		00002000
		00003800
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000460
		00006000
		00000600
		00003a00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00008000
		00000200
		00004000
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Newtonsoft.Json.dll









		00004550
		
		0003
		5444b7db
		00000000
		00000000
		00e0
		







		010b
		11.00
		0007b400
		00000800
		00000000
		0007d30e
		00002000
		0007e000
		10000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		00082000
		00000200
		000850cb
		
		34144
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0007d2b4
		00000057
		
		0007e000
		00000428
		
		00080000
		0000000c
		0007d17c
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0007b314
		00002000
		0007b400
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000428
		0007e000
		00000600
		0007b600
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00080000
		00000200
		0007bc00
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/Newtonsoft.Json.xml




    
        Newtonsoft.Json

    

    
        
            
            Represents a BSON Oid (object id).
            

        

        
            
            Initializes a new instance of the   class.
            

            The Oid value.

        

        
            
            Gets or sets the value of the Oid.
            

            The value of the Oid.

        

        
            
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            

        

        
            
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            

        

        
            
            Initializes a new instance of the   class with the specified  .
            

        

        
            
            Reads the next JSON token from the stream.
            

            true if the next token was read successfully; false if there are no more tokens to read.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A   or a null reference if the next JSON token is null. This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Skips the children of the current token.
            

        

        
            
            Sets the current token.
            

            The new token.

        

        
            
            Sets the current token and value.
            

            The new token.

            The value.

        

        
            
            Sets the state based on current token type.
            

        

        
            
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            

        

        
            
            Releases unmanaged and - optionally - managed resources
            

            true
 to release both managed and unmanaged resources; false
 to release only unmanaged resources.

        

        
            
            Changes the   to Closed. 
            

        

        
            
            Gets the current reader state.
            

            The current reader state.

        

        
            
            Gets or sets a value indicating whether the underlying stream or
              should be closed when the reader is closed.
            

            
            true to close the underlying stream or   when
            the reader is closed; otherwise false. The default is true.
            

        

        
            
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            

            
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            

        

        
            
            Gets the quotation mark character used to enclose the value of a string.
            

        

        
            
            Get or set how   time zones are handling when reading JSON.
            

        

        
            
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            

        

        
            
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            

        

        
            
            Get or set how custom date formatted strings are parsed when reading JSON.
            

        

        
            
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a  .
            

        

        
            
            Gets the type of the current JSON token. 
            

        

        
            
            Gets the text value of the current JSON token.
            

        

        
            
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            

        

        
            
            Gets the depth of the current token in the JSON document.
            

            The depth of the current token in the JSON document.

        

        
            
            Gets the path of the current JSON token. 
            

        

        
            
            Gets or sets the culture used when reading JSON. Defaults to  .
            

        

        
            
            Specifies the state of the reader.
            

        

        
            
            The Read method has not been called.
            

        

        
            
            The end of the file has been reached successfully.
            

        

        
            
            Reader is at a property.
            

        

        
            
            Reader is at the start of an object.
            

        

        
            
            Reader is in an object.
            

        

        
            
            Reader is at the start of an array.
            

        

        
            
            Reader is in an array.
            

        

        
            
            The Close method has been called.
            

        

        
            
            Reader has just read a value.
            

        

        
            
            Reader is at the start of a constructor.
            

        

        
            
            Reader in a constructor.
            

        

        
            
            An error occurred that prevents the read operation from continuing.
            

        

        
            
            The end of the file has been reached successfully.
            

        

        
            
            Initializes a new instance of the   class.
            

            The stream.

        

        
            
            Initializes a new instance of the   class.
            

            The reader.

        

        
            
            Initializes a new instance of the   class.
            

            The stream.

            if set to true
 the root object will be read as a JSON array.

            The   used when reading   values from BSON.

        

        
            
            Initializes a new instance of the   class.
            

            The reader.

            if set to true
 the root object will be read as a JSON array.

            The   used when reading   values from BSON.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            
            A   or a null reference if the next JSON token is null. This method will return null
 at the end of an array.
            

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            
            A  . This method will return null
 at the end of an array.
            

        

        
            
            Reads the next JSON token from the stream.
            

            
            true if the next token was read successfully; false if there are no more tokens to read.
            

        

        
            
            Changes the   to Closed.
            

        

        
            
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            

            
            	true
 if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, false
.
            

        

        
            
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            

            
            	true
 if the root object will be read as a JSON array; otherwise, false
.
            

        

        
            
            Gets or sets the   used when reading   values from BSON.
            

            The   used when reading   values from BSON.

        

        
            
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            

        

        
            
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            

        

        
            
            Creates an instance of the JsonWriter
 class. 
            

        

        
            
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            

        

        
            
            Closes this stream and the underlying stream.
            

        

        
            
            Writes the beginning of a Json object.
            

        

        
            
            Writes the end of a Json object.
            

        

        
            
            Writes the beginning of a Json array.
            

        

        
            
            Writes the end of an array.
            

        

        
            
            Writes the start of a constructor with the given name.
            

            The name of the constructor.

        

        
            
            Writes the end constructor.
            

        

        
            
            Writes the property name of a name/value pair on a JSON object.
            

            The name of the property.

        

        
            
            Writes the property name of a name/value pair on a JSON object.
            

            The name of the property.

            A flag to indicate whether the text should be escaped when it is written as a JSON property name.

        

        
            
            Writes the end of the current Json object or array.
            

        

        
            
            Writes the current   token and its children.
            

            The   to read the token from.

        

        
            
            Writes the current   token.
            

            The   to read the token from.

            A flag indicating whether the current token's children should be written.

        

        
            
            Writes the specified end token.
            

            The end token to write.

        

        
            
            Writes indent characters.
            

        

        
            
            Writes the JSON value delimiter.
            

        

        
            
            Writes an indent space.
            

        

        
            
            Writes a null value.
            

        

        
            
            Writes an undefined value.
            

        

        
            
            Writes raw JSON without changing the writer's state.
            

            The raw JSON to write.

        

        
            
            Writes raw JSON where a value is expected and updates the writer's state.
            

            The raw JSON to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            An error will raised if the value cannot be written as a single JSON token.
            

            The   value to write.

        

        
            
            Writes out a comment /*...*/
 containing the specified text. 
            

            Text to place inside the comment.

        

        
            
            Writes out the given white space.
            

            The string of white space characters.

        

        
            
            Sets the state of the JsonWriter,
            

            The JsonToken being written.

            The value being written.

        

        
            
            Gets or sets a value indicating whether the underlying stream or
              should be closed when the writer is closed.
            

            
            true to close the underlying stream or   when
            the writer is closed; otherwise false. The default is true.
            

        

        
            
            Gets the top.
            

            The top.

        

        
            
            Gets the state of the writer.
            

        

        
            
            Gets the path of the writer. 
            

        

        
            
            Indicates how JSON text output is formatted.
            

        

        
            
            Get or set how dates are written to JSON text.
            

        

        
            
            Get or set how   time zones are handling when writing JSON text.
            

        

        
            
            Get or set how strings are escaped when writing JSON text.
            

        

        
            
            Get or set how special floating point numbers, e.g.  ,
              and  ,
            are written to JSON text.
            

        

        
            
            Get or set how   and   values are formatting when writing JSON text.
            

        

        
            
            Gets or sets the culture used when writing JSON. Defaults to  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The stream.

        

        
            
            Initializes a new instance of the   class.
            

            The writer.

        

        
            
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            

        

        
            
            Writes the end.
            

            The token.

        

        
            
            Writes out a comment /*...*/
 containing the specified text.
            

            Text to place inside the comment.

        

        
            
            Writes the start of a constructor with the given name.
            

            The name of the constructor.

        

        
            
            Writes raw JSON.
            

            The raw JSON to write.

        

        
            
            Writes raw JSON where a value is expected and updates the writer's state.
            

            The raw JSON to write.

        

        
            
            Writes the beginning of a Json array.
            

        

        
            
            Writes the beginning of a Json object.
            

        

        
            
            Writes the property name of a name/value pair on a Json object.
            

            The name of the property.

        

        
            
            Closes this stream and the underlying stream.
            

        

        
            
            Writes a   value.
            An error will raised if the value cannot be written as a single JSON token.
            

            The   value to write.

        

        
            
            Writes a null value.
            

        

        
            
            Writes an undefined value.
            

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value that represents a BSON object id.
            

            The Object ID value to write.

        

        
            
            Writes a BSON regex.
            

            The regex pattern.

            The regex options.

        

        
            
            Gets or sets the   used when writing   values to BSON.
            When set to   no conversion will occur.
            

            The   used when writing   values to BSON.

        

        
            
            Specifies how constructors are used when initializing objects during deserialization by the  .
            

        

        
            
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            

        

        
            
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            

        

        
            
            Converts a binary value to and from a base 64 string value.
            

        

        
            
            Converts an object to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Gets the   of the JSON produced by the JsonConverter.
            

            The   of the JSON produced by the JsonConverter.

        

        
            
            Gets a value indicating whether this   can read JSON.
            

            true
 if this   can read JSON; otherwise, false
.

        

        
            
            Gets a value indicating whether this   can write JSON.
            

            true
 if this   can write JSON; otherwise, false
.

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts a   to and from JSON and BSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Create a custom object
            

            The object type to convert.

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Creates an object which will then be populated by the serializer.
            

            Type of the object.

            The created object.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Gets a value indicating whether this   can write JSON.
            

            
            	true
 if this   can write JSON; otherwise, false
.
            

        

        
            
            Converts a   to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified value type.
            

            Type of the value.

            
            	true
 if this instance can convert the specified value type; otherwise, false
.
            

        

        
            
            Converts a   to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified value type.
            

            Type of the value.

            
            	true
 if this instance can convert the specified value type; otherwise, false
.
            

        

        
            
            Provides a base class for converting a   to and from JSON.
            

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts a F# discriminated union type to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts an Entity Framework EntityKey to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts an ExpandoObject to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Gets a value indicating whether this   can write JSON.
            

            
            	true
 if this   can write JSON; otherwise, false
.
            

        

        
            
            Converts a   to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Gets or sets the date time styles used when converting a date to and from JSON.
            

            The date time styles used when converting a date to and from JSON.

        

        
            
            Gets or sets the date time format used when converting a date to and from JSON.
            

            The date time format used when converting a date to and from JSON.

        

        
            
            Gets or sets the culture used when converting a date to and from JSON.
            

            The culture used when converting a date to and from JSON.

        

        
            
            Converts a   to and from a JavaScript date constructor (e.g. new Date(52231943)).
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing property value of the JSON that is being converted.

            The calling serializer.

            The object value.

        

        
            
            Converts a   to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts a   to and from JSON and BSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts an   to and from its name string value.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Gets or sets a value indicating whether the written enum text should be camel case.
            

            true
 if the written enum text will be camel case; otherwise, false
.

        

        
            
            Gets or sets a value indicating whether integer values are allowed.
            

            true
 if integers are allowed; otherwise, false
.

        

        
            
            Converts a   to and from a string (e.g. "1.2.3.4").
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The value.

            The calling serializer.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing property value of the JSON that is being converted.

            The calling serializer.

            The object value.

        

        
            
            Determines whether this instance can convert the specified object type.
            

            Type of the object.

            
            	true
 if this instance can convert the specified object type; otherwise, false
.
            

        

        
            
            Converts XML to and from JSON.
            

        

        
            
            Writes the JSON representation of the object.
            

            The   to write to.

            The calling serializer.

            The value.

        

        
            
            Reads the JSON representation of the object.
            

            The   to read from.

            Type of the object.

            The existing value of object being read.

            The calling serializer.

            The object value.

        

        
            
            Checks if the attributeName is a namespace attribute.
            

            Attribute name to test.

            The attribute name prefix if it has one, otherwise an empty string.

            True if attribute name is for a namespace attribute, otherwise false.

        

        
            
            Determines whether this instance can convert the specified value type.
            

            Type of the value.

            
            	true
 if this instance can convert the specified value type; otherwise, false
.
            

        

        
            
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            

            The name of the deserialize root element.

        

        
            
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            

            true
 if the array attibute is written to the XML; otherwise, false
.

        

        
            
            Gets or sets a value indicating whether to write the root JSON object.
            

            true
 if the JSON root object is omitted; otherwise, false
.

        

        
            
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            

        

        
            
            Floating point numbers are parsed to  .
            

        

        
            
            Floating point numbers are parsed to  .
            

        

        
            
            Specifies how dates are formatted when writing JSON text.
            

        

        
            
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            

        

        
            
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            

        

        
            
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            

        

        
            
            Date formatted strings are not parsed to a date type and are read as strings.
            

        

        
            
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to  .
            

        

        
            
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to  .
            

        

        
            
            Specifies how to treat the time value when converting between string and  .
            

        

        
            
            Treat as local time. If the   object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            

        

        
            
            Treat as a UTC. If the   object represents a local time, it is converted to a UTC.
            

        

        
            
            Treat as a local time if a   is being converted to a string.
            If a string is being converted to  , convert to a local time if a time zone is specified.
            

        

        
            
            Time zone information should be preserved when converting.
            

        

        
            
            Specifies default value handling options for the  .
            

            
               
               
            

        

        
            
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            

        

        
            
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. null
 for objects and nullable types; 0
 for integers,
            decimals and floating point numbers; and false
 for booleans). The default value ignored can be changed by
            placing the   on the property.
            

        

        
            
            Members with a default value but no JSON will be set to their default value when deserializing.
            

        

        
            
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            

        

        
            
            Specifies float format handling options when writing special floating point numbers, e.g.  ,
              and   with  .
            

        

        
            
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            

        

        
            
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            

        

        
            
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a   property, null for a   property.
            

        

        
            
            Specifies formatting options for the  .
            

        

        
            
            No special formatting is applied. This is the default.
            

        

        
            
            Causes child objects to be indented according to the   and   settings.
            

        

        
            
            Provides an interface to enable a class to return line and position information.
            

        

        
            
            Gets a value indicating whether the class can return line information.
            

            
            	true
 if LineNumber and LinePosition can be provided; otherwise, false
.
            

        

        
            
            Gets the current line number.
            

            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).

        

        
            
            Gets the current line position.
            

            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).

        

        
            
            Instructs the   how to serialize the collection.
            

        

        
            
            Instructs the   how to serialize the object.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class with the specified container Id.
            

            The container Id.

        

        
            
            Gets or sets the id.
            

            The id.

        

        
            
            Gets or sets the title.
            

            The title.

        

        
            
            Gets or sets the description.
            

            The description.

        

        
            
            Gets the collection's items converter.
            

            The collection's items converter.

        

        
            
            The parameter list to use when constructing the JsonConverter described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the JsonConverter that exactly matches the number,
            order, and type of these parameters.
            

            
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            

        

        
            
            Gets or sets a value that indicates whether to preserve object references.
            

            
            	true
 to keep object reference; otherwise, false
. The default is false
.
            

        

        
            
            Gets or sets a value that indicates whether to preserve collection's items references.
            

            
            	true
 to keep collection's items object references; otherwise, false
. The default is false
.
            

        

        
            
            Gets or sets the reference loop handling used when serializing the collection's items.
            

            The reference loop handling.

        

        
            
            Gets or sets the type name handling used when serializing the collection's items.
            

            The type name handling.

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class with a flag indicating whether the array can contain null items
            

            A flag indicating whether the array can contain null items.

        

        
            
            Initializes a new instance of the   class with the specified container Id.
            

            The container Id.

        

        
            
            Gets or sets a value indicating whether null items are allowed in the collection.
            

            true
 if null items are allowed in the collection; otherwise, false
.

        

        
            
            Instructs the   to use the specified constructor when deserializing that object.
            

        

        
            
            Provides methods for converting between common language runtime types and JSON types.
            

            
               
            

        

        
            
            Represents JavaScript's boolean value true as a string. This field is read-only.
            

        

        
            
            Represents JavaScript's boolean value false as a string. This field is read-only.
            

        

        
            
            Represents JavaScript's null as a string. This field is read-only.
            

        

        
            
            Represents JavaScript's undefined as a string. This field is read-only.
            

        

        
            
            Represents JavaScript's positive infinity as a string. This field is read-only.
            

        

        
            
            Represents JavaScript's negative infinity as a string. This field is read-only.
            

        

        
            
            Represents JavaScript's NaN as a string. This field is read-only.
            

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation using the   specified.
            

            The value to convert.

            The format the date will be converted to.

            The time zone handling when the date is converted to a string.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation using the   specified.
            

            The value to convert.

            The format the date will be converted to.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the    to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            The string delimiter character.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            The string delimiter character.

            The string escape handling.

            A JSON string representation of the  .

        

        
            
            Converts the   to its JSON string representation.
            

            The value to convert.

            A JSON string representation of the  .

        

        
            
            Serializes the specified object to a JSON string.
            

            The object to serialize.

            A JSON string representation of the object.

        

        
            
            Serializes the specified object to a JSON string using formatting.
            

            The object to serialize.

            Indicates how the output is formatted.

            
            A JSON string representation of the object.
            

        

        
            
            Serializes the specified object to a JSON string using a collection of  .
            

            The object to serialize.

            A collection converters used while serializing.

            A JSON string representation of the object.

        

        
            
            Serializes the specified object to a JSON string using formatting and a collection of  .
            

            The object to serialize.

            Indicates how the output is formatted.

            A collection converters used while serializing.

            A JSON string representation of the object.

        

        
            
            Serializes the specified object to a JSON string using  .
            

            The object to serialize.

            The   used to serialize the object.
            If this is null, default serialization settings will be used.

            
            A JSON string representation of the object.
            

        

        
            
            Serializes the specified object to a JSON string using a type, formatting and  .
            

            The object to serialize.

            The   used to serialize the object.
            If this is null, default serialization settings will be used.

            
            The type of the value being serialized.
            This parameter is used when   is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            

            
            A JSON string representation of the object.
            

        

        
            
            Serializes the specified object to a JSON string using formatting and  .
            

            The object to serialize.

            Indicates how the output is formatted.

            The   used to serialize the object.
            If this is null, default serialization settings will be used.

            
            A JSON string representation of the object.
            

        

        
            
            Serializes the specified object to a JSON string using a type, formatting and  .
            

            The object to serialize.

            Indicates how the output is formatted.

            The   used to serialize the object.
            If this is null, default serialization settings will be used.

            
            The type of the value being serialized.
            This parameter is used when   is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            

            
            A JSON string representation of the object.
            

        

        
            
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            

            The object to serialize.

            
            A task that represents the asynchronous serialize operation. The value of the TResult
 parameter contains a JSON string representation of the object.
            

        

        
            
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            

            The object to serialize.

            Indicates how the output is formatted.

            
            A task that represents the asynchronous serialize operation. The value of the TResult
 parameter contains a JSON string representation of the object.
            

        

        
            
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of  .
            Serialization will happen on a new thread.
            

            The object to serialize.

            Indicates how the output is formatted.

            The   used to serialize the object.
            If this is null, default serialization settings will be used.

            
            A task that represents the asynchronous serialize operation. The value of the TResult
 parameter contains a JSON string representation of the object.
            

        

        
            
            Deserializes the JSON to a .NET object.
            

            The JSON to deserialize.

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to a .NET object using  .
            

            The JSON to deserialize.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to the specified .NET type.
            

            The JSON to deserialize.

            The   of object being deserialized.

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to the specified .NET type.
            

            The type of the object to deserialize to.

            The JSON to deserialize.

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to the given anonymous type.
            

            
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            

            The JSON to deserialize.

            The anonymous type object.

            The deserialized anonymous type from the JSON string.

        

        
            
            Deserializes the JSON to the given anonymous type using  .
            

            
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            

            The JSON to deserialize.

            The anonymous type object.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            The deserialized anonymous type from the JSON string.

        

        
            
            Deserializes the JSON to the specified .NET type using a collection of  .
            

            The type of the object to deserialize to.

            The JSON to deserialize.

            Converters to use while deserializing.

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to the specified .NET type using  .
            

            The type of the object to deserialize to.

            The object to deserialize.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to the specified .NET type using a collection of  .
            

            The JSON to deserialize.

            The type of the object to deserialize.

            Converters to use while deserializing.

            The deserialized object from the JSON string.

        

        
            
            Deserializes the JSON to the specified .NET type using  .
            

            The JSON to deserialize.

            The type of the object to deserialize to.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            The deserialized object from the JSON string.

        

        
            
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            

            The type of the object to deserialize to.

            The JSON to deserialize.

            
            A task that represents the asynchronous deserialize operation. The value of the TResult
 parameter contains the deserialized object from the JSON string.
            

        

        
            
            Asynchronously deserializes the JSON to the specified .NET type using  .
            Deserialization will happen on a new thread.
            

            The type of the object to deserialize to.

            The JSON to deserialize.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            
            A task that represents the asynchronous deserialize operation. The value of the TResult
 parameter contains the deserialized object from the JSON string.
            

        

        
            
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            

            The JSON to deserialize.

            
            A task that represents the asynchronous deserialize operation. The value of the TResult
 parameter contains the deserialized object from the JSON string.
            

        

        
            
            Asynchronously deserializes the JSON to the specified .NET type using  .
            Deserialization will happen on a new thread.
            

            The JSON to deserialize.

            The type of the object to deserialize to.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            
            A task that represents the asynchronous deserialize operation. The value of the TResult
 parameter contains the deserialized object from the JSON string.
            

        

        
            
            Populates the object with values from the JSON string.
            

            The JSON to populate values from.

            The target object to populate values onto.

        

        
            
            Populates the object with values from the JSON string using  .
            

            The JSON to populate values from.

            The target object to populate values onto.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

        

        
            
            Asynchronously populates the object with values from the JSON string using  .
            

            The JSON to populate values from.

            The target object to populate values onto.

            
            The   used to deserialize the object.
            If this is null, default serialization settings will be used.
            

            
            A task that represents the asynchronous populate operation.
            

        

        
            
            Serializes the XML node to a JSON string.
            

            The node to serialize.

            A JSON string of the XmlNode.

        

        
            
            Serializes the XML node to a JSON string using formatting.
            

            The node to serialize.

            Indicates how the output is formatted.

            A JSON string of the XmlNode.

        

        
            
            Serializes the XML node to a JSON string using formatting and omits the root object if   is true
.
            

            The node to serialize.

            Indicates how the output is formatted.

            Omits writing the root object.

            A JSON string of the XmlNode.

        

        
            
            Deserializes the XmlNode from a JSON string.
            

            The JSON string.

            The deserialized XmlNode

        

        
            
            Deserializes the XmlNode from a JSON string nested in a root elment specified by  .
            

            The JSON string.

            The name of the root element to append when deserializing.

            The deserialized XmlNode

        

        
            
            Deserializes the XmlNode from a JSON string nested in a root elment specified by  
            and writes a .NET array attribute for collections.
            

            The JSON string.

            The name of the root element to append when deserializing.

            
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            

            The deserialized XmlNode

        

        
            
            Serializes the   to a JSON string.
            

            The node to convert to JSON.

            A JSON string of the XNode.

        

        
            
            Serializes the   to a JSON string using formatting.
            

            The node to convert to JSON.

            Indicates how the output is formatted.

            A JSON string of the XNode.

        

        
            
            Serializes the   to a JSON string using formatting and omits the root object if   is true
.
            

            The node to serialize.

            Indicates how the output is formatted.

            Omits writing the root object.

            A JSON string of the XNode.

        

        
            
            Deserializes the   from a JSON string.
            

            The JSON string.

            The deserialized XNode

        

        
            
            Deserializes the   from a JSON string nested in a root elment specified by  .
            

            The JSON string.

            The name of the root element to append when deserializing.

            The deserialized XNode

        

        
            
            Deserializes the   from a JSON string nested in a root elment specified by  
            and writes a .NET array attribute for collections.
            

            The JSON string.

            The name of the root element to append when deserializing.

            
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            

            The deserialized XNode

        

        
            
            Gets or sets a function that creates default  .
            Default settings are automatically used by serialization methods on  ,
            and   and   on  .
            To serialize without using any default settings create a   with
             .
            

        

        
            
            Instructs the   to use the specified   when serializing the member or class.
            

        

        
            
            Initializes a new instance of the   class.
            

            Type of the converter.

        

        
            
            Initializes a new instance of the   class.
            

            Type of the converter.

            Parameter list to use when constructing the JsonConverter.  Can be null.

        

        
            
            Gets the type of the converter.
            

            The type of the converter.

        

        
            
            The parameter list to use when constructing the JsonConverter described by ConverterType.  
            If null, the default constructor is used.
            

        

        
            
            Represents a collection of  .
            

        

        
            
            Instructs the   how to serialize the collection.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class with the specified container Id.
            

            The container Id.

        

        
            
            The exception thrown when an error occurs during Json serialization or deserialization.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class
            with a specified error message.
            

            The error message that explains the reason for the exception.

        

        
            
            Initializes a new instance of the   class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            

            The error message that explains the reason for the exception.

            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.

        

        
            
            Initializes a new instance of the   class.
            

            The   that holds the serialized object data about the exception being thrown.

            The   that contains contextual information about the source or destination.

            The   parameter is null. 

            The class name is null or   is zero (0). 

        

        
            
            Instructs the   to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            

            
            	true
 to write extension data when serializing the object; otherwise, false
. The default is true
.
            

        

        
            
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            

            
            	true
 to read extension data when deserializing the object; otherwise, false
. The default is true
.
            

        

        
            
            Instructs the   not to serialize the public field or public read/write property value.
            

        

        
            
            Instructs the   how to serialize the object.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class with the specified member serialization.
            

            The member serialization.

        

        
            
            Initializes a new instance of the   class with the specified container Id.
            

            The container Id.

        

        
            
            Gets or sets the member serialization.
            

            The member serialization.

        

        
            
            Gets or sets a value that indicates whether the object's properties are required.
            

            
            	A value indicating whether the object's properties are required.
            

        

        
            
            Instructs the   to always serialize the member with the specified name.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class with the specified name.
            

            Name of the property.

        

        
            
            Gets or sets the converter used when serializing the property's collection items.
            

            The collection's items converter.

        

        
            
            The parameter list to use when constructing the JsonConverter described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the JsonConverter that exactly matches the number,
            order, and type of these parameters.
            

            
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            

        

        
            
            Gets or sets the null value handling used when serializing this property.
            

            The null value handling.

        

        
            
            Gets or sets the default value handling used when serializing this property.
            

            The default value handling.

        

        
            
            Gets or sets the reference loop handling used when serializing this property.
            

            The reference loop handling.

        

        
            
            Gets or sets the object creation handling used when deserializing this property.
            

            The object creation handling.

        

        
            
            Gets or sets the type name handling used when serializing this property.
            

            The type name handling.

        

        
            
            Gets or sets whether this property's value is serialized as a reference.
            

            Whether this property's value is serialized as a reference.

        

        
            
            Gets or sets the order of serialization and deserialization of a member.
            

            The numeric order of serialization or deserialization.

        

        
            
            Gets or sets a value indicating whether this property is required.
            

            
            	A value indicating whether this property is required.
            

        

        
            
            Gets or sets the name of the property.
            

            The name of the property.

        

        
            
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            

            The collection's items reference loop handling.

        

        
            
            Gets or sets the the type name handling used when serializing the property's collection items.
            

            The collection's items type name handling.

        

        
            
            Gets or sets whether this property's collection items are serialized as a reference.
            

            Whether this property's collection items are serialized as a reference.

        

        
            
            The exception thrown when an error occurs while reading Json text.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class
            with a specified error message.
            

            The error message that explains the reason for the exception.

        

        
            
            Initializes a new instance of the   class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            

            The error message that explains the reason for the exception.

            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.

        

        
            
            Initializes a new instance of the   class.
            

            The   that holds the serialized object data about the exception being thrown.

            The   that contains contextual information about the source or destination.

            The   parameter is null. 

            The class name is null or   is zero (0). 

        

        
            
            Gets the line number indicating where the error occurred.
            

            The line number indicating where the error occurred.

        

        
            
            Gets the line position indicating where the error occurred.
            

            The line position indicating where the error occurred.

        

        
            
            Gets the path to the JSON where the error occurred.
            

            The path to the JSON where the error occurred.

        

        
            
            The exception thrown when an error occurs during Json serialization or deserialization.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class
            with a specified error message.
            

            The error message that explains the reason for the exception.

        

        
            
            Initializes a new instance of the   class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            

            The error message that explains the reason for the exception.

            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.

        

        
            
            Initializes a new instance of the   class.
            

            The   that holds the serialized object data about the exception being thrown.

            The   that contains contextual information about the source or destination.

            The   parameter is null. 

            The class name is null or   is zero (0). 

        

        
            
            Serializes and deserializes objects into and from the JSON format.
            The   enables you to control how objects are encoded into JSON.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Creates a new   instance.
            The   will not use default settings.
            

            
            A new   instance.
            The   will not use default settings.
            

        

        
            
            Creates a new   instance using the specified  .
            The   will not use default settings.
            

            The settings to be applied to the  .

            
            A new   instance using the specified  .
            The   will not use default settings.
            

        

        
            
            Creates a new   instance.
            The   will use default settings.
            

            
            A new   instance.
            The   will use default settings.
            

        

        
            
            Creates a new   instance using the specified  .
            The   will use default settings.
            

            The settings to be applied to the  .

            
            A new   instance using the specified  .
            The   will use default settings.
            

        

        
            
            Populates the JSON values onto the target object.
            

            The   that contains the JSON structure to reader values from.

            The target object to populate values onto.

        

        
            
            Populates the JSON values onto the target object.
            

            The   that contains the JSON structure to reader values from.

            The target object to populate values onto.

        

        
            
            Deserializes the Json structure contained by the specified  .
            

            The   that contains the JSON structure to deserialize.

            The   being deserialized.

        

        
            
            Deserializes the Json structure contained by the specified  
            into an instance of the specified type.
            

            The   containing the object.

            The   of object being deserialized.

            The instance of   being deserialized.

        

        
            
            Deserializes the Json structure contained by the specified  
            into an instance of the specified type.
            

            The   containing the object.

            The type of the object to deserialize.

            The instance of   being deserialized.

        

        
            
            Deserializes the Json structure contained by the specified  
            into an instance of the specified type.
            

            The   containing the object.

            The   of object being deserialized.

            The instance of   being deserialized.

        

        
            
            Serializes the specified   and writes the Json structure
            to a Stream
 using the specified  . 
            

            The   used to write the Json structure.

            The   to serialize.

        

        
            
            Serializes the specified   and writes the Json structure
            to a Stream
 using the specified  . 
            

            The   used to write the Json structure.

            The   to serialize.

            
            The type of the value being serialized.
            This parameter is used when   is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            

        

        
            
            Serializes the specified   and writes the Json structure
            to a Stream
 using the specified  . 
            

            The   used to write the Json structure.

            The   to serialize.

            
            The type of the value being serialized.
            This parameter is used when   is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            

        

        
            
            Serializes the specified   and writes the Json structure
            to a Stream
 using the specified  . 
            

            The   used to write the Json structure.

            The   to serialize.

        

        
            
            Occurs when the   errors during serialization and deserialization.
            

        

        
            
            Gets or sets the   used by the serializer when resolving references.
            

        

        
            
            Gets or sets the   used by the serializer when resolving type names.
            

        

        
            
            Gets or sets the   used by the serializer when writing trace messages.
            

            The trace writer.

        

        
            
            Gets or sets how type name writing and reading is handled by the serializer.
            

        

        
            
            Gets or sets how a type name assembly is written and resolved by the serializer.
            

            The type name assembly format.

        

        
            
            Gets or sets how object references are preserved by the serializer.
            

        

        
            
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            

        

        
            
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            

        

        
            
            Get or set how null values are handled during serialization and deserialization.
            

        

        
            
            Get or set how null default are handled during serialization and deserialization.
            

        

        
            
            Gets or sets how objects are created during deserialization.
            

            The object creation handling.

        

        
            
            Gets or sets how constructors are used during deserialization.
            

            The constructor handling.

        

        
            
            Gets or sets how metadata properties are used during deserialization.
            

            The metadata properties handling.

        

        
            
            Gets a collection   that will be used during serialization.
            

            Collection   that will be used during serialization.

        

        
            
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            

        

        
            
            Gets or sets the   used by the serializer when invoking serialization callback methods.
            

            The context.

        

        
            
            Indicates how JSON text output is formatted.
            

        

        
            
            Get or set how dates are written to JSON text.
            

        

        
            
            Get or set how   time zones are handling during serialization and deserialization.
            

        

        
            
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            

        

        
            
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            

        

        
            
            Get or set how special floating point numbers, e.g.  ,
              and  ,
            are written as JSON text.
            

        

        
            
            Get or set how strings are escaped when writing JSON text.
            

        

        
            
            Get or set how   and   values are formatting when writing JSON text.
            

        

        
            
            Gets or sets the culture used when reading JSON. Defaults to  .
            

        

        
            
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a  .
            

        

        
            
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            

            
            	true
 if there will be a check for additional JSON content after deserializing an object; otherwise, false
.
            

        

        
            
            Specifies the settings on a   object.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            

            Reference loop handling.

        

        
            
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            

            Missing member handling.

        

        
            
            Gets or sets how objects are created during deserialization.
            

            The object creation handling.

        

        
            
            Gets or sets how null values are handled during serialization and deserialization.
            

            Null value handling.

        

        
            
            Gets or sets how null default are handled during serialization and deserialization.
            

            The default value handling.

        

        
            
            Gets or sets a collection   that will be used during serialization.
            

            The converters.

        

        
            
            Gets or sets how object references are preserved by the serializer.
            

            The preserve references handling.

        

        
            
            Gets or sets how type name writing and reading is handled by the serializer.
            

            The type name handling.

        

        
            
            Gets or sets how metadata properties are used during deserialization.
            

            The metadata properties handling.

        

        
            
            Gets or sets how a type name assembly is written and resolved by the serializer.
            

            The type name assembly format.

        

        
            
            Gets or sets how constructors are used during deserialization.
            

            The constructor handling.

        

        
            
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            

            The contract resolver.

        

        
            
            Gets or sets the   used by the serializer when resolving references.
            

            The reference resolver.

        

        
            
            Gets or sets the   used by the serializer when writing trace messages.
            

            The trace writer.

        

        
            
            Gets or sets the   used by the serializer when resolving type names.
            

            The binder.

        

        
            
            Gets or sets the error handler called during serialization and deserialization.
            

            The error handler called during serialization and deserialization.

        

        
            
            Gets or sets the   used by the serializer when invoking serialization callback methods.
            

            The context.

        

        
            
            Get or set how   and   values are formatting when writing JSON text.
            

        

        
            
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a  .
            

        

        
            
            Indicates how JSON text output is formatted.
            

        

        
            
            Get or set how dates are written to JSON text.
            

        

        
            
            Get or set how   time zones are handling during serialization and deserialization.
            

        

        
            
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            

        

        
            
            Get or set how special floating point numbers, e.g.  ,
              and  ,
            are written as JSON.
            

        

        
            
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            

        

        
            
            Get or set how strings are escaped when writing JSON text.
            

        

        
            
            Gets or sets the culture used when reading JSON. Defaults to  .
            

        

        
            
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            

            
            	true
 if there will be a check for additional content after deserializing an object; otherwise, false
.
            

        

        
            
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            

        

        
            
            Initializes a new instance of the   class with the specified  .
            

            The TextReader
 containing the XML data to read.

        

        
            
            Reads the next JSON token from the stream.
            

            
            true if the next token was read successfully; false if there are no more tokens to read.
            

        

        
            
            Reads the next JSON token from the stream as a  .
            

            
            A   or a null reference if the next JSON token is null. This method will return null
 at the end of an array.
            

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Changes the state to closed. 
            

        

        
            
            Gets a value indicating whether the class can return line information.
            

            
            	true
 if LineNumber and LinePosition can be provided; otherwise, false
.
            

        

        
            
            Gets the current line number.
            

            
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            

        

        
            
            Gets the current line position.
            

            
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            

        

        
            
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            

        

        
            
            Creates an instance of the JsonWriter
 class using the specified  . 
            

            The TextWriter
 to write to.

        

        
            
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            

        

        
            
            Closes this stream and the underlying stream.
            

        

        
            
            Writes the beginning of a Json object.
            

        

        
            
            Writes the beginning of a Json array.
            

        

        
            
            Writes the start of a constructor with the given name.
            

            The name of the constructor.

        

        
            
            Writes the specified end token.
            

            The end token to write.

        

        
            
            Writes the property name of a name/value pair on a Json object.
            

            The name of the property.

        

        
            
            Writes the property name of a name/value pair on a JSON object.
            

            The name of the property.

            A flag to indicate whether the text should be escaped when it is written as a JSON property name.

        

        
            
            Writes indent characters.
            

        

        
            
            Writes the JSON value delimiter.
            

        

        
            
            Writes an indent space.
            

        

        
            
            Writes a   value.
            An error will raised if the value cannot be written as a single JSON token.
            

            The   value to write.

        

        
            
            Writes a null value.
            

        

        
            
            Writes an undefined value.
            

        

        
            
            Writes raw JSON.
            

            The raw JSON to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes out a comment /*...*/
 containing the specified text. 
            

            Text to place inside the comment.

        

        
            
            Writes out the given white space.
            

            The string of white space characters.

        

        
            
            Gets or sets how many IndentChars to write for each level in the hierarchy when   is set to Formatting.Indented
.
            

        

        
            
            Gets or sets which character to use to quote attribute values.
            

        

        
            
            Gets or sets which character to use for indenting when   is set to Formatting.Indented
.
            

        

        
            
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            

        

        
            
            Specifies the type of Json token.
            

        

        
            
            This is returned by the   if a   method has not been called. 
            

        

        
            
            An object start token.
            

        

        
            
            An array start token.
            

        

        
            
            A constructor start token.
            

        

        
            
            An object property name.
            

        

        
            
            A comment.
            

        

        
            
            Raw JSON.
            

        

        
            
            An integer.
            

        

        
            
            A float.
            

        

        
            
            A string.
            

        

        
            
            A boolean.
            

        

        
            
            A null token.
            

        

        
            
            An undefined token.
            

        

        
            
            An object end token.
            

        

        
            
            An array end token.
            

        

        
            
            A constructor end token.
            

        

        
            
            A Date.
            

        

        
            
            Byte data.
            

        

        
            
            Represents a reader that provides   validation.
            

        

        
            
            Initializes a new instance of the   class that
            validates the content returned from the given  .
            

            The   to read from while validating.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  .

        

        
            
            Reads the next JSON token from the stream as a  .
            

            
            A   or a null reference if the next JSON token is null.
            

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  .

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  .

        

        
            
            Reads the next JSON token from the stream.
            

            
            true if the next token was read successfully; false if there are no more tokens to read.
            

        

        
            
            Sets an event handler for receiving schema validation errors.
            

        

        
            
            Gets the text value of the current JSON token.
            

            

        

        
            
            Gets the depth of the current token in the JSON document.
            

            The depth of the current token in the JSON document.

        

        
            
            Gets the path of the current JSON token. 
            

        

        
            
            Gets the quotation mark character used to enclose the value of a string.
            

            

        

        
            
            Gets the type of the current JSON token.
            

            

        

        
            
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            

            

        

        
            
            Gets or sets the schema.
            

            The schema.

        

        
            
            Gets the   used to construct this  .
            

            The   specified in the constructor.

        

        
            
            The exception thrown when an error occurs while reading Json text.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class
            with a specified error message.
            

            The error message that explains the reason for the exception.

        

        
            
            Initializes a new instance of the   class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            

            The error message that explains the reason for the exception.

            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.

        

        
            
            Initializes a new instance of the   class.
            

            The   that holds the serialized object data about the exception being thrown.

            The   that contains contextual information about the source or destination.

            The   parameter is null. 

            The class name is null or   is zero (0). 

        

        
            
            Gets the path to the JSON where the error occurred.
            

            The path to the JSON where the error occurred.

        

        
            
            Contains the LINQ to JSON extension methods.
            

        

        
            
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            

            The type of the objects in source, constrained to  .

            An   of   that contains the source collection.

            An   of   that contains the ancestors of every node in the source collection.

        

        
            
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            

            The type of the objects in source, constrained to  .

            An   of   that contains the source collection.

            An   of   that contains the descendants of every node in the source collection.

        

        
            
            Returns a collection of child properties of every object in the source collection.
            

            An   of   that contains the source collection.

            An   of   that contains the properties of every object in the source collection.

        

        
            
            Returns a collection of child values of every object in the source collection with the given key.
            

            An   of   that contains the source collection.

            The token key.

            An   of   that contains the values of every node in the source collection with the given key.

        

        
            
            Returns a collection of child values of every object in the source collection.
            

            An   of   that contains the source collection.

            An   of   that contains the values of every node in the source collection.

        

        
            
            Returns a collection of converted child values of every object in the source collection with the given key.
            

            The type to convert the values to.

            An   of   that contains the source collection.

            The token key.

            An   that contains the converted values of every node in the source collection with the given key.

        

        
            
            Returns a collection of converted child values of every object in the source collection.
            

            The type to convert the values to.

            An   of   that contains the source collection.

            An   that contains the converted values of every node in the source collection.

        

        
            
            Converts the value.
            

            The type to convert the value to.

            A   cast as a   of  .

            A converted value.

        

        
            
            Converts the value.
            

            The source collection type.

            The type to convert the value to.

            A   cast as a   of  .

            A converted value.

        

        
            
            Returns a collection of child tokens of every array in the source collection.
            

            The source collection type.

            An   of   that contains the source collection.

            An   of   that contains the values of every node in the source collection.

        

        
            
            Returns a collection of converted child tokens of every array in the source collection.
            

            An   of   that contains the source collection.

            The type to convert the values to.

            The source collection type.

            An   that contains the converted values of every node in the source collection.

        

        
            
            Returns the input typed as  .
            

            An   of   that contains the source collection.

            The input typed as  .

        

        
            
            Returns the input typed as  .
            

            The source collection type.

            An   of   that contains the source collection.

            The input typed as  .

        

        
            
            Represents a collection of   objects.
            

            The type of token

        

        
            
            Gets the   with the specified key.
            

            

        

        
            
            Represents a JSON array.
            

            
               
            

        

        
            
            Represents a token that can contain other tokens.
            

        

        
            
            Represents an abstract JSON token.
            

        

        
            
            Compares the values of two tokens, including the values of all descendant tokens.
            

            The first   to compare.

            The second   to compare.

            true if the tokens are equal; otherwise false.

        

        
            
            Adds the specified content immediately after this token.
            

            A content object that contains simple content or a collection of content objects to be added after this token.

        

        
            
            Adds the specified content immediately before this token.
            

            A content object that contains simple content or a collection of content objects to be added before this token.

        

        
            
            Returns a collection of the ancestor tokens of this token.
            

            A collection of the ancestor tokens of this token.

        

        
            
            Returns a collection of the sibling tokens after this token, in document order.
            

            A collection of the sibling tokens after this tokens, in document order.

        

        
            
            Returns a collection of the sibling tokens before this token, in document order.
            

            A collection of the sibling tokens before this token, in document order.

        

        
            
            Gets the   with the specified key converted to the specified type.
            

            The type to convert the token to.

            The token key.

            The converted token value.

        

        
            
            Returns a collection of the child tokens of this token, in document order.
            

            An   of   containing the child tokens of this  , in document order.

        

        
            
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            

            The type to filter the child tokens on.

            A   containing the child tokens of this  , in document order.

        

        
            
            Returns a collection of the child values of this token, in document order.
            

            The type to convert the values to.

            A   containing the child values of this  , in document order.

        

        
            
            Removes this token from its parent.
            

        

        
            
            Replaces this token with the specified token.
            

            The value.

        

        
            
            Writes this token to a  .
            

            A   into which this method will write.

            A collection of   which will be used when writing the token.

        

        
            
            Returns the indented JSON for this token.
            

            
            The indented JSON for this token.
            

        

        
            
            Returns the JSON for this token using the given formatting and converters.
            

            Indicates how the output is formatted.

            A collection of   which will be used when writing the token.

            The JSON for this token using the given formatting and converters.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an explicit conversion from   to  .
            

            The value.

            The result of the conversion.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Performs an implicit conversion from   to  .
            

            The value to create a   from.

            The   initialized with the specified value.

        

        
            
            Creates an   for this token.
            

            An   that can be used to read this token and its descendants.

        

        
            
            Creates a   from an object.
            

            The object that will be used to create  .

            A   with the value of the specified object

        

        
            
            Creates a   from an object using the specified  .
            

            The object that will be used to create  .

            The   that will be used when reading the object.

            A   with the value of the specified object

        

        
            
            Creates the specified .NET type from the  .
            

            The object type that the token will be deserialized to.

            The new object created from the JSON value.

        

        
            
            Creates the specified .NET type from the  .
            

            The object type that the token will be deserialized to.

            The new object created from the JSON value.

        

        
            
            Creates the specified .NET type from the   using the specified  .
            

            The object type that the token will be deserialized to.

            The   that will be used when creating the object.

            The new object created from the JSON value.

        

        
            
            Creates the specified .NET type from the   using the specified  .
            

            The object type that the token will be deserialized to.

            The   that will be used when creating the object.

            The new object created from the JSON value.

        

        
            
            Creates a   from a  .
            

            An   positioned at the token to read into this  .

            
            An   that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            

        

        
            
            Load a   from a string that contains JSON.
            

            A   that contains JSON.

            A   populated from the string that contains JSON.

        

        
            
            Creates a   from a  .
            

            An   positioned at the token to read into this  .

            
            An   that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            

        

        
            
            Selects a   using a JPath expression. Selects the token that matches the object path.
            

            
            A   that contains a JPath expression.
            

            A  , or null.

        

        
            
            Selects a   using a JPath expression. Selects the token that matches the object path.
            

            
            A   that contains a JPath expression.
            

            A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.

            A  .

        

        
            
            Selects a collection of elements using a JPath expression.
            

            
            A   that contains a JPath expression.
            

            An   that contains the selected elements.

        

        
            
            Selects a collection of elements using a JPath expression.
            

            
            A   that contains a JPath expression.
            

            A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.

            An   that contains the selected elements.

        

        
            
            Returns the   responsible for binding operations performed on this object.
            

            The expression tree representation of the runtime value.

            
            The   to bind this object.
            

        

        
            
            Returns the   responsible for binding operations performed on this object.
            

            The expression tree representation of the runtime value.

            
            The   to bind this object.
            

        

        
            
            Creates a new instance of the  . All child tokens are recursively cloned.
            

            A new instance of the  .

        

        
            
            Gets a comparer that can compare two tokens for value equality.
            

            A   that can compare two nodes for value equality.

        

        
            
            Gets or sets the parent.
            

            The parent.

        

        
            
            Gets the root   of this  .
            

            The root   of this  .

        

        
            
            Gets the node type for this  .
            

            The type.

        

        
            
            Gets a value indicating whether this token has child tokens.
            

            
            	true
 if this token has child values; otherwise, false
.
            

        

        
            
            Gets the next sibling token of this node.
            

            The   that contains the next sibling token.

        

        
            
            Gets the previous sibling token of this node.
            

            The   that contains the previous sibling token.

        

        
            
            Gets the path of the JSON token. 
            

        

        
            
            Gets the   with the specified key.
            

            The   with the specified key.

        

        
            
            Get the first child token of this token.
            

            A   containing the first child token of the  .

        

        
            
            Get the last child token of this token.
            

            A   containing the last child token of the  .

        

        
            
            Raises the   event.
            

            The   instance containing the event data.

        

        
            
            Raises the   event.
            

            The   instance containing the event data.

        

        
            
            Raises the   event.
            

            The   instance containing the event data.

        

        
            
            Returns a collection of the child tokens of this token, in document order.
            

            
            An   of   containing the child tokens of this  , in document order.
            

        

        
            
            Returns a collection of the child values of this token, in document order.
            

            The type to convert the values to.

            
            A   containing the child values of this  , in document order.
            

        

        
            
            Returns a collection of the descendant tokens for this token in document order.
            

            An   containing the descendant tokens of the  .

        

        
            
            Adds the specified content as children of this  .
            

            The content to be added.

        

        
            
            Adds the specified content as the first children of this  .
            

            The content to be added.

        

        
            
            Creates an   that can be used to add tokens to the  .
            

            An   that is ready to have content written to it.

        

        
            
            Replaces the children nodes of this token with the specified content.
            

            The content.

        

        
            
            Removes the child nodes from this token.
            

        

        
            
            Merge the specified content into this  .
            

            The content to be merged.

        

        
            
            Merge the specified content into this   using  .
            

            The content to be merged.

            The   used to merge the content.

        

        
            
            Occurs when the list changes or an item in the list changes.
            

        

        
            
            Occurs before an item is added to the collection.
            

        

        
            
            Occurs when the items list of the collection has changed, or the collection is reset.
            

        

        
            
            Gets the container's children tokens.
            

            The container's children tokens.

        

        
            
            Gets a value indicating whether this token has child tokens.
            

            
            	true
 if this token has child values; otherwise, false
.
            

        

        
            
            Get the first child token of this token.
            

            
            A   containing the first child token of the  .
            

        

        
            
            Get the last child token of this token.
            

            
            A   containing the last child token of the  .
            

        

        
            
            Gets the count of child JSON tokens.
            

            The count of child JSON tokens

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class from another   object.
            

            A   object to copy from.

        

        
            
            Initializes a new instance of the   class with the specified content.
            

            The contents of the array.

        

        
            
            Initializes a new instance of the   class with the specified content.
            

            The contents of the array.

        

        
            
            Loads an   from a  . 
            

            A   that will be read for the content of the  .

            A   that contains the JSON that was read from the specified  .

        

        
            
            Load a   from a string that contains JSON.
            

            A   that contains JSON.

            A   populated from the string that contains JSON.

            
               
            

        

        
            
            Creates a   from an object.
            

            The object that will be used to create  .

            A   with the values of the specified object

        

        
            
            Creates a   from an object.
            

            The object that will be used to create  .

            The   that will be used to read the object.

            A   with the values of the specified object

        

        
            
            Writes this token to a  .
            

            A   into which this method will write.

            A collection of   which will be used when writing the token.

        

        
            
            Determines the index of a specific item in the  .
            

            The object to locate in the  .

            
            The index of   if found in the list; otherwise, -1.
            

        

        
            
            Inserts an item to the   at the specified index.
            

            The zero-based index at which   should be inserted.

            The object to insert into the  .

            
            	  is not a valid index in the  .

            The   is read-only.

        

        
            
            Removes the   item at the specified index.
            

            The zero-based index of the item to remove.

            
            	  is not a valid index in the  .

            The   is read-only.

        

        
            
            Returns an enumerator that iterates through the collection.
            

            
            A   that can be used to iterate through the collection.
            

        

        
            
            Adds an item to the  .
            

            The object to add to the  .

            The   is read-only.

        

        
            
            Removes all items from the  .
            

            The   is read-only. 

        

        
            
            Determines whether the   contains a specific value.
            

            The object to locate in the  .

            
            true if   is found in the  ; otherwise, false.
            

        

        
            
            Copies to.
            

            The array.

            Index of the array.

        

        
            
            Removes the first occurrence of a specific object from the  .
            

            The object to remove from the  .

            
            true if   was successfully removed from the  ; otherwise, false. This method also returns false if   is not found in the original  .
            

            The   is read-only.

        

        
            
            Gets the container's children tokens.
            

            The container's children tokens.

        

        
            
            Gets the node type for this  .
            

            The type.

        

        
            
            Gets the   with the specified key.
            

            The   with the specified key.

        

        
            
            Gets or sets the   at the specified index.
            

            

        

        
            
            Gets a value indicating whether the   is read-only.
            

            true if the   is read-only; otherwise, false.

        

        
            
            Represents a JSON constructor.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class from another   object.
            

            A   object to copy from.

        

        
            
            Initializes a new instance of the   class with the specified name and content.
            

            The constructor name.

            The contents of the constructor.

        

        
            
            Initializes a new instance of the   class with the specified name and content.
            

            The constructor name.

            The contents of the constructor.

        

        
            
            Initializes a new instance of the   class with the specified name.
            

            The constructor name.

        

        
            
            Writes this token to a  .
            

            A   into which this method will write.

            A collection of   which will be used when writing the token.

        

        
            
            Loads an   from a  . 
            

            A   that will be read for the content of the  .

            A   that contains the JSON that was read from the specified  .

        

        
            
            Gets the container's children tokens.
            

            The container's children tokens.

        

        
            
            Gets or sets the name of this constructor.
            

            The constructor name.

        

        
            
            Gets the node type for this  .
            

            The type.

        

        
            
            Gets the   with the specified key.
            

            The   with the specified key.

        

        
            
            Represents a collection of   objects.
            

            The type of token

        

        
            
            An empty collection of   objects.
            

        

        
            
            Initializes a new instance of the   struct.
            

            The enumerable.

        

        
            
            Returns an enumerator that iterates through the collection.
            

            
            A   that can be used to iterate through the collection.
            

        

        
            
            Returns an enumerator that iterates through a collection.
            

            
            An   object that can be used to iterate through the collection.
            

        

        
            
            Determines whether the specified   is equal to this instance.
            

            The   to compare with this instance.

            
            	true
 if the specified   is equal to this instance; otherwise, false
.
            

        

        
            
            Determines whether the specified   is equal to this instance.
            

            The   to compare with this instance.

            
            	true
 if the specified   is equal to this instance; otherwise, false
.
            

        

        
            
            Returns a hash code for this instance.
            

            
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            

        

        
            
            Gets the   with the specified key.
            

            

        

        
            
            Represents a JSON object.
            

            
               
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class from another   object.
            

            A   object to copy from.

        

        
            
            Initializes a new instance of the   class with the specified content.
            

            The contents of the object.

        

        
            
            Initializes a new instance of the   class with the specified content.
            

            The contents of the object.

        

        
            
            Gets an   of this object's properties.
            

            An   of this object's properties.

        

        
            
            Gets a   the specified name.
            

            The property name.

            A   with the specified name or null.

        

        
            
            Gets an   of this object's property values.
            

            An   of this object's property values.

        

        
            
            Loads an   from a  . 
            

            A   that will be read for the content of the  .

            A   that contains the JSON that was read from the specified  .

        

        
            
            Load a   from a string that contains JSON.
            

            A   that contains JSON.

            A   populated from the string that contains JSON.

            
               
            

        

        
            
            Creates a   from an object.
            

            The object that will be used to create  .

            A   with the values of the specified object

        

        
            
            Creates a   from an object.
            

            The object that will be used to create  .

            The   that will be used to read the object.

            A   with the values of the specified object

        

        
            
            Writes this token to a  .
            

            A   into which this method will write.

            A collection of   which will be used when writing the token.

        

        
            
            Gets the   with the specified property name.
            

            Name of the property.

            The   with the specified property name.

        

        
            
            Gets the   with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the   will be used to match a property.
            

            Name of the property.

            One of the enumeration values that specifies how the strings will be compared.

            The   with the specified property name.

        

        
            
            Tries to get the   with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the   will be used to match a property.
            

            Name of the property.

            The value.

            One of the enumeration values that specifies how the strings will be compared.

            true if a value was successfully retrieved; otherwise, false.

        

        
            
            Adds the specified property name.
            

            Name of the property.

            The value.

        

        
            
            Removes the property with the specified name.
            

            Name of the property.

            true if item was successfully removed; otherwise, false.

        

        
            
            Tries the get value.
            

            Name of the property.

            The value.

            true if a value was successfully retrieved; otherwise, false.

        

        
            
            Returns an enumerator that iterates through the collection.
            

            
            A   that can be used to iterate through the collection.
            

        

        
            
            Raises the   event with the provided arguments.
            

            Name of the property.

        

        
            
            Raises the   event with the provided arguments.
            

            Name of the property.

        

        
            
            Returns the properties for this instance of a component.
            

            
            A   that represents the properties for this component instance.
            

        

        
            
            Returns the properties for this instance of a component using the attribute array as a filter.
            

            An array of type   that is used as a filter.

            
            A   that represents the filtered properties for this component instance.
            

        

        
            
            Returns a collection of custom attributes for this instance of a component.
            

            
            An   containing the attributes for this object.
            

        

        
            
            Returns the class name of this instance of a component.
            

            
            The class name of the object, or null if the class does not have a name.
            

        

        
            
            Returns the name of this instance of a component.
            

            
            The name of the object, or null if the object does not have a name.
            

        

        
            
            Returns a type converter for this instance of a component.
            

            
            A   that is the converter for this object, or null if there is no   for this object.
            

        

        
            
            Returns the default event for this instance of a component.
            

            
            An   that represents the default event for this object, or null if this object does not have events.
            

        

        
            
            Returns the default property for this instance of a component.
            

            
            A   that represents the default property for this object, or null if this object does not have properties.
            

        

        
            
            Returns an editor of the specified type for this instance of a component.
            

            A   that represents the editor for this object.

            
            An   of the specified type that is the editor for this object, or null if the editor cannot be found.
            

        

        
            
            Returns the events for this instance of a component using the specified attribute array as a filter.
            

            An array of type   that is used as a filter.

            
            An   that represents the filtered events for this component instance.
            

        

        
            
            Returns the events for this instance of a component.
            

            
            An   that represents the events for this component instance.
            

        

        
            
            Returns an object that contains the property described by the specified property descriptor.
            

            A   that represents the property whose owner is to be found.

            
            An   that represents the owner of the specified property.
            

        

        
            
            Returns the   responsible for binding operations performed on this object.
            

            The expression tree representation of the runtime value.

            
            The   to bind this object.
            

        

        
            
            Gets the container's children tokens.
            

            The container's children tokens.

        

        
            
            Occurs when a property value changes.
            

        

        
            
            Occurs when a property value is changing.
            

        

        
            
            Gets the node type for this  .
            

            The type.

        

        
            
            Gets the   with the specified key.
            

            The   with the specified key.

        

        
            
            Gets or sets the   with the specified property name.
            

            

        

        
            
            Specifies the settings used when merging JSON.
            

        

        
            
            Gets or sets the method used when merging JSON arrays.
            

            The method used when merging JSON arrays.

        

        
            
            Represents a JSON property.
            

        

        
            
            Initializes a new instance of the   class from another   object.
            

            A   object to copy from.

        

        
            
            Initializes a new instance of the   class.
            

            The property name.

            The property content.

        

        
            
            Initializes a new instance of the   class.
            

            The property name.

            The property content.

        

        
            
            Writes this token to a  .
            

            A   into which this method will write.

            A collection of   which will be used when writing the token.

        

        
            
            Loads an   from a  . 
            

            A   that will be read for the content of the  .

            A   that contains the JSON that was read from the specified  .

        

        
            
            Gets the container's children tokens.
            

            The container's children tokens.

        

        
            
            Gets the property name.
            

            The property name.

        

        
            
            Gets or sets the property value.
            

            The property value.

        

        
            
            Gets the node type for this  .
            

            The type.

        

        
            
            Represents a view of a  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The name.

        

        
            
            When overridden in a derived class, returns whether resetting an object changes its value.
            

            
            true if resetting the component changes its value; otherwise, false.
            

            The component to test for reset capability. 
                            

        

        
            
            When overridden in a derived class, gets the current value of the property on a component.
            

            
            The value of a property for a given component.
            

            The component with the property for which to retrieve the value. 
                            

        

        
            
            When overridden in a derived class, resets the value for this property of the component to the default value.
            

            The component with the property value that is to be reset to the default value. 
                            

        

        
            
            When overridden in a derived class, sets the value of the component to a different value.
            

            The component with the property value that is to be set. 
                            
The new value. 
                            

        

        
            
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            

            
            true if the property should be persisted; otherwise, false.
            

            The component with the property to be examined for persistence. 
                            

        

        
            
            When overridden in a derived class, gets the type of the component this property is bound to.
            

            
            A   that represents the type of component this property is bound to. When the   or   methods are invoked, the object specified might be an instance of this type.
            

        

        
            
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            

            
            true if the property is read-only; otherwise, false.
            

        

        
            
            When overridden in a derived class, gets the type of the property.
            

            
            A   that represents the type of the property.
            

        

        
            
            Gets the hash code for the name of the member.
            

            

            
            The hash code for the name of the member.
            

        

        
            
            Represents a raw JSON string.
            

        

        
            
            Represents a value in JSON (string, integer, date, etc).
            

        

        
            
            Initializes a new instance of the   class from another   object.
            

            A   object to copy from.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Initializes a new instance of the   class with the given value.
            

            The value.

        

        
            
            Creates a   comment with the given value.
            

            The value.

            A   comment with the given value.

        

        
            
            Creates a   string with the given value.
            

            The value.

            A   string with the given value.

        

        
            
            Creates a   null value.
            

            A   null value.

        

        
            
            Creates a   null value.
            

            A   null value.

        

        
            
            Writes this token to a  .
            

            A   into which this method will write.

            A collection of   which will be used when writing the token.

        

        
            
            Indicates whether the current object is equal to another object of the same type.
            

            
            true if the current object is equal to the   parameter; otherwise, false.
            

            An object to compare with this object.

        

        
            
            Determines whether the specified   is equal to the current  .
            

            The   to compare with the current  .

            
            true if the specified   is equal to the current  ; otherwise, false.
            

            
            The   parameter is null.
            

        

        
            
            Serves as a hash function for a particular type.
            

            
            A hash code for the current  .
            

        

        
            
            Returns a   that represents this instance.
            

            
            A   that represents this instance.
            

        

        
            
            Returns a   that represents this instance.
            

            The format.

            
            A   that represents this instance.
            

        

        
            
            Returns a   that represents this instance.
            

            The format provider.

            
            A   that represents this instance.
            

        

        
            
            Returns a   that represents this instance.
            

            The format.

            The format provider.

            
            A   that represents this instance.
            

        

        
            
            Returns the   responsible for binding operations performed on this object.
            

            The expression tree representation of the runtime value.

            
            The   to bind this object.
            

        

        
            
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            

            An object to compare with this instance.

            
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than  .
            Zero
            This instance is equal to  .
            Greater than zero
            This instance is greater than  .
            

            
            	  is not the same type as this instance.
            

        

        
            
            Gets a value indicating whether this token has child tokens.
            

            
            	true
 if this token has child values; otherwise, false
.
            

        

        
            
            Gets the node type for this  .
            

            The type.

        

        
            
            Gets or sets the underlying token value.
            

            The underlying token value.

        

        
            
            Initializes a new instance of the   class from another   object.
            

            A   object to copy from.

        

        
            
            Initializes a new instance of the   class.
            

            The raw json.

        

        
            
            Creates an instance of   with the content of the reader's current token.
            

            The reader.

            An instance of   with the content of the reader's current token.

        

        
            
            Compares tokens to determine whether they are equal.
            

        

        
            
            Determines whether the specified objects are equal.
            

            The first object of type   to compare.

            The second object of type   to compare.

            
            true if the specified objects are equal; otherwise, false.
            

        

        
            
            Returns a hash code for the specified object.
            

            The   for which a hash code is to be returned.

            A hash code for the specified object.

            The type of   is a reference type and   is null.

        

        
            
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            

        

        
            
            Initializes a new instance of the   class.
            

            The token to read from.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            
            A   or a null reference if the next JSON token is null. This method will return null
 at the end of an array.
            

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream as a  .
            

            A  . This method will return null
 at the end of an array.

        

        
            
            Reads the next JSON token from the stream.
            

            
            true if the next token was read successfully; false if there are no more tokens to read.
            

        

        
            
            Gets the path of the current JSON token. 
            

        

        
            
            Specifies the type of token.
            

        

        
            
            No token type has been set.
            

        

        
            
            A JSON object.
            

        

        
            
            A JSON array.
            

        

        
            
            A JSON constructor.
            

        

        
            
            A JSON object property.
            

        

        
            
            A comment.
            

        

        
            
            An integer value.
            

        

        
            
            A float value.
            

        

        
            
            A string value.
            

        

        
            
            A boolean value.
            

        

        
            
            A null value.
            

        

        
            
            An undefined value.
            

        

        
            
            A date value.
            

        

        
            
            A raw JSON value.
            

        

        
            
            A collection of bytes value.
            

        

        
            
            A Guid value.
            

        

        
            
            A Uri value.
            

        

        
            
            A TimeSpan value.
            

        

        
            
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            

        

        
            
            Initializes a new instance of the   class writing to the given  .
            

            The container being written to.

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            

        

        
            
            Closes this stream and the underlying stream.
            

        

        
            
            Writes the beginning of a Json object.
            

        

        
            
            Writes the beginning of a Json array.
            

        

        
            
            Writes the start of a constructor with the given name.
            

            The name of the constructor.

        

        
            
            Writes the end.
            

            The token.

        

        
            
            Writes the property name of a name/value pair on a Json object.
            

            The name of the property.

        

        
            
            Writes a   value.
            An error will raised if the value cannot be written as a single JSON token.
            

            The   value to write.

        

        
            
            Writes a null value.
            

        

        
            
            Writes an undefined value.
            

        

        
            
            Writes raw JSON.
            

            The raw JSON to write.

        

        
            
            Writes out a comment /*...*/
 containing the specified text.
            

            Text to place inside the comment.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Writes a   value.
            

            The   value to write.

        

        
            
            Gets the token being writen.
            

            The token being writen.

        

        
            
            Specifies how JSON arrays are merged together.
            

        

        
            Concatenate arrays.

        

        
            Union arrays, skipping items that already exist.

        

        
            Replace all array items.

        

        
            Merge array items together, matched by index.

        

        
            
            Specifies the member serialization options for the  .
            

        

        
            
            All public members are serialized by default. Members can be excluded using   or  .
            This is the default member serialization mode.
            

        

        
            
            Only members must be marked with   or   are serialized.
            This member serialization mode can also be set by marking the class with  .
            

        

        
            
            All public and private fields are serialized. Members can be excluded using   or  .
            This member serialization mode can also be set by marking the class with  
            and setting IgnoreSerializableAttribute on   to false.
            

        

        
            
            Specifies metadata property handling options for the  .
            

        

        
            
            Read metadata properties located at the start of a JSON object.
            

        

        
            
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            

        

        
            
            Do not try to read metadata properties.
            

        

        
            
            Specifies missing member handling options for the  .
            

        

        
            
            Ignore a missing member and do not attempt to deserialize it.
            

        

        
            
            Throw a   when a missing member is encountered during deserialization.
            

        

        
            
            Specifies null value handling options for the  .
            

            
               
               
            

        

        
            
            Include null values when serializing and deserializing objects.
            

        

        
            
            Ignore null values when serializing and deserializing objects.
            

        

        
            
            Specifies how object creation is handled by the  .
            

        

        
            
            Reuse existing objects, create new objects when needed.
            

        

        
            
            Only reuse existing objects.
            

        

        
            
            Always create new objects.
            

        

        
            
            Specifies reference handling options for the  .
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            

            
                      
            

        

        
            
            Do not preserve references when serializing types.
            

        

        
            
            Preserve references when serializing into a JSON object structure.
            

        

        
            
            Preserve references when serializing into a JSON array structure.
            

        

        
            
            Preserve references when serializing.
            

        

        
            
            Specifies reference loop handling options for the  .
            

        

        
            
            Throw a   when a loop is encountered.
            

        

        
            
            Ignore loop references and do not serialize.
            

        

        
            
            Serialize loop references.
            

        

        
            
            Indicating whether a property is required.
            

        

        
            
            The property is not required. The default state.
            

        

        
            
            The property must be defined in JSON but can be a null value.
            

        

        
            
            The property must be defined in JSON and cannot be a null value.
            

        

        
            
            Contains the JSON schema extension methods.
            

        

        
            
            Determines whether the   is valid.
            

            The source   to test.

            The schema to test with.

            
            	true
 if the specified   is valid; otherwise, false
.
            

        

        
            
            Determines whether the   is valid.
            

            The source   to test.

            The schema to test with.

            When this method returns, contains any error messages generated while validating. 

            
            	true
 if the specified   is valid; otherwise, false
.
            

        

        
            
            Validates the specified  .
            

            The source   to test.

            The schema to test with.

        

        
            
            Validates the specified  .
            

            The source   to test.

            The schema to test with.

            The validation event handler.

        

        
            
            An in-memory representation of a JSON Schema.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Reads a   from the specified  .
            

            The   containing the JSON Schema to read.

            The   object representing the JSON Schema.

        

        
            
            Reads a   from the specified  .
            

            The   containing the JSON Schema to read.

            The   to use when resolving schema references.

            The   object representing the JSON Schema.

        

        
            
            Load a   from a string that contains schema JSON.
            

            A   that contains JSON.

            A   populated from the string that contains JSON.

        

        
            
            Parses the specified json.
            

            The json.

            The resolver.

            A   populated from the string that contains JSON.

        

        
            
            Writes this schema to a  .
            

            A   into which this method will write.

        

        
            
            Writes this schema to a   using the specified  .
            

            A   into which this method will write.

            The resolver used.

        

        
            
            Returns a   that represents the current  .
            

            
            A   that represents the current  .
            

        

        
            
            Gets or sets the id.
            

        

        
            
            Gets or sets the title.
            

        

        
            
            Gets or sets whether the object is required.
            

        

        
            
            Gets or sets whether the object is read only.
            

        

        
            
            Gets or sets whether the object is visible to users.
            

        

        
            
            Gets or sets whether the object is transient.
            

        

        
            
            Gets or sets the description of the object.
            

        

        
            
            Gets or sets the types of values allowed by the object.
            

            The type.

        

        
            
            Gets or sets the pattern.
            

            The pattern.

        

        
            
            Gets or sets the minimum length.
            

            The minimum length.

        

        
            
            Gets or sets the maximum length.
            

            The maximum length.

        

        
            
            Gets or sets a number that the value should be divisble by.
            

            A number that the value should be divisble by.

        

        
            
            Gets or sets the minimum.
            

            The minimum.

        

        
            
            Gets or sets the maximum.
            

            The maximum.

        

        
            
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            

            A flag indicating whether the value can not equal the number defined by the "minimum" attribute.

        

        
            
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            

            A flag indicating whether the value can not equal the number defined by the "maximum" attribute.

        

        
            
            Gets or sets the minimum number of items.
            

            The minimum number of items.

        

        
            
            Gets or sets the maximum number of items.
            

            The maximum number of items.

        

        
            
            Gets or sets the   of items.
            

            The   of items.

        

        
            
            Gets or sets a value indicating whether items in an array are validated using the   instance at their array position from  .
            

            
            	true
 if items are validated using their array position; otherwise, false
.
            

        

        
            
            Gets or sets the   of additional items.
            

            The   of additional items.

        

        
            
            Gets or sets a value indicating whether additional items are allowed.
            

            
            	true
 if additional items are allowed; otherwise, false
.
            

        

        
            
            Gets or sets whether the array items must be unique.
            

        

        
            
            Gets or sets the   of properties.
            

            The   of properties.

        

        
            
            Gets or sets the   of additional properties.
            

            The   of additional properties.

        

        
            
            Gets or sets the pattern properties.
            

            The pattern properties.

        

        
            
            Gets or sets a value indicating whether additional properties are allowed.
            

            
            	true
 if additional properties are allowed; otherwise, false
.
            

        

        
            
            Gets or sets the required property if this property is present.
            

            The required property if this property is present.

        

        
            
            Gets or sets the a collection of valid enum values allowed.
            

            A collection of valid enum values allowed.

        

        
            
            Gets or sets disallowed types.
            

            The disallow types.

        

        
            
            Gets or sets the default value.
            

            The default value.

        

        
            
            Gets or sets the collection of   that this schema extends.
            

            The collection of   that this schema extends.

        

        
            
            Gets or sets the format.
            

            The format.

        

        
            
            Returns detailed information about the schema exception.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class
            with a specified error message.
            

            The error message that explains the reason for the exception.

        

        
            
            Initializes a new instance of the   class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            

            The error message that explains the reason for the exception.

            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.

        

        
            
            Initializes a new instance of the   class.
            

            The   that holds the serialized object data about the exception being thrown.

            The   that contains contextual information about the source or destination.

            The   parameter is null. 

            The class name is null or   is zero (0). 

        

        
            
            Gets the line number indicating where the error occurred.
            

            The line number indicating where the error occurred.

        

        
            
            Gets the line position indicating where the error occurred.
            

            The line position indicating where the error occurred.

        

        
            
            Gets the path to the JSON where the error occurred.
            

            The path to the JSON where the error occurred.

        

        
            
            Generates a   from a specified  .
            

        

        
            
            Generate a   from the specified type.
            

            The type to generate a   from.

            A   generated from the specified type.

        

        
            
            Generate a   from the specified type.
            

            The type to generate a   from.

            The   used to resolve schema references.

            A   generated from the specified type.

        

        
            
            Generate a   from the specified type.
            

            The type to generate a   from.

            Specify whether the generated root   will be nullable.

            A   generated from the specified type.

        

        
            
            Generate a   from the specified type.
            

            The type to generate a   from.

            The   used to resolve schema references.

            Specify whether the generated root   will be nullable.

            A   generated from the specified type.

        

        
            
            Gets or sets how undefined schemas are handled by the serializer.
            

        

        
            
            Gets or sets the contract resolver.
            

            The contract resolver.

        

        
            
            Resolves   from an id.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Gets a   for the specified reference.
            

            The id.

            A   for the specified reference.

        

        
            
            Gets or sets the loaded schemas.
            

            The loaded schemas.

        

        
            
            The value types allowed by the  .
            

        

        
            
            No type specified.
            

        

        
            
            String type.
            

        

        
            
            Float type.
            

        

        
            
            Integer type.
            

        

        
            
            Boolean type.
            

        

        
            
            Object type.
            

        

        
            
            Array type.
            

        

        
            
            Null type.
            

        

        
            
            Any type.
            

        

        
            
            Specifies undefined schema Id handling options for the  .
            

        

        
            
            Do not infer a schema Id.
            

        

        
            
            Use the .NET type name as the schema Id.
            

        

        
            
            Use the assembly qualified .NET type name as the schema Id.
            

        

        
            
            Returns detailed information related to the  .
            

        

        
            
            Gets the   associated with the validation error.
            

            The JsonSchemaException associated with the validation error.

        

        
            
            Gets the path of the JSON location where the validation error occurred.
            

            The path of the JSON location where the validation error occurred.

        

        
            
            Gets the text description corresponding to the validation error.
            

            The text description.

        

        
            
            Represents the callback method that will handle JSON schema validation events and the  .
            

        

        
            
            Resolves member mappings for a type, camel casing property names.
            

        

        
            
            Used by   to resolves a   for a given  .
            

        

        
            
            Used by   to resolves a   for a given  .
            

            
               
               
            

        

        
            
            Resolves the contract for a given type.
            

            The type to resolve a contract for.

            The contract for a given type.

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class.
            

            
            If set to true
 the   will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly improve performance with multiple resolver instances because expensive reflection will only
            happen once. This setting can cause unexpected behavior if different instances of the resolver are suppose to produce different
            results. When set to false it is highly recommended to reuse   instances with the  .
            

        

        
            
            Resolves the contract for a given type.
            

            The type to resolve a contract for.

            The contract for a given type.

        

        
            
            Gets the serializable members for the type.
            

            The type to get serializable members for.

            The serializable members for the type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates the constructor parameters.
            

            The constructor to create properties for.

            The type's member properties.

            Properties for the given  .

        

        
            
            Creates a   for the given  .
            

            The matching member property.

            The constructor parameter.

            A created   for the given  .

        

        
            
            Resolves the default   for the contract.
            

            Type of the object.

            The contract's default  .

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates a   for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Determines which contract type is created for the given type.
            

            Type of the object.

            A   for the given type.

        

        
            
            Creates properties for the given  .
            

            The type to create properties for.

            /// The member serialization mode for the type.

            Properties for the given  .

        

        
            
            Creates the   used by the serializer to get and set values from a member.
            

            The member.

            The   used by the serializer to get and set values from a member.

        

        
            
            Creates a   for the given  .
            

            The member's parent  .

            The member to create a   for.

            A created   for the given  .

        

        
            
            Resolves the name of the property.
            

            Name of the property.

            Name of the property.

        

        
            
            Gets the resolved name of the property.
            

            Name of the property.

            Name of the property.

        

        
            
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            

            
            	true
 if using dynamic code generation; otherwise, false
.
            

        

        
            
            Gets or sets the default members search flags.
            

            The default members search flags.

        

        
            
            Gets or sets a value indicating whether compiler generated members should be serialized.
            

            
            	true
 if serialized compiler generated members; otherwise, false
.
            

        

        
            
            Gets or sets a value indicating whether to ignore the   interface when serializing and deserializing types.
            

            
            	true
 if the   interface will be ignored when serializing and deserializing types; otherwise, false
.
            

        

        
            
            Gets or sets a value indicating whether to ignore the   attribute when serializing and deserializing types.
            

            
            	true
 if the   attribute will be ignored when serializing and deserializing types; otherwise, false
.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Resolves the name of the property.
            

            Name of the property.

            The property name camel cased.

        

        
            
            Used to resolve references when serializing and deserializing JSON by the  .
            

        

        
            
            Resolves a reference to its object.
            

            The serialization context.

            The reference to resolve.

            The object that

        

        
            
            Gets the reference for the sepecified object.
            

            The serialization context.

            The object to get a reference for.

            The reference to the object.

        

        
            
            Determines whether the specified object is referenced.
            

            The serialization context.

            The object to test for a reference.

            
            	true
 if the specified object is referenced; otherwise, false
.
            

        

        
            
            Adds a reference to the specified object.
            

            The serialization context.

            The reference.

            The object to reference.

        

        
            
            The default serialization binder used when resolving and loading classes from type names.
            

        

        
            
            When overridden in a derived class, controls the binding of a serialized object to a type.
            

            Specifies the   name of the serialized object.

            Specifies the   name of the serialized object.

            
            The type of the object the formatter creates a new instance of.
            

        

        
            
            When overridden in a derived class, controls the binding of a serialized object to a type.
            

            The type of the object the formatter creates a new instance of.

            Specifies the   name of the serialized object. 

            Specifies the   name of the serialized object. 

        

        
            
            Represents a trace writer that writes to the application's   instances.
            

        

        
            
            Represents a trace writer.
            

        

        
            
            Writes the specified trace level, message and optional exception.
            

            The   at which to write this trace.

            The trace message.

            The trace exception. This parameter is optional.

        

        
            
            Gets the   that will be used to filter the trace messages passed to the writer.
            For example a filter level of Info
 will exclude Verbose
 messages and include Info
,
            Warning
 and Error
 messages.
            

            The   that will be used to filter the trace messages passed to the writer.

        

        
            
            Writes the specified trace level, message and optional exception.
            

            The   at which to write this trace.

            The trace message.

            The trace exception. This parameter is optional.

        

        
            
            Gets the   that will be used to filter the trace messages passed to the writer.
            For example a filter level of Info
 will exclude Verbose
 messages and include Info
,
            Warning
 and Error
 messages.
            

            
            The   that will be used to filter the trace messages passed to the writer.
            

        

        
            
            Get and set values for a   using dynamic methods.
            

        

        
            
            Provides methods to get and set values.
            

        

        
            
            Sets the value.
            

            The target to set the value on.

            The value to set on the target.

        

        
            
            Gets the value.
            

            The target to get the value from.

            The value.

        

        
            
            Initializes a new instance of the   class.
            

            The member info.

        

        
            
            Sets the value.
            

            The target to set the value on.

            The value to set on the target.

        

        
            
            Gets the value.
            

            The target to get the value from.

            The value.

        

        
            
            Provides information surrounding an error.
            

        

        
            
            Gets the error.
            

            The error.

        

        
            
            Gets the original object that caused the error.
            

            The original object that caused the error.

        

        
            
            Gets the member that caused the error.
            

            The member that caused the error.

        

        
            
            Gets the path of the JSON location where the error occurred.
            

            The path of the JSON location where the error occurred.

        

        
            
            Gets or sets a value indicating whether this   is handled.
            

            true
 if handled; otherwise, false
.

        

        
            
            Provides data for the Error event.
            

        

        
            
            Initializes a new instance of the   class.
            

            The current object.

            The error context.

        

        
            
            Gets the current object the error event is being raised against.
            

            The current object the error event is being raised against.

        

        
            
            Gets the error context.
            

            The error context.

        

        
            
            Get and set values for a   using dynamic methods.
            

        

        
            
            Initializes a new instance of the   class.
            

            The member info.

        

        
            
            Sets the value.
            

            The target to set the value on.

            The value to set on the target.

        

        
            
            Gets the value.
            

            The target to get the value from.

            The value.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Gets the underlying type for the contract.
            

            The underlying type for the contract.

        

        
            
            Gets or sets the type created during deserialization.
            

            The type created during deserialization.

        

        
            
            Gets or sets whether this type contract is serialized as a reference.
            

            Whether this type contract is serialized as a reference.

        

        
            
            Gets or sets the default   for this contract.
            

            The converter.

        

        
            
            Gets or sets all methods called immediately after deserialization of the object.
            

            The methods called immediately after deserialization of the object.

        

        
            
            Gets or sets all methods called during deserialization of the object.
            

            The methods called during deserialization of the object.

        

        
            
            Gets or sets all methods called after serialization of the object graph.
            

            The methods called after serialization of the object graph.

        

        
            
            Gets or sets all methods called before serialization of the object.
            

            The methods called before serialization of the object.

        

        
            
            Gets or sets all method called when an error is thrown during the serialization of the object.
            

            The methods called when an error is thrown during the serialization of the object.

        

        
            
            Gets or sets the method called immediately after deserialization of the object.
            

            The method called immediately after deserialization of the object.

        

        
            
            Gets or sets the method called during deserialization of the object.
            

            The method called during deserialization of the object.

        

        
            
            Gets or sets the method called after serialization of the object graph.
            

            The method called after serialization of the object graph.

        

        
            
            Gets or sets the method called before serialization of the object.
            

            The method called before serialization of the object.

        

        
            
            Gets or sets the method called when an error is thrown during the serialization of the object.
            

            The method called when an error is thrown during the serialization of the object.

        

        
            
            Gets or sets the default creator method used to create the object.
            

            The default creator method used to create the object.

        

        
            
            Gets or sets a value indicating whether the default creator is non public.
            

            true
 if the default object creator is non-public; otherwise, false
.

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Gets or sets the default collection items  .
            

            The converter.

        

        
            
            Gets or sets a value indicating whether the collection items preserve object references.
            

            true
 if collection items preserve object references; otherwise, false
.

        

        
            
            Gets or sets the collection item reference loop handling.
            

            The reference loop handling.

        

        
            
            Gets or sets the collection item type name handling.
            

            The type name handling.

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Gets the   of the collection items.
            

            The   of the collection items.

        

        
            
            Gets a value indicating whether the collection type is a multidimensional array.
            

            true
 if the collection type is a multidimensional array; otherwise, false
.

        

        
            
            Handles   serialization callback events.
            

            The object that raised the callback event.

            The streaming context.

        

        
            
            Handles   serialization error callback events.
            

            The object that raised the callback event.

            The streaming context.

            The error context.

        

        
            
            Sets extension data for an object during deserialization.
            

            The object to set extension data on.

            The extension data key.

            The extension data value.

        

        
            
            Gets extension data for an object during serialization.
            

            The object to set extension data on.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Gets or sets the property name resolver.
            

            The property name resolver.

        

        
            
            Gets the   of the dictionary keys.
            

            The   of the dictionary keys.

        

        
            
            Gets the   of the dictionary values.
            

            The   of the dictionary values.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Gets the object's properties.
            

            The object's properties.

        

        
            
            Gets or sets the property name resolver.
            

            The property name resolver.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Gets or sets the ISerializable object constructor.
            

            The ISerializable object constructor.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Gets or sets the object member serialization.
            

            The member object serialization.

        

        
            
            Gets or sets a value that indicates whether the object's properties are required.
            

            
            	A value indicating whether the object's properties are required.
            

        

        
            
            Gets the object's properties.
            

            The object's properties.

        

        
            
            Gets the constructor parameters required for any non-default constructor
            

        

        
            
            Gets a collection of   instances that define the parameters used with  .
            

        

        
            
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            

            The override constructor.

        

        
            
            Gets or sets the parametrized constructor used to create the object.
            

            The parametrized constructor.

        

        
            
            Gets or sets the function used to create the object. When set this function will override  .
            This function is called with a collection of arguments which are defined by the   collection.
            

            The function used to create the object.

        

        
            
            Gets or sets the extension data setter.
            

        

        
            
            Gets or sets the extension data getter.
            

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Maps a JSON property to a .NET member or constructor parameter.
            

        

        
            
            Returns a   that represents this instance.
            

            
            A   that represents this instance.
            

        

        
            
            Gets or sets the name of the property.
            

            The name of the property.

        

        
            
            Gets or sets the type that declared this property.
            

            The type that declared this property.

        

        
            
            Gets or sets the order of serialization and deserialization of a member.
            

            The numeric order of serialization or deserialization.

        

        
            
            Gets or sets the name of the underlying member or parameter.
            

            The name of the underlying member or parameter.

        

        
            
            Gets the   that will get and set the   during serialization.
            

            The   that will get and set the   during serialization.

        

        
            
            Gets or sets the type of the property.
            

            The type of the property.

        

        
            
            Gets or sets the   for the property.
            If set this converter takes presidence over the contract converter for the property type.
            

            The converter.

        

        
            
            Gets or sets the member converter.
            

            The member converter.

        

        
            
            Gets or sets a value indicating whether this   is ignored.
            

            true
 if ignored; otherwise, false
.

        

        
            
            Gets or sets a value indicating whether this   is readable.
            

            true
 if readable; otherwise, false
.

        

        
            
            Gets or sets a value indicating whether this   is writable.
            

            true
 if writable; otherwise, false
.

        

        
            
            Gets or sets a value indicating whether this   has a member attribute.
            

            true
 if has a member attribute; otherwise, false
.

        

        
            
            Gets the default value.
            

            The default value.

        

        
            
            Gets or sets a value indicating whether this   is required.
            

            A value indicating whether this   is required.

        

        
            
            Gets or sets a value indicating whether this property preserves object references.
            

            
            	true
 if this instance is reference; otherwise, false
.
            

        

        
            
            Gets or sets the property null value handling.
            

            The null value handling.

        

        
            
            Gets or sets the property default value handling.
            

            The default value handling.

        

        
            
            Gets or sets the property reference loop handling.
            

            The reference loop handling.

        

        
            
            Gets or sets the property object creation handling.
            

            The object creation handling.

        

        
            
            Gets or sets or sets the type name handling.
            

            The type name handling.

        

        
            
            Gets or sets a predicate used to determine whether the property should be serialize.
            

            A predicate used to determine whether the property should be serialize.

        

        
            
            Gets or sets a predicate used to determine whether the property should be serialized.
            

            A predicate used to determine whether the property should be serialized.

        

        
            
            Gets or sets an action used to set whether the property has been deserialized.
            

            An action used to set whether the property has been deserialized.

        

        
            
            Gets or sets the converter used when serializing the property's collection items.
            

            The collection's items converter.

        

        
            
            Gets or sets whether this property's collection items are serialized as a reference.
            

            Whether this property's collection items are serialized as a reference.

        

        
            
            Gets or sets the the type name handling used when serializing the property's collection items.
            

            The collection's items type name handling.

        

        
            
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            

            The collection's items reference loop handling.

        

        
            
            A collection of   objects.
            

        

        
            
            Initializes a new instance of the   class.
            

            The type.

        

        
            
            When implemented in a derived class, extracts the key from the specified element.
            

            The element from which to extract the key.

            The key for the specified element.

        

        
            
            Adds a   object.
            

            The property to add to the collection.

        

        
            
            Gets the closest matching   object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            

            Name of the property.

            A matching property if found.

        

        
            
            Gets a property by property name.
            

            The name of the property to get.

            Type property name string comparison.

            A matching property if found.

        

        
            
            Contract details for a   used by the  .
            

        

        
            
            Initializes a new instance of the   class.
            

            The underlying type for the contract.

        

        
            
            Lookup and create an instance of the JsonConverter type described by the argument.
            

            The JsonConverter type to create.

            Optional arguments to pass to an initializing constructor of the JsonConverter.
            If null, the default constructor is used.

        

        
            
            Create a factory function that can be used to create instances of a JsonConverter described by the 
            argument type.  The returned function can then be used to either invoke the converter's default ctor, or any 
            parameterized constructors by way of an object array.
            

        

        
            
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Writes the specified trace level, message and optional exception.
            

            The   at which to write this trace.

            The trace message.

            The trace exception. This parameter is optional.

        

        
            
            Returns an enumeration of the most recent trace messages.
            

            An enumeration of the most recent trace messages.

        

        
            
            Returns a   of the most recent trace messages.
            

            
            A   of the most recent trace messages.
            

        

        
            
            Gets the   that will be used to filter the trace messages passed to the writer.
            For example a filter level of Info
 will exclude Verbose
 messages and include Info
,
            Warning
 and Error
 messages.
            

            
            The   that will be used to filter the trace messages passed to the writer.
            

        

        
            
            Represents a method that constructs an object.
            

            The object type to create.

        

        
            
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            

        

        
            
            Get and set values for a   using reflection.
            

        

        
            
            Initializes a new instance of the   class.
            

            The member info.

        

        
            
            Sets the value.
            

            The target to set the value on.

            The value to set on the target.

        

        
            
            Gets the value.
            

            The target to get the value from.

            The value.

        

        
            
            Specifies how strings are escaped when writing JSON text.
            

        

        
            
            Only control characters (e.g. newline) are escaped.
            

        

        
            
            All non-ASCII and control characters (e.g. newline) are escaped.
            

        

        
            
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            

        

        
            
            Specifies type name handling options for the  .
            

        

        
            
            Do not include the .NET type name when serializing types.
            

        

        
            
            Include the .NET type name when serializing into a JSON object structure.
            

        

        
            
            Include the .NET type name when serializing into a JSON array structure.
            

        

        
            
            Always include the .NET type name when serializing.
            

        

        
            
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            

        

        
            
            Determines whether the collection is null or empty.
            

            The collection.

            
            	true
 if the collection is null or empty; otherwise, false
.
            

        

        
            
            Adds the elements of the specified collection to the specified generic IList.
            

            The list to add to.

            The collection of elements to add.

        

        
            
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            

            The type of the elements of source.

            A sequence in which to locate a value.

            The object to locate in the sequence

            An equality comparer to compare values.

            The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.

        

        
            
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            

            The value to convert.

            The culture to use when converting.

            The type to convert or cast the value to.

            
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            

        

        
            
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            

        

        
            
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            

        

        
            
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            

        

        
            
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            

        

        
            
            Gets a dictionary of the names and values of an Enum type.
            

            

        

        
            
            Gets a dictionary of the names and values of an Enum type.
            

            The enum type to get names and values for.

            

        

        
            
            Gets the type of the typed collection's items.
            

            The type.

            The type of the typed collection's items.

        

        
            
            Gets the member's underlying type.
            

            The member.

            The underlying type of the member.

        

        
            
            Determines whether the member is an indexed property.
            

            The member.

            
            	true
 if the member is an indexed property; otherwise, false
.
            

        

        
            
            Determines whether the property is an indexed property.
            

            The property.

            
            	true
 if the property is an indexed property; otherwise, false
.
            

        

        
            
            Gets the member's value on the object.
            

            The member.

            The target object.

            The member's value on the object.

        

        
            
            Sets the member's value on the target object.
            

            The member.

            The target.

            The value.

        

        
            
            Determines whether the specified MemberInfo can be read.
            

            The MemberInfo to determine whether can be read.

            /// if set to true
 then allow the member to be gotten non-publicly.

            
            	true
 if the specified MemberInfo can be read; otherwise, false
.
            

        

        
            
            Determines whether the specified MemberInfo can be set.
            

            The MemberInfo to determine whether can be set.

            if set to true
 then allow the member to be set non-publicly.

            if set to true
 then allow the member to be set if read-only.

            
            	true
 if the specified MemberInfo can be set; otherwise, false
.
            

        

        
            
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            

        

        
            
            Determines whether the string is all white space. Empty string will return false.
            

            The string to test whether it is all white space.

            
            	true
 if the string is all white space; otherwise, false
.
            

        

        
            
            Nulls an empty string.
            

            The string.

            Null if the string was null, otherwise the string unchanged.

        

        
            
            Specifies the state of the  .
            

        

        
            
            An exception has been thrown, which has left the   in an invalid state.
            You may call the   method to put the   in the Closed
 state.
            Any other   method calls results in an   being thrown. 
            

        

        
            
            The   method has been called. 
            

        

        
            
            An object is being written. 
            

        

        
            
            A array is being written.
            

        

        
            
            A constructor is being written.
            

        

        
            
            A property is being written.
            

        

        
            
            A write method has not been called.
            

        

    







bin/nunit.framework.dll









		00004550
		
		0003
		52573fd1
		00000000
		00000000
		00e0
		







		010b
		8.00
		00022000
		00002000
		00000000
		0002397e
		00002000
		00024000
		00400000
		00002000
		00001000
		4.00
		0.00
		4.00
		00000000
		00028000
		00001000
		00032268
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00023924
		00000057
		
		00024000
		00000508
		
		00026000
		0000000c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00021984
		00002000
		00022000
		00001000
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000508
		00024000
		00001000
		00023000
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00026000
		00001000
		00024000
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/nunit.framework.xml




    
        nunit.framework

    

    
        
            
            The different targets a test action attribute can be applied to
            

        

        
            
            Default target, which is determined by where the action attribute is attached
            

        

        
            
            Target a individual test case
            

        

        
            
            Target a suite of test cases
            

        

        
            
            Delegate used by tests that execute code and
            capture any thrown exception.
            

        

        
            
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            

        

        
            
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            

        

        
            
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            

            

            

        

        
            
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            

            

            

        

        
            
            Throws a   with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            

            The message to initialize the   with.

            Arguments to be used in formatting the message

        

        
            
            Throws a   with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            

            The message to initialize the   with.

        

        
            
            Throws a   with the message and arguments 
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            

        

        
            
            Throws an   with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            

            The message to initialize the   with.

            Arguments to be used in formatting the message

        

        
            
            Throws an   with the message that is 
            passed in. This is used by the other Assert functions. 
            

            The message to initialize the   with.

        

        
            
            Throws an  . 
            This is used by the other Assert functions. 
            

        

        
            
            Throws an   with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            

            The message to initialize the   with.

            Arguments to be used in formatting the message

        

        
            
            Throws an   with the message that is 
            passed in. This causes the test to be reported as ignored. 
            

            The message to initialize the   with.

        

        
            
            Throws an  . 
            This causes the test to be reported as ignored. 
            

        

        
            
            Throws an   with the message and arguments 
            that are passed in.  This causes the test to be reported as inconclusive.
            

            The message to initialize the   with.

            Arguments to be used in formatting the message

        

        
            
            Throws an   with the message that is 
            passed in. This causes the test to be reported as inconclusive. 
            

            The message to initialize the   with.

        

        
            
            Throws an  . 
            This causes the test to be reported as Inconclusive. 
            

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

            The message that will be displayed on failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint expression to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            
 
            The evaluated condition

            The message to display if the condition is false

            Arguments to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

            The message to display if the condition is false

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            An ActualValueDelegate returning the value to be tested

            A Constraint expression to be applied

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            An ActualValueDelegate returning the value to be tested

            A Constraint expression to be applied

            The message that will be displayed on failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            An ActualValueDelegate returning the value to be tested

            A Constraint expression to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

            The message that will be displayed on failure

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            

            A TestDelegate to be executed

            A ThrowsConstraint used in the test

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            

            The actual value to test

            A Constraint to be applied

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            

            The actual value to test

            A Constraint to be applied

            The message that will be displayed on failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. 
            Used as a synonym for That in rare cases where a private setter 
            causes a Visual Basic compilation error.
            

            
            This method is provided for use by VB developers needing to test
            the value of properties with private setters.
            

            The actual value to test

            A Constraint expression to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            A constraint to be satisfied by the exception

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            A constraint to be satisfied by the exception

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            A constraint to be satisfied by the exception

            A TestDelegate

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            The exception Type expected

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            The exception Type expected

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            The exception Type expected

            A TestDelegate

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            Type of the expected exception

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            Type of the expected exception

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate throws a particular exception when called.
            

            Type of the expected exception

            A TestDelegate

        

        
            
            Verifies that a delegate throws an exception when called
            and returns it.
            

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws an exception when called
            and returns it.
            

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate throws an exception when called
            and returns it.
            

            A TestDelegate

        

        
            
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            

            The expected Exception Type

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            

            The expected Exception Type

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            

            The expected Exception Type

            A TestDelegate

        

        
            
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            

            The expected Exception Type

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            

            The expected Exception Type

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            

            The expected Exception Type

            A TestDelegate

        

        
            
            Verifies that a delegate does not throw an exception
            

            A TestDelegate

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Verifies that a delegate does not throw an exception.
            

            A TestDelegate

            The message that will be displayed on failure

        

        
            
            Verifies that a delegate does not throw an exception.
            

            A TestDelegate

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

            The message to display in case of failure

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

            The message to display in case of failure

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

        

        
            
            Asserts that a condition is false. If the condition is true the method throws
            an  .
            
 
            The evaluated condition

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that a condition is false. If the condition is true the method throws
            an  .
            
 
            The evaluated condition

            The message to display in case of failure

        

        
            
            Asserts that a condition is false. If the condition is true the method throws
            an  .
            
 
            The evaluated condition

        

        
            
            Asserts that a condition is false. If the condition is true the method throws
            an  .
            
 
            The evaluated condition

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that a condition is false. If the condition is true the method throws
            an  .
            
 
            The evaluated condition

            The message to display in case of failure

        

        
            
            Asserts that a condition is false. If the condition is true the method throws
            an  .
            
 
            The evaluated condition

        

        
            
            Verifies that the object that is passed in is not equal to null

            If the object is null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the object that is passed in is not equal to null

            If the object is null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

        

        
            
            Verifies that the object that is passed in is not equal to null

            If the object is null
 then an  
            is thrown.
            

            The object that is to be tested

        

        
            
            Verifies that the object that is passed in is not equal to null

            If the object is null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the object that is passed in is not equal to null

            If the object is null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

        

        
            
            Verifies that the object that is passed in is not equal to null

            If the object is null
 then an  
            is thrown.
            

            The object that is to be tested

        

        
            
            Verifies that the object that is passed in is equal to null

            If the object is not null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the object that is passed in is equal to null

            If the object is not null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

        

        
            
            Verifies that the object that is passed in is equal to null

            If the object is not null
 then an  
            is thrown.
            

            The object that is to be tested

        

        
            
            Verifies that the object that is passed in is equal to null

            If the object is not null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the object that is passed in is equal to null

            If the object is not null
 then an  
            is thrown.
            

            The object that is to be tested

            The message to display in case of failure

        

        
            
            Verifies that the object that is passed in is equal to null

            If the object is not null
 then an  
            is thrown.
            

            The object that is to be tested

        

        
            
            Verifies that two ints are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two ints are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two ints are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two longs are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two longs are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two longs are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two unsigned ints are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two unsigned ints are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two unsigned ints are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two unsigned longs are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two unsigned longs are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two unsigned longs are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two decimals are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two decimals are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two decimals are equal. If they are not, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an   is
            thrown.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an   is
            thrown.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

            The message to display in case of failure

        

        
            
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an   is
            thrown.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

        

        
            
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an   is
            thrown.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an   is
            thrown.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

            The message to display in case of failure

        

        
            
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equal then an   is
            thrown.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

        

        
            
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an   is thrown.
            

            The value that is expected

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an   is thrown.
            

            The value that is expected

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an   is thrown.
            

            The value that is expected

            The actual value

        

        
            
            Verifies that two ints are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two ints are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two ints are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two longs are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two longs are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two longs are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two unsigned ints are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two unsigned ints are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two unsigned ints are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two unsigned longs are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two unsigned longs are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two unsigned longs are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two decimals are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two decimals are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two decimals are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two floats are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two floats are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two floats are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two doubles are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two doubles are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two doubles are not equal. If they are equal, then an 
              is thrown.
            

            The expected value

            The actual value

        

        
            
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an   is thrown.
            

            The value that is expected

            The actual value

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an   is thrown.
            

            The value that is expected

            The actual value

            The message to display in case of failure

        

        
            
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an   is thrown.
            

            The value that is expected

            The actual value

        

        
            
            Asserts that two objects refer to the same object. If they
            are not the same an   is thrown.
            

            The expected object

            The actual object

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that two objects refer to the same object. If they
            are not the same an   is thrown.
            

            The expected object

            The actual object

            The message to display in case of failure

        

        
            
            Asserts that two objects refer to the same object. If they
            are not the same an   is thrown.
            

            The expected object

            The actual object

        

        
            
            Asserts that two objects do not refer to the same object. If they
            are the same an   is thrown.
            

            The expected object

            The actual object

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that two objects do not refer to the same object. If they
            are the same an   is thrown.
            

            The expected object

            The actual object

            The message to display in case of failure

        

        
            
            Asserts that two objects do not refer to the same object. If they
            are the same an   is thrown.
            

            The expected object

            The actual object

        

        
            
            Verifies that the double that is passed in is an NaN
 value.
            If the object is not NaN
 then an  
            is thrown.
            

            The value that is to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the double that is passed in is an NaN
 value.
            If the object is not NaN
 then an  
            is thrown.
            

            The value that is to be tested

            The message to display in case of failure

        

        
            
            Verifies that the double that is passed in is an NaN
 value.
            If the object is not NaN
 then an  
            is thrown.
            

            The value that is to be tested

        

        
            
            Verifies that the double that is passed in is an NaN
 value.
            If the object is not NaN
 then an  
            is thrown.
            

            The value that is to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the double that is passed in is an NaN
 value.
            If the object is not NaN
 then an  
            is thrown.
            

            The value that is to be tested

            The message to display in case of failure

        

        
            
            Verifies that the double that is passed in is an NaN
 value.
            If the object is not NaN
 then an  
            is thrown.
            

            The value that is to be tested

        

        
            
            Assert that a string is empty - that is equal to string.Empty
            

            The string to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Assert that a string is empty - that is equal to string.Empty
            

            The string to be tested

            The message to display in case of failure

        

        
            
            Assert that a string is empty - that is equal to string.Empty
            

            The string to be tested

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing ICollection

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing ICollection

            The message to display in case of failure

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing ICollection

        

        
            
            Assert that a string is not empty - that is not equal to string.Empty
            

            The string to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Assert that a string is not empty - that is not equal to string.Empty
            

            The string to be tested

            The message to display in case of failure

        

        
            
            Assert that a string is not empty - that is not equal to string.Empty
            

            The string to be tested

        

        
            
            Assert that an array, list or other collection is not empty
            

            An array, list or other collection implementing ICollection

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is not empty
            

            An array, list or other collection implementing ICollection

            The message to display in case of failure

        

        
            
            Assert that an array, list or other collection is not empty
            

            An array, list or other collection implementing ICollection

        

        
            
            Assert that a string is either null or equal to string.Empty
            

            The string to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Assert that a string is either null or equal to string.Empty
            

            The string to be tested

            The message to display in case of failure

        

        
            
            Assert that a string is either null or equal to string.Empty
            

            The string to be tested

        

        
            
            Assert that a string is not null or empty
            

            The string to be tested

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Assert that a string is not null or empty
            

            The string to be tested

            The message to display in case of failure

        

        
            
            Assert that a string is not null or empty
            

            The string to be tested

        

        
            
            Asserts that an object may be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object may be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

        

        
            
            Asserts that an object may be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

        

        
            
            Asserts that an object may be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object may be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

        

        
            
            Asserts that an object may be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

        

        
            
            Asserts that an object may not be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object may not be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

        

        
            
            Asserts that an object may not be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

        

        
            
            Asserts that an object may not be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object may not be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

            The message to display in case of failure

        

        
            
            Asserts that an object may not be assigned a  value of a given Type.
            

            The expected Type.

            The object under examination

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

        

        
            
            Asserts that an object is an instance of a given type.
            

            The expected Type

            The object being examined

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

            The message to display in case of failure

        

        
            
            Asserts that an object is not an instance of a given type.
            

            The expected Type

            The object being examined

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

            The message to display in case of failure

        

        
            
            Verifies that the first value is greater than or equal tothe second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be greater

            The second value, expected to be less

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

            The message to display in case of failure

        

        
            
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
              is thrown. 
            

            The first value, expected to be less

            The second value, expected to be greater

        

        
            
            Asserts that an object is contained in a list.
            

            The expected object

            The list to be examined

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Asserts that an object is contained in a list.
            

            The expected object

            The list to be examined

            The message to display in case of failure

        

        
            
            Asserts that an object is contained in a list.
            

            The expected object

            The list to be examined

        

        
            
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            

            The expected value

            The actual value

            The maximum acceptable difference between the
            the expected and the actual

            The message to display in case of failure

            Array of objects to be used in formatting the message

        

        
            
            Gets the number of assertions executed so far and 
            resets the counter to zero.
            

        

        
            
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names for constraints and
            asserts and avoiding conflict with the definition of 
             , from which it inherits much of its
            behavior, in certain mock object frameworks.
            

        

        
            
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            

        

        
            
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            

        

        
            
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            

        

        
            
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            

        

        
            
            Returns a constraint that tests two items for equality
            

        

        
            
            Returns a constraint that tests that two references are the same object
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            

        

        
            
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            

        

        
            
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            

        

        
            
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            

        

        
            
            Returns a ConstraintExpression that negates any
            following constraint.
            

        

        
            
            Returns a ConstraintExpression that negates any
            following constraint.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            

        

        
            
            Returns a constraint that tests for null
            

        

        
            
            Returns a constraint that tests for True
            

        

        
            
            Returns a constraint that tests for False
            

        

        
            
            Returns a constraint that tests for a positive value
            

        

        
            
            Returns a constraint that tests for a negative value
            

        

        
            
            Returns a constraint that tests for NaN
            

        

        
            
            Returns a constraint that tests for empty
            

        

        
            
            Returns a constraint that tests whether a collection 
            contains all unique items.
            

        

        
            
            Returns a constraint that tests whether an object graph is serializable in binary format.
            

        

        
            
            Returns a constraint that tests whether an object graph is serializable in xml format.
            

        

        
            
            Returns a constraint that tests whether a collection is ordered
            

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to Assert.That.
            

            The actual value to test

            A Constraint to be applied

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to Assert.That.
            

            The actual value to test

            A Constraint to be applied

            The message to be displayed in case of failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to Assert.That.
            

            The actual value to test

            A Constraint to be applied

            The message to be displayed in case of failure

            Arguments to use in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  . Works Identically to 
             .
            
 
            The evaluated condition

            The message to display if the condition is false

            Arguments to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  . Works Identically to
             .
            

            The evaluated condition

            The message to display if the condition is false

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  . Works Identically to  .
            

            The evaluated condition

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            A Constraint expression to be applied

            An ActualValueDelegate returning the value to be tested

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            A Constraint expression to be applied

            An ActualValueDelegate returning the value to be tested

            The message that will be displayed on failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            An ActualValueDelegate returning the value to be tested

            A Constraint expression to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

            The message that will be displayed on failure

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            

            The actual value to test

            A Constraint to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            

            A TestDelegate to be executed

            A ThrowsConstraint used in the test

        

        
            
            Returns a ListMapper based on a collection.
            

            The original collection

            

        

        
            
            Provides static methods to express the assumptions
            that must be met for a test to give a meaningful
            result. If an assumption is not met, the test
            should produce an inconclusive result.
            

        

        
            
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            

            

            

        

        
            
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            

            

            

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            The actual value to test

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            The actual value to test

            The message that will be displayed on failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            The actual value to test

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            
 
            The evaluated condition

            The message to display if the condition is false

            Arguments to be used in formatting the message

        

        
            
            Asserts that a condition is true. If the condition is false the method throws
            an  .
            

            The evaluated condition

            The message to display if the condition is false

        

        
            
            Asserts that a condition is true. If the condition is false the 
            method throws an  .
            

            The evaluated condition

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            An ActualValueDelegate returning the value to be tested

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            An ActualValueDelegate returning the value to be tested

            The message that will be displayed on failure

        

        
            
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            An ActualValueDelegate returning the value to be tested

            A Constraint expression to be applied

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            The actual value to test

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            The actual value to test

            The message that will be displayed on failure

        

        
            
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            

            A Constraint expression to be applied

            The actual value to test

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            

            A TestDelegate to be executed

            A ThrowsConstraint used in the test

        

        
            
            Waits for pending asynchronous operations to complete, if appropriate,
            and returns a proper result of the invocation by unwrapping task results
            

            The raw result of the method invocation

            The unwrapped result, if necessary

        

        
            
            A set of Assert methods operationg on one or more collections
            

        

        
            
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            

            

            

        

        
            
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            

            

            

        

        
            
            Asserts that all items contained in collection are of the type specified by expectedType.
            

            IEnumerable containing objects to be considered

            System.Type that all objects in collection must be instances of

        

        
            
            Asserts that all items contained in collection are of the type specified by expectedType.
            

            IEnumerable containing objects to be considered

            System.Type that all objects in collection must be instances of

            The message that will be displayed on failure

        

        
            
            Asserts that all items contained in collection are of the type specified by expectedType.
            

            IEnumerable containing objects to be considered

            System.Type that all objects in collection must be instances of

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that all items contained in collection are not equal to null.
            

            IEnumerable containing objects to be considered

        

        
            
            Asserts that all items contained in collection are not equal to null.
            

            IEnumerable containing objects to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that all items contained in collection are not equal to null.
            

            IEnumerable of objects to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Ensures that every object contained in collection exists within the collection
            once and only once.
            

            IEnumerable of objects to be considered

        

        
            
            Ensures that every object contained in collection exists within the collection
            once and only once.
            

            IEnumerable of objects to be considered

            The message that will be displayed on failure

        

        
            
            Ensures that every object contained in collection exists within the collection
            once and only once.
            

            IEnumerable of objects to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

        

        
            
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The IComparer to use in comparing objects from each IEnumerable

        

        
            
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The IComparer to use in comparing objects from each IEnumerable

            The message that will be displayed on failure

        

        
            
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The IComparer to use in comparing objects from each IEnumerable

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

        

        
            
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that expected and actual are not exactly equal.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

        

        
            
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The IComparer to use in comparing objects from each IEnumerable

        

        
            
            Asserts that expected and actual are not exactly equal.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The IComparer to use in comparing objects from each IEnumerable

            The message that will be displayed on failure

        

        
            
            Asserts that expected and actual are not exactly equal.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The IComparer to use in comparing objects from each IEnumerable

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that expected and actual are not equivalent.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

        

        
            
            Asserts that expected and actual are not equivalent.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that expected and actual are not equivalent.
            

            The first IEnumerable of objects to be considered

            The second IEnumerable of objects to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that collection contains actual as an item.
            

            IEnumerable of objects to be considered

            Object to be found within collection

        

        
            
            Asserts that collection contains actual as an item.
            

            IEnumerable of objects to be considered

            Object to be found within collection

            The message that will be displayed on failure

        

        
            
            Asserts that collection contains actual as an item.
            

            IEnumerable of objects to be considered

            Object to be found within collection

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that collection does not contain actual as an item.
            

            IEnumerable of objects to be considered

            Object that cannot exist within collection

        

        
            
            Asserts that collection does not contain actual as an item.
            

            IEnumerable of objects to be considered

            Object that cannot exist within collection

            The message that will be displayed on failure

        

        
            
            Asserts that collection does not contain actual as an item.
            

            IEnumerable of objects to be considered

            Object that cannot exist within collection

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that superset is not a subject of subset.
            

            The IEnumerable superset to be considered

            The IEnumerable subset to be considered

        

        
            
            Asserts that superset is not a subject of subset.
            

            The IEnumerable superset to be considered

            The IEnumerable subset to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that superset is not a subject of subset.
            

            The IEnumerable superset to be considered

            The IEnumerable subset to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Asserts that superset is a subset of subset.
            

            The IEnumerable superset to be considered

            The IEnumerable subset to be considered

        

        
            
            Asserts that superset is a subset of subset.
            

            The IEnumerable superset to be considered

            The IEnumerable subset to be considered

            The message that will be displayed on failure

        

        
            
            Asserts that superset is a subset of subset.
            

            The IEnumerable superset to be considered

            The IEnumerable subset to be considered

            The message that will be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing IEnumerable

            The message to be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing IEnumerable

            The message to be displayed on failure

        

        
            
            Assert that an array,list or other collection is empty
            

            An array, list or other collection implementing IEnumerable

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing IEnumerable

            The message to be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is empty
            

            An array, list or other collection implementing IEnumerable

            The message to be displayed on failure

        

        
            
            Assert that an array,list or other collection is empty
            

            An array, list or other collection implementing IEnumerable

        

        
            
            Assert that an array, list or other collection is ordered
            

            An array, list or other collection implementing IEnumerable

            The message to be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is ordered
            

            An array, list or other collection implementing IEnumerable

            The message to be displayed on failure

        

        
            
            Assert that an array, list or other collection is ordered
            

            An array, list or other collection implementing IEnumerable

        

        
            
            Assert that an array, list or other collection is ordered
            

            An array, list or other collection implementing IEnumerable

            A custom comparer to perform the comparisons

            The message to be displayed on failure

            Arguments to be used in formatting the message

        

        
            
            Assert that an array, list or other collection is ordered
            

            An array, list or other collection implementing IEnumerable

            A custom comparer to perform the comparisons

            The message to be displayed on failure

        

        
            
            Assert that an array, list or other collection is ordered
            

            An array, list or other collection implementing IEnumerable

            A custom comparer to perform the comparisons

        

        
            
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            

        

        
            
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Summary description for DirectoryAssert
            

        

        
            
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            

            

            

        

        
            
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            

            

            

        

        
            
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            

        

        
            
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A directory containing the value that is expected

            A directory containing the actual value

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A directory containing the value that is expected

            A directory containing the actual value

            The message to display if directories are not equal

        

        
            
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A directory containing the value that is expected

            A directory containing the actual value

        

        
            
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A directory path string containing the value that is expected

            A directory path string containing the actual value

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A directory path string containing the value that is expected

            A directory path string containing the actual value

            The message to display if directories are not equal

        

        
            
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A directory path string containing the value that is expected

            A directory path string containing the actual value

        

        
            
            Asserts that two directories are not equal. If they are equal
            an   is thrown.
            

            A directory containing the value that is expected

            A directory containing the actual value

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that two directories are not equal. If they are equal
            an   is thrown.
            

            A directory containing the value that is expected

            A directory containing the actual value

            The message to display if directories are not equal

        

        
            
            Asserts that two directories are not equal. If they are equal
            an   is thrown.
            

            A directory containing the value that is expected

            A directory containing the actual value

        

        
            
            Asserts that two directories are not equal. If they are equal
            an   is thrown.
            

            A directory path string containing the value that is expected

            A directory path string containing the actual value

            The message to display if directories are equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that two directories are not equal. If they are equal
            an   is thrown.
            

            A directory path string containing the value that is expected

            A directory path string containing the actual value

            The message to display if directories are equal

        

        
            
            Asserts that two directories are not equal. If they are equal
            an   is thrown.
            

            A directory path string containing the value that is expected

            A directory path string containing the actual value

        

        
            
            Asserts that the directory is empty. If it is not empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that the directory is empty. If it is not empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

        

        
            
            Asserts that the directory is empty. If it is not empty
            an   is thrown.
            

            A directory to search

        

        
            
            Asserts that the directory is empty. If it is not empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that the directory is empty. If it is not empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

        

        
            
            Asserts that the directory is empty. If it is not empty
            an   is thrown.
            

            A directory to search

        

        
            
            Asserts that the directory is not empty. If it is empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that the directory is not empty. If it is empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

        

        
            
            Asserts that the directory is not empty. If it is empty
            an   is thrown.
            

            A directory to search

        

        
            
            Asserts that the directory is not empty. If it is empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that the directory is not empty. If it is empty
            an   is thrown.
            

            A directory to search

            The message to display if directories are not equal

        

        
            
            Asserts that the directory is not empty. If it is empty
            an   is thrown.
            

            A directory to search

        

        
            
            Asserts that path contains actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

            Arguments to be used in formatting the message

        

        
            
            Asserts that path contains actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

        

        
            
            Asserts that path contains actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

        

        
            
            Asserts that path contains actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

            Arguments to be used in formatting the message

        

        
            
            Asserts that path contains actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

        

        
            
            Asserts that path contains actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

        

        
            
            Asserts that path does not contain actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

            Arguments to be used in formatting the message

        

        
            
            Asserts that path does not contain actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

        

        
            
            Asserts that path does not contain actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

        

        
            
            Asserts that path does not contain actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

            Arguments to be used in formatting the message

        

        
            
            Asserts that path does not contain actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

            The message to display if directory is not within the path

        

        
            
            Asserts that path does not contain actual as a subdirectory or
            an   is thrown.
            

            A directory to search

            sub-directory asserted to exist under directory

        

        
            
            Summary description for FileAssert.
            

        

        
            
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            

            

            

        

        
            
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            

            

            

        

        
            
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            

        

        
            
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            The expected Stream

            The actual Stream

            The message to display if Streams are not equal

            Arguments to be used in formatting the message

        

        
            
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            The expected Stream

            The actual Stream

            The message to display if objects are not equal

        

        
            
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            The expected Stream

            The actual Stream

        

        
            
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A file containing the value that is expected

            A file containing the actual value

            The message to display if Streams are not equal

            Arguments to be used in formatting the message

        

        
            
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A file containing the value that is expected

            A file containing the actual value

            The message to display if objects are not equal

        

        
            
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            A file containing the value that is expected

            A file containing the actual value

        

        
            
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            The path to a file containing the value that is expected

            The path to a file containing the actual value

            The message to display if Streams are not equal

            Arguments to be used in formatting the message

        

        
            
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            The path to a file containing the value that is expected

            The path to a file containing the actual value

            The message to display if objects are not equal

        

        
            
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an   is thrown.
            

            The path to a file containing the value that is expected

            The path to a file containing the actual value

        

        
            
            Asserts that two Streams are not equal. If they are equal
            an   is thrown.
            

            The expected Stream

            The actual Stream

            The message to be displayed when the two Stream are the same.

            Arguments to be used in formatting the message

        

        
            
            Asserts that two Streams are not equal. If they are equal
            an   is thrown.
            

            The expected Stream

            The actual Stream

            The message to be displayed when the Streams are the same.

        

        
            
            Asserts that two Streams are not equal. If they are equal
            an   is thrown.
            

            The expected Stream

            The actual Stream

        

        
            
            Asserts that two files are not equal. If they are equal
            an   is thrown.
            

            A file containing the value that is expected

            A file containing the actual value

            The message to display if Streams are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that two files are not equal. If they are equal
            an   is thrown.
            

            A file containing the value that is expected

            A file containing the actual value

            The message to display if objects are not equal

        

        
            
            Asserts that two files are not equal. If they are equal
            an   is thrown.
            

            A file containing the value that is expected

            A file containing the actual value

        

        
            
            Asserts that two files are not equal. If they are equal
            an   is thrown.
            

            The path to a file containing the value that is expected

            The path to a file containing the actual value

            The message to display if Streams are not equal

            Arguments to be used in formatting the message

        

        
            
            Asserts that two files are not equal. If they are equal
            an   is thrown.
            

            The path to a file containing the value that is expected

            The path to a file containing the actual value

            The message to display if objects are not equal

        

        
            
            Asserts that two files are not equal. If they are equal
            an   is thrown.
            

            The path to a file containing the value that is expected

            The path to a file containing the actual value

        

        
            
            GlobalSettings is a place for setting default values used
            by the framework in performing asserts.
            

        

        
            
            Default tolerance for floating point equality
            

        

        
            
            Class used to guard against unexpected argument values
            by throwing an appropriate exception.
            

        

        
            
            Throws an exception if an argument is null
            

            The value to be tested

            The name of the argument

        

        
            
            Throws an exception if a string argument is null or empty
            

            The value to be tested

            The name of the argument

        

        
            
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            

        

        
            
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            

        

        
            
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            

        

        
            
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            

        

        
            
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            

        

        
            
            Returns a ConstraintExpression that negates any
            following constraint.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            

        

        
            
            Interface implemented by a user fixture in order to
            validate any expected exceptions. It is only called
            for test methods marked with the ExpectedException
            attribute.
            

        

        
            
            Method to handle an expected exception
            

            The exception to be handled

        

        
            
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            

        

        
            
            Returns a constraint that tests two items for equality
            

        

        
            
            Returns a constraint that tests that two references are the same object
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is under an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            

        

        
            
            Returns a ConstraintExpression that negates any
            following constraint.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            

        

        
            
            Returns a constraint that tests for null
            

        

        
            
            Returns a constraint that tests for True
            

        

        
            
            Returns a constraint that tests for False
            

        

        
            
            Returns a constraint that tests for a positive value
            

        

        
            
            Returns a constraint that tests for a negative value
            

        

        
            
            Returns a constraint that tests for NaN
            

        

        
            
            Returns a constraint that tests for empty
            

        

        
            
            Returns a constraint that tests whether a collection 
            contains all unique items.
            

        

        
            
            Returns a constraint that tests whether an object graph is serializable in binary format.
            

        

        
            
            Returns a constraint that tests whether an object graph is serializable in xml format.
            

        

        
            
            Returns a constraint that tests whether a collection is ordered
            

        

        
            
            The ITestCaseData interface is implemented by a class
            that is able to return complete testcases for use by
            a parameterized test method.
            
            NOTE: This interface is used in both the framework
            and the core, even though that results in two different
            types. However, sharing the source code guarantees that
            the various implementations will be compatible and that
            the core is able to reflect successfully over the
            framework implementations of ITestCaseData.
            

        

        
            
            Gets the argument list to be provided to the test
            

        

        
            
            Gets the expected result
            

        

        
            
            Indicates whether a result has been specified.
            This is necessary because the result may be
            null, so it's value cannot be checked.
            

        

        
            
             Gets the expected exception Type
            

        

        
            
            Gets the FullName of the expected exception
            

        

        
            
            Gets the name to be used for the test
            

        

        
            
            Gets the description of the test
            

        

        
            
            Gets a value indicating whether this   is ignored.
            

            true
 if ignored; otherwise, false
.

        

        
            
            Gets a value indicating whether this   is explicit.
            

            true
 if explicit; otherwise, false
.

        

        
            
            Gets the ignore reason.
            

            The ignore reason.

        

        
            
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            

        

        
            
            The List class is a helper class with properties and methods
            that supply a number of constraints used with lists and collections.
            

        

        
            
            List.Map returns a ListMapper, which can be used to map
            the original collection to another collection.
            

            

            

        

        
            
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            

        

        
            
            Construct a ListMapper based on a collection
            

            The collection to be transformed

        

        
            
            Produces a collection containing all the values of a property
            

            The collection of property values

            

        

        
            
            Randomizer returns a set of random values in a repeatable
            way, to allow re-running of tests if necessary.
            

        

        
            
            Get a randomizer for a particular member, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            

        

        
            
            Get a randomizer for a particular parameter, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            

        

        
            
            Construct a randomizer using a random seed
            

        

        
            
            Construct a randomizer using a specified seed
            

        

        
            
            Return an array of random doubles between 0.0 and 1.0.
            

            

            

        

        
            
            Return an array of random doubles with values in a specified range.
            

        

        
            
            Return an array of random ints with values in a specified range.
            

        

        
            
            Get a random seed for use in creating a randomizer.
            

        

        
            
            The SpecialValue enum is used to represent TestCase arguments
            that cannot be used as arguments to an Attribute.
            

        

        
            
            Null represents a null value, which cannot be used as an 
            argument to an attribute under .NET 1.x
            

        

        
            
            Basic Asserts on strings.
            

        

        
            
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            

            

            

        

        
            
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            

            

            

        

        
            
            Asserts that a string is found within another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string is found within another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

        

        
            
            Asserts that a string is found within another string.
            

            The expected string

            The string to be examined

        

        
            
            Asserts that a string is not found within another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string is found within another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

        

        
            
            Asserts that a string is found within another string.
            

            The expected string

            The string to be examined

        

        
            
            Asserts that a string starts with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string starts with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

        

        
            
            Asserts that a string starts with another string.
            

            The expected string

            The string to be examined

        

        
            
            Asserts that a string does not start with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string does not start with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

        

        
            
            Asserts that a string does not start with another string.
            

            The expected string

            The string to be examined

        

        
            
            Asserts that a string ends with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string ends with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

        

        
            
            Asserts that a string ends with another string.
            

            The expected string

            The string to be examined

        

        
            
            Asserts that a string does not end with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string does not end with another string.
            

            The expected string

            The string to be examined

            The message to display in case of failure

        

        
            
            Asserts that a string does not end with another string.
            

            The expected string

            The string to be examined

        

        
            
            Asserts that two strings are equal, without regard to case.
            

            The expected string

            The actual string

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that two strings are equal, without regard to case.
            

            The expected string

            The actual string

            The message to display in case of failure

        

        
            
            Asserts that two strings are equal, without regard to case.
            

            The expected string

            The actual string

        

        
            
            Asserts that two strings are not equal, without regard to case.
            

            The expected string

            The actual string

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that two strings are Notequal, without regard to case.
            

            The expected string

            The actual string

            The message to display in case of failure

        

        
            
            Asserts that two strings are not equal, without regard to case.
            

            The expected string

            The actual string

        

        
            
            Asserts that a string matches an expected regular expression pattern.
            

            The regex pattern to be matched

            The actual string

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string matches an expected regular expression pattern.
            

            The regex pattern to be matched

            The actual string

            The message to display in case of failure

        

        
            
            Asserts that a string matches an expected regular expression pattern.
            

            The regex pattern to be matched

            The actual string

        

        
            
            Asserts that a string does not match an expected regular expression pattern.
            

            The regex pattern to be used

            The actual string

            The message to display in case of failure

            Arguments used in formatting the message

        

        
            
            Asserts that a string does not match an expected regular expression pattern.
            

            The regex pattern to be used

            The actual string

            The message to display in case of failure

        

        
            
            Asserts that a string does not match an expected regular expression pattern.
            

            The regex pattern to be used

            The actual string

        

        
            
            The TestCaseData class represents a set of arguments
            and other parameter info to be used for a parameterized
            test case. It provides a number of instance modifiers
            for use in initializing the test case.
            
            Note: Instance modifiers are getters that return
            the same instance after modifying it's state.
            

        

        
            
            The argument list to be provided to the test
            

        

        
            
            The expected result to be returned
            

        

        
            
            Set to true if this has an expected result
            

        

        
            
             The expected exception Type
            

        

        
            
            The FullName of the expected exception
            

        

        
            
            The name to be used for the test
            

        

        
            
            The description of the test
            

        

        
            
            A dictionary of properties, used to add information
            to tests without requiring the class to change.
            

        

        
            
            If true, indicates that the test case is to be ignored
            

        

        
            
            If true, indicates that the test case is marked explicit
            

        

        
            
            The reason for ignoring a test case
            

        

        
            
            Initializes a new instance of the   class.
            

            The arguments.

        

        
            
            Initializes a new instance of the   class.
            

            The argument.

        

        
            
            Initializes a new instance of the   class.
            

            The first argument.

            The second argument.

        

        
            
            Initializes a new instance of the   class.
            

            The first argument.

            The second argument.

            The third argument.

        

        
            
            Sets the expected result for the test
            

            The expected result

            A modified TestCaseData

        

        
            
            Sets the expected exception type for the test
            

            Type of the expected exception.

            The modified TestCaseData instance

        

        
            
            Sets the expected exception type for the test
            

            FullName of the expected exception.

            The modified TestCaseData instance

        

        
            
            Sets the name of the test case
            

            The modified TestCaseData instance

        

        
            
            Sets the description for the test case
            being constructed.
            

            The description.

            The modified TestCaseData instance.

        

        
            
            Applies a category to the test
            

            

            

        

        
            
            Applies a named property to the test
            

            

            

            

        

        
            
            Applies a named property to the test
            

            

            

            

        

        
            
            Applies a named property to the test
            

            

            

            

        

        
            
            Ignores this TestCase.
            

            

        

        
            
            Ignores this TestCase, specifying the reason.
            

            The reason.

            

        

        
            
            Marks this TestCase as Explicit
            

            

        

        
            
            Marks this TestCase as Explicit, specifying the reason.
            

            The reason.

            

        

        
            
            Gets the argument list to be provided to the test
            

        

        
            
            Gets the expected result
            

        

        
            
            Returns true if the result has been set
            

        

        
            
             Gets the expected exception Type
            

        

        
            
            Gets the FullName of the expected exception
            

        

        
            
            Gets the name to be used for the test
            

        

        
            
            Gets the description of the test
            

        

        
            
            Gets a value indicating whether this   is ignored.
            

            true
 if ignored; otherwise, false
.

        

        
            
            Gets a value indicating whether this   is explicit.
            

            true
 if explicit; otherwise, false
.

        

        
            
            Gets the ignore reason.
            

            The ignore reason.

        

        
            
            Gets a list of categories associated with this test.
            

        

        
            
            Gets the property dictionary for this test
            

        

        
            
            Provide the context information of the current test
            

        

        
            
            Constructs a TestContext using the provided context dictionary
            

            A context dictionary

        

        
            
            Get the current test context. This is created
            as needed. The user may save the context for
            use within a test, but it should not be used
            outside the test for which it is created.
            

        

        
            
            Gets a TestAdapter representing the currently executing test in this context.
            

        

        
            
            Gets a ResultAdapter representing the current result for the test 
            executing in this context.
            

        

        
            
            Gets the directory containing the current test assembly.
            

        

        
            
            Gets the directory to be used for outputing files created
            by this test run.
            

        

        
            
            TestAdapter adapts a Test for consumption by
            the user test code.
            

        

        
            
            Constructs a TestAdapter for this context
            

            The context dictionary

        

        
            
            The name of the test.
            

        

        
            
            The FullName of the test
            

        

        
            
            The properties of the test.
            

        

        
            
            ResultAdapter adapts a TestResult for consumption by
            the user test code.
            

        

        
            
            Construct a ResultAdapter for a context
            

            The context holding the result

        

        
            
            The TestState of current test. This maps to the ResultState
            used in nunit.core and is subject to change in the future.
            

        

        
            
            The TestStatus of current test. This enum will be used
            in future versions of NUnit and so is to be preferred
            to the TestState value.
            

        

        
            
            Provides details about a test
            

        

        
            
             Creates an instance of TestDetails
            

            The fixture that the test is a member of, if available.

            The method that implements the test, if available.

            The full name of the test.

            A string representing the type of test, e.g. "Test Case".

            Indicates if the test represents a suite of tests.

        

        
            
             The fixture that the test is a member of, if available.
            

        

        
            
            The method that implements the test, if available.
            

        

        
            
            The full name of the test.
            

        

        
            
            A string representing the type of test, e.g. "Test Case".
            

        

        
            
            Indicates if the test represents a suite of tests.
            

        

        
            
            The ResultState enum indicates the result of running a test
            

        

        
            
            The result is inconclusive
            

        

        
            
            The test was not runnable.
            

        

        
            
            The test has been skipped. 
            

        

        
            
            The test has been ignored.
            

        

        
            
            The test succeeded
            

        

        
            
            The test failed
            

        

        
            
            The test encountered an unexpected exception
            

        

        
            
            The test was cancelled by the user
            

        

        
            
            The TestStatus enum indicates the result of running a test
            

        

        
            
            The test was inconclusive
            

        

        
            
            The test has skipped 
            

        

        
            
            The test succeeded
            

        

        
            
            The test failed
            

        

        
            
            Helper class with static methods used to supply constraints
            that operate on strings.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            

        

        
            
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            

        

        
            
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            

        

        
            
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            

        

        
            
            Construct a MessageWriter given a culture
            

        

        
            
            Method to write single line  message with optional args, usually
            written to precede the general failure message.
            

            The message to be written

            Any arguments used in formatting the message

        

        
            
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            

            The indentation level of the message

            The message to be written

            Any arguments used in formatting the message

        

        
            
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            

            The constraint that failed

        

        
            
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            

            The expected value

            The actual value causing the failure

        

        
            
            Display Expected and Actual lines for given values, including
            a tolerance value on the Expected line.
            

            The expected value

            The actual value causing the failure

            The tolerance within which the test was made

        

        
            
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is &gt;=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            

            The expected string value

            The actual string value

            The point at which the strings don't match or -1

            If true, case is ignored in locating the point where the strings differ

            If true, the strings should be clipped to fit the line

        

        
            
            Writes the text for a connector.
            

            The connector.

        

        
            
            Writes the text for a predicate.
            

            The predicate.

        

        
            
            Writes the text for an expected value.
            

            The expected value.

        

        
            
            Writes the text for a modifier
            

            The modifier.

        

        
            
            Writes the text for an actual value.
            

            The actual value.

        

        
            
            Writes the text for a generalized value.
            

            The value.

        

        
            
            Writes the text for a collection value,
            starting at a particular point, to a max length
            

            The collection containing elements to write.

            The starting point of the elements to write

            The maximum number of elements to write

        

        
            
            Abstract method to get the max line length
            

        

        
            
            Prefix used for the expected value line of a message
            

        

        
            
            Prefix used for the actual value line of a message
            

        

        
            
            Length of a message prefix
            

        

        
            
            Construct a TextMessageWriter
            

        

        
            
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            

            

            

        

        
            
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            

            The indentation level of the message

            The message to be written

            Any arguments used in formatting the message

        

        
            
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            

            The constraint that failed

        

        
            
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            

            The expected value

            The actual value causing the failure

        

        
            
            Display Expected and Actual lines for given values, including
            a tolerance value on the expected line.
            

            The expected value

            The actual value causing the failure

            The tolerance within which the test was made

        

        
            
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is &gt;=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            

            The expected string value

            The actual string value

            The point at which the strings don't match or -1

            If true, case is ignored in string comparisons

            If true, clip the strings to fit the max line length

        

        
            
            Writes the text for a connector.
            

            The connector.

        

        
            
            Writes the text for a predicate.
            

            The predicate.

        

        
            
            Write the text for a modifier.
            

            The modifier.

        

        
            
            Writes the text for an expected value.
            

            The expected value.

        

        
            
            Writes the text for an actual value.
            

            The actual value.

        

        
            
            Writes the text for a generalized value.
            

            The value.

        

        
            
            Writes the text for a collection value,
            starting at a particular point, to a max length
            

            The collection containing elements to write.

            The starting point of the elements to write

            The maximum number of elements to write

        

        
            
            Write the generic 'Expected' line for a constraint
            

            The constraint that failed

        

        
            
            Write the generic 'Expected' line for a given value
            

            The expected value

        

        
            
            Write the generic 'Expected' line for a given value
            and tolerance.
            

            The expected value

            The tolerance within which the test was made

        

        
            
            Write the generic 'Actual' line for a constraint
            

            The constraint for which the actual value is to be written

        

        
            
            Write the generic 'Actual' line for a given value
            

            The actual value causing a failure

        

        
            
            Gets or sets the maximum line length for this writer
            

        

        
            
            Helper class with properties and methods that supply
            constraints that operate on exceptions.
            

        

        
            
            Creates a constraint specifying the exact type of exception expected
            

        

        
            
            Creates a constraint specifying the exact type of exception expected
            

        

        
            
            Creates a constraint specifying the type of exception expected
            

        

        
            
            Creates a constraint specifying the type of exception expected
            

        

        
            
            Creates a constraint specifying an expected exception
            

        

        
            
            Creates a constraint specifying an exception with a given InnerException
            

        

        
            
            Creates a constraint specifying an expected TargetInvocationException
            

        

        
            
            Creates a constraint specifying an expected TargetInvocationException
            

        

        
            
            Creates a constraint specifying an expected TargetInvocationException
            

        

        
            
            Creates a constraint specifying that no exception is thrown
            

        

        
            
            Attribute used to apply a category to a test
            

        

        
            
            The name of the category
            

        

        
            
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            

            The name of the category

        

        
            
            Protected constructor uses the Type name as the name
            of the category.
            

        

        
            
            The name of the category
            

        

        
            
            Used to mark a field for use as a datapoint when executing a theory
            within the same fixture that requires an argument of the field's Type.
            

        

        
            
            Used to mark an array as containing a set of datapoints to be used
            executing a theory within the same fixture that requires an argument 
            of the Type of the array elements.
            

        

        
            
            Attribute used to provide descriptive text about a 
            test case or fixture.
            

        

        
            
            Construct the attribute
            

            Text describing the test

        

        
            
            Gets the test description
            

        

        
            
            Enumeration indicating how the expected message parameter is to be used
            

        

        
            Expect an exact match
        

        
            Expect a message containing the parameter string
        

        
            Match the regular expression provided as a parameter
        

        
            Expect a message that starts with the parameter string
        

        
            
            ExpectedExceptionAttribute
            

            
        

        
            
            Constructor for a non-specific exception
            

        

        
            
            Constructor for a given type of exception
            

            The type of the expected exception

        

        
            
            Constructor for a given exception name
            

            The full name of the expected exception

        

        
            
            Gets or sets the expected exception type
            

        

        
            
            Gets or sets the full Type name of the expected exception
            

        

        
            
            Gets or sets the expected message text
            

        

        
            
            Gets or sets the user message displayed in case of failure
            

        

        
            
             Gets or sets the type of match to be performed on the expected message
            

        

        
            
             Gets the name of a method to be used as an exception handler
            

        

        
            
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            

        

        
            
            Default constructor
            

        

        
            
            Constructor with a reason
            

            The reason test is marked explicit

        

        
            
            The reason test is marked explicit
            

        

        
            
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            

        

        
            
            Constructs the attribute without giving a reason 
            for ignoring the test.
            

        

        
            
            Constructs the attribute giving a reason for ignoring the test
            

            The reason for ignoring the test

        

        
            
            The reason for ignoring a test
            

        

        
            
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            

        

        
            
            Constructor with no included items specified, for use
            with named property syntax.
            

        

        
            
            Constructor taking one or more included items
            

            Comma-delimited list of included items

        

        
            
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            

        

        
            
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            

        

        
            
            The reason for including or excluding the test
            

        

        
            
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            

        

        
            
            Constructor with no platforms specified, for use
            with named property syntax.
            

        

        
            
            Constructor taking one or more platforms
            

            Comma-deliminted list of platforms

        

        
            
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            

        

        
            
            Constructor with no cultures specified, for use
            with named property syntax.
            

        

        
            
            Constructor taking one or more cultures
            

            Comma-deliminted list of cultures

        

        
            
            Marks a test to use a combinatorial join of any argument data 
            provided. NUnit will create a test case for every combination of 
            the arguments provided. This can result in a large number of test
            cases and so should be used judiciously. This is the default join
            type, so the attribute need not be used except as documentation.
            

        

        
            
            PropertyAttribute is used to attach information to a test as a name/value pair..
            

        

        
            
            Construct a PropertyAttribute with a name and string value
            

            The name of the property

            The property value

        

        
            
            Construct a PropertyAttribute with a name and int value
            

            The name of the property

            The property value

        

        
            
            Construct a PropertyAttribute with a name and double value
            

            The name of the property

            The property value

        

        
            
            Constructor for derived classes that set the
            property dictionary directly.
            

        

        
            
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            

        

        
            
            Gets the property dictionary for this attribute
            

        

        
            
            Default constructor
            

        

        
            
            Marks a test to use pairwise join of any argument data provided. 
            NUnit will attempt too excercise every pair of argument values at 
            least once, using as small a number of test cases as it can. With
            only two arguments, this is the same as a combinatorial join.
            

        

        
            
            Default constructor
            

        

        
            
            Marks a test to use a sequential join of any argument data
            provided. NUnit will use arguements for each parameter in
            sequence, generating test cases up to the largest number
            of argument values provided and using null for any arguments
            for which it runs out of values. Normally, this should be
            used with the same number of arguments for each parameter.
            

        

        
            
            Default constructor
            

        

        
            
            Summary description for MaxTimeAttribute.
            

        

        
            
            Construct a MaxTimeAttribute, given a time in milliseconds.
            

            The maximum elapsed time in milliseconds

        

        
            
            RandomAttribute is used to supply a set of random values
            to a single parameter of a parameterized test.
            

        

        
            
            ValuesAttribute is used to provide literal arguments for
            an individual parameter of a test.
            

        

        
            
            Abstract base class for attributes that apply to parameters 
            and supply data for the parameter.
            

        

        
            
            Gets the data to be provided to the specified parameter
            

        

        
            
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary.
            

        

        
            
            Construct with one argument
            

            

        

        
            
            Construct with two arguments
            

            

            

        

        
            
            Construct with three arguments
            

            

            

            

        

        
            
            Construct with an array of arguments
            

            

        

        
            
            Get the collection of values to be used as arguments
            

        

        
            
            Construct a set of doubles from 0.0 to 1.0,
            specifying only the count.
            

            

        

        
            
            Construct a set of doubles from min to max
            

            

            

            

        

        
            
            Construct a set of ints from min to max
            

            

            

            

        

        
            
            Get the collection of values to be used as arguments
            

        

        
            
            RangeAttribute is used to supply a range of values to an
            individual parameter of a parameterized test.
            

        

        
            
            Construct a range of ints using default step of 1
            

            

            

        

        
            
            Construct a range of ints specifying the step size 
            

            

            

            

        

        
            
            Construct a range of longs
            

            

            

            

        

        
            
            Construct a range of doubles
            

            

            

            

        

        
            
            Construct a range of floats
            

            

            

            

        

        
            
            RepeatAttribute may be applied to test case in order
            to run it multiple times.
            

        

        
            
            Construct a RepeatAttribute
            

            The number of times to run the test

        

        
            
            RequiredAddinAttribute may be used to indicate the names of any addins
            that must be present in order to run some or all of the tests in an
            assembly. If the addin is not loaded, the entire assembly is marked
            as NotRunnable.
            

        

        
            
            Initializes a new instance of the   class.
            

            The required addin.

        

        
            
            Gets the name of required addin.
            

            The required addin name.

        

        
            
            Summary description for SetCultureAttribute.
            

        

        
            
            Construct given the name of a culture
            

            

        

        
            
            Summary description for SetUICultureAttribute.
            

        

        
            
            Construct given the name of a culture
            

            

        

        
            
            SetUpAttribute is used in a TestFixture to identify a method
            that is called immediately before each test is run. It is 
            also used in a SetUpFixture to identify the method that is
            called once, before any of the subordinate tests are run.
            

        

        
            
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            

        

        
            
            Attribute used to mark a static (shared in VB) property
            that returns a list of tests.
            

        

        
            
            Attribute used in a TestFixture to identify a method that is 
            called immediately after each test is run. It is also used
            in a SetUpFixture to identify the method that is called once,
            after all subordinate tests have run. In either case, the method 
            is guaranteed to be called, even if an exception is thrown.
            

        

        
            
            Provide actions to execute before and after tests.
            

        

        
            
            When implemented by an attribute, this interface implemented to provide actions to execute before and after tests.
            

        

        
            
            Executed before each test is run
            

            Provides details about the test that is going to be run.

        

        
            
            Executed after each test is run
            

            Provides details about the test that has just been run.

        

        
            
            Provides the target for the action attribute
            

            The target for the action attribute

        

        
            
            Adding this attribute to a method within a   
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            

            
            
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            

            
        

        
            
            Descriptive text for this test
            

        

        
            
            TestCaseAttribute is used to mark parameterized test cases
            and provide them with their arguments.
            

        

        
            
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            

            

        

        
            
            Construct a TestCaseAttribute with a single argument
            

            

        

        
            
            Construct a TestCaseAttribute with a two arguments
            

            

            

        

        
            
            Construct a TestCaseAttribute with a three arguments
            

            

            

            

        

        
            
            Gets the list of arguments to a test case
            

        

        
            
            Gets or sets the expected result. Use
            ExpectedResult by preference.
            

            The result.

        

        
            
            Gets or sets the expected result.
            

            The result.

        

        
            
            Gets a flag indicating whether an expected
            result has been set.
            

        

        
            
            Gets a list of categories associated with this test;
            

        

        
            
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            

        

        
            
            Gets or sets the expected exception.
            

            The expected exception.

        

        
            
            Gets or sets the name the expected exception.
            

            The expected name of the exception.

        

        
            
            Gets or sets the expected message of the expected exception
            

            The expected message of the exception.

        

        
            
             Gets or sets the type of match to be performed on the expected message
            

        

        
            
            Gets or sets the description.
            

            The description.

        

        
            
            Gets or sets the name of the test.
            

            The name of the test.

        

        
            
            Gets or sets the ignored status of the test
            

        

        
            
            Gets or sets the ignored status of the test
            

        

        
            
            Gets or sets the explicit status of the test
            

        

        
            
            Gets or sets the reason for not running the test
            

        

        
            
            Gets or sets the reason for not running the test.
            Set has the side effect of marking the test as ignored.
            

            The ignore reason.

        

        
            
            FactoryAttribute indicates the source to be used to
            provide test cases for a test method.
            

        

        
            
            Construct with the name of the data source, which must
            be a property, field or method of the test class itself.
            

            An array of the names of the factories that will provide data

        

        
            
            Construct with a Type, which must implement IEnumerable
            

            The Type that will provide data

        

        
            
            Construct with a Type and name.
            that don't support params arrays.
            

            The Type that will provide data

            The name of the method, property or field that will provide data

        

        
            
            The name of a the method, property or fiend to be used as a source
            

        

        
            
            A Type to be used as a source
            

        

        
            
            Gets or sets the category associated with this test.
            May be a single category or a comma-separated list.
            

        

        
            
            [TestFixture]
            public class ExampleClass 
            {}
            

        

        
            
            Default constructor
            

        

        
            
            Construct with a object[] representing a set of arguments. 
            In .NET 2.0, the arguments may later be separated into
            type arguments and constructor arguments.
            

            

        

        
            
            Descriptive text for this fixture
            

        

        
            
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            

        

        
            
            Gets a list of categories for this fixture
            

        

        
            
            The arguments originally provided to the attribute
            

        

        
            
            Gets or sets a value indicating whether this   should be ignored.
            

            true
 if ignore; otherwise, false
.

        

        
            
            Gets or sets the ignore reason. May set Ignored as a side effect.
            

            The ignore reason.

        

        
            
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            

        

        
            
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            

        

        
            
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            

        

        
            
            Adding this attribute to a method within a   
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            

            
            
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            

            
        

        
            
            Used on a method, marks the test with a timeout value in milliseconds. 
            The test will be run in a separate thread and is cancelled if the timeout 
            is exceeded. Used on a method or assembly, sets the default timeout 
            for all contained test methods.
            

        

        
            
            Construct a TimeoutAttribute given a time in milliseconds
            

            The timeout value in milliseconds

        

        
            
            Marks a test that must run in the STA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use STAThreadAttribute
            to serve the same purpose.
            

        

        
            
            Construct a RequiresSTAAttribute
            

        

        
            
            Marks a test that must run in the MTA, causing it
            to run in a separate thread if necessary.
            
            On methods, you may also use MTAThreadAttribute
            to serve the same purpose.
            

        

        
            
            Construct a RequiresMTAAttribute
            

        

        
            
            Marks a test that must run on a separate thread.
            

        

        
            
            Construct a RequiresThreadAttribute
            

        

        
            
            Construct a RequiresThreadAttribute, specifying the apartment
            

        

        
            
            ValueSourceAttribute indicates the source to be used to
            provide data for one parameter of a test method.
            

        

        
            
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            

            The name of the data source to be used

        

        
            
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            

            The Type that will provide data

            The name of the method, property or field that will provide data

        

        
            
            The name of a the method, property or fiend to be used as a source
            

        

        
            
            A Type to be used as a source
            

        

        
            
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            

        

        
            
            Abstract base class used for prefixes
            

        

        
            
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine 
            constraints.
            

        

        
            
            The IConstraintExpression interface is implemented by all
            complete and resolvable constraints and expressions.
            

        

        
            
            Return the top-level constraint for this expression
            

            

        

        
            
            Static UnsetObject used to detect derived constraints
            failing to set the actual value.
            

        

        
            
            The actual value being tested against a constraint
            

        

        
            
            The display name of this Constraint for use by ToString()
            

        

        
            
            Argument fields used by ToString();
            

        

        
            
            The builder holding this constraint
            

        

        
            
            Construct a constraint with no arguments
            

        

        
            
            Construct a constraint with one argument
            

        

        
            
            Construct a constraint with two arguments
            

        

        
            
            Sets the ConstraintBuilder holding this constraint
            

        

        
            
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the constraint and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            

            The MessageWriter on which to display the message

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Test whether the constraint is satisfied by an
            ActualValueDelegate that returns the value to be tested.
            The default implementation simply evaluates the delegate
            but derived classes may override it to provide for delayed 
            processing.
            

            An  

            True for success, false for failure

        

        
            
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            

            A reference to the value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            

            

        

        
            
            Returns the string representation of this constraint
            

        

        
            
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            

        

        
            
            Returns a DelayedConstraint with the specified delay time.
            

            The delay in milliseconds.

            

        

        
            
            Returns a DelayedConstraint with the specified delay time
            and polling interval.
            

            The delay in milliseconds.

            The interval at which to test the constraint.

            

        

        
            
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            

        

        
            
            Returns a ConstraintExpression by appending And
            to the current constraint.
            

        

        
            
            Returns a ConstraintExpression by appending And
            to the current constraint.
            

        

        
            
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            

        

        
            
            Class used to detect any derived constraints
            that fail to set the actual value in their
            Matches override.
            

        

        
            
            The base constraint
            

        

        
            
            Construct given a base constraint
            

            

        

        
            
            Construct an AllItemsConstraint on top of an existing constraint
            

            

        

        
            
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            AndConstraint succeeds only if both members succeed.
            

        

        
            
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            

        

        
            
            The first constraint being combined
            

        

        
            
            The second constraint being combined
            

        

        
            
            Construct a BinaryConstraint from two other constraints
            

            The first constraint

            The second constraint

        

        
            
            Create an AndConstraint from two other constraints
            

            The first constraint

            The second constraint

        

        
            
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            

            The actual value

            True if the constraints both succeeded

        

        
            
            Write a description for this contraint to a MessageWriter
            

            The MessageWriter to receive the description

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            

        

        
            
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            

        

        
            
            The expected Type used by the constraint
            

        

        
            
            Construct a TypeConstraint for a given Type
            

            

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. TypeConstraints override this method to write
            the name of the type.
            

            The writer on which the actual value is displayed

        

        
            
            Construct an AssignableFromConstraint for the type provided
            

            

        

        
            
            Test whether an object can be assigned from the specified type
            

            The object to be tested

            True if the object can be assigned a value of the expected Type, otherwise false.

        

        
            
            Write a description of this constraint to a MessageWriter
            

            The MessageWriter to use

        

        
            
            AssignableToConstraint is used to test that an object
            can be assigned to a given Type.
            

        

        
            
            Construct an AssignableToConstraint for the type provided
            

            

        

        
            
            Test whether an object can be assigned to the specified type
            

            The object to be tested

            True if the object can be assigned a value of the expected Type, otherwise false.

        

        
            
            Write a description of this constraint to a MessageWriter
            

            The MessageWriter to use

        

        
            
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            

        

        
            
            Constructs an AttributeConstraint for a specified attriute
            Type and base constraint.
            

            

            

        

        
            
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            

        

        
            
            Writes a description of the attribute to the specified writer.
            

        

        
            
            Writes the actual value supplied to the specified writer.
            

        

        
            
            Returns a string representation of the constraint.
            

        

        
            
            AttributeExistsConstraint tests for the presence of a
            specified attribute on  a Type.
            

        

        
            
            Constructs an AttributeExistsConstraint for a specific attribute Type
            

            

        

        
            
            Tests whether the object provides the expected attribute.
            

            A Type, MethodInfo, or other ICustomAttributeProvider

            True if the expected attribute is present, otherwise false

        

        
            
            Writes the description of the constraint to the specified writer
            

        

        
            
            BasicConstraint is the abstract base for constraints that
            perform a simple comparison to a constant value.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected.

            The description.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            BinarySerializableConstraint tests whether 
            an object is serializable in binary format.
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            Returns the string representation
            

        

        
            
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            

        

        
            
            Construct an empty CollectionConstraint
            

        

        
            
            Construct a CollectionConstraint
            

            

        

        
            
            Determines whether the specified enumerable is empty.
            

            The enumerable.

            
            	true
 if the specified enumerable is empty; otherwise, false
.
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Protected method to be implemented by derived classes
            

            

            

        

        
            
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            

        

        
            
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            

        

        
            
            Construct an empty CollectionConstraint
            

        

        
            
            Construct a CollectionConstraint
            

            

        

        
            
            Flag the constraint to use the supplied EqualityAdapter.
            NOTE: For internal use only.
            

            The EqualityAdapter to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied Comparison object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IEqualityComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IEqualityComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Compares two collection members for equality
            

        

        
            
            Return a new CollectionTally for use in making tests
            

            The collection to be included in the tally

        

        
            
            Flag the constraint to ignore case and return self.
            

        

        
            
            Construct a CollectionContainsConstraint
            

            

        

        
            
            Test whether the expected item is contained in the collection
            

            

            

        

        
            
            Write a descripton of the constraint to a MessageWriter
            

            

        

        
            
            CollectionEquivalentCOnstraint is used to determine whether two
            collections are equivalent.
            

        

        
            
            Construct a CollectionEquivalentConstraint
            

            

        

        
            
            Test whether two collections are equivalent
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            

        

        
            
            Construct a CollectionOrderedConstraint
            

        

        
            
            Modifies the constraint to use an IComparer and returns self.
            

        

        
            
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self.
            

        

        
            
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self.
            

        

        
            
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            

        

        
            
            Test whether the collection is ordered
            

            

            

        

        
            
            Write a description of the constraint to a MessageWriter
            

            

        

        
            
            Returns the string representation of the constraint.
            

            

        

        
            
             If used performs a reverse comparison
            

        

        
            
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            

        

        
            
            Construct a CollectionSubsetConstraint
            

            The collection that the actual value is expected to be a subset of

        

        
            
            Test whether the actual collection is a subset of 
            the expected collection provided.
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            CollectionTally counts (tallies) the number of
            occurences of each object in one or more enumerations.
            

        

        
            
            Construct a CollectionTally object from a comparer and a collection
            

        

        
            
            Try to remove an object from the tally
            

            The object to remove

            True if successful, false if the object was not found

        

        
            
            Try to remove a set of objects from the tally
            

            The objects to remove

            True if successful, false if any object was not found

        

        
            
            The number of objects remaining in the tally
            

        

        
            
            ComparisonAdapter class centralizes all comparisons of
            values in NUnit, adapting to the use of any provided
            IComparer, IComparer&lt;T&gt; or Comparison&lt;T&gt;
            

        

        
            
            Returns a ComparisonAdapter that wraps an IComparer
            

        

        
            
            Returns a ComparisonAdapter that wraps an IComparer&lt;T&gt;
            

        

        
            
            Returns a ComparisonAdapter that wraps a Comparison&lt;T&gt;
            

        

        
            
            Compares two objects
            

        

        
            
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            

        

        
            
            Construct a ComparisonAdapter for an IComparer
            

        

        
            
            Compares two objects
            

            

            

            

        

        
            
            Construct a default ComparisonAdapter
            

        

        
            
            ComparisonAdapter&lt;T&gt; extends ComparisonAdapter and
            allows use of an IComparer&lt;T&gt; or Comparison&lt;T&gt;
            to actually perform the comparison.
            

        

        
            
            Construct a ComparisonAdapter for an IComparer&lt;T&gt;
            

        

        
            
            Compare a Type T to an object
            

        

        
            
            Construct a ComparisonAdapter for a Comparison&lt;T&gt;
            

        

        
            
            Compare a Type T to an object
            

        

        
            
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other. This class supplies the Using modifiers.
            

        

        
            
            ComparisonAdapter to be used in making the comparison
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Modifies the constraint to use an IComparer and returns self
            

        

        
            
            Modifies the constraint to use an IComparer&lt;T&gt; and returns self
            

        

        
            
            Modifies the constraint to use a Comparison&lt;T&gt; and returns self
            

        

        
            
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            

        

        
            
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reognized. a ConstraintStack holds 
            input constraints as well as the results of each
            operator applied.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            

            The operator to push.

        

        
            
            Appends the specified constraint to the expresson by pushing
            it on the constraint stack.
            

            The constraint to push.

        

        
            
            Sets the top operator right context.
            

            The right context.

        

        
            
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            

            The target precedence.

        

        
            
            Resolves this instance, returning a Constraint. If the builder
            is not currently in a resolvable state, an exception is thrown.
            

            The resolved constraint

        

        
            
            Gets a value indicating whether this instance is resolvable.
            

            
            	true
 if this instance is resolvable; otherwise, false
.
            

        

        
            
            OperatorStack is a type-safe stack for holding ConstraintOperators
            

        

        
            
            Initializes a new instance of the   class.
            

            The builder.

        

        
            
            Pushes the specified operator onto the stack.
            

            The op.

        

        
            
            Pops the topmost operator from the stack.
            

            

        

        
            
            Gets a value indicating whether this   is empty.
            

            true
 if empty; otherwise, false
.

        

        
            
            Gets the topmost operator without modifying the stack.
            

            The top.

        

        
            
            ConstraintStack is a type-safe stack for holding Constraints
            

        

        
            
            Initializes a new instance of the   class.
            

            The builder.

        

        
            
            Pushes the specified constraint. As a side effect,
            the constraint's builder field is set to the 
            ConstraintBuilder owning this stack.
            

            The constraint.

        

        
            
            Pops this topmost constrait from the stack.
            As a side effect, the constraint's builder
            field is set to null.
            

            

        

        
            
            Gets a value indicating whether this   is empty.
            

            true
 if empty; otherwise, false
.

        

        
            
            Gets the topmost constraint without modifying the stack.
            

            The topmost constraint

        

        
            
            ConstraintExpression represents a compound constraint in the 
            process of being constructed from a series of syntactic elements.
            
            Individual elements are appended to the expression as they are
            reognized. Once an actual Constraint is appended, the expression
            returns a resolvable Constraint.
            

        

        
            
            ConstraintExpressionBase is the abstract base class for the 
            ConstraintExpression class, which represents a 
            compound constraint in the process of being constructed 
            from a series of syntactic elements.
            
            NOTE: ConstraintExpressionBase is separate because the
            ConstraintExpression class was generated in earlier
            versions of NUnit. The two classes may be combined
            in a future version.
            

        

        
            
            The ConstraintBuilder holding the elements recognized so far
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   
            class passing in a ConstraintBuilder, which may be pre-populated.
            

            The builder.

        

        
            
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            

            

        

        
            
            Appends an operator to the expression and returns the
            resulting expression itself.
            

        

        
            
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            

        

        
            
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built.
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            Initializes a new instance of the   
            class passing in a ConstraintBuilder, which may be pre-populated.
            

            The builder.

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            

        

        
            
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            

        

        
            
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            

        

        
            
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            

        

        
            
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            

        

        
            
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            

        

        
            
            Returns a constraint that tests two items for equality
            

        

        
            
            Returns a constraint that tests that two references are the same object
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            

        

        
            
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the 
            collection supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            

        

        
            
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            

        

        
            
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            

        

        
            
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument. 
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a 
            collection member.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            

        

        
            
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same as an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the path provided 
            is the same path or under an expected path after canonicalization.
            

        

        
            
            Returns a constraint that tests whether the actual value falls 
            within a specified range.
            

        

        
            
            Returns a ConstraintExpression that negates any
            following constraint.
            

        

        
            
            Returns a ConstraintExpression that negates any
            following constraint.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            

        

        
            
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            

        

        
            
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            

        

        
            
            With is currently a NOP - reserved for future use.
            

        

        
            
            Returns a constraint that tests for null
            

        

        
            
            Returns a constraint that tests for True
            

        

        
            
            Returns a constraint that tests for False
            

        

        
            
            Returns a constraint that tests for a positive value
            

        

        
            
            Returns a constraint that tests for a negative value
            

        

        
            
            Returns a constraint that tests for NaN
            

        

        
            
            Returns a constraint that tests for empty
            

        

        
            
            Returns a constraint that tests whether a collection 
            contains all unique items.
            

        

        
            
            Returns a constraint that tests whether an object graph is serializable in binary format.
            

        

        
            
            Returns a constraint that tests whether an object graph is serializable in xml format.
            

        

        
            
            Returns a constraint that tests whether a collection is ordered
            

        

        
            
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied Comparison object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IEqualityComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IEqualityComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to ignore case and return self.
            

        

        
            
             Applies a delay to the match so that a match can be evaluated in the future.
            

        

        
            
             Creates a new DelayedConstraint
            

            The inner constraint two decorate

            The time interval after which the match is performed

            If the value of   is less than 0

        

        
            
             Creates a new DelayedConstraint
            

            The inner constraint two decorate

            The time interval after which the match is performed

            The time interval used for polling

            If the value of   is less than 0

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for if the base constraint fails, false if it succeeds

        

        
            
            Test whether the constraint is satisfied by a delegate
            

            The delegate whose value is to be tested

            True for if the base constraint fails, false if it succeeds

        

        
            
            Test whether the constraint is satisfied by a given reference.
            Overridden to wait for the specified delay period before
            calling the base constraint with the dereferenced value.
            

            A reference to the value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a MessageWriter.
            

            The writer on which the actual value is displayed

        

        
            
            Returns the string representation of the constraint.
            

        

        
            
            EmptyCollectionConstraint tests whether a collection is empty. 
            

        

        
            
            Check that the collection is empty
            

            

            

        

        
            
            Write the constraint description to a MessageWriter
            

            

        

        
            
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            EmptyDirectoryConstraint is used to test that a directory is empty
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            EmptyStringConstraint tests whether a string is empty.
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            

        

        
            
            StringConstraint is the abstract base for constraints
            that operate on strings. It supports the IgnoreCase
            modifier for string operations.
            

        

        
            
            The expected value
            

        

        
            
            Indicates whether tests should be case-insensitive
            

        

        
            
            Constructs a StringConstraint given an expected value
            

            The expected value

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Test whether the constraint is satisfied by a given string
            

            The string to be tested

            True for success, false for failure

        

        
            
            Modify the constraint to ignore case in matching.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected string

        

        
            
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            

            

            

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor. Two objects are 
            considered equal if both are null, or if both have the same 
            value. NUnit has special semantics for some object types.
            

        

        
            
            If true, strings in error messages will be clipped
            

        

        
            
            NUnitEqualityComparer used to test equality.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected value.

        

        
            
            Flag the constraint to use a tolerance when determining equality.
            

            Tolerance value to be used

            Self.

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied Comparison object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IEqualityComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Flag the constraint to use the supplied IEqualityComparer object.
            

            The IComparer object to use.

            Self.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write a failure message. Overridden to provide custom 
            failure messages for EqualConstraint.
            

            The MessageWriter to write to

        

        
            
            Write description of this constraint
            

            The MessageWriter to write to

        

        
            
            Display the failure information for two collections that did not match.
            

            The MessageWriter on which to display

            The expected collection.

            The actual collection

            The depth of this failure in a set of nested collections

        

        
            
            Displays a single line showing the types and sizes of the expected
            and actual enumerations, collections or arrays. If both are identical, 
            the value is only shown once.
            

            The MessageWriter on which to display

            The expected collection or array

            The actual collection or array

            The indentation level for the message line

        

        
            
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both values are shown.
            

            The MessageWriter on which to display

            The expected array

            The actual array

            Index of the failure point in the underlying collections

            The indentation level for the message line

        

        
            
            Display the failure information for two IEnumerables that did not match.
            

            The MessageWriter on which to display

            The expected enumeration.

            The actual enumeration

            The depth of this failure in a set of nested collections

        

        
            
            Flag the constraint to ignore case and return self.
            

        

        
            
            Flag the constraint to suppress string clipping 
            and return self.
            

        

        
            
            Flag the constraint to compare arrays as collections
            and return self.
            

        

        
            
            Switches the .Within() modifier to interpret its tolerance as
            a distance in representable values (see remarks).
            

            Self.

            
            Ulp stands for "unit in the last place" and describes the minimum
            amount a given value can change. For any integers, an ulp is 1 whole
            digit. For floating point values, the accuracy of which is better
            for smaller numbers and worse for larger numbers, an ulp depends
            on the size of the number. Using ulps for comparison of floating
            point results instead of fixed tolerances is safer because it will
            automatically compensate for the added inaccuracy of larger numbers.
            

        

        
            
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual values is allowed to deviate from
            the expected value.
            

            Self

        

        
            
            Causes the tolerance to be interpreted as a TimeSpan in days.
            

            Self

        

        
            
            Causes the tolerance to be interpreted as a TimeSpan in hours.
            

            Self

        

        
            
            Causes the tolerance to be interpreted as a TimeSpan in minutes.
            

            Self

        

        
            
            Causes the tolerance to be interpreted as a TimeSpan in seconds.
            

            Self

        

        
            
            Causes the tolerance to be interpreted as a TimeSpan in milliseconds.
            

            Self

        

        
            
            Causes the tolerance to be interpreted as a TimeSpan in clock ticks.
            

            Self

        

        
            
            EqualityAdapter class handles all equality comparisons
            that use an IEqualityComparer, IEqualityComparer&lt;T&gt;
            or a ComparisonAdapter.
            

        

        
            
            Compares two objects, returning true if they are equal
            

        

        
            
            Returns true if the two objects can be compared by this adapter.
            The base adapter cannot handle IEnumerables except for strings.
            

        

        
            
            Returns an EqualityAdapter that wraps an IComparer.
            

        

        
            
            Returns an EqualityAdapter that wraps an IEqualityComparer.
            

        

        
            
            Returns an EqualityAdapter that wraps an IEqualityComparer&lt;T&gt;.
            

        

        
            
            Returns an EqualityAdapter that wraps an IComparer&lt;T&gt;.
            

        

        
            
            Returns an EqualityAdapter that wraps a Comparison&lt;T&gt;.
            

        

        
            
            EqualityAdapter that wraps an IComparer.
            

        

        
            
            Returns true if the two objects can be compared by this adapter.
            Generic adapter requires objects of the specified type.
            

        

        
            
            EqualityAdapter that wraps an IComparer.
            

        

        
            
            EqualityAdapterList represents a list of EqualityAdapters
            in a common class across platforms.
            

        

        
            
            ExactCountConstraint applies another constraint to each
            item in a collection, succeeding only if a specified
            number of items succeed.
            

        

        
            
            Construct an ExactCountConstraint on top of an existing constraint
            

            

            

        

        
            
            Apply the item constraint to each item in the collection,
            succeeding only if the expected number of items pass.
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            

        

        
            
            Construct an ExactTypeConstraint for a given Type
            

            The expected Type.

        

        
            
            Test that an object is of the exact type specified
            

            The actual value.

            True if the tested object is of the exact type provided, otherwise false.

        

        
            
            Write the description of this constraint to a MessageWriter
            

            The MessageWriter to use

        

        
            
            ExceptionTypeConstraint is a special version of ExactTypeConstraint
            used to provided detailed info about the exception thrown in
            an error message.
            

        

        
            
            Constructs an ExceptionTypeConstraint
            

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. Overriden to write additional information 
            in the case of an Exception.
            

            The MessageWriter to use

        

        
            
            FailurePoint class represents one point of failure
            in an equality test.
            

        

        
            
            The location of the failure
            

        

        
            
            The expected value
            

        

        
            
            The actual value
            

        

        
            
            Indicates whether the expected value is valid
            

        

        
            
            Indicates whether the actual value is valid
            

        

        
            
            FailurePointList represents a set of FailurePoints
            in a cross-platform way.
            

        

        
            
            FalseConstraint tests that the actual value is false
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            Helper routines for working with floating point numbers

            
              
                The floating point comparison code is based on this excellent article:
                http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
              

              
                "ULP" means Unit in the Last Place and in the context of this library refers to
                the distance between two adjacent floating point numbers. IEEE floating point
                numbers can only represent a finite subset of natural numbers, with greater
                accuracy for smaller numbers and lower accuracy for very large numbers.
              

              
                If a comparison is allowed "2 ulps" of deviation, that means the values are
                allowed to deviate by up to 2 adjacent floating point values, which might be
                as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
              

            

        

        
            Compares two floating point values for equality

            First floating point value to be compared

            Second floating point value t be compared

            
              Maximum number of representable floating point values that are allowed to
              be between the left and the right floating point values
            

            True if both numbers are equal or close to being equal

            
              
                Floating point values can only represent a finite subset of natural numbers.
                For example, the values 2.00000000 and 2.00000024 can be stored in a float,
                but nothing inbetween them.
              

              
                This comparison will count how many possible floating point values are between
                the left and the right number. If the number of possible values between both
                numbers is less than or equal to maxUlps, then the numbers are considered as
                being equal.
              

              
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              

            

        

        
            Compares two double precision floating point values for equality

            First double precision floating point value to be compared

            Second double precision floating point value t be compared

            
              Maximum number of representable double precision floating point values that are
              allowed to be between the left and the right double precision floating point values
            

            True if both numbers are equal or close to being equal

            
              
                Double precision floating point values can only represent a limited series of
                natural numbers. For example, the values 2.0000000000000000 and 2.0000000000000004
                can be stored in a double, but nothing inbetween them.
              

              
                This comparison will count how many possible double precision floating point
                values are between the left and the right number. If the number of possible
                values between both numbers is less than or equal to maxUlps, then the numbers
                are considered as being equal.
              

              
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              

            

        

        
            
              Reinterprets the memory contents of a floating point value as an integer value
            

            
              Floating point value whose memory contents to reinterpret
            

            
              The memory contents of the floating point value interpreted as an integer
            

        

        
            
              Reinterprets the memory contents of a double precision floating point
              value as an integer value
            

            
              Double precision floating point value whose memory contents to reinterpret
            

            
              The memory contents of the double precision floating point value
              interpreted as an integer
            

        

        
            
              Reinterprets the memory contents of an integer as a floating point value
            

            Integer value whose memory contents to reinterpret

            
              The memory contents of the integer value interpreted as a floating point value
            

        

        
            
              Reinterprets the memory contents of an integer value as a double precision
              floating point value
            

            Integer whose memory contents to reinterpret

            
              The memory contents of the integer interpreted as a double precision
              floating point value
            

        

        
            Union of a floating point variable and an integer

        

        
            The union's value as a floating point variable

        

        
            The union's value as an integer

        

        
            The union's value as an unsigned integer

        

        
            Union of a double precision floating point variable and a long

        

        
            The union's value as a double precision floating point variable

        

        
            The union's value as a long

        

        
            The union's value as an unsigned long

        

        
            
            Tests whether a value is greater than the value supplied to its constructor
            

        

        
            
            The value against which a comparison is to be made
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected value.

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Tests whether a value is greater than or equal to the value supplied to its constructor
            

        

        
            
            The value against which a comparison is to be made
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected value.

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            

        

        
            
            Construct an InstanceOfTypeConstraint for the type provided
            

            The expected Type

        

        
            
            Test whether an object is of the specified type or a derived type
            

            The object to be tested

            True if the object is of the provided type or derives from it, otherwise false.

        

        
            
            Write a description of this constraint to a MessageWriter
            

            The MessageWriter to use

        

        
            
            Tests whether a value is less than the value supplied to its constructor
            

        

        
            
            The value against which a comparison is to be made
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected value.

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Tests whether a value is less than or equal to the value supplied to its constructor
            

        

        
            
            The value against which a comparison is to be made
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected value.

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Static methods used in creating messages
            

        

        
            
            Static string used when strings are clipped
            

        

        
            
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            

            

            

        

        
            
            Converts any control characters in a string 
            to their escaped representation.
            

            The string to be converted

            The converted string

        

        
            
            Return the a string representation for a set of indices into an array
            

            Array of indices for which a string is needed

        

        
            
            Get an array of indices representing the point in a enumerable, 
            collection or array corresponding to a single int index into the 
            collection.
            

            The collection to which the indices apply

            Index in the collection

            Array of indices

        

        
            
            Clip a string to a given length, starting at a particular offset, returning the clipped
            string with ellipses representing the removed parts
            

            The string to be clipped

            The maximum permitted length of the result string

            The point at which to start clipping

            The clipped string

        

        
            
            Clip the expected and actual strings in a coordinated fashion, 
            so that they may be displayed together.
            

            

            

            

            

        

        
            
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            

            The expected string

            The actual string

            The index in the strings at which comparison should start

            Boolean indicating whether case should be ignored

            -1 if no mismatch found, or the index where mismatch found

        

        
            
            NaNConstraint tests that the actual value is a double or float NaN
            

        

        
            
            Test that the actual value is an NaN
            

            

            

        

        
            
            Write the constraint description to a specified writer
            

            

        

        
            
            NoItemConstraint applies another constraint to each
            item in a collection, failing if any of them succeeds.
            

        

        
            
            Construct a NoItemConstraint on top of an existing constraint
            

            

        

        
            
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            NotConstraint negates the effect of some other constraint
            

        

        
            
            Initializes a new instance of the   class.
            

            The base constraint to be negated.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for if the base constraint fails, false if it succeeds

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a MessageWriter.
            

            The writer on which the actual value is displayed

        

        
            
            NullConstraint tests that the actual value is null
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            NullEmptyStringConstraint tests whether a string is either null or empty.
            

        

        
            
            Constructs a new NullOrEmptyStringConstraint
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            The Numerics class contains common operations on numeric values.
            

        

        
            
            Checks the type of the object, returning true if
            the object is a numeric type.
            

            The object to check

            true if the object is a numeric type

        

        
            
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            

            The object to check

            true if the object is a floating point numeric type

        

        
            
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            

            The object to check

            true if the object is a fixed point numeric type

        

        
            
            Test two numeric values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            

            The expected value

            The actual value

            A reference to the tolerance in effect

            True if the values are equal

        

        
            
            Compare two numeric values, performing the usual numeric conversions.
            

            The expected value

            The actual value

            The relationship of the values to each other

        

        
            
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            

        

        
            
            Compares two objects
            

            

            

            

        

        
            
            Returns the default NUnitComparer.
            

        

        
            
            Generic version of NUnitComparer
            

            

        

        
            
            Compare two objects of the same type
            

        

        
            
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            

        

        
            
            
            

        

        
            
            Compares two objects for equality within a tolerance
            

            The first object to compare

            The second object to compare

            The tolerance to use in the comparison

            

        

        
            
            If true, all string comparisons will ignore case
            

        

        
            
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            

        

        
            
            Comparison objects used in comparisons for some constraints.
            

        

        
            
            List of points at which a failure occured.
            

        

        
            
            RecursionDetector used to check for recursion when
            evaluating self-referencing enumerables.
            

        

        
            
            Compares two objects for equality within a tolerance, setting
            the tolerance to the actual tolerance used if an empty
            tolerance is supplied.
            

        

        
            
            Helper method to compare two arrays
            

        

        
            
            Method to compare two DirectoryInfo objects
            

            first directory to compare

            second directory to compare

            true if equivalent, false if not

        

        
            
            Returns the default NUnitEqualityComparer
            

        

        
            
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            

        

        
            
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            

        

        
            
            Gets the list of external comparers to be used to
            test for equality. They are applied to members of
            collections, in place of NUnit's own logic.
            

        

        
            
            Gets the list of failure points for the last Match performed.
            The list consists of objects to be interpreted by the caller.
            This generally means that the caller may only make use of
            objects it has placed on the list at a particular depthy.
            

        

        
            
            RecursionDetector detects when a comparison
            between two enumerables has reached a point
            where the same objects that were previously
            compared are again being compared. This allows
            the caller to stop the comparison if desired.
            

        

        
            
            Check whether two objects have previously
            been compared, returning true if they have.
            The two objects are remembered, so that a
            second call will always return true.
            

        

        
            
            OrConstraint succeeds if either member succeeds
            

        

        
            
            Create an OrConstraint from two other constraints
            

            The first constraint

            The second constraint

        

        
            
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            

            The actual value

            True if either constraint succeeded

        

        
            
            Write a description for this contraint to a MessageWriter
            

            The MessageWriter to receive the description

        

        
            
            PathConstraint serves as the abstract base of constraints
            that operate on paths and provides several helper methods.
            

        

        
            
            The expected path used in the constraint
            

        

        
            
            Flag indicating whether a caseInsensitive comparison should be made
            

        

        
            
            Construct a PathConstraint for a give expected path
            

            The expected path

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Returns true if the expected path and actual path match
            

        

        
            
            Returns the string representation of this constraint
            

        

        
            
            Transform the provided path to its canonical form so that it 
            may be more easily be compared with other paths.
            

            The original path

            The path in canonical form

        

        
            
            Test whether one path in canonical form is under another.
            

            The first path - supposed to be the parent path

            The second path - supposed to be the child path

            Indicates whether case should be ignored

            

        

        
            
            Modifies the current instance to be case-insensitve
            and returns it.
            

        

        
            
            Modifies the current instance to be case-sensitve
            and returns it.
            

        

        
            
            Predicate constraint wraps a Predicate in a constraint,
            returning success if the predicate is true.
            

        

        
            
            Construct a PredicateConstraint from a predicate
            

        

        
            
            Determines whether the predicate succeeds when applied
            to the actual value.
            

        

        
            
            Writes the description to a MessageWriter
            

        

        
            
            PropertyConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            

        

        
            
            Initializes a new instance of the   class.
            

            The name.

            The constraint to apply to the property.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            Returns the string representation of the constraint.
            

            

        

        
            
            PropertyExistsConstraint tests that a named property
            exists on the object provided through Match.
            
            Originally, PropertyConstraint provided this feature
            in addition to making optional tests on the vaue
            of the property. The two constraints are now separate.
            

        

        
            
            Initializes a new instance of the   class.
            

            The name of the property.

        

        
            
            Test whether the property exists for a given object
            

            The object to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter.
            

            The writer on which the actual value is displayed

        

        
            
            Returns the string representation of the constraint.
            

            

        

        
            
            RangeConstraint tests whether two values are within a 
            specified range.
            

        

        
            
            Initializes a new instance of the   class.
            

            From.

            To.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            RegexConstraint can test whether a string matches
            the pattern provided.
            

        

        
            
            Initializes a new instance of the   class.
            

            The pattern.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            ResolvableConstraintExpression is used to represent a compound
            constraint being constructed at a point where the last operator
            may either terminate the expression or may have additional 
            qualifying constraints added to it. 
            
            It is used, for example, for a Property element or for
            an Exception element, either of which may be optionally
            followed by constraints that apply to the property or 
            exception.
            

        

        
            
            Create a new instance of ResolvableConstraintExpression
            

        

        
            
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            

        

        
            
            Resolve the current expression to a Constraint
            

        

        
            
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            

        

        
            
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            

        

        
            
            Appends an And Operator to the expression
            

        

        
            
            Appends an Or operator to the expression.
            

        

        
            
            ReusableConstraint wraps a constraint expression after 
            resolving it so that it can be reused consistently.
            

        

        
            
            Construct a ReusableConstraint from a constraint expression
            

            The expression to be resolved and reused

        

        
            
            Converts a constraint to a ReusableConstraint
            

            The constraint to be converted

            A ReusableConstraint

        

        
            
            Returns the string representation of the constraint.
            

            A string representing the constraint

        

        
            
            Resolves the ReusableConstraint by returning the constraint
            that it originally wrapped.
            

            A resolved constraint

        

        
            
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected object.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Summary description for SamePathConstraint.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected path

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The expected path

            The actual path

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            SamePathOrUnderConstraint tests that one path is under another
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected path

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The expected path

            The actual path

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            

        

        
            
            Construct a SomeItemsConstraint on top of an existing constraint
            

            

        

        
            
            Apply the item constraint to each item in the collection,
            succeeding if any item succeeds.
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected string

        

        
            
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            

            

            

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            SubPathConstraint tests that the actual path is under the expected path
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected path

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The expected path

            The actual path

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            SubstringConstraint can test whether a string contains
            the expected substring.
            

        

        
            
            Initializes a new instance of the   class.
            

            The expected.

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            ThrowsConstraint is used to test the exception thrown by 
            a delegate by applying a constraint to it.
            

        

        
            
            Initializes a new instance of the   class,
            using a constraint to be applied to the exception.
            

            A constraint to apply to the caught exception.

        

        
            
            Executes the code of the delegate and captures any exception.
            If a non-null base constraint was provided, it applies that
            constraint to the exception.
            

            A delegate representing the code to be tested

            True if an exception is thrown and the constraint succeeds, otherwise false

        

        
            
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            Returns the string representation of this constraint
            

        

        
            
            Get the actual exception thrown - used by Assert.Throws.
            

        

        
            
            ThrowsNothingConstraint tests that a delegate does not
            throw an exception.
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True if no exception is thrown, otherwise false

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. Overridden in ThrowsNothingConstraint to write 
            information about the exception that was actually caught.
            

            The writer on which the actual value is displayed

        

        
            
            The Tolerance class generalizes the notion of a tolerance
            within which an equality test succeeds. Normally, it is
            used with numeric types, but it can be used with any
            type that supports taking a difference between two 
            objects and comparing that difference to a value.
            

        

        
            
            Constructs a linear tolerance of a specdified amount
            

        

        
            
            Constructs a tolerance given an amount and ToleranceMode
            

        

        
            
            Tests that the current Tolerance is linear with a 
            numeric value, throwing an exception if it is not.
            

        

        
            
            Returns an empty Tolerance object, equivalent to
            specifying no tolerance. In most cases, it results
            in an exact match but for floats and doubles a
            default tolerance may be used.
            

        

        
            
            Returns a zero Tolerance object, equivalent to 
            specifying an exact match.
            

        

        
            
            Gets the ToleranceMode for the current Tolerance
            

        

        
            
            Gets the value of the current Tolerance instance.
            

        

        
            
            Returns a new tolerance, using the current amount as a percentage.
            

        

        
            
            Returns a new tolerance, using the current amount in Ulps.
            

        

        
            
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of days.
            

        

        
            
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of hours.
            

        

        
            
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of minutes.
            

        

        
            
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of seconds.
            

        

        
            
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of milliseconds.
            

        

        
            
            Returns a new tolerance with a TimeSpan as the amount, using 
            the current amount as a number of clock ticks.
            

        

        
            
            Returns true if the current tolerance is empty.
            

        

        
            
            Modes in which the tolerance value for a comparison can be interpreted.
            

        

        
            
            The tolerance was created with a value, without specifying 
            how the value would be used. This is used to prevent setting
            the mode more than once and is generally changed to Linear
            upon execution of the test.
            

        

        
            
            The tolerance is used as a numeric range within which
            two compared values are considered to be equal.
            

        

        
            
            Interprets the tolerance as the percentage by which
            the two compared values my deviate from each other.
            

        

        
            
            Compares two values based in their distance in
            representable numbers.
            

        

        
            
            TrueConstraint tests that the actual value is true
            

        

        
            
            Initializes a new instance of the   class.
            

        

        
            
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            

        

        
            
            Check that all items are unique.
            

            

            

        

        
            
            Write a description of this constraint to a MessageWriter
            

            

        

        
            
            XmlSerializableConstraint tests whether 
            an object is serializable in XML format.
            

        

        
            
            Test whether the constraint is satisfied by a given value
            

            The value to be tested

            True for success, false for failure

        

        
            
            Write the constraint description to a MessageWriter
            

            The writer on which the description is displayed

        

        
            
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            

            The writer on which the actual value is displayed

        

        
            
            Returns the string representation of this constraint
            

        

        
            
            Represents a constraint that succeeds if all the 
            members of a collection match a base constraint.
            

        

        
            
            Abstract base for operators that indicate how to
            apply a constraint to items in a collection.
            

        

        
            
            PrefixOperator takes a single constraint and modifies
            it's action in some way.
            

        

        
            
            The ConstraintOperator class is used internally by a
            ConstraintBuilder to represent an operator that 
            modifies or combines constraints. 
            
            Constraint operators use left and right precedence
            values to determine whether the top operator on the
            stack should be reduced before pushing a new operator.
            

        

        
            
            The precedence value used when the operator
            is about to be pushed to the stack.
            

        

        
            
            The precedence value used when the operator
            is on the top of the stack.
            

        

        
            
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            

            

        

        
            
            The syntax element preceding this operator
            

        

        
            
            The syntax element folowing this operator
            

        

        
            
            The precedence value used when the operator
            is about to be pushed to the stack.
            

        

        
            
            The precedence value used when the operator
            is on the top of the stack.
            

        

        
            
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            

            

        

        
            
            Returns the constraint created by applying this
            prefix to another constraint.
            

            

            

        

        
            
            Constructs a CollectionOperator
            

        

        
            
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            they all succeed.
            

        

        
            
            Operator that requires both it's arguments to succeed
            

        

        
            
            Abstract base class for all binary operators
            

        

        
            
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            

            

        

        
            
            Abstract method that produces a constraint by applying
            the operator to its left and right constraint arguments.
            

        

        
            
            Gets the left precedence of the operator
            

        

        
            
            Gets the right precedence of the operator
            

        

        
            
            Construct an AndOperator
            

        

        
            
            Apply the operator to produce an AndConstraint
            

        

        
            
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            

        

        
            
            Abstract base class for operators that are able to reduce to a 
            constraint whether or not another syntactic element follows.
            

        

        
            
            Construct an AttributeOperator for a particular Type
            

            The Type of attribute tested

        

        
            
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            

        

        
            
            Represents a constraint that succeeds if the specified 
            count of members of a collection match a base constraint.
            

        

        
            
            Construct an ExactCountOperator for a specified count
            

            The expected count

        

        
            
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            

        

        
            
            Represents a constraint that succeeds if none of the 
            members of a collection match a base constraint.
            

        

        
            
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            

        

        
            
            Negates the test of the constraint it wraps.
            

        

        
            
            Constructs a new NotOperator
            

        

        
            
            Returns a NotConstraint applied to its argument.
            

        

        
            
            Operator that requires at least one of it's arguments to succeed
            

        

        
            
            Construct an OrOperator
            

        

        
            
            Apply the operator to produce an OrConstraint
            

        

        
            
            Operator used to test for the presence of a named Property
            on an object and optionally apply further tests to the
            value of that property.
            

        

        
            
            Constructs a PropOperator for a particular named property
            

        

        
            
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            

            

        

        
            
            Gets the name of the property to which the operator applies
            

        

        
            
            Represents a constraint that succeeds if any of the 
            members of a collection match a base constraint.
            

        

        
            
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            any of them succeed.
            

        

        
            
            Operator that tests that an exception is thrown and
            optionally applies further tests to the exception.
            

        

        
            
            Construct a ThrowsOperator
            

        

        
            
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            

        

        
            
            Represents a constraint that simply wraps the
            constraint provided as an argument, without any
            further functionality, but which modifes the
            order of evaluation because of its precedence.
            

        

        
            
            Constructor for the WithOperator
            

        

        
            
            Returns a constraint that wraps its argument
            

        

        
            
            Thrown when an assertion failed.
            

        

        
            The error message that explains 
            the reason for the exception

        

        
            The error message that explains 
            the reason for the exception

            The exception that caused the 
            current exception

        

        
            
            Serialization Constructor
            

        

        
            
            Thrown when an assertion failed.
            

        

        
            

        

        
            The error message that explains 
            the reason for the exception

            The exception that caused the 
            current exception

        

        
            
            Serialization Constructor
            

        

        
            
            Thrown when a test executes inconclusively.
            

        

        
            The error message that explains 
            the reason for the exception

        

        
            The error message that explains 
            the reason for the exception

            The exception that caused the 
            current exception

        

        
            
            Serialization Constructor
            

        

        
            
            Thrown when an assertion failed.
            

        

        
            

        

        
            The error message that explains 
            the reason for the exception

            The exception that caused the 
            current exception

        

        
            
            Serialization Constructor
            

        

        
            
            
            

            

        

        
            
            Compares two objects of a given Type for equality within a tolerance
            

            The first object to compare

            The second object to compare

            The tolerance to use in the comparison

            

        

    







bin/Relativity.API.dll









		00004550
		
		0003
		52b4d7be
		00000000
		00000000
		00e0
		







		010b
		11.00
		00002a00
		00000600
		00000000
		0000494e
		00002000
		00006000
		10000000
		00002000
		00000200
		4.00
		0.00
		6.00
		00000000
		0000a000
		00000200
		0000595f
		
		34144
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00004900
		0000004b
		
		00006000
		000003c8
		00003200
		00001970
		
		00008000
		0000000c
		000047c8
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00002954
		00002000
		00002a00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003c8
		00006000
		00000400
		00002c00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00008000
		00000200
		00003000
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Net.Http.dll









		00004550
		
		0003
		4fe4bbaf
		00000000
		00000000
		00e0
		







		010b
		8.00
		0002a000
		00000600
		00000000
		0002bf4e
		00002000
		0002c000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00030000
		00000200
		00032484
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0002befc
		0000004f
		
		0002c000
		00000380
		0002a800
		00001a60
		
		0002e000
		0000000c
		0002be7c
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00029f54
		00002000
		0002a000
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000380
		0002c000
		00000400
		0002a200
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0002e000
		00000200
		0002a600
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Net.Http.Formatting.dll









		00004550
		
		0003
		4ffc7b50
		00000000
		00000000
		00e0
		







		010b
		8.00
		00026e00
		00000800
		00000000
		00028c4e
		00002000
		0002a000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0002e000
		00000200
		00033a6a
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00028c00
		0000004b
		
		0002a000
		00000420
		00027800
		00001a60
		
		0002c000
		0000000c
		00028b68
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00026c54
		00002000
		00026e00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000420
		0002a000
		00000600
		00027000
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0002c000
		00000200
		00027600
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Net.Http.Formatting.xml




  
    System.Net.Http.Formatting

  

  
    
      Extension methods that aid in making formatted requests using  .

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized as JSON.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized as JSON. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized as XML.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized as XML. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter and media type.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter and media type string.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter and media type string. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized as JSON.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized as JSON. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation. 

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized as XML.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized as XML. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The type of object to serialize.

    

    
       Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and media type. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and media type string.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and media type string. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and medai type string. Includes a cancellation token to cancel the request.

      A task object representing the asynchronous operation.

      The client used to make the request.

      The URI the request is sent to.

      The value to write into the entity body of the request.

      The formatter used to serialize the value.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The type of object to serialize.

    

    
      Represents the factory for creating new instance of  .

    

    
      Creates a new instance of the  .

      A new instance of the  .

      The list of HTTP handler that delegates the processing of HTTP response messages to another handler.

    

    
      Creates a new instance of the  .

      A new instance of the  .

      The inner handler which is responsible for processing the HTTP response messages.

      The list of HTTP handler that delegates the processing of HTTP response messages to another handler.

    

    
      Creates a new instance of the   which should be pipelined.

      A new instance of the   which should be pipelined.

      The inner handler which is responsible for processing the HTTP response messages.

      The list of HTTP handler that delegates the processing of HTTP response messages to another handler.

    

    
      Specifies extension methods to allow strongly typed objects to be read from HttpContent instances.

    

    
       Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. 

      An object instance of the specified type.

      The HttpContent instance from which to read.

      The type of the object to read.

    

    
       Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. 

      An object instance of the specified type.

      The HttpContent instance from which to read.

      The collection of MediaTyepFormatter instances to use.

      The type of the object to read.

    

    
       Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. 

      An object instance of the specified type.

      The HttpContent instance from which to read.

      The collection of MediaTypeFormatter instances to use.

      The IFormatterLogger to log events to.

      The type of the object to read.

    

    
       Returns a Task that will yield an object of the specified type from the content instance. 

      A Task that will yield an object instance of the specified type.

      The HttpContent instance from which to read.

      The type of the object to read.

    

    
       Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. 

      An object instance of the specified type.

      The HttpContent instance from which to read.

      The type of the object to read.

      The collection of MediaTypeFormatter instances to use.

    

    
       Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. 

      An object instance of the specified type.

      The HttpContent instance from which to read.

      The type of the object to read.

      The collection of MediaTypeFormatter instances to use.

      The IFormatterLogger to log events to.

    

    
      Extension methods to read HTML form URL-encoded datafrom   instances.

    

    
      Determines whether the specified content is HTML form URL-encoded data.

      true if the specified content is HTML form URL-encoded data; otherwise, false.

      The content.

    

    
      Asynchronously reads HTML form URL-encoded from an   instance and stores the results in a   object.

      A task object representing the asynchronous operation.

      The content.

    

    
      Provides extension methods to read   and   entities from   instances. 

    

    
      Determines whether the specified content is HTTP request message content.

      true if the specified content is HTTP message content; otherwise, false.

      The content to check.

    

    
      Determines whether the specified content is HTTP response message content.

      true if the specified content is HTTP message content; otherwise, false.

      The content to check.

    

    
       Reads the   as an  . 

      The parsed   instance.

      The content to read.

    

    
       Reads the   as an  . 

      The parsed   instance.

      The content to read.

      The URI scheme to use for the request URI.

    

    
       Reads the   as an  . 

      The parsed   instance.

      The content to read.

      The URI scheme to use for the request URI.

      The size of the buffer.

    

    
      Reads the   as an  .

      The parsed   instance.

      The content to read.

      The URI scheme to use for the request URI.

      The size of the buffer.

      The maximum length of the HTTP header.

    

    
       Reads the   as an  . 

      The parsed   instance.

      The content to read.

    

    
      Reads the   as an  . 

      The parsed   instance.

      The content to read.

      The size of the buffer.

    

    
      Reads the   as an  .

      The parsed   instance.

      The content to read.

      The size of the buffer.

      The maximum length of the HTTP header.

    

    
      Extension methods to read MIME multipart entities from   instances.

    

    
      Determines whether the specified content is MIME multipart content.

      true if the specified content is MIME multipart content; otherwise, false.

      The content.

    

    
      Determines whether the specified content is MIME multipart content with the specified subtype.

      true if the specified content is MIME multipart content with the specified subtype; otherwise, false.

      The content.

      The MIME multipart subtype to match.

    

    
      Reads all body parts within a MIME multipart message and produces a set of   instances as a result.

      A &lt;see cref="T:System.Threading.Tasks.Task`1" /&gt; representing the tasks of getting the collection of   instances where each instance represents a body part.

      An existing   instance to use for the object's content.

    

    
      Reads all body parts within a MIME multipart message and produces a set of   instances as a result using the streamProvider instance to determine where the contents of each body part is written.

      A   representing the tasks of getting the collection of   instances where each instance represents a body part.

      An existing   instance to use for the object's content.

      A stream provider providing output streams for where to write body parts as they are parsed.

      The type of the MIME multipart.

    

    
      Reads all body parts within a MIME multipart message and produces a set of   instances as a result using the streamProvider instance to determine where the contents of each body part is written and bufferSize as read buffer size.

      A   representing the tasks of getting the collection of   instances where each instance represents a body part.

      An existing   instance to use for the object's content.

      A stream provider providing output streams for where to write body parts as they are parsed.

      Size of the buffer used to read the contents.

      The type of the MIME multipart.

    

    
       Derived   class which can encapsulate an   or an   as an entity with media type "application/http". 

    

    
       Initializes a new instance of the   class encapsulating an  . 

      The   instance to encapsulate.

    

    
       Initializes a new instance of the   class encapsulating an  . 

      The   instance to encapsulate.

    

    
       Releases unmanaged and - optionally - managed resources 

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
       Gets the HTTP request message. 

    

    
       Gets the HTTP response message. 

    

    
       Asynchronously serializes the object's content to the given stream. 

      A   instance that is asynchronously serializing the object's content.

      The   to which to write.

      The associated  .

    

    
       Computes the length of the stream if possible. 

      true if the length has been computed; otherwise false.

      The computed length of the stream.

    

    
      Provides extension methods for the   class.

    

    
      Gets any cookie headers present in the request.

      A collection of   instances.

      The request headers.

    

    
      Gets any cookie headers present in the request that contain a cookie state whose name that matches the specified value.

      A collection of   instances.

      The request headers.

      The cookie state name to match.

    

    

    

    
       Provides extension methods for the   class. 

    

    
       Adds cookies to a response. Each Set-Cookie header is  represented as one   instance. A   contains information about the domain, path, and other cookie information as well as one or more   instances. Each   instance contains a cookie name and whatever cookie state is associate with that name. The state is in the form of a    which on the wire is encoded as HTML Form URL-encoded data.  This representation allows for multiple related "cookies" to be carried within the same Cookie header while still providing separation between each cookie state. A sample Cookie header is shown below. In this example, there are two   with names state1 and state2 respectively. Further, each cookie state contains two name/value pairs (name1/value1 and name2/value2) and (name3/value3 and name4/value4). &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;

      The response headers

      The cookie values to add to the response.

    

    
      Represents a multipart file data.

    

    
      Initializes a new instance of the   class.

      The headers of the multipart file data.

      The name of the local file for the multipart file data.

    

    
      Gets or sets the headers of the multipart file data.

      The headers of the multipart file data.

    

    
      Gets or sets the name of the local file for the multipart file data.

      The name of the local file for the multipart file data.

    

    
      Represents an   suited for writing each MIME body parts of the MIME multipart message to a file using a  .

    

    
      Initializes a new instance of the   class.

      The root path where the content of MIME multipart body parts are written to.

    

    
      Initializes a new instance of the   class.

      The root path where the content of MIME multipart body parts are written to.

      The number of bytes buffered for writes to the file.

    

    
      Gets or sets the number of bytes buffered for writes to the file.

      The number of bytes buffered for writes to the file.

    

    
      Gets or sets the multipart file data.

      The multipart file data.

    

    
      Gets the name of the local file which will be combined with the root path to create an absolute file name where the contents of the current MIME body part will be stored.

      A relative filename with no path component.

      The headers for the current MIME body part.

    

    
      Gets the stream instance where the message body part is written to.

      The   instance where the message body part is written to.

      The content of HTTP.

      The header fields describing the body part.

    

    
      Gets or sets the root path where the content of MIME multipart body parts are written to.

      The root path where the content of MIME multipart body parts are written to.

    

    
       An   suited for use with HTML file uploads for writing file  content to a  . The stream provider looks at the &lt;b&gt;Content-Disposition&lt;/b&gt; header  field and determines an output   based on the presence of a &lt;b&gt;filename&lt;/b&gt; parameter. If a &lt;b&gt;filename&lt;/b&gt; parameter is present in the &lt;b&gt;Content-Disposition&lt;/b&gt; header field then the body  part is written to a  , otherwise it is written to a  . This makes it convenient to process MIME Multipart HTML Form data which is a combination of form  data and file content. 

    

    
       Initializes a new instance of the   class. 

      The root path where the content of MIME multipart body parts are written to.

    

    
       Initializes a new instance of the   class. 

      The root path where the content of MIME multipart body parts are written to.

      The number of bytes buffered for writes to the file.

    

    
      Reads the non-file contents as form data

      A task that represents the asynchronous operation.

    

    
      Gets a   of form data passed as part of the multipart form data.

      The   of form data.

    

    
      The   instance where the message body part is written.

      The HTTP content that contains this body part.

      Header fields describing the body part.

    

    
      Represents a multipart memory stream provider.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the   for the  .

      The   for the  .

      A   object.

      The HTTP content headers.

    

    
      Represents the provider for the multipart related multistream.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the related stream for the provider.

      The content headers.

      The parent content.

      The http content headers.

    

    
      Gets the root content of the  .

      The root content of the  .

    

    
      Represents a stream provider that examines the headers provided by the MIME multipart parser as part of the MIME multipart extension methods (see  ) and decides what kind of stream to return for the body part to be written to.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the contents for this  .

      The contents for this  .

    

    
      Executes the post processing operation for this  .

      The asynchronous task for this operation.

    

    
      Gets the stream where to write the body part to. This method is called when a MIME multipart body part has been parsed.

      The   instance where the message body part is written to.

      The content of the HTTP.

      The header fields describing the body part.

    

    
       Contains a value as well as an associated   that will be used to serialize the value when writing this content. 

    

    
      Initializes a new instance of the   class.

      The type of object this instance will contain.

      The value of the object this instance will contain.

      The formatter to use when serializing the value.

    

    
       Initializes a new instance of the   class. 

      The type of object this instance will contain.

      The value of the object this instance will contain.

      The formatter to use when serializing the value.

      The authoritative value of the Content-Type header. Can be null, in which case the default content type of the formatter will be used.

    

    
      Initializes a new instance of the   class.

      The type of object this instance will contain.

      The value of the object this instance will contain.

      The formatter to use when serializing the value.

      The authoritative value of the Content-Type header.

    

    
      Gets the media-type formatter associated with this content instance.

      The  .

    

    
      Gets the type of object managed by this   instance.

      The object type.

    

    
      Asynchronously serializes the object's content to the given stream.

      The task object representing the asynchronous operation.

      The stream to write to.

      The associated  .

    

    
      Computes the length of the stream if possible.

      true if the length has been computed; otherwise, false.

      Receives the computed length of the stream.

    

    
      Gets or sets the value of the content.

      The content value.

    

    
       Generic form of  . 

      The type of object this  class will contain.

    

    
      Initializes a new instance of the   class.

      The value of the object this instance will contain.

      The formatter to use when serializing the value.

    

    
       Initializes a new instance of the &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt; class. 

      The value of the object this instance will contain.

      The formatter to use when serializing the value.

      The authoritative value of the Content-Type header. Can be null, in which case the default content type of the formatter will be used.

    

    
      Initializes a new instance of the   class.

      The value of the object this instance will contain.

      The formatter to use when serializing the value.

      The authoritative value of the Content-Type header.

    

    
      Enables scenarios where a data producer wants to write directly (either synchronously or asynchronously) using a stream.

    

    
      Initializes a new instance of the   class.

      An action that is called when an output stream is available, allowing the action to write to it directly. 

    

    
      Initializes a new instance of the   class.

      An action that is called when an output stream is available, allowing the action to write to it directly.

      The media type.

    

    
      Initializes a new instance of the   class.

      An action that is called when an output stream is available, allowing the action to write to it directly.

      The media type.

    

    
      Asynchronously serializes the push content into stream.

      The serialized push content.

      The stream where the push content will be serialized.

      The context.

    

    
      Determines whether the stream content has a valid length in bytes.

      true if length is a valid length; otherwise, false.

      The length in bytes of the stream content.

    

    
      Contains extension methods to allow strongly typed objects to be read from the query component of   instances. 

    

    
      Parses the query portion of the specified URI.

      A    that contains the query parameters.

      The URI to parse.

    

    
      Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.

      true if the query component of the URI can be read as the specified type; otherwise, false.

      The URI to read.

      The type of object to read.

      When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.

    

    
      Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.

      true if the query component of the URI can be read as the specified type; otherwise, false.

      The URI to read.

      When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.

      The type of object to read.

    

    
      Reads HTML form URL encoded data provided in the   query component as a   object.

      true if the query component can be read as  ; otherwise false.

      The   instance from which to read.

      An object to be initialized with this instance or null if the conversion cannot be performed.

    

    
      Represents a helper class to allow a synchronous formatter on top of the asynchronous formatter infrastructure.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the suggested size of buffer to use with streams in bytes.

      The suggested size of buffer to use with streams in bytes.

    

    
      Reads synchronously from the buffered stream.

      An object of the given  .

      The type of the object to deserialize.

      The stream from which to read

      The  , if available. Can be null.

      The   to log events to.

    

    
      Reads asynchronously from the buffered stream.

      A task object representing the asynchronous operation.

      The type of the object to deserialize.

      The stream from which to read.

      The  , if available. Can be null.

      The   to log events to.

    

    
      Writes synchronously to the buffered stream.

      The type of the object to serialize.

      The object value to write. Can be null.

      The stream to which to write.

      The  , if available. Can be null.

    

    
      Writes asynchronously to the buffered stream.

      A task object representing the asynchronous operation.

      The type of the object to serialize.

      The object value to write.  It may be null.

      The stream to which to write.

      The  , if available. Can be null.

      The transport context.

    

    
       Represents the result of content negotiation performed using &lt;see cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt;

    

    
       Create the content negotiation result object. 

      The formatter.

      The preferred media type. Can be null.

    

    
       The formatter chosen for serialization. 

    

    
       The media type that is associated with the formatter chosen for serialization. Can be null. 

    

    
      The default implementation of  , which is used to select a   for an   or  . 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      true to exclude formatters that match only on the object type; otherwise, false.

    

    
      Determines how well each formatter matches an HTTP request.

      Returns a collection of    objects that represent all of the matches.

      The type to be serialized.

      The request.

      The set of   objects from which to choose.

    

    
      If true, exclude formatters that match only on the object type; otherwise, false.

      Returns a  .

    

    
      Matches a set of Accept header fields against the media types that a formatter supports.

      Returns a   object that indicates the quality of the match, or null if there is no match.

      A list of Accept header values, sorted in descending order of q factor. You can create this list by calling the     method.

      The formatter to match against.

    

    
      Matches a request against the   objects in a media-type formatter.

      Returns a   object that indicates the quality of the match, or null if there is no match.

      The requrst.

      The media-type formatter.

    

    
      Match the content type of a request against the media types that a formatter supports.

      Returns a   object that indicates the quality of the match, or null if there is no match.

      The request.

      The formatter to match against.

    

    
      Selects the first supported media type of a formatter.

      Returns a   with   set to  , or null if there is no match. 

      The type to match.

      The formatter to match against.

    

    
       Performs content negotiating by selecting the most appropriate   out of the passed in   for the given   that can serialize an object of the given  . 

      The result of the negotiation containing the most appropriate   instance, or null if there is no appropriate formatter.

      The type to be serialized.

      The request.

      The set of   objects from which to choose.

    

    
      Determines the best character encoding for writing the response.

      Returns the   that is the best match.

      The request.

      The selected media formatter.

    

    
      Selects the best match among the candidate matches found.

      Returns the   object that represents the best match.

      The collection of matches.

    

    
      Sorts Accept header values in descending order of q factor.

      Returns the sorted list of MediaTypeWithQualityHeaderValue objects.

      A collection of MediaTypeWithQualityHeaderValue objects, representing the Accept header values.

    

    
      Sorts a list of Accept-Charset, Accept-Encoding, Accept-Language or related header values in descending order or q factor. 

      Returns the sorted list of StringWithQualityHeaderValue objects.

      A collection of StringWithQualityHeaderValue objects, representing the header fields.

    

    
      Evaluates whether a match is better than the current match.

      Returns whichever   object is a better match.

      The current match.

      The match to evaluate against the current match.

    

    
       Helper class to serialize &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; types by delegating them through a concrete implementation."/&amp;gt;. 

      The interface implementing  to proxy.

    

    
       Initialize a DelegatingEnumerable. This constructor is necessary for   to work. 

    

    
       Initialize a DelegatingEnumerable with an &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. This is a helper class to proxy &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; interfaces for  . 

      The &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; instance to get the enumerator from.

    

    
       This method is not implemented but is required method for serialization to work. Do not use. 

      The item to add. Unused.

    

    
       Get the enumerator of the associated &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. 

      The enumerator of the &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; source.

    

    
       Get the enumerator of the associated &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. 

      The enumerator of the &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; source.

    

    
      Represent the collection of form data.

    

    
      Initializes a new instance of   class.

      The pairs.

    

    
      Initializes a new instance of   class.

      The query.

    

    
      Initializes a new instance of   class.

      The URI

    

    
      Gets the collection of form data.

      The collection of form data.

      The key.

    

    
      Gets an enumerable that iterates through the collection.

      The enumerable that iterates through the collection.

    

    
      Gets the values of the collection of form data.

      The values of the collection of form data.

      The key.

    

    
      Reads the collection of form data as a collection of name value.

      The collection of form data as a collection of name value.

    

    
      Gets an enumerable that iterates through the collection.

      The enumerable that iterates through the collection.

    

    
      
          class for handling HTML form URL-ended data, also known as application/x-www-form-urlencoded.  

    

    
      Initializes a new instance of the   class.

    

    
      Queries whether the   can deserializean object of the specified type.

      true if the   can deserialize the type; otherwise, false.

      The type to deserialize.

    

    
      Queries whether the   can serializean object of the specified type.

      true if the   can serialize the type; otherwise, false.

      The type to serialize.

    

    
      Gets the default media type for HTML form-URL-encoded data, which is application/x-www-form-urlencoded.

      The default media type for HTML form-URL-encoded data

    

    
      Gets or sets the maximum depth allowed by this formatter.

      The maximum depth.

    

    
      Gets or sets the size of the buffer when reading the incoming stream.

      The buffer size.

    

    
       Asynchronously deserializes an object of the specified type.

      A   whose result will be the object instance that has been read.

      The type of object to deserialize.

      The   to read.

      The   for the content being read.

      The   to log events to.

    

    
       Performs content negotiation.  This is the process of selecting a response writer (formatter) in compliance with header values in the request. 

    

    
       Performs content negotiating by selecting the most appropriate   out of the passed in formatters for the given request that can serialize an object of the given type. 

      The result of the negotiation containing the most appropriate   instance, or null if there is no appropriate formatter.

      The type to be serialized.

      Request message, which contains the header values used to perform negotiation.

      The set of   objects from which to choose.

    

    
      Specifies a callback interface that a formatter can use to log errors while reading.

    

    
      Logs an error.

      The path to the member for which the error is being logged.

      The error message.

    

    
      Logs an error.

      The path to the member for which the error is being logged.

      The error message to be logged.

    

    
      Defines method that determines whether a given member is required on deserialization.

    

    
      Determines whether a given member is required on deserialization.

      true if   should be treated as a required member; otherwise false.

      The   to be deserialized.

    

    
      Represents the   class to handle JSON. 

    

    
       Initializes a new instance of the   class. 

    

    
      Determines whether this   can read objects of the specified  .

      true if objects of this   can be read, otherwise false.

      The type of object that will be read.

    

    
      Determines whether this   can write objects of the specified  .

      true if objects of this   can be written, otherwise false.

      The type of object that will be written.

    

    
       Creates a JsonSerializerSettings instance with the default settings used by the  . 

      A newly created JsonSerializerSettings instance with the default settings used by the  .

    

    
      Gets the default media type for JSON, namely "application/json".

      The   for JSON.

    

    
       Gets or sets a value indicating whether to indent elements when writing data.  

      true if to indent elements when writing data; otherwise, false.

    

    
      Gets or sets the maximum depth allowed by this formatter.

      The maximum depth allowed by this formatter.

    

    
      Reads an object of the specified   from the specified  . This method is called during deserialization.

      Returns  .

      The type of object to read.

      Thestream from which to read

      The content being written.

      The   to log events to.

    

    
       Gets or sets the JsonSerializerSettings used to configure the JsonSerializer. 

       The JsonSerializerSettings used to configure the JsonSerializer. 

    

    
       Gets or sets a value indicating whether to use   by default. 

      true if to   by default; otherwise, false.

    

    
      Writes an object of the specified   to the specified  . This method is called during serialization.

      A   that will write the value to the stream.

      The type of object to write.

      The object to write.

      The   to which to write.

      The   where the content is being written.

      The  .

    

    
       Base class to handle serializing and deserializing strongly-typed objects using  . 

    

    
      Initializes a new instance of the   class.

    

    
      Queries whether this   can deserializean object of the specified type.

      true if the   can deserialize the type; otherwise, false.

      The type to deserialize.

    

    
      Queries whether this   can serializean object of the specified type.

      true if the   can serialize the type; otherwise, false.

      The type to serialize.

    

    
      Gets the default value for the specified type.

      The default value.

      The type for which to get the default value.

    

    
      Returns a specialized instance of the   that can format a response for the given parameters.

      Returns  .

      The type to format.

      The request.

      The media type.

    

    
      Gets or sets the maximum number of keys stored in a T:  .

      The maximum number of keys.

    

    
      Gets the mutable collection of   objects that match HTTP requests to media types.

      The   collection.

    

    
      Asynchronously deserializes an object of the specified type.

      A   whose result will be an object of the given type.

      The type of the object to deserialize.

      The   to read.

      The  , if available. It may be null.

      The   to log events to.

      Derived types need to support reading.

    

    
      Gets or sets the   instance used to determine required members.

      The   instance.

    

    
      Determines the best character encoding for reading or writing an HTTP entity body, given a set of content headers.

      The encoding that is the best match.

      The content headers.

    

    
       Sets the default headers for content that will be formatted using this formatter. This method is called from the   constructor. This implementation sets the Content-Type header to the value of mediaType if it is not null. If it is null it sets the Content-Type to the default media type of this formatter. If the Content-Type does not specify a charset it will set it using this formatters configured  . 

      The type of the object being serialized. See  .

      The content headers that should be configured.

      The authoritative media type. Can be null.

    

    
      Gets the mutable collection of character encodings supported bythis  .

      The collection of   objects.

    

    
      Gets the mutable collection of media types supported bythis  .

      The collection of   objects.

    

    
      Asynchronously writes an object of the specified type.

      A   that will perform the write.

      The type of the object to write.

      The object value to write.  It may be null.

      The   to which to write.

      The   if available. It may be null.

      The   if available. It may be null.

      Derived types need to support writing.

    

    
      Represents a collection class that contains   instances.

    

    
      Initializes a new instance of the   class with default values.

    

    
      Initializes a new instance of the   class with the given  .

      A collection of   instances to place in the collection.

    

    
       Searches a collection for a formatter that can read the .NET   in the given  . 

      The   that can read the type, or null if no formatter found.

      The .NET type to read.

      The media type to match on.

    

    
       Searches a collection for a formatter that can write the .NET   in the given  . 

      The   that can write the type, or null if no formatter found.

      The .NET type to write.

      The media type to match on.

    

    
       Gets the   to use for application/x-www-form-urlencoded data. 

       The   to use for application/x-www-form-urlencoded data. 

    

    
       Determines whether the   is one of those loosely defined types that should be excluded from validation.

      true if the type should be excluded; otherwise, false.

      The .NET   to validate.

    

    
       Gets the   to use for JSON. 

      The   to use for JSON.

    

    
       Gets the   to use for XML.

       The   to use for XML.

    

    
       Updates the given set of formatter of   elements so that it associates the mediaType with  s containing a specific query parameter and value. 

      The   to receive the new   item.

      The name of the query parameter.

      The value assigned to that query parameter.

      The   to associate  with a   containing a query string matching queryStringParameterName  and queryStringParameterValue.

    

    
       Updates the given set of formatter of   elements so that it associates the mediaType with  s containing a specific query parameter and value. 

      The   to receive the new   item.

      The name of the query parameter.

      The value assigned to that query parameter.

      The media type to associate  with a   containing a query string matching queryStringParameterName and queryStringParameterValue.

    

    
       Updates the given set of formatter of   elements so that it associates the mediaType with a specific HTTP request header field with a specific value. 

      The   to receive the new   item.

      Name of the header to match.

      The header value to match.

      The   to use when matching headerValue.

      if set to true then headerValue is  considered a match if it matches a substring of the actual header value.

      The   to associate  with a   entry with a name matching headerName and a value matching headerValue.

    

    
       Updates the given set of formatter of   elements so that it associates the mediaType with a specific HTTP request header field with a specific value. 

      The   to receive the new   item.

      Name of the header to match.

      The header value to match.

      The   to use when matching headerValue.

      if set to true then headerValue is  considered a match if it matches a substring of the actual header value.

      The media type to associate  with a   entry with a name matching headerName and a value matching headerValue.

    

    
       This class describes how well a particular   matches a request. 

    

    
       Initializes a new instance of the   class. 

      The matching formatter.

      The media type. Can be null in which case the media type application/octet-stream is used.

      The quality of the match. Can be null in which case it is considered a full match with a value of 1.0

      The kind of match.

    

    
       Gets the media type formatter. 

    

    
       Gets the matched media type. 

    

    
       Gets the quality of the match 

    

    
       Gets the kind of match that occurred. 

    

    
       Contains information about the degree to which a   matches the   explicit or implicit preferences found in an incoming request. 

    

    
       No match was found 

    

    
       Matched on a type, meaning that the formatter is able to serialize the type.

    

    
      Matched on an explicit literal accept header, such as “application/json”.

    

    
      Matched on an explicit subtype range in an Accept header, such as “application/*”.

    

    
      Matched on an explicit “*/*” range in the Accept header.

    

    
       Matched on   after having applied the various  s. 

    

    
       Matched on the media type of the entity body in the HTTP request message.

    

    
       An abstract base class used to create an association between   or    instances that have certain characteristics  and a specific  .  

    

    
       Initializes a new instance of a   with the given mediaType value. 

       The   that is associated with   or    instances that have the given characteristics of the   . 

    

    
       Initializes a new instance of a   with the given mediaType value. 

       The   that is associated with   or    instances that have the given characteristics of the   . 

    

    
       Gets the   that is associated with   or    instances that have the given characteristics of the   . 

    

    
       Returns the quality of the match of the   associated with request. 

       The quality of the match. It must be between 0.0 and 1.0. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match. 

       The   to evaluate for the characteristics  associated with the   of the  . 

    

    
       Class that provides  s from query strings. 

    

    
       Initializes a new instance of the   class. 

      The name of the query string parameter to match, if present.

      The value of the query string parameter specified by queryStringParameterName.

      The   to use if the query parameter specified by queryStringParameterName is present and assigned the value specified by queryStringParameterValue.

    

    
       Initializes a new instance of the   class. 

      The name of the query string parameter to match, if present.

      The value of the query string parameter specified by queryStringParameterName.

      The media type to use if the query parameter specified by queryStringParameterName is present and assigned the value specified by queryStringParameterValue.

    

    
       Gets the query string parameter name. 

    

    
       Gets the query string parameter value. 

    

    
       Returns a value indicating whether the current   instance can return a   from request. 

      If this instance can produce a   from request it returns 1.0 otherwise 0.0.

      The   to check.

    

    
       This class provides a mapping from an arbitrary HTTP request header field to a   used to select   instances for handling the entity body of an   or  . &lt;remarks&gt;This class only checks header fields associated with   for a match. It does not check header fields associated with   or   instances.&lt;/remarks&gt;

    

    
       Initializes a new instance of the   class. 

      Name of the header to match.

      The header value to match.

      The   to use when matching headerValue.

      if set to true then headerValue is  considered a match if it matches a substring of the actual header value.

      The   to use if headerName and headerValue  is considered a match.

    

    
       Initializes a new instance of the   class. 

      Name of the header to match.

      The header value to match.

      The value comparison to use when matching headerValue.

      if set to true then headerValue is  considered a match if it matches a substring of the actual header value.

      The media type to use if headerName and headerValue  is considered a match.

    

    
       Gets the name of the header to match. 

    

    
       Gets the header value to match. 

    

    
       Gets the   to use when matching  . 

    

    
       Gets a value indicating whether   is  a matched as a substring of the actual header value. this instance is value substring. 

      true false

    

    
       Returns a value indicating whether the current   instance can return a   from request. 

       The quality of the match. It must be between 0.0 and 1.0. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match. 

      The   to check.

    

    
       A   that maps the X-Requested-With http header field set by AJAX XmlHttpRequest (XHR) to the media type application/json if no explicit Accept header fields are present in the request. 

    

    
       Initializes a new instance of   class 

    

    
       Returns a value indicating whether the current   instance can return a   from request. 

       The quality of the match. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match and that the request was made using XmlHttpRequest without an Accept header. 

      The   to check.

    

    
      
          class to handle Xml. 

    

    
      Initializes a new instance of the   class.

    

    
      Queries whether the   can deserializean object of the specified type.

      true if the   can deserialize the type; otherwise, false.

      The type to deserialize.

    

    
      Queries whether the    can serializean object of the specified type.

      true if the   can serialize the type; otherwise, false.

      The type to serialize.

    

    
      Gets the default media type for the XML formatter.

      The default media type, which is “application/xml”.

    

    
      Gets or sets a value indicating whether to indent elements when writing data.

      true to indent elements; otherwise, false.

    

    
      Gets and sets the maximum nested node depth.

      The maximum nested node depth.

    

    
       Called during deserialization to read an object of the specified type from the specified readStream. 

      A   whose result will be the object instance that has been read.

      The type of object to read.

      The   from which to read.

      The   for the content being read.

      The   to log events to.

    

    
      Unregisters the serializer currently associated with the given type.

      true if a serializer was previously registered for the type; otherwise, false.

      The type of object whose serializer should be removed.

    

    
      Registers an   to read or write objects of a specified type.

      The   instance.

      The type of object that will be serialized or deserialized with .

    

    
      Registers an   to read or write objects of a specified type.

      The type of object that will be serialized or deserialized with .

      The   instance.

    

    
      Registers an   to read or write objects of a specified type.

      The type of object that will be serialized or deserialized with .

      The   instance.

    

    
      Registers an   to read or write objects of a specified type.

      The   instance.

      The type of object that will be serialized or deserialized with .

    

    
      Gets or sets a value indicating whether the XML formatter uses the   as the default serializer, instead of  using the  .

      If true, the formatter uses the   by default; otherwise, it uses the   by default.

    

    
       Called during serialization to write an object of the specified type to the specified writeStream. 

      A   that will write the value to the stream.

      The type of object to write.

      The object to write.

      The   to which to write.

      The   for the content being written.

      The  .

    

    
      Represents the event arguments for the HTTP progress.

    

    
      Initializes a new instance of the   class.

      The percentage of the progress.

      The user token.

      The number of bytes transferred.

      The total number of bytes transferred.

    

    
      Gets the number of bytes transferred in the HTTP progress.

      The number of bytes transferred in the HTTP progress.

    

    
      Gets the total number of bytes transferred by the HTTP progress.

      The total number of bytes transferred by the HTTP progress.

    

    
      Generates progress notification for both request entities being uploaded and response entities being downloaded.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The inner message handler.

    

    
      Occurs when event entities are being downloaded.

    

    
      Occurs when event entities are being uploaded.

    

    
      Raises the event that handles the request of the progress.

      The request.

      The event handler for the request.

    

    
      Raises the event that handles the response of the progress.

      The request.

      The event handler for the request.

    

    
      Sends the specified progress message to an HTTP server for delivery.

      The sent progress message.

      The request.

      The cancellation token.

    

    
      Provides value for the cookie header.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The value of the name.

      The values.

    

    
      Initializes a new instance of the   class.

      The value of the name.

      The value.

    

    
      Creates a shallow copy of the cookie value.

      A shallow copy of the cookie value.

    

    
      Gets a collection of cookies sent by the client.

      A collection object representing the client’s cookie variables.

    

    
      Gets or sets the domain to associate the cookie with.

      The name of the domain to associate the cookie with.

    

    
      Gets or sets the expiration date and time for the cookie.

      The time of day (on the client) at which the cookie expires.

    

    
      Gets or sets a value that specifies whether a cookie is accessible by client-side script.

      true if the cookie has the HttpOnly attribute and cannot be accessed through a client-side script; otherwise, false.

    

    
      Gets a shortcut to the cookie property.

      The cookie value.

    

    
      Gets or sets the maximum age permitted for a resource.

      The maximum age permitted for a resource.

    

    
      Gets or sets the virtual path to transmit with the current cookie.

      The virtual path to transmit with the cookie.

    

    
      Gets or sets a value indicating whether to transmit the cookie using Secure Sockets Layer (SSL)—that is, over HTTPS only.

      true to transmit the cookie over an SSL connection (HTTPS); otherwise, false.

    

    
      Returns a string that represents the current object.

      A string that represents the current object.

    

    
      Indicates a value whether the string representation will be converted.

      true if the string representation will be converted; otherwise, false.

      The input value.

      The parsed value to convert.

    

    
      Contains cookie name and its associated cookie state.

    

    
      Initializes a new instance of the   class.

      The name of the cookie.

    

    
      Initializes a new instance of the   class.

      The name of the cookie.

      The collection of name-value pair for the cookie.

    

    
      Initializes a new instance of the   class.

      The name of the cookie.

      The value of the cookie.

    

    
      Returns a new object that is a copy of the current instance.

      A new object that is a copy of the current instance.

    

    
      Gets or sets the cookie value with the specified cookie name, if the cookie data is structured.

      The cookie value with the specified cookie name.

    

    
      Gets or sets the name of the cookie.

      The name of the cookie.

    

    
      Returns the string representation the current object.

      The string representation the current object.

    

    
      Gets or sets the cookie value, if cookie data is a simple string value.

      The value of the cookie. 

    

    
      Gets or sets the collection of name-value pair, if the cookie data is structured.

      The collection of name-value pair for the cookie.

    

  






bin/System.Net.Http.WebRequest.dll









		00004550
		
		0003
		4fe4bbaf
		00000000
		00000000
		00e0
		







		010b
		8.00
		00001e00
		00000600
		00000000
		00003dee
		00002000
		00004000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00008000
		00000200
		0000a008
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00003d98
		00000053
		
		00004000
		000003e0
		00002600
		00001a60
		
		00006000
		0000000c
		00003d04
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00001df4
		00002000
		00001e00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003e0
		00004000
		00000400
		00002000
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00006000
		00000200
		00002400
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Net.Http.WebRequest.xml




  
    System.Net.Http.WebRequest

  

  
    
      Represents the class that is used to create special   for use with the Real-Time-Communications (RTC) background notification infrastructure.

    

    
      Creates a special   for use with the Real-Time-Communications (RTC) background notification infrastructure.

      Returns  .An HTTP request message for use with the RTC background notification infrastructure.

      The HTTP method.

      The Uri the request is sent to.

    

    
      Provides desktop-specific features not available to Windows Store apps or other environments. 

    

    
      Initializes a new instance of the   class.

    

    
       Gets or sets a value that indicates whether to pipeline the request to the Internet resource.

      Returns  .true if the request should be pipelined; otherwise, false. The default is true. 

    

    
      Gets or sets a value indicating the level of authentication and impersonation used for this request.

      Returns  .A bitwise combination of the   values.  The default value is  .

    

    
      Gets or sets the cache policy for this request.

      Returns  .A   object that defines a cache policy. The default is  .

    

    
      Gets or sets the collection of security certificates that are associated with this request.

      Returns  .The collection of security certificates associated with this request.

    

    
      Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.

      Returns  .The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data. The default value is 350 milliseconds.

    

    
      Gets or sets the impersonation level for the current request.

      Returns  .The impersonation level for the request. The default is  .

    

    
      Gets or sets the maximum allowed length of the response headers.

      Returns  .The length, in kilobytes (1024 bytes), of the response headers.

    

    
      Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.

      Returns  .The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes). 

    

    
      Gets or sets a callback method to validate the server certificate.

      Returns  .A callback method to validate the server certificate.

    

    
      Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.

      Returns  .true to keep the authenticated connection open; otherwise, false.

    

  






bin/System.Net.Http.xml




  
    System.Net.Http

  

  
    
      Provides HTTP content based on a byte array.

    

    
      Initializes a new instance of the   class.

      The content used to initialize the  .

      The   parameter is null. 

    

    
      Initializes a new instance of the   class.

      The content used to initialize the  .

      The offset, in bytes, in the    parameter used to initialize the  .

      The number of bytes in the   starting from the   parameter used to initialize the  .

      The   parameter is null. 

      The   parameter is less than zero.-or-The   parameter is greater than the length of content specified by the   parameter.-or-The   parameter is less than zero.-or-The   parameter is greater than the length of content specified by the   parameter - minus the   parameter.

    

    
      Creates an HTTP content stream as an asynchronous operation for reading whose backing store is memory from the  .

      Returns  .The task object representing the asynchronous operation.

    

    
      Serialize and write the byte array provided in the constructor to an HTTP content stream as an asynchronous operation.

      Returns  . The task object representing the asynchronous operation.

      The target stream.

      Information about the transport, like channel binding token. This parameter may be null.

    

    
      Determines whether a byte array has a valid length in bytes.

      Returns  .true if   is a valid length; otherwise, false.

      The length in bytes of the byte array.

    

    
      Specifies how client certificates are provided.

    

    
      The application manually provides the client certificates to the  . This value is the default. 

    

    
      The   will attempt to provide  all available client certificates  automatically.

    

    
      A base type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler.

    

    
      Creates a new instance of the   class.

    

    
      Creates a new instance of the   class with a specific inner handler.

      The inner handler which is responsible for processing the HTTP response messages.

    

    
      Releases the unmanaged resources used by the  , and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources. 

    

    
      Gets or sets the inner handler which processes the HTTP response messages.

      Returns  .The inner handler for HTTP response messages.

    

    
      Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.

      Returns  . The task object representing the asynchronous operation.

      The HTTP request message to send to the server.

      A cancellation token to cancel operation.

      The   was null.

    

    
      A container for name/value tuples encoded using application/x-www-form-urlencoded MIME type.

    

    
      Initializes a new instance of the   class with a specific collection of name/value pairs.

      A collection of name/value pairs.

    

    
      Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with a specific handler.

      The HTTP handler stack to use for sending requests. 

    

    
      Initializes a new instance of the   class with a specific handler.

      The   responsible for processing the HTTP response messages.

      true if the inner handler should be disposed of by Dispose(),false if you intend to reuse the inner handler.

    

    
      Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.

      Returns  .The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.

    

    
      Cancel all pending requests on this instance.

    

    
      Gets the headers which should be sent with each request.

      Returns  .The headers which should be sent with each request.

    

    
      Send a DELETE request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a DELETE request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Send a GET request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.

      Returns  .

      The Uri the request is sent to.

      An HTTP completion option value that indicates when the operation should be considered completed.

      The   was null.

    

    
      Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.

      Returns  .

      The Uri the request is sent to.

      An HTTP  completion option value that indicates when the operation should be considered completed.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.

      Returns  .

      The Uri the request is sent to.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a GET request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      An HTTP  completion option value that indicates when the operation should be considered completed.

      The   was null.

    

    
      Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      An HTTP  completion option value that indicates when the operation should be considered completed.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The   was null.

    

    
      Gets or sets the maximum number of bytes to buffer when reading the response content.

      Returns  .The maximum number of bytes to buffer when reading the response content. The default value for this property is 64K.

      The size specified is less than or equal to zero.

      An operation has already been started on the current instance. 

      The current instance has been disposed. 

    

    
      Send a POST request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      The   was null.

    

    
      Send a POST request with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a POST request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      The   was null.

    

    
      Send a POST request with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a PUT request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      The   was null.

    

    
      Send a PUT request with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send a PUT request to the specified Uri as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      The   was null.

    

    
      Send a PUT request with a cancellation token as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The Uri the request is sent to.

      The HTTP request content sent to the server.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Send an HTTP request as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send.

      The   was null.

      The request message was already sent by the   instance.

    

    
      Send an HTTP request as an asynchronous operation. 

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send.

      When the operation should complete (as soon as a response is available or after reading the whole response content).

      The   was null.

      The request message was already sent by the   instance.

    

    
      Send an HTTP request as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send.

      When the operation should complete (as soon as a response is available or after reading the whole response content).

      The cancellation token to cancel operation.

      The   was null.

      The request message was already sent by the   instance.

    

    
      Send an HTTP request as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send.

      The cancellation token to cancel operation.

      The   was null.

      The request message was already sent by the   instance.

    

    
      Gets or sets the number of milliseconds to wait before the request times out.

      Returns  .The number of milliseconds to wait before the request times out.

      The timeout specified is less than or equal to zero and is not  .

      An operation has already been started on the current instance. 

      The current instance has been disposed.

    

    
      The default message handler used by  .  

    

    
      Creates an instance of a   class.

    

    
      Gets or sets a value that indicates whether the handler should follow redirection responses.

      Returns  .true if the if the handler should follow redirection responses; otherwise false. The default value is true.

    

    
      Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.

      Returns  .The automatic decompression method used by the handler. The default value is  .

    

    
      Gets or sets the collection of security certificates that are associated with this handler.

      Returns  .The collection of security certificates associated with this handler.

    

    
      Gets or sets the cookie container used to store server cookies by the handler.

      Returns  .The cookie container used to store server cookies by the handler.

    

    
      Gets or sets authentication information used by this handler.

      Returns  .The authentication credentials associated with the handler. The default is null.

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Gets or sets the maximum number of redirects that the handler follows.

      Returns  .The maximum number of redirection responses that the handler follows. The default value is 50.

    

    
      Gets or sets the maximum request content buffer size used by the handler.

      Returns  .The maximum request content buffer size in bytes. The default value is 65,536 bytes.

    

    
      Gets or sets a value that indicates whether the handler sends an Authorization header with the request.

      Returns  .true for the handler to send an HTTP Authorization header with requests after authentication has taken place; otherwise, false. The default is false.

    

    
      Gets or sets proxy information used by the handler.

      Returns  .The proxy information used by the handler. The default value is null.

    

    
      Creates an instance of    based on the information provided in the   as an operation that will not block.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message.

      A cancellation token to cancel the operation.

      The   was null.

    

    
      Gets a value that indicates whether the handler supports automatic response content decompression.

      Returns  .true if the if the handler supports automatic response content decompression; otherwise false. The default value is true.

    

    
      Gets a value that indicates whether the handler supports proxy settings.

      Returns  .true if the if the handler supports proxy settings; otherwise false. The default value is true.

    

    
      Gets a value that indicates whether the handler supports configuration settings for the   and   properties.

      Returns  .true if the if the handler supports configuration settings for the   and   properties; otherwise false. The default value is true.

    

    
      Gets or sets a value that indicates whether the handler uses the    property  to store server cookies and uses these cookies when sending requests.

      Returns  .true if the if the handler supports uses the    property  to store server cookies and uses these cookies when sending requests; otherwise false. The default value is true.

    

    
      Gets or sets a value that controls whether default credentials are sent with requests by the handler.

      Returns  .true if the default credentials are used; otherwise false. The default value is false.

    

    
      Gets or sets a value that indicates whether the handler uses a proxy for requests. 

      Returns  .true if the handler should use a proxy for requests; otherwise false. The default value is true.

    

    
      Indicates if   operations should be considered completed either as soon as a response is available, or after reading the entire response message including the content. 

    

    
      The operation should complete after reading the entire response including the content.

    

    
      The operation should complete as soon as a response is available and headers are read. The content is not read yet. 

    

    
      A base class representing an HTTP entity body and content headers.

    

    
      Initializes a new instance of the   class.

    

    
      Write the HTTP content to a stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The target stream.

    

    
      Write the HTTP content to a stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The target stream.

      Information about the transport (channel binding token, for example). This parameter may be null.

    

    
      Write the HTTP content to a memory stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

    

    
      Releases the unmanaged resources and disposes of the managed resources used by the  .

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Gets the HTTP content headers as defined in RFC 2616.

      Returns  .The content headers as defined in RFC 2616.

    

    
      Serialize the HTTP content to a memory buffer as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

    

    
      Serialize the HTTP content to a memory buffer as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The maximum size, in bytes, of the buffer to use.

    

    
      Write the HTTP content to a byte array as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

    

    
      Write the HTTP content to a stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

    

    
      Write the HTTP content to a string as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

    

    
      Serialize the HTTP content to a stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The target stream.

      Information about the transport (channel binding token, for example). This parameter may be null.

    

    
      Determines whether the HTTP content has a valid length in bytes.

      Returns  .true if   is a valid length; otherwise, false.

      The length in bytes of the HHTP content.

    

    
      A base type for HTTP message handlers.

    

    
      Initializes a new instance of the   class.

    

    
      Releases the unmanaged resources and disposes of the managed resources used by the  .

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Send an HTTP request as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send.

      The cancellation token to cancel operation.

      The   was null.

    

    
      The base type for   and other message originators.

    

    
      Initializes an instance of a   class with a specific  .

      The   responsible for processing the HTTP response messages.

    

    
      Initializes an instance of a   class with a specific  .

      The   responsible for processing the HTTP response messages.

      true if the inner handler should be disposed of by Dispose(),false if you intend to reuse the inner handler.

    

    
      Releases the unmanaged resources and disposes of the managed resources used by the  .

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Send an HTTP request as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send.

      The cancellation token to cancel operation.

      The   was null.

    

    
      A helper class for retrieving and comparing standard HTTP methods.

    

    
      Initializes a new instance of the   class with a specific HTTP method.

      The HTTP method.

    

    
      Represents an HTTP DELETE protocol method.

      Returns  .

    

    
      Determines whether the specified   is equal to the current  .

      Returns  .true if the specified object is equal to the current object; otherwise, false.

      The HTTP method to compare with the current object.

    

    
      Determines whether the specified   is equal to the current  .

      Returns  .true if the specified object is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Represents an HTTP GET protocol method.

      Returns  .

    

    
      Serves as a hash function for this type.

      Returns  .A hash code for the current  .

    

    
      Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.

      Returns  .

    

    
      An HTTP method. 

      Returns  .An HTTP method represented as a  .

    

    
      The equality operator for comparing two   objects.

      Returns  .true if the specified   and   parameters are equal; otherwise, false.

      The left   to an equality operator.

      The right    to an equality operator.

    

    
      The inequality operator for comparing two   objects.

      Returns  .true if the specified   and   parameters are inequal; otherwise, false.

      The left   to an inequality operator.

      The right    to an inequality operator.

    

    
      Represents an HTTP OPTIONS protocol method.

      Returns  .

    

    
      Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.

      Returns  .

    

    
      Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.

      Returns  .

    

    
      Returns a string that represents the current object.

      Returns  .A string representing the current object.

    

    
      Represents an HTTP TRACE protocol method.

      Returns  .

    

    
      A base class for exceptions thrown by the   and   classes.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with a specific message that describes the current exception.

      A message that describes the current exception.

    

    
      Initializes a new instance of the   class with a specific message that describes the current exception and an inner exception.

      A message that describes the current exception.

      The inner exception.

    

    
      Represents a HTTP request message.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with an HTTP method and a request  .

      The HTTP method.

      A string that represents the request   .

    

    
      Initializes a new instance of the   class with an HTTP method and a request  .

      The HTTP method.

      The   to request.

    

    
      Gets or sets the contents of the HTTP message. 

      Returns  .The content of a message

    

    
      Releases the unmanaged resources and disposes of the managed resources used by the  .

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Gets the collection of HTTP request headers.

      Returns  .The collection of HTTP request headers.

    

    
      Gets or sets the HTTP method used by the HTTP request message.

      Returns  .The HTTP method used by the request message. The default is the GET method.

    

    
      Gets a set of properties for the HTTP request.

      Returns  .

    

    
      Gets or sets the   used for the HTTP request.

      Returns  .The   used for the HTTP request.

    

    
      Returns a string that represents the current object.

      Returns  .A string representation of the current object.

    

    
      Gets or sets the HTTP message version.

      Returns  .The HTTP message version. The default is 1.1.

    

    
      Represents a HTTP response message.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with a specific  .

      The status code of the HTTP response.

    

    
      Gets or sets the content of a HTTP response message. 

      Returns  .The content of the HTTP response message.

    

    
      Releases the unmanaged resources and disposes of unmanaged resources used by the  .

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Throws an exception if the   property for the HTTP response is false.

      Returns  .The HTTP response message if the call is successful.

    

    
      Gets the collection of HTTP response headers. 

      Returns  .The collection of HTTP response headers.

    

    
      Gets a value that indicates if the HTTP response was successful.

      Returns  .A value that indicates if the HTTP response was successful. true if   was in the range 200-299; otherwise false.

    

    
      Gets or sets the reason phrase which typically is sent by servers together with the status code. 

      Returns  .The reason phrase sent by the server.

    

    
      Gets or sets the request message which led to this response message.

      Returns  .The request message which led to this response message.

    

    
      Gets or sets the status code of the HTTP response.

      Returns  .The status code of the HTTP response.

    

    
      Returns a string that represents the current object.

      Returns  .A string representation of the current object.

    

    
      Gets or sets the HTTP message version. 

      Returns  .The HTTP message version. The default is 1.1. 

    

    
      A base type for handlers which only do some small processing of request and/or response messages.

    

    
      Creates an instance of a   class.

    

    
      Creates an instance of a   class with a specific inner handler.

      The inner handler which is responsible for processing the HTTP response messages.

    

    
      Processes an HTTP request message.

      Returns  .The HTTP request message that was processed.

      The HTTP request message to process.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

    

    
      Processes an HTTP response message.

      Returns  .The HTTP response message that was processed.

      The HTTP response message to process.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

    

    
      Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The HTTP request message to send to the server.

      A cancellation token that can be used by other objects or threads to receive notice of cancellation.

      The   was null.

    

    
      Provides a collection of   objects that get serialized using the multipart/* content type specification.

    

    
      Creates a new instance of the   class.

    

    
      Creates a new instance of the   class.

      The subtype of the multipart content.

      The   was null or contains only white space characters.

    

    
      Creates a new instance of the   class.

      The subtype of the multipart content.

      The boundary string for the multipart content.

      The   was null or an empty string.The   was null or contains only white space characters.-or-The   ends with a space character.

      The length of the   was greater than 70.

    

    
      Add multipart HTTP content to a collection of   objects that get serialized using the multipart/* content type specification.

      The HTTP content to add to the collection.

      The   was null.

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Returns an enumerator that iterates through the collection of   objects that get serialized using the multipart/* content type specification..

      Returns  .An object that can be used to iterate through the collection.

    

    
      Serialize the multipart HTTP content to a stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The target stream.

      Information about the transport (channel binding token, for example). This parameter may be null.

    

    
      The explicit implementation of the   method.

      Returns  .An object that can be used to iterate through the collection.

    

    
      Determines whether the HTTP multipart content has a valid length in bytes.

      Returns  .true if   is a valid length; otherwise, false.

      The length in bytes of the HHTP content.

    

    
      Provides a container for content encoded using multipart/form-data MIME type.

    

    
      Creates a new instance of the   class.

    

    
      Creates a new instance of the   class.

      The boundary string for the multipart form data content.

      The   was null or contains only white space characters.-or-The   ends with a space character.

      The length of the   was greater than 70.

    

    
      Add HTTP content to a collection of   objects that get serialized to multipart/form-data MIME type.

      The HTTP content to add to the collection.

      The   was null.

    

    
      Add HTTP content to a collection of   objects that get serialized to multipart/form-data MIME type.

      The HTTP content to add to the collection.

      The name for the HTTP content to add.

      The   was null or contains only white space characters.

      The   was null.

    

    
      Add HTTP content to a collection of   objects that get serialized to multipart/form-data MIME type.

      The HTTP content to add to the collection.

      The name for the HTTP content to add.

      The file name for the HTTP content to add to the collection.

      The   was null or contains only white space characters.-or-The   was null or contains only white space characters.

      The   was null.

    

    
      Provides HTTP content based on a stream.

    

    
      Creates a new instance of the   class.

      The content used to initialize the  .

    

    
      Creates a new instance of the   class.

      The content used to initialize the  .

      The size, in bytes, of the buffer for the  .

      The   was null.

      The   was less than or equal to zero. 

    

    
      Write the HTTP stream content to a memory stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

    

    
      Releases the unmanaged resources used by the   and optionally disposes of the managed resources.

      true to release both managed and unmanaged resources; false to releases only unmanaged resources.

    

    
      Serialize the HTTP content to a stream as an asynchronous operation.

      Returns  .The task object representing the asynchronous operation.

      The target stream.

      Information about the transport (channel binding token, for example). This parameter may be null.

    

    
      Determines whether the stream content has a valid length in bytes.

      Returns  .true if   is a valid length; otherwise, false.

      The length in bytes of the stream content.

    

    
      Provides HTTP content based on a string.

    

    
      Creates a new instance of the   class.

      The content used to initialize the  .

    

    
      Creates a new instance of the   class.

      The content used to initialize the  .

      The encoding to use for the content.

    

    
      Creates a new instance of the   class.

      The content used to initialize the  .

      The encoding to use for the content.

      The media type to use for the content.

    

    
      Represents authentication information in Authorization, ProxyAuthorization, WWW-Authenticate, and Proxy-Authenticate header values.

    

    
      Initializes a new instance of the   class.

      The scheme to use for authorization.

    

    
      Initializes a new instance of the   class.

      The scheme to use for authorization.

      The credentials containing the authentication information of the user agent for the resource being requested.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object. 

    

    
      Serves as a hash function for an    object.

      Returns  .A hash code for the current object.

    

    
      Gets the credentials containing the authentication information of the user agent for the resource being requested.

      Returns  .The credentials containing the authentication information.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents authentication header value information.

      
          is a null reference.

      
          is not valid authentication header value information.

    

    
      Gets the scheme to use for authorization.

      Returns  .The scheme to use for authorization.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents the value of the Cache-Control header.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Cache-extension tokens, each with an optional assigned value.

      Returns  .A collection of cache-extension tokens each with an optional assigned value.

    

    
      Serves as a hash function for a    object.

      Returns  .A hash code for the current object.

    

    
      The maximum age, specified in seconds, that the HTTP client is willing to accept a response. 

      Returns  .The time in seconds. 

    

    
      Whether an HTTP client is willing to accept a response that has exceeded its expiration time.

      Returns  .true if the HTTP client is willing to accept a response that has exceed the expiration time; otherwise, false.

    

    
      The maximum time, in seconds, an HTTP client is willing to accept a response that has exceeded its expiration time.

      Returns  .The time in seconds.

    

    
      The freshness lifetime, in seconds, that an HTTP client is willing to accept a response.

      Returns  .The time in seconds.

    

    
      Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.

      Returns  .true if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale; otherwise, false.

    

    
      Whether an HTTP client is willing to accept a cached response.

      Returns  .true if the HTTP client is willing to accept a cached response; otherwise, false.

    

    
      A collection of fieldnames in the "no-cache" directive in a cache-control header field on an HTTP response.

      Returns  .A collection of fieldnames.

    

    
      Whether a cache must not store any part of either the HTTP request mressage or any response.

      Returns  .true if a cache must not store any part of either the HTTP request mressage or any response; otherwise, false.

    

    
      Whether a cache or proxy must not change any aspect of the entity-body.

      Returns  .true if a cache or proxy must not change any aspect of the entity-body; otherwise, false.

    

    
      Whether a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status.

      Returns  .true if a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status; otherwise, false.

    

    
      Converts a string to an   instance.

      Returns  .A   instance.

      A string that represents cache-control header value information.

      
          is a null reference.

      
          is not valid cache-control header value information.

    

    
      Whether all or part of the HTTP response message is intended for a single user and must not be cached by a shared cache.

      Returns  .true if the HTTP response message is intended for a single user and must not be cached by a shared cache; otherwise, false.

    

    
      A collection fieldnames in the "private" directive in a cache-control header field on an HTTP response.

      Returns  .A collection of fieldnames.

    

    
      Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale for shared user agent caches.

      Returns  .true if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale for shared user agent caches; otherwise, false.

    

    
      Whether an HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.

      Returns  .true if the HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache; otherwise, false.

    

    
      The shared maximum age, specified in seconds, in an HTTP response that overrides the "max-age" directive in a cache-control header or an Expires header for a shared cache.

      Returns  .The time in seconds.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents the value of the Content-Disposition header.

    

    
      Initializes a new instance of the   class.

      A  . 

    

    
      Initializes a new instance of the   class.

      A string that contains a  .

    

    
      The date at which   the file was created.

      Returns  .The file creation date.

    

    
      The disposition type for a content body part.

      Returns  .The disposition type. 

    

    
      Determines whether the specified   is equal to the current    object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      A suggestion for how to construct a filename for   storing the message payload to be used if the entity is   detached and stored in a separate file.

      Returns  .A suggested filename.

    

    
      A suggestion for how to construct filenames for   storing message payloads to be used if the entities are    detached and stored in a separate files.

      Returns  .A suggested filename of the form filename*.

    

    
      Serves as a hash function for an    object.

      Returns  .A hash code for the current object.

    

    
      The date at   which the file was last modified. 

      Returns  .The file modification date.

    

    
      The name for a content body part.

      Returns  .The name for the content body part.

    

    
      A set of parameters included the Content-Disposition header.

      Returns  .A collection of parameters. 

    

    
      Converts a string to an    instance.

      Returns  .An    instance.

      A string that represents content disposition header value information.

      
          is a null reference.

      
          is not valid content disposition header value information.

    

    
      The date the file was last read.

      Returns  .The last read date.

    

    
      The approximate size, in bytes, of the file. 

      Returns  .The approximate size, in bytes.

    

    
      Creates a new object that is a copy of the current    instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents the value of the Content-Range header.

    

    
      Initializes a new instance of the   class.

      The starting or ending point of the range, in bytes.

    

    
      Initializes a new instance of the   class.

      The position, in bytes, at which to start sending data.

      The position, in bytes, at which to stop sending data.

    

    
      Initializes a new instance of the   class.

      The position, in bytes, at which to start sending data.

      The position, in bytes, at which to stop sending data.

      The starting or ending point of the range, in bytes.

    

    
      Determines whether the specified Object is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Gets the position at which to start sending data.

      Returns  .The position, in bytes, at which to start sending data.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Gets whether the Content-Range header has a length specified.

      Returns  .true if the Content-Range has a length specified; otherwise, false.

    

    
      Gets whether the Content-Range has a range specified. 

      Returns  .true if the Content-Range has a range specified; otherwise, false.

    

    
      Gets the length of the full entity-body.

      Returns  .The length of the full entity-body.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents content range header value information.

      
          is a null reference.

      
          is not valid content range header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Gets the position at which to stop sending data.

      Returns  .The position at which to stop sending data.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      The range units used.

      Returns  .A   that contains range units. 

    

    
      Represents an entity-tag header value.

    

    
      Initializes a new instance of the   class.

      A string that contains an  .

    

    
      Initializes a new instance of the   class.

      A string that contains an   .

      A value that indicates if this entity-tag header is a weak validator. If the entity-tag header is weak validator, then   should be set to true. If the entity-tag header is a strong validator, then   should be set to false.

    

    
      Gets the entity-tag header value.

      Returns  .

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Gets whether the entity-tag is prefaced by a weakness indicator.

      Returns  .true if the entity-tag is prefaced by a weakness indicator; otherwise, false.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents entity tag header value information.

      
          is a null reference.

      
          is not valid entity tag header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Gets the opaque quoted string. 

      Returns  .An opaque quoted string.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents the collection of Content Headers as defined in RFC 2616.

    

    
      Gets the value of the Allow content header on an HTTP response. 

      Returns  .The value of the Allow header on an HTTP response.

    

    
      Gets the value of the Content-Disposition content header on an HTTP response.

      Returns  .The value of the Content-Disposition content header on an HTTP response.

    

    
      Gets the value of the Content-Encoding content header on an HTTP response.

      Returns  .The value of the Content-Encoding content header on an HTTP response.

    

    
      Gets the value of the Content-Language content header on an HTTP response.

      Returns  .The value of the Content-Language content header on an HTTP response.

    

    
      Gets or sets the value of the Content-Length content header on an HTTP response.

      Returns  .The value of the Content-Length content header on an HTTP response.

    

    
      Gets or sets the value of the Content-Location content header on an HTTP response.

      Returns  .The value of the Content-Location content header on an HTTP response.

    

    
      Gets or sets the value of the Content-MD5 content header on an HTTP response.

      Returns  .The value of the Content-MD5 content header on an HTTP response.

    

    
      Gets or sets the value of the Content-Range content header on an HTTP response.

      Returns  .The value of the Content-Range content header on an HTTP response.

    

    
      Gets or sets the value of the Content-Type content header on an HTTP response.

      Returns  .The value of the Content-Type content header on an HTTP response.

    

    
      Gets or sets the value of the Expires content header on an HTTP response.

      Returns  .The value of the Expires content header on an HTTP response.

    

    
      Gets or sets the value of the Last-Modified content header on an HTTP response.

      Returns  .The value of the Last-Modified content header on an HTTP response.

    

    
      A collection of headers and their values as defined in RFC 2616.

    

    
      Initializes a new instance of the   class.

    

    
      Adds the specified header and its values into the   collection.

      The header to add to the collection.

      A list of header values to add to the collection.

    

    
      Adds the specified header and its value into the   collection.

      The header to add to the collection.

      The content of the header.

    

    
      Removes all headers from the   collection.

    

    
      Returns if  a specific header exists in the   collection.

      Returns  .true is the specified header exists in the collection; otherwise false.

      The specific header.

    

    
      Returns an enumerator that can iterate through the   instance.

      Returns  .An enumerator for the  .

    

    
      Returns all header values for a specified header stored in the   collection.

      Returns  .An array of header strings.

      The specified header to return values for.

    

    
      Removes the specified header from the   collection.

      Returns  .

      The name of the header to remove from the collection. 

    

    
      Gets an enumerator that can iterate through a  .

      Returns  .An instance of an implementation of an   that can iterate through a  .

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Returns a value that indicates whether the specified header and its values were added to the   collection without validating the provided information.

      Returns  .true if the specified header   and   could be added to the collection; otherwise false.

      The header to add to the collection.

      The values of the header.

    

    
      Returns a value that indicates whether the specified header and its value were added to the   collection without validating the provided information.

      Returns  .true if the specified header   and   could be added to the collection; otherwise false.

      The header to add to the collection.

      The content of the header.

    

    
      Return if a specified header and specified values are stored in the   collection.

      Returns  .true is the specified header   and values are stored in the collection; otherwise false.

      The specified header.

      The specified header values.

    

    
      Represents a collection of header values.

      

    

    

    

    
      Returns  .

    

    

    
      Returns  .

    

    
      Returns  .

    

    
      Returns  .

    

    

    
      Returns  .

    

    
      Returns  .

    

    
      Returns a string that represents the current XXX object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid XXX information.

      Returns  .

      The string to validate.

    

    
      Represents the collection of Request Headers as defined in RFC 2616.

    

    
      Gets the value of the Accept header for an HTTP request.

      Returns  .The value of the Accept header for an HTTP request.

    

    
      Gets the value of the Accept-Charset header for an HTTP request.

      Returns  .The value of the Accept-Charset header for an HTTP request.

    

    
      Gets the value of the Accept-Encoding header for an HTTP request.

      Returns  .The value of the Accept-Encoding header for an HTTP request.

    

    
      Gets the value of the Accept-Language header for an HTTP request.

      Returns  .The value of the Accept-Language header for an HTTP request.

    

    
      Gets or sets the value of the Authorization header for an HTTP request.

      Returns  .The value of the Authorization header for an HTTP request.

    

    
      Gets or sets the value of the Cache-Control header for an HTTP request.

      Returns  .The value of the Cache-Control header for an HTTP request.

    

    
      Gets the value of the Connection header for an HTTP request.

      Returns  .The value of the Connection header for an HTTP request.

    

    
      Gets or sets a value that indicates if the Connection header for an HTTP request contains Close.

      Returns  .true if the Connection header contains Close, otherwise false.

    

    
      Gets or sets the value of the Date header for an HTTP request.

      Returns  .The value of the Date header for an HTTP request.

    

    
      Gets the value of the Expect header for an HTTP request.

      Returns  .The value of the Expect header for an HTTP request.

    

    
      Gets or sets a value that indicates if the Expect header for an HTTP request contains Continue.

      Returns  .true if the Expect header contains Continue, otherwise false.

    

    
      Gets or sets the value of the From header for an HTTP request.

      Returns  .The value of the From header for an HTTP request.

    

    
      Gets or sets the value of the Host header for an HTTP request.

      Returns  .The value of the Host header for an HTTP request.

    

    
      Gets the value of the If-Match header for an HTTP request.

      Returns  .The value of the If-Match header for an HTTP request.

    

    
      Gets or sets the value of the If-Modified-Since header for an HTTP request.

      Returns  .The value of the If-Modified-Since header for an HTTP request.

    

    
      Gets the value of the If-None-Match header for an HTTP request.

      Returns  .Gets the value of the If-None-Match header for an HTTP request.

    

    
      Gets or sets the value of the If-Range header for an HTTP request.

      Returns  .The value of the If-Range header for an HTTP request.

    

    
      Gets or sets the value of the If-Unmodified-Since header for an HTTP request.

      Returns  .The value of the If-Unmodified-Since header for an HTTP request.

    

    
      Gets or sets the value of the Max-Forwards header for an HTTP request.

      Returns  .The value of the Max-Forwards header for an HTTP request.

    

    
      Gets the value of the Pragma header for an HTTP request.

      Returns  .The value of the Pragma header for an HTTP request.

    

    
      Gets or sets the value of the Proxy-Authorization header for an HTTP request.

      Returns  .The value of the Proxy-Authorization header for an HTTP request.

    

    
      Gets or sets the value of the Range header for an HTTP request.

      Returns  .The value of the Range header for an HTTP request.

    

    
      Gets or sets the value of the Referer header for an HTTP request.

      Returns  .The value of the Referer header for an HTTP request.

    

    
      Gets the value of the TE header for an HTTP request.

      Returns  .The value of the TE header for an HTTP request.

    

    
      Gets the value of the Trailer header for an HTTP request.

      Returns  .The value of the Trailer header for an HTTP request.

    

    
      Gets the value of the Transfer-Encoding header for an HTTP request.

      Returns  .The value of the Transfer-Encoding header for an HTTP request.

    

    
      Gets or sets a value that indicates if the Transfer-Encoding header for an HTTP request contains chunked.

      Returns  .true if the Transfer-Encoding header contains chunked, otherwise false.

    

    
      Gets the value of the Upgrade header for an HTTP request.

      Returns  .The value of the Upgrade header for an HTTP request.

    

    
      Gets the value of the User-Agent header for an HTTP request.

      Returns  .The value of the User-Agent header for an HTTP request.

    

    
      Gets the value of the Via header for an HTTP request.

      Returns  .The value of the Via header for an HTTP request.

    

    
      Gets the value of the Warning header for an HTTP request.

      Returns  .The value of the Warning header for an HTTP request.

    

    
      Represents the collection of Response Headers as defined in RFC 2616.

    

    
      Gets the value of the Accept-Ranges header for an HTTP response.

      Returns  .The value of the Accept-Ranges header for an HTTP response.

    

    
      Gets or sets the value of the Age header for an HTTP response.

      Returns  .The value of the Age header for an HTTP response.

    

    
      Gets or sets the value of the Cache-Control header for an HTTP response.

      Returns  .The value of the Cache-Control header for an HTTP response.

    

    
      Gets the value of the Connection header for an HTTP response.

      Returns  .The value of the Connection header for an HTTP response.

    

    
      Gets or sets a value that indicates if the Connection header for an HTTP response contains Close.

      Returns  .true if the Connection header contains Close, otherwise false.

    

    
      Gets or sets the value of the Date header for an HTTP response.

      Returns  .The value of the Date header for an HTTP response.

    

    
      Gets or sets the value of the ETag header for an HTTP response.

      Returns  .The value of the ETag header for an HTTP response.

    

    
      Gets or sets the value of the Location header for an HTTP response.

      Returns  .The value of the Location header for an HTTP response.

    

    
      Gets the value of the Pragma header for an HTTP response.

      Returns  .The value of the Pragma header for an HTTP response.

    

    
      Gets the value of the Proxy-Authenticate header for an HTTP response.

      Returns  .The value of the Proxy-Authenticate header for an HTTP response.

    

    
      Gets or sets the value of the Retry-After header for an HTTP response.

      Returns  .The value of the Retry-After header for an HTTP response.

    

    
      Gets the value of the Server header for an HTTP response.

      Returns  .The value of the Server header for an HTTP response.

    

    
      Gets the value of the Trailer header for an HTTP response.

      Returns  .The value of the Trailer header for an HTTP response.

    

    
      Gets the value of the Transfer-Encoding header for an HTTP response.

      Returns  .The value of the Transfer-Encoding header for an HTTP response.

    

    
      Gets or sets a value that indicates if the Transfer-Encoding header for an HTTP response contains chunked.

      Returns  .true if the Transfer-Encoding header contains chunked, otherwise false.

    

    
      Gets the value of the Upgrade header for an HTTP response.

      Returns  .The value of the Upgrade header for an HTTP response.

    

    
      Gets the value of the Vary header for an HTTP response.

      Returns  .The value of the Vary header for an HTTP response.

    

    
      Gets the value of the Via header for an HTTP response.

      Returns  .The value of the Via header for an HTTP response.

    

    
      Gets the value of the Warning header for an HTTP response.

      Returns  .The value of the Warning header for an HTTP response.

    

    
      Gets the value of the WWW-Authenticate header for an HTTP response.

      Returns  .The value of the WWW-Authenticate header for an HTTP response.

    

    
      Represents a media-type as defined in the RFC 2616.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the character set.

      Returns  .The character set.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Gets or sets the media-type header value.

      Returns  .The media-type header value.

    

    
      Gets or sets the media-type header value parameters.

      Returns  .The media-type header value parameters.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents media type header value information.

      
          is a null reference.

      
          is not valid media type header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents a content-type header value with an additional quality.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents media type with quality header value information.

      
          is a null reference.

      
          is not valid media type with quality header value information.

    

    
      Returns  .

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents a name/value pair.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The header name.

    

    
      Initializes a new instance of the   class.

      The header name.

      The header value.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Gets the header name.

      Returns  .The header name.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents name value header value information.

      
          is a null reference.

      
          is not valid name value header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Gets the header value.

      Returns  .The header value.

    

    
      Represents a name/value pair with parameters.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Returns  .

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents name value with parameter header value information.

      
          is a null reference.

      
          is not valid name value with parameter header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents a product token in header value.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Gets the name of the product token.

      Returns  .The name of the product token.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents product header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Gets the version of the product token.

      Returns  .The version of the product token. 

    

    
      Represents a value which can either be a product or a comment.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Returns  .

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents product info header value information.

      
          is a null reference.

      
          is not valid product info header value information.

    

    
      Returns  .

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents a header value which can either be a date/time or an entity-tag value.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Returns  .

    

    
      Returns  .

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents range condition header value information.

      
          is a null reference.

      
          is not valid range Condition header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents the value of the Range header.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents range header value information.

      
          is a null reference.

      
          is not valid range header value information.

    

    
      Returns  .

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      he string to validate.

      The   version of the string.

    

    
      Returns  .

    

    
      Represents a byte-range header value.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Returns  .

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns  .

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Represents a header value which can either be a date/time or a timespan value.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Returns  .

    

    
      Returns  .

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents retry condition header value information.

      
          is a null reference.

      
          is not valid retry condition header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents a string header value with an optional quality.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified Object is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents quality header value information.

      
          is a null reference.

      
          is not valid string with quality header value information.

    

    
      Returns  .

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Returns  .

    

    
      Represents a transfer-coding header value.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified Object is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Gets the transfer-coding parameters.

      Returns  .The transfer-coding parameters.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents transfer-coding header value information.

      
          is a null reference.

      
          is not valid transfer-coding header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Gets the transfer-coding value.

      Returns  .The transfer-coding value.

    

    
      Represents a transfer-coding header value with optional quality.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents transfer-coding value information.

      
          is a null reference.

      
          is not valid transfer-coding with quality header value information.

    

    
      Returns  .

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents the value of a Via header.

    

    
      Initializes a new instance of the   class.

      The protocol version of the received protocol.

      The host and port that the request or response was received by.

    

    
      Initializes a new instance of the   class.

      The protocol version of the received protocol.

      The host and port that the request or response was received by.

      The protocol name of the received protocol.

    

    
      Initializes a new instance of the   class.

      The protocol version of the received protocol.

      The host and port that the request or response was received by.

      The protocol name of the received protocol.

      The comment field used to identify the software of the recipient proxy or gateway.

    

    
      Gets the comment field used to identify the software of the recipient proxy or gateway.

      Returns  .The comment field used to identify the software of the recipient proxy or gateway.

    

    
      Determines whether the specified   is equal to the current  object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .Returns a hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns  .An   instance.

      A string that represents via header value information.

      
          is a null reference.

      
          is not valid via header value information.

    

    
      Gets the protocol name of the received protocol.

      Returns  .The protocol name.

    

    
      Gets the protocol version of the received protocol.

      Returns  .The protocol version.

    

    
      Gets the host and port that the request or response was received by.

      Returns  .The host and port that the request or response was received by.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .A copy of the current instance.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

    
      Represents a warning value used by the Warning header.

    

    
      Initializes a new instance of the   class.

      The specific warning code.

      The host that attached the warning.

      A quoted-string containing the warning text.

    

    
      Initializes a new instance of the   class.

      The specific warning code.

      The host that attached the warning.

      A quoted-string containing the warning text.

      The date/time stamp of the warning.

    

    
      Gets the host that attached the warning.

      Returns  .The host that attached the warning.

    

    
      Gets the specific warning code.

      Returns  .The specific warning code.

    

    
      Gets the date/time stamp of the warning.

      Returns  .The date/time stamp of the warning.

    

    
      Determines whether the specified   is equal to the current   object.

      Returns  .true if the specified   is equal to the current object; otherwise, false.

      The object to compare with the current object.

    

    
      Serves as a hash function for an   object.

      Returns  .A hash code for the current object.

    

    
      Converts a string to an   instance.

      Returns an   instance.

      A string that represents authentication header value information.

      
          is a null reference.

      
          is not valid authentication header value information.

    

    
      Creates a new object that is a copy of the current   instance.

      Returns  .Returns a copy of the current instance.

    

    
      Gets a quoted-string containing the warning text.

      Returns  .A quoted-string containing the warning text.

    

    
      Returns a string that represents the current   object.

      Returns  .A string that represents the current object.

    

    
      Determines whether a string is valid   information.

      Returns  .true if   is valid   information; otherwise, false.

      The string to validate.

      The   version of the string.

    

  






bin/System.Web.Http.dll









		00004550
		
		0003
		4ffc7b58
		00000000
		00000000
		00e0
		







		010b
		8.00
		0004cc00
		00000600
		00000000
		0004ea3e
		00002000
		00050000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00054000
		00000200
		00056647
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0004e9f0
		0000004b
		
		00050000
		000003d8
		0004d400
		00001a60
		
		00052000
		0000000c
		0004e96c
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0004ca44
		00002000
		0004cc00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003d8
		00050000
		00000400
		0004ce00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00052000
		00000200
		0004d200
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.Http.WebHost.dll









		00004550
		
		0003
		4ffc7b6a
		00000000
		00000000
		00e0
		







		010b
		8.00
		0000fa00
		00000800
		00000000
		0001193e
		00002000
		00012000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00016000
		00000200
		0001c7a4
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		000118ec
		0000004f
		
		00012000
		00000408
		00010400
		00001a60
		
		00014000
		0000000c
		00011858
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0000f944
		00002000
		0000fa00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000408
		00012000
		00000600
		0000fc00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00014000
		00000200
		00010200
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.Http.WebHost.xml




  
    System.Web.Http.WebHost

  

  
    
       Provides a global   for ASP.NET applications. 

    

    

    
       Gets the default message handler that will be called for all requests. 

    

    
       Extension methods for  

    

    
      Maps the specified route template.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

    

    
      Maps the specified route template and sets default route.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

      An object that contains default route values.

    

    
      Maps the specified route template and sets default route values and constraints.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

      An object that contains default route values.

      A set of expressions that specify values for routeTemplate.

    

    
      Maps the specified route template and sets default route values, constraints,  and end-point message handler.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

      An object that contains default route values.

      A set of expressions that specify values for routeTemplate.

      The handler to which the request will be dispatched.

    

    
       A   that passes ASP.NET requests into the   pipeline and write the result back. 

    

    
       Initializes a new instance of the   class. 

      The route data.

    

    
       Begins the process request. 

      An   that contains information about the status of the process. 

      The HTTP context base.

      The callback.

      The state.

    

    
       Provides an asynchronous process End method when the process ends. 

      An   that contains information about the status of the process.

    

    
       Gets a value indicating whether another request can use the   instance. 

    

    
       Processes the request. 

      The HTTP context base.

    

    
       Begins processing the request. 

      An   that contains information about the status of the process. 

      The HTTP context.

      The callback.

      The state.

    

    
       Provides an asynchronous process End method when the process ends. 

      An   that contains information about the status of the process.

    

    
       Gets a value indicating whether another request can use the   instance. 

    

    
       Processes the request. 

      The HTTP context base.

    

    
       A   that returns instances of   that can pass requests to a given   instance. 

    

    
       Initializes a new instance of the   class. 

    

    
       Provides the object that processes the request. 

       An object that processes the request. 

      An object that encapsulates information about the request.

    

    
       Gets the singleton   instance. 

    

    
       Provides the object that processes the request. 

       An object that processes the request. 

      An object that encapsulates information about the request.

    

    
      Provides a registration point for the simple membership pre-application start code.

    

    
      Registers the simple membership pre-application start code.

    

    
      Represents the web host buffer policy selector.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a value that indicates whether the host should buffer the entity body of the HTTP request.

      true if buffering should be used; otherwise a streamed request should be used.

      The host context.

    

    
      Uses a buffered output stream for the web host.

      A buffered output stream.

      The response.

    

  






bin/System.Web.Http.xml




  
    System.Web.Http

  

  
    
      Creates an   that represents an exception.

      The request must be associated with an   instance.An   whose content is a serialized representation of an    instance.

      The HTTP request.

      The status code of the response.

      The exception.

    

    
      Creates an   that represents an error message.

      The request must be associated with an   instance.An   whose content is a serialized representation of an   instance.

      The HTTP request.

      The status code of the response.

      The error message.

    

    
      Creates an   that represents an exception with an error message.

      The request must be associated with an   instance.An   whose content is a serialized representation of an   instance.

      The HTTP request.

      The status code of the response.

      The error message.

      The exception.

    

    
      Creates an   that represents an error.

      The request must be associated with an   instance.An   whose content is a serialized representation of an   instance.

      The HTTP request.

      The status code of the response.

      The HTTP error.

    

    
      Creates an   that represents an error in the model state.

      The request must be associated with an   instance.An   whose content is a serialized representation of an   instance.

      The HTTP request.

      The status code of the response.

      The model state.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The type of the HTTP response message.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The media type formatter.

      The type of the HTTP response message.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The media type formatter.

      The media type header value.

      The type of the HTTP response message.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The media type formatter.

      The media type.

      The type of the HTTP response message.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The media type header value.

      The type of the HTTP response message.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The media type.

      The type of the HTTP response message.

    

    
      Creates an   wired up to the associated  .

      An initialized   wired up to the associated  .

      The HTTP request message which led to this response message.

      The HTTP response status code.

      The content of the HTTP response message.

      The HTTP configuration which contains the dependency resolver used to resolve services.

      The type of the HTTP response message.

    

    
      Disposes of all tracked resources associated with the   which were added via the   method.

      The HTTP request.

    

    
      Gets the current X.509 certificate from the given HTTP request.

      The current  , or null if a certificate is not available.

      The HTTP request.

    

    
      Retrieves the   for the given request.

      The   for the given request.

      The HTTP request.

    

    
      Retrieves the   which has been assigned as the correlation ID associated with the given  . The value will be created and set the first time this method is called.

      The   object that represents the correlation ID associated with the request.

      The HTTP request.

    

    
      Retrieves the   for the given request or null if not available.

      The   for the given request or null if not available.

      The HTTP request.

    

    
      Gets the parsed query string as a collection of key-value pairs.

      The query string as a collection of key-value pairs.

      The HTTP request.

    

    
      Retrieves the   for the given request or null if not available.

      The   for the given request or null if not available.

      The HTTP request.

    

    
      Retrieves the   for the given request or null if not available.

      The   for the given request or null if not available.

      The HTTP request.

    

    
      Gets a   instance for an HTTP request.

      A   instance that is initialized for the specified HTTP request.

      The HTTP request.

    

    
      Adds the given   to a list of resources that will be disposed by a host once the   is disposed.

      The HTTP request controlling the lifecycle of  .

      The resource to dispose when   is being disposed.

    

    
      Represents the message extensions for the HTTP response from an ASP.NET operation.

    

    
      Attempts to retrieve the value of the content for the  .

      The result of the retrieval of value of the content.

      The response of the operation.

      The value of the content.

      The type of the value to retrieve.

    

    
      Represents extensions for adding   items to a  . 

    

    
       Updates the given formatter's set of   elements so that it associates the mediaType with  s ending with the given uriPathExtension. 

      The   to receive the new   item.

      The string of the   path extension.

      The   to associate with  s ending with uriPathExtension.

    

    
       Updates the given formatter's set of   elements so that it associates the mediaType with  s ending with the given uriPathExtension. 

      The   to receive the new   item.

      The string of the   path extension.

      The string media type to associate with  s ending with uriPathExtension.

    

    
      Provides  s from path extensions appearing in a  . 

    

    
       Initializes a new instance of the   class. 

      The extension corresponding to mediaType. This value should not include a dot or wildcards.

      The   that will be returned if uriPathExtension is matched.

    

    
       Initializes a new instance of the   class. 

      The extension corresponding to mediaType. This value should not include a dot or wildcards.

      The media type that will be returned if uriPathExtension is matched.

    

    
       Returns a value indicating whether this   instance can provide a   for the    of request. 

      If this instance can match a file extension in request it returns 1.0 otherwise 0.0.

      The   to check.

    

    
       Gets the   path extension. 

      The   path extension.

    

    
      The   path extension key.

    

    
      Represents an attribute that specifies which HTTP methods an action method will respond to.

    

    
      Initializes a new instance of the   class by using a list of HTTP methods that the action method will respond to.

      The HTTP methods that the action method will respond to.

    

    
      Gets or sets the list of HTTP methods that the action method will respond to.

      Gets or sets the list of HTTP methods that the action method will respond to.

    

    
      Represents an attribute that is used for the name of an action.

    

    
      Initializes a new instance of the   class.

      The name of the action.

    

    
      Gets or sets the name of the action.

      The name of the action.

    

    
      Specifies that actions and controllers are skipped by   during authorization.

    

    
      Initializes a new instance of the   class.

    

    
      Defines properties and methods for API controller.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the   of the current  .

      The   of the current  .

    

    
      Gets the   of the current  .

      The   of the current  .

    

    
      Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    

    
      Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
      Executes asynchronously a single HTTP operation.

      The newly started task.

      The controller context for a single HTTP operation.

      The cancellation token assigned for the HTTP operation.

    

    
      Initializes the   instance with the specified  .

      The   object that is used for the initialization.

    

    
      Gets the model state after the model binding process.

      The model state after the model binding process.

    

    
      Gets or sets the   of the current  .

      The   of the current  .

    

    
      Returns an instance of a  , which is used to generate URLs to other APIs.

      A   object which is used to generate URLs to other APIs.

    

    
       Returns the current principal associated with this request. 

      The current principal associated with this request.

    

    
      Specifies the authorization filter that verifies the request's  .

    

    
      Initializes a new instance of the   class.

    

    
      Processes requests that fail authorization.

      The context.

    

    
      Indicates whether the specified control is authorized.

      true if the control is authorized; otherwise, false.

      The context.

    

    
      Calls when an action is being authorized.

      The context.

      The context parameter is null.

    

    
      Gets or sets the authorized roles. 

      The roles string. 

    

    
      Gets a unique identifier for this attribute.

      A unique identifier for this attribute.

    

    
      Gets or sets the authorized users. 

      The users string. 

    

    
       An attribute that specifies that an action parameter comes only from the entity body of the incoming  . 

    

    
      Initializes a new instance of the   class.

    

    
      Gets a parameter binding.

      The parameter binding.

      The parameter description.

    

    
      An attribute that specifies that an action parameter comes from the URI of the incoming  .

    

    
      Initializes a new instance of the   class.

    

    
      Gets the value provider factories for the model binder.

      A collection of   objects.

      The configuration.

    

    
      Represents attributes that specifies that HTTP binding should exclude a property.

    

    
      Initializes a new instance of the   class.

    

    
      Represents the required attribute for http binding.

    

    
      Initializes a new instance of the   class.

    

    
       Configuration of   instances. 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with an HTTP route collection.

      The HTTP route collection to associate with this instance.

    

    
      Gets or sets the dependency resolver associated with thisinstance.

      The dependency resolver.

    

    
      Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    

    
      Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
      Gets the list of filters that apply to all requests served using this   instance.

      The list of filters.

    

    
      Gets the media-type formatters for this instance.

      A collection of   objects.

    

    
      Gets or sets a value indicating whether error details should be included in error messages.

      The   value that indicates that error detail policy.

    

    
       Gets or sets the action that will perform final initialization of the   instance before it is used to process requests. 

      The action that will perform final initialization of the   instance.

    

    
      Gets an ordered list of   instances to be invoked as an   travels up the stack and an   travels down in stack in return. 

      The message handler collection.

    

    
      The collection of rules for how parameters should be bound.

      A collection of functions that can produce a parameter binding for a given parameter.

    

    
      Gets the properties associated with this instance.

      The  that contains the properties.

    

    
      Gets the   associated with this   instance.

      The  .

    

    
      Gets the container of default services associated with this instance.

      The   that contains the default services for this instance.

    

    
      Gets the root virtual path.

      The root virtual path.

    

    
      Contains extension methods for the   class.

    

    
       Register that the given parameter type on an Action is to be bound using the model binder. 

      configuration to be updated.

      parameter type that binder is applied to

      a model binder

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a collection of HTTP methods.

      A collection of HTTP methods.

    

    
       Defines a serializable container for arbitrary error information. 

    

    
       Initializes a new instance of the   class. 

    

    
       Initializes a new instance of the   class for exception. 

      The exception to use for error information.

        true to include the exception information in the error; false otherwise

    

    
       Initializes a new instance of the   class containing error message message. 

      The error message to associate with this instance.

    

    
       Initializes a new instance of the   class for modelState. 

      The invalid model state to use for error information.

        true to include exception messages in the error; false otherwise

    

    
       The error message associated with this instance. 

    

    
      This method is reserved and should not be used.

      Always returns null.

    

    
      Generates an   instance from its XML representation.

      The   stream from which the object is deserialized.

    

    
      Converts an   instance into its XML representation.

      The   stream to which the object is serialized.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the collection of HTTP methods.

      A collection of HTTP methods.

    

    
      Represents an HTTP head attribute.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the collection of HTTP methods.

      A collection of HTTP methods.

    

    
      Represents an attribute that is used to restrict an HTTP method so that the method handles only HTTP OPTIONS requests.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the collection of methods supported by HTTP OPTIONS requests.

      The collection of methods supported by HTTP OPTIONS requests.

    

    
      Represents a HTTP patch attribute.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a collection of HTTP methods.

      A collection of HTTP methods.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a collection of HTTP methods.

      A collection of HTTP methods.

    

    
      Represents an attribute that is used to restrict an HTTP method so that the method handles only HTTP PUT requests.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the read-only collection of HTTP PUT methods.

      The read-only collection of HTTP PUT methods.

    

    
       An exception that allows for a given   to be returned to the client. 

    

    
      Initializes a new instance of the   class.

      The HTTP response to return to the client.

    

    
       Initializes a new instance of the   class. 

      The status code of the response.

    

    
      Gets the HTTP response to return to the client.

      The   that represents the HTTP response.

    

    
      A collection of   instances.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The virtual path root.

    

    
      Adds an   instance to the collection.

      The name of the route.

      The   instance to add to the collection.

    

    
      Removes all items from  the collection.

    

    
      Determines whether the collection contains a specific  .

      true if the   is found in the collection; otherwise, false.

      The object to locate in the collection.

    

    
      Determines whether the collection contains an element with the specified key.

      true if the collection contains an element with the key; otherwise, false.

      The key to locate in the collection.

    

    
      Copies the   instances of the collection to an array, starting at a particular array index.

      The array that is the destination of the elements copied from the collection.

      The zero-based index in   at which copying begins.

    

    
      Copies the route names and   instances of the collection to an array, starting at a particular array index.

      The array that is the destination of the elements copied from the collection.

      The zero-based index in   at which copying begins.

    

    
      Gets the number of items in the collection.

      The number of items in the collection.

    

    
      Creates an   instance.

      The new   instance.

      The route template.

      An object that contains the default route parameters.

      An object that contains the route constraints.

      The route data tokens.

    

    
      Creates an   instance.

      The new   instance.

      The route template.

      An object that contains the default route parameters.

      An object that contains the route constraints.

      The route data tokens.

      The message handler for the route.

    

    
      Creates an   instance.

      The new   instance.

      The route template.

      An object that contains the default route parameters.

      An object that contains the route constraints.

    

    
      Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    

    
      Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
      Returns an enumerator that iterates through the collection.

      An   that can be used to iterate through the collection.

    

    
      Gets the route data for a specified HTTP request.

      An  instance that represents the route data.

      The HTTP request.

    

    
      Gets a virtual path.

      An   instance that represents the virtual path.

      The HTTP request.

      The route name.

      The route values.

    

    
      Inserts an   instance into the collection.

      The zero-based index at which   should be inserted.

      The route name.

      The   to insert. The value cannot be null.

    

    
      Gets a value indicating whether the collection is read-only.

      true if the collection is read-only; otherwise, false.

    

    
      Gets or sets the element at the specified index.

      The    at the specified index.

      The zero-based index of the element to get or set.

    

    
      Gets or sets the element with the specified route name.

      The    at the specified index.

      The route name.

    

    
      Called internally to get the enumerator for the collection.

      An   that can be used to iterate through the collection.

    

    
      Removes an   instance from the collection.

      true if the element is successfully removed; otherwise, false. This method also returns false if   was not found in the collection.

      The name of the route to remove.

    

    
      Adds an item to the collection.

      The object to add to the collection.

    

    
      Removes the first occurrence of a specific object from the collection.

      true if   was successfully removed from the collection; otherwise, false. This method also returns false if   is not found in the original collection.

      The object to remove from the collection.

    

    
      Returns an enumerator that iterates through the collection.

      An   object that can be used to iterate through the collection.

    

    
      Gets the   with the specified route name.

      true if the collection contains an element with the specified name; otherwise, false.

      The route name.

      When this method returns, contains the   instance, if the route name is found; otherwise, null. This parameter is passed uninitialized.

    

    
      Gets the virtual path root.

      The virtual path root.

    

    
       Extension methods for  

    

    
      Maps the specified route template.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

    

    
      Maps the specified route template and sets default route values.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

      An object that contains default route values.

    

    
      Maps the specified route template and sets default route values and constraints.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

      An object that contains default route values.

      A set of expressions that constrain the values for routeTemplate.

    

    
       Maps the specified route template and sets default route values, constraints, and end-point message handler. 

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The route template for the route.

      An object that contains default route values.

      A set of expressions that constrain the values for routeTemplate.

      The handler to which the request will be dispatched.

    

    
       Defines an implementation of an   which dispatches an  incoming   and creates an   as a result. 

    

    
      Initializes a new instance of the   class, using the default configuration and dispatcher.

    

    
       Initializes a new instance of the   class with a specified dispatcher. 

      The HTTP dispatcher that will handle incoming requests.

    

    
      Initializes a new instance of the   class with a specified configuration.

      The   used to configure this instance.

    

    
      Initializes a new instance of the   class with a specified configuration and dispatcher.

      The   used to configure this instance.

      The HTTP dispatcher that will handle incoming requests.

    

    
      Gets the   used to configure this instance.

      The   used to configure this instance.

    

    
      Gets the HTTP dispatcher that handles incoming requests.

      The HTTP dispatcher that handles incoming requests.

    

    
      Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
      Prepares the server for operation.

    

    
      Dispatches an incoming  .

       A task representing the asynchronous operation.

      The request to dispatch.

      The token to monitor for cancellation requests.

    

    
      Specifies whether error details, such as exception messages and stack traces, should be included in error messages.

    

    
      Use the default behavior for the host environment. For ASP.NET hosting, use the value from the customErrors element in the Web.config file. For self-hosting, use the value  .

    

    
      Only include error details when responding to a local request. 

    

    
      Always include error details.

    

    
      Never include error details. 

    

    
      Represents an attribute that is used to indicate that a controller method is not an action method.

    

    
      Initializes a new instance of the   class.

    

    
       Attribute on a parameter or type that produces a  .  If the attribute is on a type-declaration, then it's as if that attribute is present on all action parameters  of that type. 

    

    
      Initializes a new instance of the   class.

    

    
      Gets the parameter binding.

      The parameter binding.

      The parameter description.

    

    
      Enables a controller action to support OData query parameters.

    

    
      Initializes a new instance of the   class.

    

    
      Applies the result limit to the query results.

      The query results after the result limit is applied.

      The context for the action.

      The original query results.

    

    
      Called by the Web API framework after the action method executes.

      The filter context.

    

    
      Called by the Web API framework before the action method executes.

      The filter context.

    

    
      The maximum number of results that should be returned from this query regardless of query-specified limits.

      The maximum number of results that should be returned. A value of zero indicates no limit.

    

    
       The   to use. Derived classes can use this to have a per-attribute query builder  instead of the one on  

    

    
      The   class can be used to indicate properties about a route parameter (the literals and placeholders  located within segments of a  ).  It can for example be used to indicate that a route parameter is optional. 

    

    
      An optional parameter.

    

    
      Returns a   that represents this instance.

      A   that represents this instance.

    

    
      Provides type-safe accessors for services obtained from a  object.

    

    
      Gets the   service.

      Returns an   instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an  instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   collection.

      Returns a collection of  objects.

      The services container.

    

    
      Gets the   service.

      Returns an  instance.

      The services container.

    

    
      Gets the   service.

      Returns an  instance, or null if no instance was registered.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an  instance.

      The services container.

    

    
      Gets the   collection.

      Returns a collection of   objects.

      The services container.

    

    
      Gets the   service.

      Returns an   instance.

      The services container.

    

    
      Gets the   collection.

      Returns a collection of objects.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the   service.

      Returns an instance.

      The services container.

    

    
      Gets the  service. 

      Returns an instance.

      The services container.

    

    
      Gets the   collection.

      Returns  a colleciton of objects.

      The services container.

    

    
      Invokes the action methods of a controller.

    

    
      Initializes a new instance of the   class.

    

    
      Asynchronously invokes the specified action by using the specified controller context.

      The invoked action.

      The controller context.

      The cancellation token.

    

    
      Represents a reflection based action selector.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the action mappings for the  .

      The action mappings.

      The information that describes a controller.

    

    
      Selects an action for the  .

      The selected action.

      The controller context.

    

    
       Represents a container for services that can be specific to a controller.  This shadows the services from its parent  . A controller can either set a service here, or fall through  to the more global set of services.  

    

    
      Initializes a new instance of the   class.

      The parent services container.

    

    
      Removes a single-instance service from the default services.

      The type of service.

    

    
      Gets a service of the specified type.

      The first instance of the service, or null if the service is not found.

      The type of service.

    

    
      Gets the list of service objects for a given service type, and validates the service type.

      The list of service objects of the specified type.

      The service type.

    

    
      Gets the list of service objects for a given service type.

      The list of service objects of the specified type, or an empty list if the service is not found.

      The type of service.

    

    
      Queries whether a service type is single-instance.

      true if the service type has at most one instance, or false if the service type supports multiple instances.

      The service type.

    

    
      Replaces a single-instance service object.

      The service type.

      The service object that replaces the previous instance.

    

    
      Describes *how* the binding will happen and does not actually bind.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The back pointer to the action this binding is for.  

      The synchronous bindings for each parameter.

    

    
      Gets or sets the back pointer to the action this binding is for.  

      The back pointer to the action this binding is for.  

    

    
      Executes asynchronously the binding for the given request context.

      Task that is signaled when the binding is complete. 

      The action context for the binding. This contains the parameter dictionary that will get populated.

      The cancellation token for cancelling the binding operation. Or a binder can also bind a parameter to this.

    

    
      Gets or sets the synchronous bindings for each parameter. 

      The synchronous bindings for each parameter.

    

    
      Contains information for the executing action.

    

    
       Initializes a new instance of the   class. 

    

    
      Initializes a new instance of the   class.

      The controller context.

      The action descriptor.

    

    
      Gets a list of action arguments.

      A list of action arguments.

    

    
      Gets or sets the action descriptor for the action context.

      The action descriptor.

    

    
      Gets or sets the controller context.

      The controller context.

    

    
      Gets the model state dictionary for the context.

      The model state dictionary.

    

    
      Gets the request message for the action context.

      The request message for the action context.

    

    
      Gets or sets the response message for the action context.

      The response message for the action context.

    

    
      Contains extension methods for  .

    

    
      Binds the model to a value by using the specified controller context and binding context.

      true if the bind succeeded; otherwise, false.

      The execution context.

      The binding context.

    

    
      Binds the model to a value by using the specified controller context, binding context, and model binders.

      true if the bind succeeded; otherwise, false.

      The execution context.

      The binding context.

      The collection of model binders.

    

    
      Retrieves the   instance for a given  . 

      An   instance.

      The context.

    

    
      Retrieves the collection of registered   instances.

      A collection of   instances.

      The context.

    

    
      Retrieves the collection of registered   instances. 

      A collection of registered   instances.

      The context.

      The metadata.

    

    
      Binds the model to the property by using the specified execution context and binding context.

      true if the bind succeeded; otherwise, false.

      The execution context.

      The parent binding context.

      The name of the property to bind with the model.

      The metadata provider for the model.

      When this method returns, contains the bound model.

      The type of the model.

    

    
      Provides information about the action methods.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with specified information that describes the controller of the action.

      The information that describes the controller of the action.

    

    
      Gets or sets the binding that describes the action.

      The binding that describes the action.

    

    
      Gets the name of the action.

      The name of the action.

    

    
      Gets or sets the action configuration.

      The action configuration.

    

    
      Gets the information that describes the controller of the action.

      The information that describes the controller of the action.

    

    
      Executes the described action and returns a   that once completed will contain the return value of the action.

      A   that once completed will contain the return value of the action.

      The controller context.

      A list of arguments.

      The cancellation token.

    

    
      Returns the custom attributes associated with the action descriptor.

      The custom attributes associated with the action descriptor.

      The action descriptor.

    

    
      Retrieves the filters for the given configuration and action.

      The filters for the given configuration and action.

    

    
      Retrieves the filters for the action descriptor.

      The filters for the action descriptor.

    

    
      Retrieves the parameters for the action descriptor.

      The parameters for the action descriptor.

    

    
      Gets the properties associated with this instance.

      The properties associated with this instance.

    

    
      Gets the converter for correctly transforming the result of calling  " into an instance of  .

      The action result converter.

    

    
      Gets the return type of the descriptor.

      The return type of the descriptor.

    

    
      Gets the collection of supported HTTP methods for the descriptor.

      The collection of supported HTTP methods for the descriptor.

    

    
      Contains information for a single HTTP operation.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The configuration.

      The route data.

      The request.

    

    
      Gets or sets the configuration.

      The configuration.

    

    
      Gets or sets the HTTP controller.

      The HTTP controller.

    

    
      Gets or sets the controller descriptor.

      The controller descriptor.

    

    
      Gets or sets the request.

      The request.

    

    
      Gets or sets the route data.

      The route data.

    

    
      Represents information that describes the HTTP controller.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The configuration.

      The controller name.

      The controller type.

    

    
      Gets or sets the configurations associated with the controller.

      The configurations associated with the controller.

    

    
      Gets or sets the name of the controller.

      The name of the controller.

    

    
      Gets or sets the type of the controller.

      The type of the controller.

    

    
      Creates a controller instance for the given  .

      The created controller instance.

      The request message

    

    
      Retrieves a collection of custom attributes of the controller.

      A collection of custom attributes

      The type of the object.

    

    
      Returns a collection of filters associated with the controller.

      A collection of filters associated with the controller.

    

    
      Gets the properties associated with this instance.

      The properties associated with this instance.

    

    
      Contains settings for an HTTP controller.

    

    
      Initializes a new instance of the   class.

      A configuration object that is used to initialize the instance.

    

    
      Gets the collection of   instances for the controller.

      The collection of   instances.

    

    
      Gets the collection of parameter bindingfunctions for for the controller.

      The collection of parameter binding functions.

    

    
      Gets the collection of service instances for the controller.

      The collection of service instances.

    

    
       Describes how a parameter is bound. The binding should be static (based purely on the descriptor) and  can be shared across requests.  

    

    
      Initializes a new instance of the   class.

      An   that describes the parameters.

    

    
      Gets the   that was used to initialize this instance.

      The   instance.

    

    
      If the binding is invalid, gets an error message that describes the binding error.

      An error message. If the binding was successful, the value is null.

    

    
      Asynchronously executes the binding for the given request.

      A task object representing the asynchronous operation.

      Metadata provider to use for validation.

      The action context for the binding. The action context contains the parameter dictionary that will get populated with the parameter.

      Cancellation token for cancelling the binding operation.

    

    
       Gets the parameter value from argument dictionary of the action context.

      The value for this parameter in the given action context, or null if the parameter has not yet been set.

      The action context.

    

    
      Gets a value that indicates whether the binding was successful.

      true if the binding was successful; otherwise, false.

    

    
      Sets the result of this parameter binding in the argument dictionary of the action context.  

      The action context.

      The parameter value.

    

    
      Returns a value indicating whether this   instance will read the entity body of the HTTP message.

      true if this   will read the entity body; otherwise, false.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The action descriptor.

    

    
      Gets or sets the action descriptor.

      The action descriptor.

    

    
      Gets or sets the   for the  .

      The   for the  .

    

    
      Gets the default value of the parameter.

      The default value of the parameter.

    

    
      Retrieves a collection of the custom attributes from the parameter.

      A collection of the custom attributes from the parameter.

      The type of the custom attributes.

    

    
      Gets a value that indicates whether the parameter is optional.

      true if the parameter is optional; otherwise, false..

    

    
      Gets or sets the parameter binding attribute.

      The parameter binding attribute.

    

    
      Gets the name of the parameter.

      The name of the parameter.

    

    
      Gets the type of the parameter.

      The type of the parameter.

    

    
      Gets the prefix of this parameter.

      The prefix of this parameter.

    

    
      Gets the properties of this parameter.

      The properties of this parameter.

    

    
       A contract for a conversion routine that can take the result of an action returned from &lt;see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})" /&gt; and convert it to an instance of  . 

    

    
      Converts the specified   object to another object.

      The converted object.

      The controller context.

      The action result.

    

    
      No content here will be updated; please do not add material here.

    

    
      Gets the  

      A   object.

      The action descriptor.

    

    
       If a controller is decorated with an attribute with this interface, then it gets invoked to initialize the controller settings.  

    

    
       Callback invoked to set per-controller overrides for this controllerDescriptor. 

      The controller settings to initialize.

      The controller descriptor. Note that the   can be associated with the derived controller type given that   is inherited.

    

    
      Contains method that is used to invoke HTTP operation.

    

    
      Executes asynchronously the HTTP operation.

      The newly started task.

      The execution context.

      The cancellation token assigned for the HTTP operation.

    

    
      Contains the logic for selecting an action method.

    

    
      Returns a map, keyed by action string, of all   that the selector can select.  This is primarily called by   to discover all the possible actions in the controller.

      A map of   that the selector can select, or null if the selector does not have a well-defined mapping of  .

      The controller descriptor.

    

    
      Selects the action for the controller.

      The action for the controller.

      The context of the controller.

    

    
      No content here will be updated; please do not add material here.

    

    
      Executes the controller for synchronization.

      The controller.

      The current context for a test controller.

      The notification that cancels the operation.

    

    
      Defines extension methods for  .

    

    
      Binds parameter that results as an error. 

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The error message that describes the reason for fail bind.

    

    
      Bind the parameter as if it had the given attribute on the declaration.

      The HTTP parameter binding object.

      The parameter to provide binding for.

      The attribute that describes the binding.

    

    
      Binds parameter by parsing the HTTP body content.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

    

    
      Binds parameter by parsing the HTTP body content.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The list of formatters which provides selection of an appropriate formatter for serializing the parameter into object.

    

    
      Binds parameter by parsing the HTTP body content.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The list of formatters which provides selection of an appropriate formatter for serializing the parameter into object.

      The body model validator used to validate the parameter.

    

    
      Binds parameter by parsing the HTTP body content.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The list of formatters which provides selection of an appropriate formatter for serializing the parameter into object.

    

    
      Binds parameter by parsing the query string.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

    

    
      Binds parameter by parsing the query string.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The value provider factories which provide query string parameter data.

    

    
      Binds parameter by parsing the query string.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The model binder used to assemble the parameter into an object.

    

    
      Binds parameter by parsing the query string.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The model binder used to assemble the parameter into an object.

      The value provider factories which provide query string parameter data.

    

    
      Binds parameter by parsing the query string.

      The HTTP parameter binding object.

      The parameter descriptor that describes the parameter to bind.

      The value provider factories which provide query string parameter data.

    

    
      Represents a reflected synchronous or asynchronous action method. 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with the specified descriptor and method details.

      The controller descriptor.

      The action-method information.

    

    
      Gets the name of the action.

      The name of the action.

    

    
      Executes the described action and returns a   that once completed will contain the return value of the action.

      A   that once completed will contain the return value of the action.

      The context.

      The arguments.

      A cancellation token to cancel the action.

    

    
      Returns an array of custom attributes defined for this member, identified by type.

      An array of custom attributes or an empty array if no custom attributes exist.

      The type of the custom attributes.

    

    
      Retrieves information about action filters.

      The filter information.

    

    
      Retrieves the parameters of the action method.

      The parameters of the action method.

    

    
      Gets or sets the action-method information.

      The action-method information.

    

    
      Gets the return type of this method.

      The return type of this method.

    

    
      Gets or sets the supported http methods.

      The supported http methods.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The action descriptor.

      The parameter information.

    

    
      Gets the default value for the parameter.

      The default value for the parameter.

    

    
      Retrieves a collection of the custom attributes from the parameter.

      A collection of the custom attributes from the parameter.

      The type of the custom attributes.

    

    
      Gets a value that indicates whether the parameter is optional.

      true if the parameter is optional; otherwise false.

    

    
      Gets or sets the parameter information.

      The parameter information.

    

    
      Gets the name of the parameter.

      The name of the parameter.

    

    
      Gets the type of the parameter.

      The type of the parameter.

    

    
      Represents a converter for actions with a return type of  . 

    

    
      Initializes a new instance of the   class.

    

    
      Converts a   object to another object.

      The converted object.

      The controller context.

      The action result.

    

    
      An abstract class that provides a container for services used by ASP.NET Web API.

    

    
      Initializes a new instance of the   class.

    

    
       Adds a service to the end of services list for the given service type.  

      The service type.

      The service instance.

    

    
       Adds the services of the specified collection to the end of the services list for the given service type. 

      The service type.

      The services to add.

    

    
       Removes all the service instances of the given service type.  

      The service type to clear from the services list.

    

    
      Removes all instances of a multi-instance service type.

      The service type to remove.

    

    
      Removes a single-instance service type.

      The service type to remove.

    

    
      Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    

    
       Searches for a service that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence. 

      The zero-based index of the first occurrence, if found; otherwise, -1.

      The service type.

      The delegate that defines the conditions of the element to search for. 

    

    
      Gets a service instance of a specified type.

      The service type.

    

    
      Gets a mutable list of service instances of a specified type.

      A mutable list of service instances.

      The service type.

    

    
      Gets a collection of service instanes of a specified type.

      A collection of service instances.

      The service type.

    

    
       Inserts a service into the collection at the specified index. 

      The service type.

      The zero-based index at which the service should be inserted. If   is passed, ensures the element is added to the end.

      The service to insert.

    

    
       Inserts the elements of the collection into the service list at the specified index. 

      The service type.

      The zero-based index at which the new elements should be inserted. If   is passed, ensures the elements are added to the end.

      The collection of services to insert.

    

    
       Determine whether the service type should be fetched with GetService or GetServices.  

      true iff the service is singular. 

      type of service to query

    

    
       Removes the first occurrence of the given service from the service list for the given service type. 

      true if the item is successfully removed; otherwise, false.

      The service type.

      The service instance to remove.

    

    
       Removes all the elements that match the conditions defined by the specified predicate. 

      The number of elements removed from the list.

      The service type.

      The delegate that defines the conditions of the elements to remove.

    

    
       Removes the service at the specified index. 

      The service type.

      The zero-based index of the service to remove.

    

    
       Replaces all existing services for the given service type with the given service instance. This works for both singular and plural services.  

      The service type.

      The service instance.

    

    
      Replaces all instances of a multi-instance service with a new instance.

      The type of service.

      The service instance that will replace the current services of this type.

    

    
       Replaces all existing services for the given service type with the given service instances. 

      The service type.

      The service instances.

    

    
      Replaces a single-instance service of a specified type.

      The service type. 

      The service instance.

    

    
      Removes the cached values for a single service type.

      The service type.

    

    
       A converter for creating responses from actions that return an arbitrary   value. 

      The declared return type of an action.

    

    
      Initializes a new instance of the   class.

    

    
      Converts the result of an action with arbitrary return type   to an instance of  .

      The newly created   object.

      The action controller context.

      The execution result.

    

    
      Represents a converter for creating a response from actions that do not return a value.

    

    
      Initializes a new instance of the   class.

    

    
      Converts the created response from actions that do not return a value.

      The converted response.

      The context of the controller.

      The result of the action.

    

    
      Represents a dependency injection container.

    

    
       Starts a resolution scope. 

      The dependency scope.

    

    
      Represents an interface for the range of the dependencies.

    

    
      Retrieves a service from the scope.

      The retrieved service.

      The service to be retrieved.

    

    
      Retrieves a collection of services from the scope.

      The retrieved collection of services.

      The collection of services to be retrieved.

    

    
       Describes an API defined by relative URI path and HTTP method. 

    

    
       Initializes a new instance of the   class. 

    

    
       Gets or sets the action descriptor that will handle the API. 

       The action descriptor. 

    

    
       Gets or sets the documentation of the API. 

       The documentation. 

    

    
       Gets or sets the HTTP method. 

       The HTTP method. 

    

    
       Gets the ID. The ID is unique within  . 

    

    
       Gets the parameter descriptions. 

    

    
       Gets or sets the relative path. 

       The relative path. 

    

    
       Gets or sets the registered route for the API. 

       The route. 

    

    
       Gets the supported request body formatters. 

    

    
       Gets the supported response formatters. 

    

    
       Explores the URI space of the service based on routes, controllers and actions available in the system. 

    

    
       Initializes a new instance of the   class. 

      The configuration.

    

    
       Gets the API descriptions. The descriptions are initialized on the first access. 

    

    
       Gets or sets the documentation provider. The provider will be responsible for documenting the API. 

       The documentation provider. 

    

    
       Gets a collection of HttpMethods supported by the action. Called when initializing the  . 

      A collection of HttpMethods supported by the action.

      The route.

      The action descriptor.

    

    
       Determines whether the action should be considered for   generation. Called when initializing the  . 

      true if the action should be considered for   generation, false otherwise.

      The action variable value from the route.

      The action descriptor.

      The route.

    

    
       Determines whether the controller should be considered for   generation. Called when initializing the  . 

      true if the controller should be considered for   generation, false otherwise.

      The controller variable value from the route.

      The controller descriptor.

      The route.

    

    
       This attribute can be used on the controllers and actions to influence the behavior of  . 

    

    
      Initializes a new instance of the   class.

    

    
       Gets or sets a value indicating whether to exclude the controller or action from the   instances generated by  . 

      true if the controller or action should be ignored; otherwise, false.

    

    
       Describes a parameter on the API defined by relative URI path and HTTP method. 

    

    
      Initializes a new instance of the   class.

    

    
       Gets or sets the documentation. 

       The documentation. 

    

    
       Gets or sets the name. 

       The name. 

    

    
       Gets or sets the parameter descriptor. 

       The parameter descriptor. 

    

    
       Gets or sets the source of the parameter. It may come from the request URI, request body or other places. 

       The source. 

    

    
       Describes where the parameter come from. 

    

    
      The parameter come from Uri.

    

    
      The parameter come from Body.

    

    
      The location is unknown.

    

    
       Defines the interface for getting a collection of  . 

    

    
       Gets the API descriptions. 

    

    
       Defines the provider responsible for documenting the service. 

    

    
       Gets the documentation based on  . 

      The documentation for the controller.

      The action descriptor.

    

    
       Gets the documentation based on  . 

      The documentation for the controller.

      The parameter descriptor.

    

    
       Provides an implementation of   with no external dependencies. 

    

    
      Initializes a new instance of the   class.

    

    
       Returns a list of assemblies available for the application. 

      A &lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt; of assemblies.

    

    
      Represents a default implementation of an  . A different implementation can be registered via the  . We optimize for the case where we have an    instance per   instance but can support cases where there are many   instances for one    as well. In the latter case the lookup is slightly slower because it goes through the   dictionary. 

    

    
      Initializes a new instance of the   class.

    

    
       Creates the   specified by   using the given  .

      An instance of type  .

      The request message.

      The controller descriptor.

      The type of the controller.

    

    
      Represents a default   instance for choosing a   given a  . A different implementation can be registered via the  . 

    

    
       Initializes a new instance of the   class.

      The configuration.

    

    
      Specifies the suffix string in the controller name.

    

    
      Returns a map, keyed by controller string, of all   that the selector can select. 

      A map of all   that the selector can select, or null if the selector does not have a well-defined mapping of  .

    

    
      Gets the name of the controller for the specified  .

      The name of the controller for the specified  .

      The HTTP request message.

    

    
      Selects a   for the given  .

      The   instance for the given  .

      The HTTP request message.

    

    
       Provides an implementation of   with no external dependencies. 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new   instance using a predicate to filter controller types. 

      The predicate.

    

    
       Returns a list of controllers available for the application. 

      An &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; of controllers.

      The assemblies resolver.

    

    
      Gets a value whether the resolver type is a controller type predicate.

      true if the resolver type is a controller type predicate; otherwise, false.

    

    
      Dispatches an incoming   to an   implementation for processing.

    

    
      Initializes a new instance of the   class with the specified configuration.

      The http configuration.

    

    
      Gets the HTTP configuration.

      The HTTP configuration.

    

    
      Dispatches an incoming   to an  .

      A   representing the ongoing operation.

      The request to dispatch

      The cancellation token.

    

    
       This class is the default endpoint message handler which examines the   of the matched route, and chooses which message handler to call. If   is null, then it delegates to  . 

    

    
       Initializes a new instance of the   class, using the provided   and   as the default handler. 

      The server configuration.

    

    
       Initializes a new instance of the   class, using the provided   and  . 

      The server configuration.

      The default handler to use when the   has no  .

    

    
      Sends an HTTP request as an asynchronous operation.

      The task object representing the asynchronous operation.

      The HTTP request message to send.

      The cancellation token to cancel operation.

    

    
       Provides an abstraction for managing the assemblies of an application. A different implementation can be registered via the  . 

    

    
       Returns a list of assemblies available for the application. 

      An &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; of assemblies.

    

    
      Defines the methods that are required for an  .

    

    
      Creates an   object.

      An   object.

      The message request.

      The HTTP controller descriptor.

      The type of the controller.

    

    
       Defines the methods that are required for an   factory. 

    

    
       Returns a map, keyed by controller string, of all   that the selector can select.  This is primarily called by   to discover all the possible controllers in the system. 

      A map of all   that the selector can select, or null if the selector does not have a well-defined mapping of  .

    

    
       Selects a   for the given  . 

      An   instance.

      The request message.

    

    
       Provides an abstraction for managing the controller types of an application. A different implementation can be registered via the DependencyResolver.

    

    
       Returns a list of controllers available for the application. 

      An &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt; of controllers.

      The resolver for failed assemblies.

    

    
      Provides information about an action method, such as its name, controller, parameters, attributes, and filters.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the filters that are associated with this action method.

      The filters that are associated with this action method.

      The configuration.

      The action descriptor.

    

    
      Represents the base class for all action-filter attributes.

    

    
      Initializes a new instance of the   class.

    

    
      Occurs after the action method is invoked.

      The action executed context.

    

    
      Occurs before the action method is invoked.

      The action context.

    

    
      Executes the filter action asynchronously.

      The newly created task for this operation.

      The action context.

      The cancellation token assigned for this task.

      The delegate function to continue after the action method is invoked.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Calls when a process requests authorization.

      The action context, which encapsulates information for using  .

    

    
      Executes the authorization filter during synchronization.

      The authorization filter during synchronization.

      The action context, which encapsulates information for using  .

      The cancellation token that cancels the operation.

      A continuation of the operation.

    

    
      Represents the configuration filter provider.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the filters that are associated with this configuration method.

      The filters that are associated with this configuration method.

      The configuration.

      The action descriptor.

    

    
      Represents the attributes for the exception filter.

    

    
      Initializes a new instance of the   class.

    

    
      Raises the exception event.

      The context for the action.

    

    
      Asynchronously executes the exception filter.

      The result of the execution.

      The context for the action.

      The cancellation context.

    

    
      Represents the base class for action-filter attributes.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a value that indicates whether multiple filters are allowed.

      true if multiple filters are allowed; otherwise, false.

    

    
      Provides information about the available action filters.

    

    
      Initializes a new instance of the   class.

      The instance of this class.

      The scope of this class.

    

    
      Gets or sets an instance of the  .

      A  .

    

    
      Gets or sets the scope  .

      The scope of the FilterInfo.

    

    
      Defines values that specify the order in which filters run within the same filter type and filter order.

    

    
      Specifies an action before Controller.

    

    
      Specifies an order before Action and after Global.

    

    
      Specifies an order after Controller. 

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The action context.

      The exception.

    

    
      Gets or sets the HTTP action context.

      The HTTP action context.

    

    
      Gets or sets the exception that was raised during the execution.

      The exception that was raised during the execution.

    

    
      Gets the   object for the context.

      The   object for the context.

    

    
      Gets or sets the   for the context.

      The   for the context.

    

    
      Represents a collection of HTTP filters.

    

    
      Initializes a new instance of the   class.

    

    
      Adds an item at the end of the collection.

      The item to add to the collection.

    

    
      Removes all item in the collection.

    

    
      Determines whether the collection contains the specified item.

      true if the collection contains the specified item; otherwise, false.

      The item to check.

    

    
      Gets the number of elements in the collection.

      The number of elements in the collection.

    

    
      Gets an enumerator that iterates through the collection.

      An enumerator object that can be used to iterate through the collection.

    

    
      Removes the specified item from the collection.

      The item to remove in the collection.

    

    
      Gets an enumerator that iterates through the collection.

      An enumerator object that can be used to iterate through the collection.

    

    
      Defines the methods that are used in an action filter.

    

    
      Executes the filter action asynchronously.

      The newly created task for this operation.

      The action context.

      The cancellation token assigned for this task.

      The delegate function to continue after the action method is invoked.

    

    
      No content here will be updated; please do not add material here.

    

    
      Executes the authorization filter to synchronize.

      The authorization filter to synchronize.

      The action context.

      The cancellation token associated with the filter.

      The continuation.

    

    
      Defines the methods that are required for an exception filter.

    

    
      Executes an asynchronous exception filter.

      An asynchronous exception filter.

      The action executed context.

      The cancellation token.

    

    
      Specifies a server-side component that is used by the indexing system to index documents that have the file format associated with the IFilter.

    

    
      Gets or sets a value indicating whether more than one instance of the indicated attribute can be specified for a single program element.

      true if more than one instance is allowed to be specified; otherwise, false. The default is false.

    

    
      Provides filter information.

    

    
      Returns an enumeration of filters.

      An enumeration of filters.

      The HTTP configuration.

      The action descriptor.

    

    
      Provides common keys for properties stored in the  .

    

    
      Provides a key for the client certificate for this request.

    

    
       Provides a key for the   associated with this request.

    

    
       Provides a key for the collection of resources that should be disposed when a request is disposed. 

    

    
       Provides a key for the   associated with this request. 

    

    
       Provides a key for the   associated with this request. 

    

    
      Provides a key that indicates whether error details are to be included in the response for this HTTP request.

    

    
      Provides a key that indicates whether the request originates from a local address.

    

    
       Provides a key for the   stored in  . This is the correlation ID for that request. 

    

    
      Provides a key for the parsed query string stored in  .

    

    
      Provides a key for a delegate which can retrieve the client certificate for this request.

    

    
       Provides a key for the current   stored in  . If   is null then no context is stored. 

    

    
       Interface for controlling the use of buffering requests and responses in the host. If a host provides support for buffering requests and/or responses then it can use this interface to determine the policy for when buffering is to be used.

    

    
      Determines whether the host should buffer the   entity body.

      true if buffering should be used; otherwise a streamed request should be used.

      The host context.

    

    
      Determines whether the host should buffer the   entity body.

      true if buffering should be used; otherwise a streamed response should be used.

      The HTTP response message.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

      The provider.

      The type of the container.

      The model accessor.

      The type of the model.

      The name of the property.

    

    
      Gets a dictionary that contains additional metadata about the model.

      A dictionary that contains additional metadata about the model.

    

    
      Gets or sets the type of the container for the model.

      The type of the container for the model.

    

    
      Gets or sets a value that indicates whether empty strings that are posted back in forms should be converted to null.

      true if empty strings that are posted back in forms should be converted to null; otherwise, false. The default value is true.

    

    
      Gets or sets the description of the model.

      The description of the model. The default value is null.

    

    
      Gets the display name for the model.

      The display name for the model.

    

    
      Gets a list of validators for the model.

      A list of validators for the model.

      The validator providers for the model.

    

    
      Gets or sets a value that indicates whether the model is a complex type.

      A value that indicates whether the model is considered a complex.

    

    
      Gets a value that indicates whether the type is nullable.

      true if the type is nullable; otherwise, false.

    

    
      Gets or sets a value that indicates whether the model is read-only.

      true if the model is read-only; otherwise, false.

    

    
      Gets the value of the model.

      The model value can be null.

    

    
      Gets the type of the model.

      The type of the model.

    

    
      Gets a collection of model metadata objects that describe the properties of the model.

      A collection of model metadata objects that describe the properties of the model.

    

    
      Gets the property name.

      The property name.

    

    
      Gets or sets the provider.

      The provider.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a ModelMetadata object for each property of a model.

      A ModelMetadata object for each property of a model.

      The container.

      The type of the container.

    

    
      Get metadata for the specified property.

      The metadata model for the specified property.

      The model accessor.

      The type of the container.

      The property to get the metadata model for.

    

    
      Gets the metadata for the specified model accessor and model type.

      The metadata.

      The model accessor.

      The type of the mode.

    

    
      Provides an abstract class to implement a metadata provider.

      The type of the model metadata.

    

    
      Initializes a new instance of the   class.

    

    
      When overridden in a derived class, creates the model metadata for the property using the specified prototype.

      The model metadata for the property.

      The prototype from which to create the model metadata.

      The model accessor.

    

    
      When overridden in a derived class, creates the model metadata for the property.

      The model metadata for the property.

      The set of attributes.

      The type of the container.

      The type of the model.

      The name of the property.

    

    
      Retrieves a list of properties for the model.

      A list of properties for the model.

      The model container.

      The type of the container.

    

    
      Retrieves the metadata for the specified property using the container type and property name.

      The metadata for the specified property.

      The model accessor.

      The type of the container.

      The name of the property.

    

    
      Returns the metadata for the specified property using the type of the model.

      The metadata for the specified property.

      The model accessor.

      The type of the container.

    

    
      Provides prototype cache data for  .

    

    
      Initializes a new instance of the   class.

      The attributes that provides data for the initialization.

    

    
      Gets or sets the metadata display attribute.

      The metadata display attribute.

    

    
      Gets or sets the metadata display format attribute.

      The metadata display format attribute.

    

    
      Gets or sets the metadata editable attribute.

      The metadata editable attribute.

    

    
      Gets or sets the metadata read-only attribute.

      The metadata read-only attribute.

    

    
      Provides a container for common metadata, for the   class, for a data model.

    

    
      Initializes a new instance of the   class.

      The prototype used to initialize the model metadata.

      The model accessor.

    

    
      Initializes a new instance of the   class.

      The metadata provider.

      The type of the container.

      The type of the model.

      The name of the property.

      The attributes that provides data for the initialization.

    

    
      Retrieves a value that indicates whether empty strings that are posted back in forms should be converted to null.

      true if empty strings that are posted back in forms should be converted to null; otherwise, false.

    

    
      Retrieves the description of the model.

      The description of the model.

    

    
      Retrieves a value that indicates whether the model is read-only.

      true if the model is read-only; otherwise, false.

    

    
      No content here will be updated; please do not add material here.

      The type of prototype cache.

    

    
      Initializes a new instance of the   class.

      The prototype.

      The model accessor.

    

    
      Initializes a new instance of the   class.

      The provider.

      The type of container.

      The type of the model.

      The name of the property.

      The prototype cache.

    

    
      Indicates whether empty strings that are posted back in forms should be computed and converted to null.

      true if empty strings that are posted back in forms should be computed and converted to null; otherwise, false.

    

    
      Indicates the computation value.

      The computation value.

    

    
      Gets a value that indicates whether the model is a complex type.

      A value that indicates whether the model is considered a complex type by the Web API framework.

    

    
      Gets a value that indicates whether the model to be computed is read-only.

      true if the model to be computed is read-only; otherwise, false.

    

    
      Gets or sets a value that indicates whether empty strings that are posted back in forms should be converted to null.

      true if empty strings that are posted back in forms should be converted to null; otherwise, false. The default value is true.

    

    
      Gets or sets the description of the model.

      The description of the model.

    

    
      Gets a value that indicates whether the model is a complex type.

      A value that indicates whether the model is considered a complex type by the Web API framework.

    

    
      Gets or sets a value that indicates whether the model is read-only.

      true if the model is read-only; otherwise, false.

    

    
      Gets or sets a value that indicates whether the prototype cache is updating.

      true if the prototype cache is updating; otherwise, false.

    

    
      Implements the default model metadata provider.

    

    
      Initializes a new instance of the   class.

    

    
      Creates the metadata from prototype for the specified property.

      The metadata for the property.

      The prototype.

      The model accessor.

    

    
      Creates the metadata for the specified property.

      The metadata for the property.

      The attributes.

      The type of the container.

      The type of the model.

      The name of the property.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Creates metadata from prototype.

      The metadata.

      The model metadata prototype.

      The model accessor.

    

    
      Creates a prototype of the metadata provider of the  .

      A prototype of the metadata provider.

      The attributes.

      The type of container.

      The type of model.

      The name of the property.

    

    
      Represents the binding directly to the cancellation token.

    

    
      Initializes a new instance of the   class.

      The binding descriptor.

    

    
      Executes the binding during synchronization.

      The binding during synchronization.

      The metadata provider.

      The action context.

      The notification after the cancellation of the operations.

    

    
      Represents an attribute that invokes a custom model binder.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the associated model binder.

      A reference to an object that implements the   interface.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

    

    
      Default implementation of the   interface. This interface is the primary entry point for binding action parameters.

      The   associated with the  .

      The action descriptor.

    

    
      Gets the   associated with the  .

      The   associated with the  .

      The parameter descriptor.

    

    
      Defines a binding error.

    

    
      Initializes a new instance of the   class.

      The error descriptor.

      The message.

    

    
      Gets the error message.

      The error message.

    

    
      Executes the binding method during synchronization.

      The metadata provider.

      The action context.

      The cancellation Token value.

    

    
      Represents parameter binding that will read from the body and invoke the formatters.

    

    
      Initializes a new instance of the   class.

      The descriptor.

      The formatter.

      The body model validator.

    

    
      Gets or sets an interface for the body model validator.

      An interface for the body model validator.

    

    
      Gets the error message.

      The error message.

    

    
      Asynchronously execute the binding of  .

      The result of the action.

      The metadata provider.

      The context associated with the action.

      The cancellation token.

    

    
      Gets or sets an enumerable object that represents the formatter for the parameter binding.

      An enumerable object that represents the formatter for the parameter binding.

    

    
      Asynchronously reads the content of  .

      The result of the action.

      The request.

      The type.

      The formatter.

      The format logger.

    

    
      Gets whether the  will read body.

      True if the  will read body; otherwise, false.

    

    
      Represents the extensions for the collection of form data.

    

    
      Reads the collection extensions with specified type.

      The read collection extensions.

      The form data.

      The generic type.

    

    
      Reads the collection extensions with specified type.

      The collection extensions.

      The form data.

      The name of the model.

      The required member selector.

      The formatter logger.

      The generic type.

    

    
      Reads the collection extensions with specified type.

      The collection extensions with specified type.

      The form data.

      The type of the object.

    

    
      Reads the collection extensions with specified type and model name.

      The collection extensions.

      The form data.

      The type of the object.

      The name of the model.

      The required member selector.

      The formatter logger.

    

    
      Enumerates the behavior of the HTTP binding.

    

    
      The optional binding behavior

    

    
      Never use HTTP binding.

    

    
      HTTP binding is required.

    

    
      Provides a base class for model-binding behavior attributes.

    

    
      Initializes a new instance of the   class.

      The behavior.

    

    
      Gets or sets the behavior category.

      The behavior category.

    

    
      Gets the unique identifier for this attribute.

      The id for this attribute.

    

    
      Parameter binds to the request.

    

    
      Initializes a new instance of the   class.

      The parameter descriptor.

    

    
      Asynchronously executes parameter binding.

      The binded parameter.

      The metadata provider.

      The action context.

      The cancellation token.

    

    
      Defines the methods that are required for a model binder.

    

    
      Binds the model to a value by using the specified controller context and binding context.

      The bound value.

      The action context.

      The binding context.

    

    
      Represents a value provider for parameter binding.

    

    
      Gets the   instances used by this parameter binding.

      The   instances used by this parameter binding.

    

    
      Represents the   class for handling HTML form URL-ended data, also known as application/x-www-form-urlencoded.  

    

    
      Initializes a new instance of the   class.

    

    
       Determines whether this   can read objects of the specified  . 

      true if objects of this type can be read; otherwise false.

      The type of object that will be read.

    

    
      Reads an object of the specified   from the specified stream. This method is called during deserialization.

      A   whose result will be the object instance that has been read.

      The type of object to read.

      The   from which to read.

      The content being read.

      The   to log events to.

    

    
       Specify this parameter uses a model binder. This can optionally specify the specific model binder and  value providers that drive that model binder.  Derived attributes may provide convenience settings for the model binder or value provider.  

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The type of model binder.

    

    
      Gets or sets the type of model binder.

      The type of model binder. 

    

    
      Gets the binding for a parameter.

      The  that contains the binding.

      The parameter to bind.

    

    
       Get the IModelBinder for this type. 

       a non-null model binder.

      The configuration.

      model type that the binder is expected to bind.

    

    
      Gets the model binder provider.

      The   instance.

      The   configuration object.

    

    
       Gets the value providers that will be fed to the model binder. 

      A collection of   instances.

      The   configuration object.

    

    
      Gets or sets the name to consider as the parameter name during model binding.

      The parameter name to consider.

    

    
      Gets or sets a value that specifies whether the prefix check should be suppressed.

      true if the prefix check should be suppressed; otherwise, false.

    

    
      Provides a container for model-binder configuration.

    

    
      Gets or sets the name of the resource file (class key) that contains localized string values.

      The name of the resource file (class key).

    

    
      Gets or sets the current provider for type-conversion error message.

      The current provider for type-conversion error message.

    

    
      Gets or sets the current provider for value-required error messages.

      The error message provider.

    

    
      Provides a container for model-binder error message provider.

    

    
       Describes a parameter that gets bound via ModelBinding.   

    

    
      Initializes a new instance of the   class.

      The parameter descriptor.

      The model binder.

      The collection of value provider factory.

    

    
      Gets the model binder.

      The model binder.

    

    
      Asynchronously executes the parameter binding via the model binder.

      The task that is signaled when the binding is complete.

      The metadata provider to use for validation.

      The action context for the binding.

      The cancellation token assigned for this task for cancelling the binding operation.

    

    
      Gets the collection of value provider factory.

      The collection of value provider factory.

    

    
      Provides an abstract base class for model binder providers.

    

    
      Initializes a new instance of the   class.

    

    
      Finds a binder for the given type.

      A binder, which can attempt to bind this type. Or null if the binder knows statically that it will never be able to bind the type.

      A configuration object.

      The type of the model to bind against.

    

    
      Provides the context in which a model binder functions.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The binding context.

    

    
      Gets or sets a value that indicates whether the binder should use an empty prefix.

      true if the binder should use an empty prefix; otherwise, false.

    

    
      Gets or sets the model.

      The model.

    

    
      Gets or sets the model metadata.

      The model metadata.

    

    
      Gets or sets the name of the model.

      The name of the model.

    

    
      Gets or sets the state of the model.

      The state of the model.

    

    
      Gets or sets the type of the model.

      The type of the model.

    

    
      Gets the property metadata.

      The property metadata.

    

    
      Gets or sets the validation node.

      The validation node.

    

    
      Gets or sets the value provider.

      The value provider.

    

    
      Represents an error that occurs during model binding.

    

    
      Initializes a new instance of the   class by using the specified exception.

      The exception.

    

    
      Initializes a new instance of the   class by using the specified exception and error message.

      The exception.

      The error message

    

    
      Initializes a new instance of the   class by using the specified error message.

      The error message

    

    
      Gets or sets the error message.

      The error message.

    

    
      Gets or sets the exception object.

      The exception object.

    

    
      Represents a collection of   instances.

    

    
      Initializes a new instance of the   class.

    

    
      Adds the specified Exception object to the model-error collection.

      The exception.

    

    
      Adds the specified error message to the model-error collection.

      The error message.

    

    
      Encapsulates the state of model binding to a property of an action-method argument, or to the argument itself.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a   object that contains any errors that occurred during model binding.

      The model state errors.

    

    
      Gets a   object that encapsulates the value that was being bound during model binding.

      The model state value.

    

    
      Represents the state of an attempt to bind a posted form to an action method, which includes validation information.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using values that are copied from the specified model-state dictionary.

      The dictionary.

    

    
      Adds the specified item to the model-state dictionary.

      The object to add to the model-state dictionary.

    

    
      Adds an element that has the specified key and value to the model-state dictionary.

      The key of the element to add.

      The value of the element to add.

    

    
      Adds the specified model error to the errors collection for the model-state dictionary that is associated with the specified key.

      The key.

      The exception.

    

    
      Adds the specified error message to the errors collection for the model-state dictionary that is associated with the specified key.

      The key.

      The error message.

    

    
      Removes all items from the model-state dictionary.

    

    
      Determines whether the model-state dictionary contains a specific value.

      true if item is found in the model-state dictionary; otherwise, false.

      The object to locate in the model-state dictionary.

    

    
      Determines whether the model-state dictionary contains the specified key.

      true if the model-state dictionary contains the specified key; otherwise, false.

      The key to locate in the model-state dictionary.

    

    
      Copies the elements of the model-state dictionary to an array, starting at a specified index.

      The array. The array must have zero-based indexing.

      The zero-based index in array at which copying starts.

    

    
      Gets the number of key/value pairs in the collection.

      The number of key/value pairs in the collection.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets a value that indicates whether the collection is read-only.

      true if the collection is read-only; otherwise, false.

    

    
      Gets a value that indicates whether this instance of the model-state dictionary is valid.

      true if this instance is valid; otherwise, false.

    

    
      Determines whether there are any   objects that are associated with or prefixed with the specified key.

      true if the model-state dictionary contains a value that is associated with the specified key; otherwise, false.

      The key.

    

    
      Gets or sets the value that is associated with the specified key.

      The model state item.

      The key.

    

    
      Gets a collection that contains the keys in the dictionary.

      A collection that contains the keys of the model-state dictionary.

    

    
      Copies the values from the specified   object into this dictionary, overwriting existing values if keys are the same.

      The dictionary.

    

    
      Removes the first occurrence of the specified object from the model-state dictionary.

      true if item was successfully removed the model-state dictionary; otherwise, false. This method also returns false if item is not found in the model-state dictionary.

      The object to remove from the model-state dictionary.

    

    
      Removes the element that has the specified key from the model-state dictionary.

      true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the model-state dictionary.

      The key of the element to remove.

    

    
      Sets the value for the specified key by using the specified value provider dictionary.

      The key.

      The value.

    

    
      Returns an enumerator that iterates through a collection.

      An IEnumerator object that can be used to iterate through the collection.

    

    
      Attempts to gets the value that is associated with the specified key.

      true if the object contains an element that has the specified key; otherwise, false.

      The key of the value to get.

      The value associated with the specified key.

    

    
      Gets a collection that contains the values in the dictionary.

      A collection that contains the values of the model-state dictionary.

    

    
       Collection of functions that can produce a parameter binding for a given parameter.    

    

    
      Initializes a new instance of the   class.

    

    
       Adds function to the end of the collection.  The function added is a wrapper around funcInner that checks that parameterType matches typeMatch. 

      type to match against HttpParameterDescriptor.ParameterType

      inner function that is invoked if type match succeeds

    

    
       Insert a function at the specified index in the collection. /// The function added is a wrapper around funcInner that checks that parameterType matches typeMatch. 

      index to insert at.

      type to match against HttpParameterDescriptor.ParameterType

      inner function that is invoked if type match succeeds

    

    
       Execute each binding function in order until one of them returns a non-null binding.  

      the first non-null binding produced for the parameter. Of null if no binding is produced.

      parameter to bind.

    

    
      Maps a browser request to an array.

      The type of the array.

    

    
      Initializes a new instance of the   class.

    

    
      Indicates whether the model is binded.

      true if the specified model is binded; otherwise, false.

      The action context.

      The binding context.

    

    
      Converts the collection to an array.

      true in all cases.

      The action context.

      The binding context.

      The new collection.

    

    
      Provides a model binder for arrays.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a model binder for arrays.

      A model binder object or null if the attempt to get a model binder is unsuccessful.

      The configuration.

      The type of model.

    

    
      Maps a browser request to a collection.

      The type of the collection.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified execution context and binding context.

      true if model binding is successful; otherwise, false.

      The action context.

      The binding context.

    

    
      Provides a way for derived classes to manipulate the collection before returning it from the binder.

      true in all cases.

      The action context.

      The binding context.

      The new collection.

    

    
      Provides a model binder for a collection.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves a model binder for a collection.

      The model binder.

      The configuration of the model.

      The type of the model.

    

    
      Represents a data transfer object (DTO) for a complex model.

    

    
      Initializes a new instance of the   class.

      The model metadata.

      The collection of property metadata.

    

    
      Gets or sets the model metadata of the  .

      The model metadata of the  .

    

    
      Gets or sets the collection of property metadata of the  .

      The collection of property metadata of the  .

    

    
      Gets or sets the results of the  .

      The results of the  .

    

    
      Represents a model binder for   object.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the specified model is binded.

      true if the specified model is binded; otherwise, false.

      The action context.

      The binding context.

    

    
      Represents a complex model that invokes a model binder provider.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the associated model binder.

      The model binder.

      The configuration.

      The type of the model to retrieve.

    

    
      Represents the result for   object.

    

    
      Initializes a new instance of the   class.

      The object model.

      The validation node.

    

    
      Gets or sets the model for this object.

      The model for this object.

    

    
      Gets or sets the   for this object.

      The   for this object.

    

    
      Represents an   that delegates to one of a collection of   instances.

    

    
      Initializes a new instance of the   class.

      An enumeration of binders.

    

    
      Initializes a new instance of the   class.

      An array of binders.

    

    
      Indicates whether the specified model is binded.

      true if the model is binded; otherwise, false.

      The action context.

      The binding context.

    

    
      Represents the class for composite model binder providers.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      A collection of  

    

    
      Gets the binder for the model.

      The binder for the model.

      The binder configuration.

      The type of the model.

    

    
      Gets the providers for the composite model binder.

      The collection of providers.

    

    
      Maps a browser request to a dictionary data object.

      The type of the key.

      The type of the value.

    

    
      Initializes a new instance of the   class.

    

    
      Converts the collection to a dictionary.

      true in all cases.

      The action context.

      The binding context.

      The new collection.

    

    
      Provides a model binder for a dictionary.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the associated model binder.

      The associated model binder.

      The configuration to use.

      The type of model.

    

    
      Maps a browser request to a key/value pair data object.

      The type of the key.

      The type of the value.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified execution context and binding context.

      true if model binding is successful; otherwise, false.

      The action context.

      The binding context.

    

    
      Provides a model binder for a collection of key/value pairs.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the associated model binder.

      The associated model binder.

      The configuration.

      The type of model.

    

    
      Maps a browser request to a mutable data object.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified action context and binding context.

      true if binding is successful; otherwise, false.

      The action context.

      The binding context.

    

    
      Retrieves a value that indicates whether a property can be updated.

      true if the property can be updated; otherwise, false.

      The metadata for the property to be evaluated.

    

    
      Creates an instance of the model.

      The newly created model object.

      The action context.

      The binding context.

    

    
      Creates a model instance if an instance does not yet exist in the binding context.

      The action context.

      The binding context.

    

    
      Retrieves metadata for properties of the model.

      The metadata for properties of the model.

      The action context.

      The binding context.

    

    
      Sets the value of a specified property.

      The action context.

      The binding context.

      The metadata for the property to set.

      The validation information about the property.

      The validator for the model.

    

    
      Provides a model binder for mutable objects.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the model binder for the specified type.

      The model binder.

      The configuration.

      The type of the model to retrieve.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

      The model type.

      The model binder factory.

    

    
      Initializes a new instance of the   class by using the specified model type and the model binder.

      The model type.

      The model binder.

    

    
      Returns a model binder by using the specified execution context and binding context.

      The model binder, or null if the attempt to get a model binder is unsuccessful.

      The configuration.

      The model type.

    

    
      Gets the type of the model.

      The type of the model.

    

    
      Gets or sets a value that specifies whether the prefix check should be suppressed.

      true if the prefix check should be suppressed; otherwise, false.

    

    
      Maps a browser request to a data object. This type is used when model binding requires conversions using a .NET Framework type converter.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified controller context and binding context.

      true if model binding is successful; otherwise, false.

      The action context.

      The binding context.

    

    
      Provides a model binder for a model that requires type conversion.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieve a model binder for a model that requires type conversion.

      The model binder, or Nothing if the type cannot be converted or there is no value to convert.

      The configuration of the binder.

      The type of the model.

    

    
      Maps a browser request to a data object. This class is used when model binding does not require type conversion.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified execution context and binding context.

      true if model binding is successful; otherwise, false.

      The action context.

      The binding context.

    

    
      Provides a model binder for a model that does not require type conversion.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the associated model binder.

      The associated model binder.

      The configuration.

      The type of model.

    

    
       The   understands $filter, $orderby, $top and $skip OData query parameters 

    

    
      Initializes a new instance of the   class.

    

    
       Build the   for the given uri. 

      The  

      The   to build the   from

    

    
       A   is used to extract the query from a Uri. 

    

    
       Build the   for the given uri. Return null if there is no query  in the Uri. 

      The  

      The   to build the   from

    

    
       Represents a query option like $filter, $top etc. 

    

    
       Applies this   on to an   returning the resultant  

      The resultant  

      The source  

    

    
       The value part of the query parameter for this query part. 

    

    
       The query operator that this query parameter is for. 

    

    
       Represents an  . 

    

    
      Initializes a new instance of the   class.

    

    
       Gets or sets a list of query parts. 

    

    
      Enables you to define which HTTP verbs are allowed when ASP.NET routing determines whether a URL matches a route.

    

    
      Initializes a new instance of the   class by using the HTTP verbs that are allowed for the route.

      The HTTP verbs that are valid for the route.

    

    
      Gets or sets the collection of allowed HTTP verbs for the route.

      A collection of allowed HTTP verbs for the route.

    

    
      Determines whether the request was made with an HTTP verb that is one of the allowed verbs for the route.

      When ASP.NET routing is processing a request, true if the request was made by using an allowed HTTP verb; otherwise, false. When ASP.NET routing is constructing a URL, true if the supplied values contain an HTTP verb that matches one of the allowed HTTP verbs; otherwise, false. The default is true.

      The request that is being checked to determine whether it matches the URL.

      The object that is being checked to determine whether it matches the URL.

      The name of the parameter that is being checked.

      An object that contains the parameters for a route.

      An object that indicates whether the constraint check is being performed when an incoming request is processed or when a URL is generated.

    

    
      Determines whether the request was made with an HTTP verb that is one of the allowed verbs for the route.

      When ASP.NET routing is processing a request, true if the request was made by using an allowed HTTP verb; otherwise, false. When ASP.NET routing is constructing a URL, true if the supplied values contain an HTTP verb that matches one of the allowed HTTP verbs; otherwise, false. The default is true.

      The request that is being checked to determine whether it matches the URL.

      The object that is being checked to determine whether it matches the URL.

      The name of the parameter that is being checked.

      An object that contains the parameters for a route.

      An object that indicates whether the constraint check is being performed when an incoming request is processed or when a URL is generated.

    

    
      Represents a route class for self-host (i.e. hosted outside of ASP.NET).

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The route template.

    

    
      Initializes a new instance of the   class.

      The route template.

      The default values for the route parameters.

    

    
      Initializes a new instance of the   class.

      The route template.

      The default values for the route parameters.

      The constraints for the route parameters.

    

    
      Initializes a new instance of the   class.

      The route template.

      The default values for the route parameters.

      The constraints for the route parameters.

      Any additional tokens for the route parameters.

    

    
      Initializes a new instance of the   class.

      The route template.

      The default values for the route parameters.

      The constraints for the route parameters.

      Any additional tokens for the route parameters.

      The message handler that will be the recipient of the request.

    

    
      Gets the constraints for the route parameters.

      The constraints for the route parameters.

    

    
      Gets any additional data tokens not used directly to determine whether a route matches an incoming  .

      Any additional data tokens not used directly to determine whether a route matches an incoming  .

    

    
      Gets the default values for route parameters if not provided by the incoming  .

      The default values for route parameters if not provided by the incoming  .

    

    
      Determines whether this route is a match for the incoming request by looking up the   for the route.

      The   for a route if matches; otherwise null.

      The virtual path root.

      The HTTP request.

    

    
      Attempts to generate a URI that represents the values passed in based on current values from the   and new values using the specified  .

      A   instance or null if URI cannot be generated.

      The HTTP request message.

      The route values.

    

    
      Gets or sets the http route handler.

      The http route handler.

    

    
      Determines whether this instance equals a specified route.

      true if this instance equals a specified route; otherwise, false.

      The HTTP request.

      The constraints for the route parameters.

      The name of the parameter.

      The list of parameter values.

      One of the enumeration values of the   enumeration.

    

    
      Gets the route template describing the URI pattern to match against.

      The route template describing the URI pattern to match against.

    

    
      Encapsulates information regarding the HTTP route.

    

    
      Initializes a new instance of the   class.

      An object that defines the route.

    

    
      Initializes a new instance of the   class.

      An object that defines the route.

      The value.

    

    
      Gets the object that represents the route.

      the object that represents the route.

    

    
      Gets a collection of URL parameter values and default values for the route.

      An object that contains values that are parsed from the URL and from default values.

    

    
      Specifies an enumeration of route direction.

    

    
      The UriResolution direction.

    

    
      The UriGeneration direction.

    

    
      Represents a route class for self-host of specified key/value pairs.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The dictionary.

    

    
      Initializes a new instance of the   class.

      The key value.

    

    
      Presents the data regarding the HTTP virtual path.

    

    
      Initializes a new instance of the   class.

      The route of the virtual path.

      The URL that was created from the route definition.

    

    
      Gets or sets the route of the virtual path..

      The route of the virtual path.

    

    
      Gets or sets the URL that was created from the route definition.

      The URL that was created from the route definition.

    

    
      
          defines the interface for a route expressing how to map an incoming   to a particular controller and action. 

    

    
       Gets the constraints for the route parameters. 

      The constraints for the route parameters.

    

    
       Gets any additional data tokens not used directly to determine whether a route matches an incoming  . 

      The additional data tokens.

    

    
       Gets the default values for route parameters if not provided by the incoming  . 

      The default values for route parameters.

    

    
       Determine whether this route is a match for the incoming request by looking up the &lt;see cref="!:IRouteData" /&gt; for the route. 

      The &lt;see cref="!:RouteData" /&gt; for a route if matches; otherwise null.

      The virtual path root.

      The request.

    

    
      Gets a virtual path data based on the route and the values provided.

      The virtual path data.

      The request message.

      The values.

    

    
      Gets the message handler that will be the recipient of the request.

      The message handler.

    

    
       Gets the route template describing the URI pattern to match against.  

      The route template.

    

    
      Represents a base class route constraint.

    

    
      Determines whether this instance equals a specified route.

      True if this instance equals a specified route; otherwise, false.

      The request.

      The route to compare.

      The name of the parameter.

      A list of parameter values.

      The route direction.

    

    
      Provides information about a route.

    

    
      Gets the object that represents the route.

      The object that represents the route.

    

    
      Gets a collection of URL parameter values and default values for the route.

      The values that are parsed from the URL and from default values.

    

    
      Defines the properties for HTTP route.

    

    
      Gets the HTTP route.

      The HTTP route.

    

    
      Gets the URI that represents the virtual path of the current HTTP route.

      The URI that represents the virtual path of the current HTTP route.

    

    
      No content here will be updated; please do not add material here.

    

    
      Initializes a new instance of the   class.

      The HTTP request for this instance.

    

    
      Returns a link for the specified route.

      A link for the specified route.

      The name of the route.

      An object that contains the parameters for a route.

    

    
      Returns a link for the specified route.

      A link for the specified route.

      The name of the route.

      A route value.

    

    
      Gets or sets the   of the current   instance.

      The   of the current instance.

    

    
      Returns the route for the  .

      The route for the  .

      The name of the route.

      A list of route values.

    

    
      Returns the route for the  .

      The route for the  .

      The name of the route.

      The route values.

    

    
        Represents a container for service instances used by the  . Note that         this container only supports known types, and methods to get or set arbitrary service types will         throw   when called. For creation of arbitrary types, please use           instead. The supported types for this container are:                            Passing any type which is not on this to any method on this interface will cause         an   to be thrown. 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class with a specified   object.

      The   object.

    

    
      Removes a single-instance service from the default services.

      The type of the service.

    

    
      Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    

    
      Gets a service of the specified type.

      The first instance of the service, or null if the service is not found.

      The type of service.

    

    
      Gets the list of service objects for a given service type, and validates the service type.

      The list of service objects of the specified type.

      The service type.

    

    
      Gets the list of service objects for a given service type.

      The list of service objects of the specified type, or an empty list if the service is not found.

      The type of service.

    

    
      Queries whether a service type is single-instance.

      true if the service type has at most one instance, or false if the service type supports multiple instances.

      The service type.

    

    
      Replaces a single-instance service object.

      The service type.

      The service object that replaces the previous instance.

    

    
      Removes the cached values for a single service type.

      The service type.

    

    
      Represents a performance tracing class to log method entry/exit and duration.

    

    
      Initializes the   class with a specified configuration.

      The configuration.

    

    
      Represents the trace writer.

    

    
       Invokes the specified traceAction to allow setting values in a new   if and only if tracing is permitted at the given category and level. 

      The current  .   It may be null but doing so will prevent subsequent trace analysis  from correlating the trace to a particular request.

      The logical category for the trace.  Users can define their own.

      The   at which to write this trace.

      The action to invoke if tracing is enabled.  The caller is expected to fill in the fields of the given   in this action.

    

    
      Represents an extension methods for  . 

    

    
      Provides a set of methods and properties that help debug your code with the specified writer, request, category and exception.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

    

    
      Provides a set of methods and properties that help debug your code with the specified writer, request, category, exception, message format and argument.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

      The format of the message.

      The message argument.

    

    
      Provides a set of methods and properties that help debug your code with the specified writer, request, category, exception, message format and argument.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The format of the message.

      The message argument.

    

    
      Displays an error message in the list with the specified writer, request, category and exception.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

    

    
      Displays an error message in the list with the specified writer, request, category, exception, message format and argument.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The exception.

      The format of the message.

      The argument in the message.

    

    
      Displays an error message in the list with the specified writer, request, category, message format and argument.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The format of the message.

      The argument in the message.

    

    
      Displays an error message in the   class with the specified writer, request, category and exception.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The exception that appears during execution.

    

    
      Displays an error message in the   class with the specified writer, request, category and exception, message format and argument.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The exception.

      The format of the message.

      The message argument.

    

    
      Displays an error message in the   class with the specified writer, request, category and message format and argument.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The format of the message.

      The message argument.

    

    
      Displays the details in the  .

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

    

    
      Displays the details in the  .

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

      The format of the message.

      The message argument.

    

    
      Displays the details in the  .

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The format of the message.

      The message argument.

    

    
      Indicates the trace listeners in the Listeners collection.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The trace level.

      The error occurred during execution.

    

    
      Indicates the trace listeners in the Listeners collection.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The trace level.

      The error occurred during execution.

      The format of the message.

      The message argument.

    

    
      Indicates the trace listeners in the Listeners collection.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The   of the trace.

      The format of the message.

      The message argument.

    

    
      Traces both a begin and an end trace around a specified operation.

      The  .

      The   with which to associate the trace.  It may be null.

      The logical category of the trace.

      The   of the trace.

      The name of the object performing the operation. It may be null.

      The name of the operation being performed.  It may be null.

      The   to invoke prior to performing the operation,  allowing the given   to be filled in. It may be null.

      An &lt;see cref="T:System.Func`1" /&gt; that returns the   that will perform the operation.

      The   to invoke after successfully performing the operation, allowing the given   to be filled in.  It may be null.

      The   to invoke if an error was encountered performing the operation, allowing the given   to be filled in. It may be null.

    

    
       Traces both a begin and an end trace around a specified operation. 

      The   returned by the operation.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The   of the trace.

      The name of the object performing the operation. It may be null.

      The name of the operation being performed. It may be null.

      The   to invoke prior to performing the operation, allowing the given   to be filled in. It may be null.

      An &lt;see cref="T:System.Func`1" /&gt; that returns the   that will perform the operation.

      The   to invoke after successfully performing the operation, allowing the given   to be filled in. The result of the completed task will also be passed to this action. This action may be null.

      The   to invoke if an error was encountered performing the operation, allowing the given   to be filled in. It may be null.

      The type of result produced by the  .

    

    
       Traces both a begin and an end trace around a specified operation. 

      The   returned by the operation.

      The  .

      The   with which to associate the trace.  It may be null.

      The logical category of the trace.

      The   of the trace.

      The name of the object performing the operation. It may be null.

      The name of the operation being performed. It may be null.

      The   to invoke prior to performing the operation, allowing the given   to be filled in. It may be null.

      An &lt;see cref="T:System.Func`1" /&gt; that returns the   that will perform the operation.

      The   to invoke after successfully performing the operation, allowing the given   to be filled in. It may be null.

      The   to invoke if an error was encountered performing the operation, allowing the given   to be filled in. It may be null.

    

    
      Indicates the warning level of execution.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

    

    
      Indicates the warning level of execution.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The error occurred during execution.

      The format of the message.

      The message argument.

    

    
      Indicates the warning level of execution.

      The  .

      The   with which to associate the trace. It may be null.

      The logical category of the trace.

      The format of the message.

      The message argument.

    

    
      Specifies an enumeration of tracing categories.

    

    
      An action category.

    

    
      The controllers category.

    

    
      The filters category.

    

    
      The formatting category.

    

    
      The message handlers category.

    

    
      The model binding category.

    

    
      The request category.

    

    
      The routing category.

    

    
      Specifies the kind of tracing operation.

    

    
      Single trace, not part of a Begin/End trace pair.

    

    
      Trace marking the beginning of some operation.

    

    
      Trace marking the end of some operation.

    

    
      Specifies an enumeration of tracing level.

    

    
      Tracing is disabled.

    

    
      Trace level for debugging traces.

    

    
      Trace level for informational traces.

    

    
      Trace level for warning traces.

    

    
      Trace level for error traces.

    

    
      Trace level for fatal traces.

    

    
      Represents a trace record.

    

    
      Initializes a new instance of the   class.

      The message request.

      The trace category.

      The trace level.

    

    
      Gets or sets the tracing category.

      The tracing category.

    

    
      Gets or sets the exception.

      The exception.

    

    
      Gets or sets the kind of trace.

      The kind of trace.

    

    
      Gets or sets the tracing level.

      The tracing level.

    

    
      Gets or sets the message.

      The message.

    

    
      Gets or sets the logical operation name being performed.

      The logical operation name being performed.

    

    
      Gets or sets the logical name of the object performing the operation.

      The logical name of the object performing the operation.

    

    
      Gets the optional user-defined properties.

      The optional user-defined properties.

    

    
      Gets the   from the record.

      The   from the record.

    

    
      Gets the correlation ID from the  .

      The correlation ID from the  .

    

    
      Gets or sets the   associated with the  .

      The   associated with the  .

    

    
      Gets the   of this trace (via  ).

      The   of this trace (via  ).

    

    
      Represents a class used to recursively validate an object.

    

    
      Initializes a new instance of the   class.

    

    
       Determines whether the model is valid and adds any validation errors to the actionContext's  .

      True if model is valid, false otherwise.

      The model to be validated.

      The   to use for validation.

      The   used to provide the model metadata.

      The   within which the model is being validated.

      The   to append to the key for any validation errors.

    

    
      Represents an interface for the validation of the models

    

    
       Determines whether the model is valid and adds any validation errors to the actionContext's  

      trueif model is valid, false otherwise.

      The model to be validated.

      The   to use for validation.

      The   used to provide the model metadata.

      The   within which the model is being validated.

      The   to append to the key for any validation errors.

    

    
      This   logs formatter errors to the provided  .

    

    
      Initializes a new instance of the   class.

      The model state.

      The prefix.

    

    
      Logs the specified model error.

      The error path.

      The error message.

    

    
      Logs the specified model error.

      The error path.

      The error message.

    

    
      Provides data for the   event.

    

    
      Initializes a new instance of the   class.

      The action context.

      The parent node.

    

    
      Gets or sets the context for an action.

      The context for an action.

    

    
      Gets or sets the parent of this node.

      The parent of this node.

    

    
      Provides data for the   event.

    

    
      Initializes a new instance of the   class.

      The action context.

      The parent node.

    

    
      Gets or sets the context for an action.

      The context for an action.

    

    
      Gets or sets the parent of this node.

      The parent of this node.

    

    
      Provides a container for model validation information.

    

    
      Initializes a new instance of the   class, using the model metadata and state key.

      The model metadata.

      The model state key.

    

    
      Initializes a new instance of the   class, using the model metadata, the model state key, and child model-validation nodes.

      The model metadata.

      The model state key.

      The model child nodes.

    

    
      Gets or sets the child nodes.

      The child nodes.

    

    
      Combines the current   instance with a specified   instance.

      The model validation node to combine with the current instance.

    

    
      Gets or sets the model metadata.

      The model metadata.

    

    
      Gets or sets the model state key.

      The model state key.

    

    
      Gets or sets a value that indicates whether validation should be suppressed.

      true if validation should be suppressed; otherwise, false.

    

    
      Validates the model using the specified execution context.

      The action context.

    

    
      Validates the model using the specified execution context and parent node.

      The action context.

      The parent node.

    

    
      Gets or sets a value that indicates whether all properties of the model should be validated.

      true if all properties of the model should be validated, or false if validation should be skipped.

    

    
      Occurs when the model has been validated.

    

    
      Occurs when the model is being validated.

    

    
      Represents the selection of required members by checking for any required ModelValidators associated with the member.

    

    
      Initializes a new instance of the   class.

      The metadata provider.

      The validator providers.

    

    
      Indicates whether the member is required for validation.

      true if the member is required for validation; otherwise, false.

      The member.

    

    
      Provides a container for a validation result.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the name of the member.

      The name of the member.

    

    
      Gets or sets the validation result message.

      The validation result message.

    

    
      Provides a base class for implementing validation logic.

    

    
      Initializes a new instance of the   class.

      The validator providers.

    

    
      Returns a composite model validator for the model.

      A composite model validator for the model.

      An enumeration of validator providers.

    

    
      Gets a value that indicates whether a model property is required.

      true if the model property is required; otherwise, false.

    

    
      Validates a specified object.

      A list of validation results.

      The metadata.

      The container.

    

    
      Gets or sets an enumeration of validator providers.

      An enumeration of validator providers.

    

    
      Provides a list of validators for a model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a list of validators associated with this  .

      The list of validators.

      The metadata.

      The validator providers.

    

    
      Provides an abstract class for classes that implement a validation provider.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a type descriptor for the specified type.

      A type descriptor for the specified type.

      The type of the validation provider.

    

    
      Gets the validators for the model using the metadata and validator providers.

      The validators for the model.

      The metadata.

      An enumeration of validator providers.

    

    
      Gets the validators for the model using the metadata, the validator providers, and a list of attributes.

      The validators for the model.

      The metadata.

      An enumeration of validator providers.

      The list of attributes.

    

    
      Represents the method that creates a   instance.

    

    
      Represents an implementation of   which providers validators for attributes which derive from  . It also provides a validator for types which implement  . To support client side validation, you can either register adapters through the static methods on this class, or by having your validation attributes implement  . The logic to support IClientValidatable is implemented in  . 

    

    
      Initializes a new instance of the   class.

    

    
      Gets the validators for the model using the specified metadata, validator provider and attributes.

      The validators for the model.

      The metadata.

      The validator providers.

      The attributes.

    

    
      Registers an adapter to provide client-side validation.

      The type of the validation attribute.

      The type of the adapter.

    

    
      Registers an adapter factory for the validation provider.

      The type of the attribute.

      The factory that will be used to create the   object for the specified attribute.

    

    
      Registers the default adapter.

      The type of the adapter.

    

    
      Registers the default adapter factory.

      The factory that will be used to create the   object for the default adapter.

    

    
      Registers the default adapter type for objects which implement  . The adapter type must derive from   and it must contain a public constructor which takes two parameters of types   and  . 

      The type of the adapter.

    

    
      Registers the default adapter factory for objects which implement  . 

      The factory.

    

    
      Registers an adapter type for the given modelType, which must implement  . The adapter type must derive from   and it must contain a public constructor which takes two parameters of types   and  . 

      The model type.

      The type of the adapter.

    

    
      Registers an adapter factory for the given modelType, which must implement  . 

      The model type.

      The factory.

    

    
      Provides a factory for validators that are based on  .

    

    
      Represents a validator provider for data member model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the validators for the model.

      The validators for the model.

      The metadata.

      An enumerator of validator providers.

      A list of attributes.

    

    
      An implementation of   which provides validators that throw exceptions when the model is invalid.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a list of validators associated with this  .

      The list of validators.

      The metadata.

      The validator providers.

      The list of attributes.

    

    
      Represents the provider for the required member model validator.

    

    
      Initializes a new instance of the   class.

      The required member selector.

    

    
      Gets the validator for the member model.

      The validator for the member model.

      The metadata.

      The validator providers

    

    
      Provides a model validator.

    

    
      Initializes a new instance of the   class.

      The validator providers.

      The validation attribute for the model.

    

    
      Gets or sets the validation attribute for the model validator.

      The validation attribute for the model validator.

    

    
      Gets a value that indicates whether model validation is required.

      true if model validation is required; otherwise, false.

    

    
      Validates the model and returns the validation errors if any.

      A list of validation error messages for the model, or an empty list if no errors have occurred.

      The model metadata.

      The container for the model.

    

    
      A   to represent an error. This validator will always throw an exception regardless of the actual model value.

    

    
      Initializes a new instance of the   class.

      The list of  model validator providers.

      The error message for the exception.

    

    
      Validates a specified object.

      A list of validation results.

      The metadata.

      The container.

    

    
      Represents the   for required members. 

    

    
      Initializes a new instance of the   class.

      The validator providers.

    

    
      Gets or sets a value that instructs the serialization engine that the member must be presents when validating.

      true if the member is required; otherwise, false.

    

    
      Validates the object.

      A list of validation results.

      The metadata.

      The container.

    

    
      Provides an object adapter that can be validated.

    

    
      Initializes a new instance of the   class.

      The validation provider.

    

    
      Validates the specified object.

      A list of validation results.

      The metadata.

      The container.

    

    
      Represents the base class for value providers whose values come from a collection that implements the   interface.

    

    
      Retrieves the keys from the specified  .

      The keys from the specified  .

      The prefix.

    

    
      Defines the methods that are required for a value provider in ASP.NET MVC.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

    

    
      Retrieves a value object using the specified key.

      The value object for the specified key.

      The key of the value object to retrieve.

    

    
       This attribute is used to specify a custom  . 

    

    
      Initializes a new instance of the  .

      The type of the model binder.

    

    
      Initializes a new instance of the  .

      An array of model binder types.

    

    
      Gets the value provider factories.

      A collection of value provider factories.

      A configuration object.

    

    
      Gets the types of object returned by the value provider factory.

      A collection of types.

    

    
      Represents a factory for creating value-provider objects.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a value-provider object for the specified controller context.

      A value-provider object.

      An object that encapsulates information about the current HTTP request.

    

    
      Represents the result of binding a value (such as from a form post or query string) to an action-method argument property, or to the argument itself.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The raw value.

      The attempted value.

      The culture.

    

    
      Gets or sets the raw value that is converted to a string for display.

      The raw value that is converted to a string for display.

    

    
      Converts the value that is encapsulated by this result to the specified type.

      The converted value.

      The target type.

    

    
      Converts the value that is encapsulated by this result to the specified type by using the specified culture information.

      The converted value.

      The target type.

      The culture to use in the conversion.

    

    
      Gets or sets the culture.

      The culture.

    

    
      Gets or set the raw value that is supplied by the value provider.

      The raw value that is supplied by the value provider.

    

    
      Represents a value provider whose values come from a list of value providers that implements the   interface.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The list of value providers.

    

    
      Determines whether the collection contains the specified  .

      true if the collection contains the specified  ; otherwise, false.

      The prefix to search for.

    

    
      Retrieves the keys from the specified  .

      The keys from the specified  .

      The prefix from which keys are retrieved.

    

    
      Retrieves a value object using the specified  .

      The value object for the specified  .

      The key of the value object to retrieve.

    

    
      Inserts an element into the collection at the specified index.

      The zero-based index at which   should be inserted.

      The object to insert.

    

    
      Replaces the element at the specified index.

      The zero-based index of the element to replace.

      The new value for the element at the specified index.

    

    
      Represents a factory for creating a list of value-provider objects.

    

    
      Initializes a new instance of the   class.

      The collection of value-provider factories.

    

    
      Retrieves a list of value-provider objects for the specified controller context.

      The list of value-provider objects for the specified controller context.

      An object that encapsulates information about the current HTTP request.

    

    
      A value provider for name/value pairs.

    

    
      Initializes a new instance of the   class.

      The name/value pairs for the provider.

      The culture used for the name/value pairs.

    

    
      Initializes a new instance of the   class, using a function delegate to provide the name/value pairs.

      A function delegate that returns a collection of name/value pairs.

      The culture used for the name/value pairs.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

    

    
      Gets the keys from a prefix.

      The keys.

      The prefix.

    

    
      Retrieves a value object using the specified key.

      The value object for the specified key.

      The key of the value object to retrieve.

    

    
      Represents a value provider for query strings that are contained in a   object.

    

    
      Initializes a new instance of the   class.

      An object that encapsulates information about the current HTTP request.

      An object that contains information about the target culture.

    

    
      Represents a class that is responsible for creating a new instance of a query-string value-provider object.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves a value-provider object for the specified controller context.

      A query-string value-provider object.

      An object that encapsulates information about the current HTTP request.

    

    
      Represents a value provider for route data that is contained in an object that implements the IDictionary(Of TKey, TValue) interface.

    

    
      Initializes a new instance of the   class.

      An object that contain information about the HTTP request.

      An object that contains information about the target culture.

    

    
      Represents a factory for creating route-data value provider objects.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves a value-provider object for the specified controller context.

      A value-provider object.

      An object that encapsulates information about the current HTTP request.

    

  






bin/System.Web.Mvc.dll









		00004550
		
		0003
		4ffc7b1b
		00000000
		00000000
		00e0
		







		010b
		8.00
		00079800
		00000800
		00000000
		0007b76e
		00002000
		0007c000
		5ff50000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00080000
		00000200
		0008619b
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0007b714
		00000057
		
		0007c000
		00000420
		0007a200
		00001a60
		
		0007e000
		0000000c
		0007b694
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00079774
		00002000
		00079800
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000420
		0007c000
		00000600
		00079a00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0007e000
		00000200
		0007a000
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.Mvc.xml




  
    System.Web.Mvc

  

  
    
      Represents an attribute that specifies which HTTP verbs an action method will respond to.

    

    
      Initializes a new instance of the   class by using a list of HTTP verbs that the action method will respond to.

      The HTTP verbs that the action method will respond to.

      The   parameter is null or zero length.

    

    
      Initializes a new instance of the   class using the HTTP verbs that the action method will respond to.

      The HTTP verbs that the action method will respond to.

    

    
      Determines whether the specified method information is valid for the specified controller context.

      true if the method information is valid; otherwise, false.

      The controller context.

      The method information.

      The  parameter is null.

    

    
      Gets or sets the list of HTTP verbs that the action method will respond to.

      The list of HTTP verbs that the action method will respond to.

    

    
      Provides information about an action method, such as its name, controller, parameters, attributes, and filters.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the name of the action method.

      The name of the action method.

    

    
      Gets the controller descriptor.

      The controller descriptor.

    

    
      Executes the action method by using the specified parameters and controller context.

      The result of executing the action method.

      The controller context.

      The parameters of the action method.

    

    
      Returns an array of custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Returns an array of custom attributes that are defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes of the specified type exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

      The   parameter is null.

    

    
      Gets the filter attributes.

      The filter attributes.

      true to use the cache, otherwise false.

    

    
      Returns the filters that are associated with this action method.

      The filters that are associated with this action method.

    

    
      Returns the parameters of the action method.

      The parameters of the action method.

    

    
      Returns the action-method selectors.

      The action-method selectors.

    

    
      Determines whether one or more instances of the specified attribute type are defined for this member.

      true if   is defined for this member; otherwise, false.

      The type of the custom attribute.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The   parameter is null.

    

    
      Gets the unique ID for the action descriptor using lazy initialization.

      The unique ID.

    

    
      Provides the context for the ActionExecuted method of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The controller context.

      The action method descriptor.

      true if the action is canceled.

      The exception object.

      The   parameter is null.

    

    
      Gets or sets the action descriptor.

      The action descriptor.

    

    
      Gets or sets a value that indicates that this   object is canceled.

      true if the context canceled; otherwise, false.

    

    
      Gets or sets the exception that occurred during the execution of the action method, if any.

      The exception that occurred during the execution of the action method.

    

    
      Gets or sets a value that indicates whether the exception is handled.

      true if the exception is handled; otherwise, false.

    

    
      Gets or sets the result returned by the action method.

      The result returned by the action method.

    

    
      Provides the context for the ActionExecuting method of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified controller context, action descriptor, and action-method parameters.

      The controller context.

      The action descriptor.

      The action-method parameters.

      The   or   parameter is null.

    

    
      Gets or sets the action descriptor.

      The action descriptor.

    

    
      Gets or sets the action-method parameters.

      The action-method parameters.

    

    
      Gets or sets the result that is returned by the action method.

      The result that is returned by the action method.

    

    
      Represents the base class for filter attributes.

    

    
      Initializes a new instance of the   class.

    

    
      Called by the ASP.NET MVC framework after the action method executes.

      The filter context.

    

    
      Called by the ASP.NET MVC framework before the action method executes.

      The filter context.

    

    
      Called by the ASP.NET MVC framework after the action result executes.

      The filter context.

    

    
      Called by the ASP.NET MVC framework before the action result executes.

      The filter context.

    

    
      Represents an attribute that is used to influence the selection of an action method.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the action method selection is valid for the specified controller context.

      true if the action method selection is valid for the specified controller context; otherwise, false.

      The controller context.

      Information about the action method.

    

    
      Represents an attribute that is used for the name of an action.

    

    
      Initializes a new instance of the   class.

      Name of the action.

      The   parameter is null or empty.

    

    
      Determines whether the action name is valid within the specified controller context.

      true if the action name is valid within the specified controller context; otherwise, false.

      The controller context.

      The name of the action.

      Information about the action method.

    

    
      Gets or sets the name of the action.

      The name of the action.

    

    
      Represents an attribute that affects the selection of an action method.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the action name is valid in the specified controller context.

      true if the action name is valid in the specified controller context; otherwise, false.

      The controller context.

      The name of the action.

      Information about the action method.

    

    
      Encapsulates the result of an action method and is used to perform a framework-level operation on behalf of the action method.

    

    
      Initializes a new instance of the   class.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.

    

    
      Represents a delegate that contains the logic for selecting an action method.

      true if an action method was successfully selected; otherwise, false.

      The current HTTP request context.

    

    
      Provides a class that implements the   interface in order to support additional metadata. 

    

    
      Initializes a new instance of the   class.

      The name of the model metadata.

      The value of the model metadata.

    

    
      Gets the name of the additional metadata attribute.

      The name of the of the additional metadata attribute.

    

    
      Provides metadata to the model metadata creation process.

      The meta data.

    

    
      Gets the type of the of the additional metadata attribute.

      The type of the of the additional metadata attribute.

    

    
      Gets the value of the of the additional metadata attribute.

      The value of the of the additional metadata attribute.

    

    
      Represents support for rendering HTML in AJAX scenarios within a view.

    

    
      Initializes a new instance of the   class using the specified view context and view data container.

      The view context.

      The view data container.

      One or both of the parameters is null.

    

    
      Initializes a new instance of the   class by using the specified view context, view data container, and route collection.

      The view context.

      The view data container.

      The URL route collection.

      One or more of the parameters is null.

    

    
      Gets or sets the root path for the location to use for globalization script files.

      The location of the folder where globalization script files are stored. The default location is "~/Scripts/Globalization".

    

    
      Serializes the specified message and returns the resulting JSON-formatted string.

      The serialized message as a JSON-formatted string.

      The message to serialize.

    

    
      Gets the collection of URL routes for the application.

      The collection of routes for the application.

    

    
      Gets the ViewBag.

      The ViewBag.

    

    
      Gets the context information about the view.

      The context of the view.

    

    
      Gets the current view data dictionary.

      The view data dictionary.

    

    
      Gets the view data container.

      The view data container.

    

    
      Represents support for rendering HTML in AJAX scenarios within a strongly typed view.

      The type of the model.

    

    
      Initializes a new instance of the   class by using the specified view context and view data container.

      The view context.

      The view data container.

    

    
      Initializes a new instance of the   class by using the specified view context, view data container, and URL route collection.

      The view context.

      The view data container.

      The URL route collection.

    

    
      Gets the ViewBag.

      The ViewBag.

    

    
      Gets the strongly typed version of the view data dictionary.

      The strongly typed data dictionary of the view.

    

    
      Represents a class that extends the   class by adding the ability to determine whether an HTTP request is an AJAX request.

    

    

    
      Represents an attribute that marks controllers and actions to skip the   during authorization.

    

    
      Initializes a new instance of the   class.

    

    
      Allows a request to include HTML markup during model binding by skipping request validation for the property. (It is strongly recommended that your application explicitly check all models where you disable request validation in order to prevent script exploits.)

    

    
      Initializes a new instance of the   class.

    

    
      This method supports the ASP.NET MVC validation infrastructure and is not intended to be used directly from your code.

      The model metadata.

    

    
      Provides a way to register one or more areas in an ASP.NET MVC application.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the name of the area to register.

      The name of the area to register.

    

    
      Registers all areas in an ASP.NET MVC application.

    

    
      Registers all areas in an ASP.NET MVC application by using the specified user-defined information.

      An object that contains user-defined information to pass to the area.

    

    
      Registers an area in an ASP.NET MVC application using the specified area's context information.

      Encapsulates the information that is required in order to register the area.

    

    
      Encapsulates the information that is required in order to register an area within an ASP.NET MVC application.

    

    
      Initializes a new instance of the   class using the specified area name and routes collection.

      The name of the area to register.

      The collection of routes for the application.

    

    
      Initializes a new instance of the   class using the specified area name, routes collection, and user-defined data.

      The name of the area to register.

      The collection of routes for the application.

      An object that contains user-defined information to pass to the area.

    

    
      Gets the name of the area to register.

      The name of the area to register.

    

    
      Maps the specified URL route and associates it with the area that is specified by the   property.

      A reference to the mapped route.

      The name of the route.

      The URL pattern for the route.

      The   parameter is null.

    

    
      Maps the specified URL route and associates it with the area that is specified by the   property, using the specified route default values.

      A reference to the mapped route.

      The name of the route.

      The URL pattern for the route.

      An object that contains default route values.

      The   parameter is null.

    

    
      Maps the specified URL route and associates it with the area that is specified by the   property, using the specified route default values and constraint.

      A reference to the mapped route.

      The name of the route.

      The URL pattern for the route.

      An object that contains default route values.

      A set of expressions that specify valid values for a URL parameter.

      The   parameter is null.

    

    
      Maps the specified URL route and associates it with the area that is specified by the   property, using the specified route default values, constraints, and namespaces.

      A reference to the mapped route.

      The name of the route.

      The URL pattern for the route.

      An object that contains default route values.

      A set of expressions that specify valid values for a URL parameter.

      An enumerable set of namespaces for the application.

      The   parameter is null.

    

    
      Maps the specified URL route and associates it with the area that is specified by the   property, using the specified route default values and namespaces.

      A reference to the mapped route.

      The name of the route.

      The URL pattern for the route.

      An object that contains default route values.

      An enumerable set of namespaces for the application.

      The   parameter is null.

    

    
      Maps the specified URL route and associates it with the area that is specified by the   property, using the specified namespaces.

      A reference to the mapped route.

      The name of the route.

      The URL pattern for the route.

      An enumerable set of namespaces for the application.

      The   parameter is null.

    

    
      Gets the namespaces for the application.

      An enumerable set of namespaces for the application.

    

    
      Gets a collection of defined routes for the application.

      A collection of defined routes for the application.

    

    
      Gets an object that contains user-defined information to pass to the area.

      An object that contains user-defined information to pass to the area.

    

    
      Provides an abstract class to implement a metadata provider.

    

    
      Called from constructors in a derived class to initialize the   class.

    

    
      When overridden in a derived class, creates the model metadata for the property.

      The model metadata for the property.

      The set of attributes.

      The type of the container.

      The model accessor.

      The type of the model.

      The name of the property.

    

    
      Gets a list of attributes.

      A list of attributes.

      The type of the container.

      The property descriptor.

      The attribute container.

    

    
      Returns a list of properties for the model.

      A list of properties for the model.

      The model container.

      The type of the container.

    

    
      Returns the metadata for the specified property using the container type and property descriptor.

      The metadata for the specified property using the container type and property descriptor.

      The model accessor.

      The type of the container.

      The property descriptor

    

    
      Returns the metadata for the specified property using the container type and property name.

      The metadata for the specified property using the container type and property name.

      The model accessor.

      The type of the container.

      The name of the property.

    

    
      Returns the metadata for the specified property using the type of the model.

      The metadata for the specified property using the type of the model.

      The model accessor.

      The type of the model.

    

    
      Returns the type descriptor from the specified type.

      The type descriptor.

      The type.

    

    
      Provides an abstract class for classes that implement a validation provider.

    

    
      Called from constructors in derived classes to initialize the   class.

    

    
      Gets a type descriptor for the specified type.

      A type descriptor for the specified type.

      The type of the validation provider.

    

    
      Gets the validators for the model using the metadata and controller context.

      The validators for the model.

      The metadata.

      The controller context.

    

    
      Gets the validators for the model using the metadata, the controller context, and a list of attributes.

      The validators for the model.

      The metadata.

      The controller context.

      The list of attributes.

    

    
      Provided for backward compatibility with ASP.NET MVC 3.

    

    
      Initializes a new instance of the   class.

    

    
      Represents an attribute that is used to set the timeout value, in milliseconds, for an asynchronous method.

    

    
      Initializes a new instance of the   class.

      The timeout value, in milliseconds.

    

    
      Gets the timeout duration, in milliseconds.

      The timeout duration, in milliseconds.

    

    
      Called by ASP.NET before the asynchronous action method executes.

      The filter context.

    

    
      Encapsulates the information that is required for using an   attribute.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified controller context.

      The context within which the result is executed. The context information includes the controller, HTTP content, request context, and route data.

    

    
      Initializes a new instance of the   class using the specified controller context and action descriptor.

      The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.

      An object that provides information about an action method, such as its name, controller, parameters, attributes, and filters.

    

    
      Provides information about the action method that is marked by the   attribute, such as its name, controller, parameters, attributes, and filters.

      The action descriptor for the action method that is marked by the   attribute.

    

    
      Gets or sets the result that is returned by an action method.

      The result that is returned by an action method.

    

    
      Represents an attribute that is used to restrict access by callers to an action method.

    

    
      Initializes a new instance of the   class.

    

    
      When overridden, provides an entry point for custom authorization checks.

      true if the user is authorized; otherwise, false.

      The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.

      The   parameter is null.

    

    
      Processes HTTP requests that fail authorization.

      Encapsulates the information for using  . The   object contains the controller, HTTP context, request context, action result, and route data.

    

    
      Called when a process requests authorization.

      The filter context, which encapsulates information for using  .

      The   parameter is null.

    

    
      Called when the caching module requests authorization.

      A reference to the validation status.

      The HTTP context, which encapsulates all HTTP-specific information about an individual HTTP request.

      The   parameter is null.

    

    
      Gets or sets the user roles.

      The user roles.

    

    
      Gets the unique identifier for this attribute.

      The unique identifier for this attribute.

    

    
      Gets or sets the authorized users.

      The authorized users.

    

    
      Represents an attribute that is used to provide details about how model binding to a parameter should occur.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets a comma-delimited list of property names for which binding is not allowed.

      The exclude list.

    

    
      Gets or sets a comma-delimited list of property names for which binding is allowed.

      The include list.

    

    
      Determines whether the specified property is allowed.

      true if the specified property is allowed; otherwise, false.

      The name of the property.

    

    
      Gets or sets the prefix to use when markup is rendered for binding to an action argument or to a model property.

      The prefix to use.

    

    
      Represents the base class for views that are compiled by the BuildManager class before being rendered by a view engine.

    

    
      Initializes a new instance of the   class using the specified controller context and view path.

      The controller context.

      The view path.

    

    
      Initializes a new instance of the   class using the specified controller context, view path, and view page activator.

      Context information for the current controller. This information includes the HTTP context, request context, route data, parent action view context, and more.

      The path to the view that will be rendered.

      The object responsible for dynamically constructing the view page at run time. 

      The   parameter is null.

      The   parameter is null or empty.

    

    
      Renders the specified view context by using the specified the writer object.

      Information related to rendering a view, such as view data, temporary data, and form context.

      The writer object.

      The   parameter is null.

      An instance of the view type could not be created.

    

    
      When overridden in a derived class, renders the specified view context by using the specified writer object and object instance.

      Information related to rendering a view, such as view data, temporary data, and form context.

      The writer object.

      An object that contains additional information that can be used in the view.

    

    
      Gets or sets the view path.

      The view path.

    

    
      Provides a base class for view engines.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified view page activator.

      The view page activator.

    

    
      Gets a value that indicates whether a file exists in the specified virtual file system (path).

      true if the file exists in the virtual file system; otherwise, false.

      The controller context.

      The virtual path.

    

    
      Gets the view page activator.

      The view page activator.

    

    
      Maps a browser request to a byte array.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified controller context and binding context.

      The bound data object.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      The   parameter is null.

    

    
      Provides an abstract class to implement a cached metadata provider.

      

    

    
      Initializes a new instance of the   class.

    

    
      Gets the cache item policy.

      The cache item policy.

    

    
      Gets the cache key prefix.

      The cache key prefix.

    

    
      When overridden in a derived class, creates the cached model metadata for the property.

      The cached model metadata for the property.

      The attributes.

      The container type.

      The model accessor.

      The model type.

      The property name.

    

    
      Creates prototype metadata by applying the prototype and  model access to yield the final metadata.

      The prototype metadata.

      The prototype.

      The model accessor.

    

    
      Creates a metadata prototype.

      A metadata prototype.

      The attributes.

      The container type.

      The model type.

      The property name.

    

    
      Gets the metadata for the properties.

      The metadata for the properties.

      The container.

      The container type.

    

    
      Returns the metadata for the specified property.

      The metadata for the specified property.

      The model accessor.

      The container type.

      The property descriptor.

    

    
      Returns the metadata for the specified property.

      The metadata for the specified property.

      The model accessor.

      The container type.

      The property name.

    

    
      Returns the cached metadata for the specified property using the type of the model.

      The cached metadata for the specified property using the type of the model.

      The model accessor.

      The type of the container.

    

    
      Gets the prototype cache.

      The prototype cache.

    

    
      Provides a container to cache   attributes.

    

    
      Initializes a new instance of the   class.

      The attributes.

    

    
      Gets the data type.

      The data type.

    

    
      Gets the display.

      The display.

    

    
      Gets the display column.

      The display column.

    

    
      Gets the display format.

      The display format.

    

    
      Gets the display name.

      The display name.

    

    
      Indicates whether a data field is editable.

      true if the field is editable; otherwise, false.

    

    
      Gets the hidden input.

      The hidden input.

    

    
      Indicates whether a data field is read only.

      true if the field is read only; otherwise, false.

    

    
      Indicates whether a data field is required.

      true if the field is required; otherwise, false.

    

    
      Indicates whether a data field is scaffold.

      true if the field is scaffold; otherwise, false.

    

    
      Gets the UI hint.

      The UI hint.

    

    
      Provides a container to cache  .

    

    
      Initializes a new instance of the   class using the prototype and model accessor.

      The prototype.

      The model accessor.

    

    
      Initializes a new instance of the   class using the provider, container type, model type, property name and attributes.

      The provider.

      The container type.

      The model type.

      The property name.

      The attributes.

    

    
      Gets a value that indicates whether empty strings that are posted back in forms should be converted to Nothing.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that indicates whether empty strings that are posted back in forms should be converted to Nothing. 

    

    
      Gets  meta information about the data type.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      Meta information about the data type.

    

    
      Gets the description of the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      The description of the model.

    

    
      Gets  the display format string for the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      The display format string for the model.

    

    
      Gets  the display name of the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      The display name of the model.

    

    
      Gets the edit format string of the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      The edit format string of the model.

    

    
      Gets a value that indicates whether the model object should be rendered using associated HTML elements.Gets a value that indicates whether the model object should be rendered using associated HTML elements.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that indicates whether the model object should be rendered using associated HTML elements.

    

    
      Gets a value that indicates whether the model is read-only.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that indicates whether the model is read-only.

    

    
      Gets a value that indicates whether the model is required.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that indicates whether the model is required.

    

    
      Gets the string to display for null values.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      The string to display for null values.

    

    
      Gets a value that represents order of the current metadata.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that represents order of the current metadata.

    

    
      Gets a short display name.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A short display name.

    

    
      Gets a value that indicates whether the property should be displayed in read-only views such as list and detail views.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that indicates whether the property should be displayed in read-only views such as list and detail views.

    

    
      Gets or sets a value that indicates whether the model should be displayed in editable views.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      Returns  .

    

    
      Gets the simple display string for the model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      The simple display string for the model.

    

    
      Gets a hint that suggests what template to use for this model.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A hint that suggests what template to use for this model.

    

    
      Gets a value that can be used as a watermark.If the value is cached, the cashed value is returned; otherwise the value is retrieved from the model metadata and stored in the cache.

      A value that can be used as a watermark.

    

    
      Implements the default cached model metadata provider for ASP.NET MVC.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a container of real instances of the cached metadata class based on prototype and model accessor.

      A container of real instances of the cached metadata class.

      The prototype.

      The model accessor.

    

    
      Returns a container prototype instances of the metadata class.

      a container prototype instances of the metadata class.

      The attributes type.

      The container type.

      The model type.

      The property name.

    

    
      Provides a container for cached metadata.

      he type of the container.

    

    
      Constructor for creating real instances of the metadata class based on a prototype.

      The provider.

      The container type.

      The model type.

      The property name.

      The prototype.

    

    
      Constructor for creating the prototype instances of the metadata class.

      The prototype.

      The model accessor.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that indicates whether empty strings that are posted back in forms should be converted to null.

      A cached value that indicates whether empty strings that are posted back in forms should be converted to null.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets meta information about the data type.

      Meta information about the data type.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets the description of the model.

      The description of the model.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets the display format string for the model.

      The display format string for the model.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets the display name of the model.

      The display name of the model.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets the edit format string of the model.

      The edit format string of the model.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that indicates whether the model object should be rendered using associated HTML elements.

      A cached value that indicates whether the model object should be rendered using associated HTML elements.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that indicates whether the model is read-only.

      A cached value that indicates whether the model is read-only.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that indicates whether the model is required.

      A cached value that indicates whether the model is required.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets the cached string to display for null values.

      The cached string to display for null values.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that represents order of the current metadata.

      A cached value that represents order of the current metadata.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a short display name.

      A short display name.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that indicates whether the property should be displayed in read-only views such as list and detail views.

      A cached value that indicates whether the property should be displayed in read-only views such as list and detail views.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that indicates whether the model should be displayed in editable views.

      A cached value that indicates whether the model should be displayed in editable views.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets the cached simple display string for the model.

      The cached simple display string for the model.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached hint that suggests what template to use for this model.

      A cached hint that suggests what template to use for this model.

    

    
      This method is protected and therefore cannot be called directly. This method was designed to be overridden in a deriving class such as  .Gets or sets a cached value that can be used as a watermark.

      A cached value that can be used as a watermark.

    

    
      Gets or sets a cached value that indicates whether empty strings that are posted back in forms should be converted to null.

      A cached value that indicates whether empty strings that are posted back in forms should be converted to null.

    

    
      Gets or sets meta information about the data type.

      The meta information about the data type.

    

    
      Gets or sets the description of the model.

      The description of the model.

    

    
      Gets or sets the display format string for the model.

      The display format string for the model.

    

    
      Gets or sets the display name of the model.

      The display name of the model.

    

    
      Gets or sets the edit format string of the model.

      The edit format string of the model.

    

    
      Gets or sets the simple display string for the model.

      The simple display string for the model.

    

    
      Gets or sets a value that indicates whether the model object should be rendered using associated HTML elements.

      A value that indicates whether the model object should be rendered using associated HTML elements.

    

    
      Gets or sets a value that indicates whether the model is read-only.

      A value that indicates whether the model is read-only.

    

    
      Gets or sets a value that indicates whether the model is required.

      A value that indicates whether the model is required.

    

    
      Gets or sets the string to display for null values.

      The string to display for null values.

    

    
      Gets or sets a value that represents order of the current metadata.

      The order value of the current metadata.

    

    
      Gets or sets the prototype cache.

      The prototype cache.

    

    
      Gets or sets a short display name.

      The short display name.

    

    
      Gets or sets a value that indicates whether the property should be displayed in read-only views such as list and detail views.

      true if the model should be displayed in read-only views; otherwise, false.

    

    
      Gets or sets a value that indicates whether the model should be displayed in editable views.

      true if the model should be displayed in editable views; otherwise, false.

    

    
      Gets or sets the simple display string for the model.

      The simple display string for the model.

    

    
      Gets or sets a hint that suggests what template to use for this model.

      A hint that suggests what template to use for this model.

    

    
      Gets or sets a value that can be used as a watermark.

      A value that can be used as a watermark.

    

    
      Provides a mechanism to propagates notification that model binder operations should be canceled.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the default cancellation token.

      The default cancellation token.

      The controller context.

      The binding context.

    

    
      Represents an attribute that is used to indicate that an action method should be called only as a child action.

    

    
      Initializes a new instance of the   class.

    

    
      Called when authorization is required.

      An object that encapsulates the information that is required in order to authorize access to the child action.

    

    
      Represents a value provider for values from child actions.

    

    
      Initializes a new instance of the   class.

      The controller context.

    

    
      Retrieves a value object using the specified key.

      The value object for the specified key.

      The key.

    

    
      Represents a factory for creating value provider objects for child actions.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a   object for the specified controller context.

      A   object.

      The controller context.

    

    
      Returns the client data-type model validators.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the client data-type model validators.

      The client data-type model validators.

      The metadata.

      The context.

    

    
      Gets the resource class key.

      The resource class key.

    

    
      Provides an attribute that compares two properties of a model.

    

    
      Initializes a new instance of the   class.

      The property to compare with the current property.

    

    
      Applies formatting to an error message based on the data field where the compare error occurred.

      The formatted error message.

      The name of the field that caused the validation failure.

    

    
      Formats the property for client validation by prepending an asterisk (*) and a dot.

      The string "*." is prepended to the property.

      The property.

    

    
      Gets a list of compare-value client validation rules for the property using the specified model metadata and controller context.

      A list of compare-value client validation rules.

      The model metadata.

      The controller context.

    

    
      Determines whether the specified object is equal to the compared object.

      null if the value of the compared property is equal to the value parameter; otherwise, a validation result that contains the error message that indicates that the comparison failed.

      The value of the object to compare.

      The validation context.

    

    
      Gets the property to compare with the current property.

      The property to compare with the current property.

    

    
      Gets the other properties display name.

      The other properties display name.

    

    
      Represents a user-defined content type that is the result of an action method.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the content.

      The content.

    

    
      Gets or sets the content encoding.

      The content encoding.

    

    
      Gets or sets the type of the content.

      The type of the content.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context within which the result is executed.

      The   parameter is null.

    

    
      Provides methods that respond to HTTP requests that are made to an ASP.NET MVC Web site.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the action invoker for the controller.

      The action invoker.

    

    
      Provides asynchronous operations.

      Returns  .

    

    
      Begins execution of the specified request context

      Returns an IAsyncController instance. 

      The request context.

      The callback.

      The state.

    

    
      Begins to invoke the action in the current controller context.

      Returns an IAsyncController instance.

      The callback.

      The state.

    

    
      Gets or sets the binder.

      The binder.

    

    
      Creates a content result object by using a string.

      The content result instance.

      The content to write to the response.

    

    
      Creates a content result object by using a string and the content type. 

      The content result instance.

      The content to write to the response.

      The content type (MIME type).

    

    
      Creates a content result object by using a string, the content type, and content encoding.

      The content result instance.

      The content to write to the response.

      The content type (MIME type).

      The content encoding.

    

    
      Creates an action invoker.

      An action invoker.

    

    
      Creates a temporary data provider.

      A temporary data provider.

    

    
      Disable asynchronous support to provide backward compatibility.

      true if asynchronous support is disabled; otherwise false.

    

    
      Releases all resources that are used by the current instance of the   class.

    

    
      Releases unmanaged resources and optionally releases managed resources.

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
      Ends the  invocation of  the action in the current controller context.

      The asynchronous result.

    

    
      Ends the execute core.

      The asynchronous result.

    

    
      Invokes the action in the current controller context.

    

    
      Creates a   object by using the file contents and file type.

      The file-content result object.

      The binary content to send to the response.

      The content type (MIME type).

    

    
      Creates a   object by using the file contents, content type, and the destination file name.

      The file-content result object.

      The binary content to send to the response.

      The content type (MIME type).

      The file name to use in the file-download dialog box that is displayed in the browser.

    

    
      Creates a   object by using the   object and content type.  

      The file-content result object.

      The stream to send to the response.

      The content type (MIME type).

    

    
      Creates a   object using the   object, the content type, and the target file name. 

      The file-stream result object.

      The stream to send to the response.

      The content type (MIME type)

      The file name to use in the file-download dialog box that is displayed in the browser.

    

    
      Creates a   object by using the file name and the content type.

      The file-stream result object.

      The path of the file to send to the response.

      The content type (MIME type).

    

    
      Creates a   object by using the file name, the content type, and the file download name.

      The file-stream result object.

      The path of the file to send to the response.

      The content type (MIME type).

      The file name to use in the file-download dialog box that is displayed in the browser.

    

    
      Called when a request matches this controller, but no method with the specified action name is found in the controller.

      The name of the attempted action.

    

    
      Gets HTTP-specific information about an individual HTTP request.

      The HTTP context.

    

    
      Returns an instance of the   class.

      An instance of the   class.

    

    
      Returns an instance of the   class.

      An instance of the   class.

      The status description.

    

    
      Initializes data that might not be available when the constructor is called.

      The HTTP context and route data.

    

    
      Creates a   object.

      The   object that writes the script to the response.

      The JavaScript code to run on the client

    

    
      Creates a   object that serializes the specified object to JavaScript Object Notation (JSON).

      The JSON result object that serializes the specified object to JSON format. The result object that is prepared by this method is written to the response by the ASP.NET MVC framework when the object is executed.

      The JavaScript object graph to serialize.

    

    
      Creates a   object that serializes the specified object to JavaScript Object Notation (JSON) format.

      The JSON result object that serializes the specified object to JSON format.

      The JavaScript object graph to serialize.

      The content type (MIME type).

    

    
      Creates a   object that serializes the specified object to JavaScript Object Notation (JSON) format.

      The JSON result object that serializes the specified object to JSON format.

      The JavaScript object graph to serialize.

      The content type (MIME type).

      The content encoding.

    

    
      Creates a   object that serializes the specified object to JavaScript Object Notation (JSON) format using the content type, content encoding, and the JSON request behavior.

      The result object that serializes the specified object to JSON format.

      The JavaScript object graph to serialize.

      The content type (MIME type).

      The content encoding.

      The JSON request behavior 

    

    
      Creates a   object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified content type and JSON request behavior.

      The result object that serializes the specified object to JSON format.

      The JavaScript object graph to serialize.

      The content type (MIME type).

      The JSON request behavior

    

    
      Creates a   object that serializes the specified object to JavaScript Object Notation (JSON) format using the specified JSON request behavior.

      The result object that serializes the specified object to JSON format.

      The JavaScript object graph to serialize.

      The JSON request behavior.

    

    
      Gets the model state dictionary object that contains the state of the model and of model-binding validation.

      The model state dictionary.

    

    
      Called after the action method is invoked.

      Information about the current request and action.

    

    
      Called before the action method is invoked.

      Information about the current request and action.

    

    
      Called when authorization occurs.

      Information about the current request and action.

    

    
      Called when an unhandled exception occurs in the action.

      Information about the current request and action.

    

    
      Called after the action result that is returned by an action method is executed.

      Information about the current request and action result

    

    
      Called before the action result that is returned by an action method is executed.

      Information about the current request and action result

    

    
      Creates a   object that renders a partial view.

      A partial-view result object.

    

    
      Creates a   object that renders a partial view, by using the specified model. 

      A partial-view result object.

      The model that is rendered by the partial view

    

    
      Creates a   object that renders a partial view, by using the specified view name. 

      A partial-view result object.

      The name of the view that is rendered to the response.

    

    
      Creates a   object that renders a partial view, by using the specified view name and model. 

      A partial-view result object.

      The name of the view that is rendered to the response.

      The model that is rendered by the partial view

    

    
      Gets the HTTP context profile.

      The HTTP context profile.

    

    
      Creates a   object that redirects to the specified URL.

      The redirect result object.

      The URL to redirect to.

    

    
      Returns an instance of the   class with the   property set to true.

      An instance of the   class with the   property set to true.

      The URL to redirect to.

    

    
      Redirects to the specified action using the action name.

      The redirect result object.

      The name of the action.

    

    
      Redirects to the specified action using the action name and route values.

      The redirect result object.

      The name of the action.

      The parameters for a route. 

    

    
      Redirects to the specified action using the action name and controller name.

      The redirect result object.

      The name of the action.

      The name of the controller

    

    
      Redirects to the specified action using the action name, controller name, and route values.

      The redirect result object.

      The name of the action.

      The name of the controller

      The parameters for a route. 

    

    
      Redirects to the specified action using the action name, controller name, and route dictionary.

      The redirect result object.

      The name of the action.

      The name of the controller

      The parameters for a route.

    

    
      Redirects to the specified action using the action name and route dictionary.

      The redirect result object.

      The name of the action.

      The parameters for a route.

    

    
      Returns an instance of the   class with the   property set to true using the specified action name.

      An instance of the   class with the   property set to true using the specified action name, controller name, and route values.

      The action name.

    

    
      Returns an instance of the   class with the   property set to true using the specified action name, and route values.

      An instance of the   class with the   property set to true using the specified action name, and route values.

      The action name.

      The route values.

    

    
      Returns an instance of the   class with the   property set to true using the specified action name,  and controller name.

      An instance of the   class with the   property set to true using the specified action name,  and controller name.

      The action name.

      The controller name.

    

    
      Returns an instance of the   class with the   property set to true using the specified action name, controller name, and route values.

      An instance of the   class with the   property set to true.

      The action name.

      The controller name.

      The route values.

    

    
      Returns an instance of the   class with the   property set to true using the specified action name, controller name, and route values.

      An instance of the   class with the   property set to true using the specified action name, controller name, and route values.

      The action name.

      The controller name.

      The route values.

    

    
      Returns an instance of the   class with the   property set to true using the specified action name,  and route values.

      An instance of the   class with the   property set to true using the specified action name,  and route values.

      The action name.

      The route values.

    

    
      Redirects to the specified route using the specified route values.

      The redirect-to-route result object.

      The parameters for a route. 

    

    
      Redirects to the specified route using the route name.

      The redirect-to-route result object.

      The name of the route

    

    
      Redirects to the specified route using the route name and route values.

      The redirect-to-route result object.

      The name of the route

      The parameters for a route. 

    

    
      Redirects to the specified route using the route name and route dictionary.

      The redirect-to-route result object.

      The name of the route

      The parameters for a route.

    

    
      Redirects to the specified route using the route dictionary.

      The redirect-to-route result object.

      The parameters for a route.

    

    
      Returns an instance of the   class with the   property set to true using the specified route values.

      Returns an instance of the   class with the   property set to true.

      The route name.

    

    
      Returns an instance of the   class with the   property set to true using the specified route name.

      Returns an instance of the   class with the   property set to true using the specified route name.

      The route name.

    

    
      Returns an instance of the   class with the   property set to true using the specified route name and route values.

      An instance of the   class with the   property set to true.

      The route name.

      The route values.

    

    
      Returns an instance of the   class with the   property set to true using the specified route name and route values.

      An instance of the   class with the   property set to true using the specified route name and route values.

      The route name.

      The route values.

    

    
      Returns an instance of the   class with the   property set to true using the specified route values.

      An instance of the   class with the   property set to true using the specified route values.

      The route values.

    

    
      Gets the   object for the current HTTP request.

      The request object.

    

    
      Gets the   object for the current HTTP response.

      The response object.

    

    
      Gets the route data for the current request.

      The route data.

    

    
      Gets the   object that provides methods that are used during Web request processing.

      The HTTP server object.

    

    
      Gets the   object for the current HTTP request.

      The HTTP session-state object for the current HTTP request.

    

    
      Initializes a new instance of the   class.

      Returns an IAsyncController instance.

      The request context.

      The callback.

      The state.

    

    
      Ends the execute task.

      The asynchronous result.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The filter context.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The filter context.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The filter context.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The filter context.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The filter context.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The filter context.

    

    
      Gets the temporary-data provider object that is used to store data for the next request.

      The temporary-data provider.

    

    
      Updates the specified model instance using values from the controller's current value provider.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The type of the model object.

      The   parameter or the   property is null.

    

    
      Updates the specified model instance using values from the controller's current value provider and a prefix.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      The type of the model object.

      The   parameter or the   property is null.

    

    
      Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      The type of the model object.

      The   parameter or the   property is null.

    

    
      Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The prefix to use when looking up values in the value provider

      A list of properties of the model to update.

      A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the   parameter list.

      The type of the model object.

      The   parameter or the   property is null.

    

    
      Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude , and a list of properties to include.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the   parameter list.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider, a prefix, and included properties.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider and a prefix.

      true if the update is successful; otherwise, false.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the controller's current value provider and included properties.

      true if the update is successful; otherwise, false.

      The model instance to update.

      A list of properties of the model to update.

      The type of the model object.

      The   parameter or the   property is null.

    

    
      Updates the specified model instance using values from the value provider and a list of properties to include.

      true if the update is successful; otherwise, false.

      The model instance to update.

      A list of properties of the model to update.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider.

      true if the update is successful; otherwise, false.

      The model instance to update.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Validates the specified model instance.

      true if the model validation is successful; otherwise, false.

      The model instance to validate.

    

    
      Validates the specified model instance using an HTML prefix.

      true if the model validation is successful; otherwise, false.

      The model to validate.

      The prefix to use when looking up values in the model provider.

    

    
      Updates the specified model instance using values from the controller's current value provider.

      The model instance to update.

      The type of the model object.

      The model was not successfully updated.

    

    
      Updates the specified model instance using values from the controller's current value provider and a prefix.

      The model instance to update.

      A prefix to use when looking up values in the value provider.

      The type of the model object.

    

    
      Updates the specified model instance using values from the controller's current value provider, a prefix, and included properties.

      The model instance to update.

      A prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      The type of the model object.

    

    
      Updates the specified model instance using values from the controller's current value provider, a prefix, a list of properties to exclude, and a list of properties to include.

      The model instance to update.

      A prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the   list.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider, a prefix, a list of properties to exclude, and a list of properties to include.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      A list of properties to explicitly exclude from the update. These are excluded even if they are listed in the   parameter list.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A list of properties of the model to update.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider and a prefix.

      The model instance to update.

      The prefix to use when looking up values in the value provider.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the controller object's current value provider.

      The model instance to update.

      A list of properties of the model to update.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider, a prefix, and a list of properties to include.

      The model instance to update.

      A list of properties of the model to update.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Updates the specified model instance using values from the value provider.

      The model instance to update.

      A dictionary of values that is used to update the model.

      The type of the model object.

    

    
      Gets the URL helper object that is used to generate URLs by using routing.

      The URL helper object.

    

    
      Gets the user security information for the current HTTP request.

      The user security information for the current HTTP request.

    

    
      Validates the specified model instance.

      The model to validate.

    

    
      Validates the specified model instance using an HTML prefix.

      The model to validate.

      The prefix to use when looking up values in the model provider.

    

    
      Creates a   object that renders a view to the response.

      The view result that renders a view to the response.

    

    
      Creates a   object by using the model that renders a view to the response.

      The view result.

      The model that is rendered by the view.

    

    
      Creates a   object by using the view name that renders a view.

      The view result.

      The name of the view that is rendered to the response.

    

    
      Creates a   object by using the view name and model that renders a view to the response.

      The view result.

      The name of the view that is rendered to the response.

      The model that is rendered by the view.

    

    
      Creates a   object using the view name and master-page name that renders a view to the response.

      The view result.

      The name of the view that is rendered to the response.

      The name of the master page or template to use when the view is rendered.

    

    
      Creates a   object using the view name, master-page name, and model that renders a view.

      The view result.

      The name of the view that is rendered to the response.

      The name of the master page or template to use when the view is rendered.

      The model that is rendered by the view.

    

    
      Creates a   object that renders the specified   object.

      The view result.

      The view that is rendered to the response.

    

    
      Creates a   object that renders the specified   object.

      The view result.

      The view that is rendered to the response.

      The model that is rendered by the view.

    

    
      Gets the view engine collection.

      The view engine collection.

    

    
      Represents a class that is responsible for invoking the action methods of a controller.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the model binders that are associated with the action.

      The model binders that are associated with the action.

    

    
      Creates the action result.

      The action result object.

      The controller context.

      The action descriptor.

      The action return value.

    

    
      Finds the information about the action method.

      Information about the action method.

      The controller context.

      The controller descriptor.

      The name of the action.

    

    
      Retrieves information about the controller by using the specified controller context.

      Information about the controller.

      The controller context.

    

    
      Retrieves information about the action filters.

      Information about the action filters.

      The controller context.

      The action descriptor.

    

    
      Gets the value of the specified action-method parameter.

      The value of the action-method parameter.

      The controller context.

      The parameter descriptor.

    

    
      Gets the values of the action-method parameters.

      The values of the action-method parameters.

      The controller context.

      The action descriptor.

    

    
      Invokes the specified action by using the specified controller context.

      The result of executing the action.

      The controller context.

      The name of the action to invoke.

      The   parameter is null.

      The   parameter is null or empty.

      The thread was aborted during invocation of the action.

      An unspecified error occurred during invocation of the action.

    

    
      Invokes the specified action method by using the specified parameters and the controller context.

      The result of executing the action method.

      The controller context.

      The action descriptor.

      The parameters.

    

    
      Invokes the specified action method by using the specified parameters, controller context, and action filters.

      The context for the ActionExecuted method of the   class.

      The controller context.

      The action filters.

      The action descriptor.

      The parameters.

    

    
      Invokes the specified action result by using the specified controller context.

      The controller context.

      The action result.

    

    
      Invokes the specified action result by using the specified action filters and the controller context.

      The context for the ResultExecuted method of the   class.

      The controller context.

      The action filters.

      The action result.

    

    
      Invokes the specified authorization filters by using the specified action descriptor and controller context.

      The context for the   object.

      The controller context.

      The authorization filters.

      The action descriptor.

    

    
      Invokes the specified exception filters by using the specified exception and controller context.

      The context for the   object.

      The controller context.

      The exception filters.

      The exception.

    

    
      Represents the base class for all MVC controllers.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the controller context.

      The controller context.

    

    
      Executes the specified request context.

      The request context.

      The   parameter is null.

    

    
      Executes the request.

    

    
      Initializes the specified request context.

      The request context.

    

    
      Executes the specified request context.

      The request context.

    

    
      Gets or sets the dictionary for temporary data.

      The dictionary for temporary data.

    

    
      Gets or sets a value that indicates whether request validation is enabled for this request.

      true if request validation is enabled for this request; otherwise, false. The default is true.

    

    
      Gets or sets the value provider for the controller.

      The value provider for the controller.

    

    
      Gets the dynamic view data dictionary.

      The dynamic view data dictionary.

    

    
      Gets or sets the dictionary for view data.

      The dictionary for the view data.

    

    
      Represents a class that is responsible for dynamically building a controller.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the current controller builder object.

      The current controller builder.

    

    
      Gets the default namespaces.

      The default namespaces.

    

    
      Gets the associated controller factory.

      The controller factory.

    

    
      Sets the controller factory by using the specified type.

      The type of the controller factory.

      The   parameter is null.

      The controller factory cannot be assigned from the type in the   parameter.

      An error occurred while the controller factory was being set.

    

    
      Sets the specified controller factory.

      The controller factory.

      The   parameter is null.

    

    
      Encapsulates information about an HTTP request that matches specified   and   instances.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified HTTP context, URL route data, and controller.

      The HTTP context.

      The route data.

      The controller.

    

    
      Initializes a new instance of the   class by using the specified controller context.

      The controller context.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified request context and controller.

      The request context.

      The controller.

      One or both parameters are null.

    

    
      Gets or sets the controller.

      The controller.

    

    
      Gets the display mode.

      The display mode.

    

    
      Gets or sets the HTTP context.

      The HTTP context.

    

    
      Gets a value that indicates whether the associated action method is a child action.

      true if the associated action method is a child action; otherwise, false.

    

    
      Gets an object that contains the view context information for the parent action method.

      An object that contains the view context information for the parent action method.

    

    
      Gets or sets the request context.

      The request context.

    

    
      Gets or sets the URL route data.

      The URL route data.

    

    
      Encapsulates information that describes a controller, such as its name, type, and actions.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the name of the controller.

      The name of the controller.

    

    
      Gets the type of the controller.

      The type of the controller.

    

    
      Finds an action method by using the specified name and controller context.

      The information about the action method.

      The controller context.

      The name of the action.

    

    
      Retrieves a list of action-method descriptors in the controller.

      A list of action-method descriptors in the controller.

    

    
      Retrieves custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Retrieves custom attributes of a specified type that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

      The   parameter is null (Nothing in Visual Basic).

    

    
      Gets the filter attributes.

      The filter attributes.

      true if the cache should be used; otherwise, false.

    

    
      Retrieves a value that indicates whether one or more instance of the specified custom attribute are defined for this member.

      true if the   is defined for this member; otherwise, false.

      The type of the custom attribute.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The   parameter is null (Nothing in Visual Basic).

    

    
      When implemented in a derived class, gets the unique ID for the controller descriptor using lazy initialization.

      The unique ID.

    

    
      Adds the controller to the   instance.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the collection of controller instance filters.

      The collection of controller instance filters.

      The controller context.

      The action descriptor.

    

    
      Represents an attribute that invokes a custom model binder.

    

    
      Initializes a new instance of the   class.

    

    
      Retrieves the associated model binder.

      A reference to an object that implements the   interface.

    

    
      Provides a container for common metadata, for the   class, and for the   class for a data model.

    

    
      Initializes a new instance of the   class.

      The data-annotations model metadata provider.

      The type of the container.

      The model accessor.

      The type of the model.

      The name of the property.

      The display column attribute.

    

    
      Returns simple text for the model data.

      Simple text for the model data.

    

    
      Implements the default model metadata provider for ASP.NET MVC.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the metadata for the specified property.

      The metadata for the property.

      The attributes.

      The type of the container.

      The model accessor.

      The type of the model.

      The name of the property.

    

    
      Represents the method that creates a   instance.

    

    
      Provides a model validator.

    

    
      Initializes a new instance of the   class.

      The metadata for the model.

      The controller context for the model.

      The validation attribute for the model.

    

    
      Gets the validation attribute for the model validator.

      The validation attribute for the model validator.

    

    
      Gets the error message for the validation failure.

      The error message for the validation failure.

    

    
      Retrieves a collection of client validation rules.

      A collection of client validation rules.

    

    
      Gets a value that indicates whether model validation is required.

      true if model validation is required; otherwise, false.

    

    
      Returns a list of validation error messages for the model.

      A list of validation error messages for the model, or an empty list if no errors have occurred.

      The container for the model.

    

    
      Provides a model validator for a specified validation type.

      

    

    
      Initializes a new instance of the   class.

      The metadata for the model.

      The controller context for the model.

      The validation attribute for the model.

    

    
      Gets the validation attribute from the model validator.

      The validation attribute from the model validator.

    

    
      Implements the default validation provider for ASP.NET MVC.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets a value that indicates whether non-nullable value types are required.

      true if non-nullable value types are required; otherwise, false.

    

    
      Gets a list of validators.

      A list of validators.

      The metadata.

      The context.

      The list of validation attributes.

    

    
      Registers an adapter to provide client-side validation.

      The type of the validation attribute.

      The type of the adapter.

    

    
      Registers an adapter factory for the validation provider.

      The type of the attribute.

      The factory that will be used to create the   object for the specified attribute.

    

    
      Registers the default adapter.

      The type of the adapter.

    

    
      Registers the default adapter factory.

      The factory that will be used to create the   object for the default adapter.

    

    
      Registers an adapter to provide default object validation.

      The type of the adapter.

    

    
      Registers an adapter factory for the default object validation provider.

      The factory.

    

    
      Registers an adapter to provide object validation.

      The type of the model.

      The type of the adapter.

    

    
      Registers an adapter factory for the object validation provider.

      The type of the model.

      The factory.

    

    
      Provides a factory for validators that are based on  .

    

    
      Provides a container for the error-information model validator.

    

    
      Initializes a new instance of the   class.

    

    
      Gets a list of error-information model validators.

      A list of error-information model validators.

      The model metadata.

      The controller context.

    

    
      Represents the controller factory that is registered by default.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using a controller activator.

      An object that implements the controller activator interface.

    

    
      Creates the specified controller by using the specified request context.

      The controller.

      The context of the HTTP request, which includes the HTTP context and route data.

      The name of the controller.

      The   parameter is null.

      The   parameter is null or empty.

    

    
      Retrieves the controller instance for the specified request context and controller type.

      The controller instance.

      The context of the HTTP request, which includes the HTTP context and route data.

      The type of the controller.

      
          is null.

      
          cannot be assigned.

      An instance of   cannot be created.

    

    
      Returns the controller's session behavior.

      The controller's session behavior.

      The request context.

      The type of the controller.

    

    
      Retrieves the controller type for the specified name and request context.

      The controller type.

      The context of the HTTP request, which includes the HTTP context and route data.

      The name of the controller.

    

    
      Releases the specified controller.

      The controller to release.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. This method calls the   method.

      The controller's session behavior.

      The request context.

      The controller name.

    

    
      Maps a browser request to a data object. This class provides a concrete implementation of a model binder.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the model binders for the application.

      The model binders for the application.

    

    
      Binds the model by using the specified controller context and binding context.

      The bound object.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      The  parameter is null.

    

    
      Binds the specified property by using the specified controller context and binding context and the specified property descriptor.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      Describes a property to be bound. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.

    

    
      Creates the specified model type by using the specified controller context and binding context.

      A data object of the specified type.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      The type of the model object to return.

    

    
      Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is an integer.

      The name of the subindex.

      The prefix for the subindex.

      The index value.

    

    
      Creates an index (a subindex) based on a category of components that make up a larger index, where the specified index value is a string.

      The name of the subindex.

      The prefix for the subindex.

      The index value.

    

    
      Creates the name of the subproperty by using the specified prefix and property name.

      The name of the subproperty.

      The prefix for the subproperty.

      The name of the property.

    

    
      Returns a set of properties that match the property filter restrictions that are established by the specified  .

      An enumerable set of property descriptors.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

    

    
      Returns the properties of the model by using the specified controller context and binding context.

      A collection of property descriptors.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

    

    
      Returns the value of a property using the specified controller context, binding context, property descriptor, and property binder.

      An object that represents the property value.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      The descriptor for the property to access. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.

      An object that provides a way to bind the property.

    

    
      Returns the descriptor object for a type that is specified by its controller context and binding context.

      A custom type descriptor object.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

    

    
      Determines whether a data model is valid for the specified binding context.

      true if the model is valid; otherwise, false.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      The   parameter is null.

    

    
      Called when the model is updated.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

    

    
      Called when the model is updating.

      true if the model is updating; otherwise, false.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

    

    
      Called when the specified property is validated.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      Describes a property to be validated. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.

      The value to set for the property.

    

    
      Called when the specified property is validating.

      true if the property is validating; otherwise, false.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      Describes a property being validated. The descriptor provides information such as component type, property type, and property value. It also provides methods to get or set the property value.

      The value to set for the property.

    

    
      Gets or sets the name of the resource file (class key) that contains localized string values.

      The name of the resource file (class key).

    

    
      Sets the specified property by using the specified controller context, binding context, and property value.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

      Describes a property to be set. The descriptor provides information such as the component type, property type, and property value. It also provides methods to get or set the property value.

      The value to set for the property.

    

    
      Represents a memory cache for view locations.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified cache time span.

      The cache time span.

      The Ticks attribute of the   parameter is set to a negative number.

    

    
      Retrieves the default view location by using the specified HTTP context and cache key.

      The default view location.

      The HTTP context.

      The cache key

      The   parameter is null.

    

    
      Inserts the view in the specified virtual path by using the specified HTTP context, cache key, and virtual path.

      The HTTP context.

      The cache key.

      The virtual path

      The   parameter is null.

    

    
      Creates an empty view location cache.

    

    
      Gets or sets the cache time span.

      The cache time span.

    

    
      Provides a registration point for dependency resolvers that implement   or the Common Service Locator IServiceLocator interface.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the implementation of the dependency resolver.

      The implementation of the dependency resolver.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.

      The implementation of the dependency resolver.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.

      The function that provides the service.

      The function that provides the services.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.

      The common service locator.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.

      The object that implements the dependency resolver.

    

    
      Provides a registration point for dependency resolvers using the specified service delegate and specified service collection delegates.

      The service delegate.

      The services delegates.

    

    
      Provides a registration point for dependency resolvers using the provided common service locator when using a service locator interface.

      The common service locator.

    

    
      Provides a registration point for dependency resolvers, using the specified dependency resolver interface.

      The dependency resolver.

    

    
      Provides a type-safe implementation of   and  .

    

    
      Resolves singly registered services that support arbitrary object creation.

      The requested service or object.

      The dependency resolver instance that this method extends.

      The type of the requested service or object.

    

    
      Resolves multiply registered services.

      The requested services.

      The dependency resolver instance that this method extends.

      The type of the requested services.

    

    
      Represents the base class for value providers whose values come from a collection that implements the   interface.

      The type of the value.

    

    
      Initializes a new instance of the   class.

      The name/value pairs that are used to initialize the value provider.

      Information about a specific culture, such as the names of the culture, the writing system, and the calendar used.

      The   parameter is null.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

      The   parameter is null.

    

    
      Gets the keys from the prefix.

      The keys from the prefix.

      the prefix.

    

    
      Returns a value object using the specified key and controller context.

      The value object for the specified key.

      The key of the value object to retrieve.

      The   parameter is null.

    

    
      Provides an empty metadata provider for data models that do not require metadata.

    

    
      Initializes a new instance of the   class.

    

    
      Creates a new instance of the   class.

      A new instance of the   class.

      The attributes.

      The type of the container.

      The model accessor.

      The type of the model.

      The name of the model.

    

    
      Provides an empty validation provider for models that do not require a validator.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the empty model validator.

      The empty model validator.

      The metadata.

      The context.

    

    
      Represents a result that does nothing, such as a controller action method that returns nothing.

    

    
      Initializes a new instance of the   class.

    

    
      Executes the specified result context.

      The result context.

    

    
      Provides the context for using the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class for the specified exception by using the specified controller context.

      The controller context.

      The exception.

      The   parameter is null.

    

    
      Gets or sets the exception object.

      The exception object.

    

    
      Gets or sets a value that indicates whether the exception has been handled.

      true if the exception has been handled; otherwise, false.

    

    
      Gets or sets the action result.

      The action result.

    

    
      Provides a helper class to get the model name from an expression.

    

    
      Gets the model name from a lambda expression.

      The model name.

      The expression.

    

    
      Gets the model name from a string expression.

      The model name.

      The expression.

    

    
      Provides a container for client-side field validation metadata.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the name of the data field.

      The name of the data field.

    

    
      Gets or sets a value that indicates whether the validation message contents should be replaced with the client validation error.

      true if the validation message contents should be replaced with the client validation error; otherwise, false.

    

    
      Gets or sets the validator message ID.

      The validator message ID.

    

    
      Gets the client validation rules.

      The client validation rules.

    

    
      Sends the contents of a binary file to the response.

    

    
      Initializes a new instance of the   class by using the specified file contents and content type.

      The byte array to send to the response.

      The content type to use for the response.

      The   parameter is null.

    

    
      The binary content to send to the response.

      The file contents.

    

    
      Writes the file content to the response.

      The response.

    

    
      Sends the contents of a file to the response.

    

    
      Initializes a new instance of the   class by using the specified file name and content type.

      The name of the file to send to the response.

      The content type of the response.

      The   parameter is null or empty.

    

    
      Gets or sets the path of the file that is sent to the response.

      The path of the file that is sent to the response.

    

    
      Writes the file to the response.

      The response.

    

    
      Represents a base class that is used to send binary file content to the response.

    

    
      Initializes a new instance of the   class.

      The type of the content.

      The   parameter is null or empty.

    

    
      Gets the content type to use for the response.

      The type of the content.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context within which the result is executed.

      The   parameter is null.

    

    
      Gets or sets the content-disposition header so that a file-download dialog box is displayed in the browser with the specified file name.

      The name of the file.

    

    
      Writes the file to the response.

      The response.

    

    
      Sends binary content to the response by using a   instance.

    

    
      Initializes a new instance of the   class.

      The stream to send to the response.

      The content type to use for the response.

      The   parameter is null.

    

    
      Gets the stream that will be sent to the response.

      The file stream.

    

    
      Writes the file to the response.

      The response.

    

    
      Represents a metadata class that contains a reference to the implementation of one or more of the filter interfaces, the filter's order, and the filter's scope.

    

    
      Initializes a new instance of the   class.

      The instance.

      The scope.

      The order.

    

    
      Represents a constant that is used to specify the default ordering of filters.

    

    
      Gets the instance of this class.

      The instance of this class.

    

    
      Gets the order in which the filter is applied.

      The order in which the filter is applied.

    

    
      Gets the scope ordering of the filter.

      The scope ordering of the filter.

    

    
      Represents the base class for action and result filter attributes.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets a value that indicates whether more than one instance of the filter attribute can be specified.

      true if more than one instance of the filter attribute can be specified; otherwise, false.

    

    
      Gets or sets the order in which the action filters are executed.

      The order in which the action filters are executed.

    

    
      Defines a filter provider for filter attributes.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class and optionally caches attribute instances.

      true to cache attribute instances; otherwise, false.

    

    
      Gets a collection of custom action attributes.

      A collection of custom action attributes.

      The controller context.

      The action descriptor.

    

    
      Gets a collection of controller attributes.

      A collection of controller attributes.

      The controller context.

      The action descriptor.

    

    
      Aggregates the filters from all of the filter providers into one collection.

      The collection filters from all of the filter providers.

      The controller context.

      The action descriptor.

    

    
      Encapsulates information about the available action filters.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified filters collection.

      The filters collection.

    

    
      Gets all the action filters in the application.

      The action filters.

    

    
      Gets all the authorization filters in the application.

      The authorization filters.

    

    
      Gets all the exception filters in the application.

      The exception filters.

    

    
      Gets all the result filters in the application.

      The result filters.

    

    
      Represents the collection of filter providers for the application.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the filter providers collection.

      The filter providers collection.

    

    
      Returns the collection of filter providers.

      The collection of filter providers.

      The controller context.

      The action descriptor.

    

    
      Provides a registration point for filters.

    

    
      Provides a registration point for filters.

      The collection of filters.

    

    
      Defines values that specify the order in which ASP.NET MVC filters run within the same filter type and filter order.

    

    
      Specifies first.

    

    
      Specifies an order before   and after  .

    

    
      Specifies an order before   and after  .

    

    
      Specifies an order before   and after  .

    

    
      Specifies last.

    

    
      Contains the form value providers for the application.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The collection.

      The   parameter is null.

    

    
      Gets the specified value provider.

      The value provider.

      The name of the value provider to get.

      The   parameter is null or empty.

    

    
      Gets a value that indicates whether the value provider contains an entry that has the specified prefix.

      true if the value provider contains an entry that has the specified prefix; otherwise, false.

      The prefix to look for.

    

    
      Gets a value from a value provider using the specified key.

      A value from a value provider.

      The key.

    

    
      Returns a dictionary that contains the value providers.

      A dictionary of value providers.

    

    
      Encapsulates information that is required in order to validate and process the input data from an HTML form.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the field validators for the form.

      A dictionary of field validators for the form.

    

    
      Gets or sets the form identifier.

      The form identifier.

    

    
      Returns a serialized object that contains the form identifier and field-validation values for the form.

      A serialized object that contains the form identifier and field-validation values for the form.

    

    
      Returns the validation value for the specified input field.

      The value to validate the field input with.

      The name of the field to retrieve the validation value for.

      The   parameter is either null or empty.

    

    
      Returns the validation value for the specified input field and a value that indicates what to do if the validation value is not found.

      The value to validate the field input with.

      The name of the field to retrieve the validation value for.

      true to create a validation value if one is not found; otherwise, false.

      The   parameter is either null or empty.

    

    
      Returns a value that indicates whether the specified field has been rendered in the form.

      true if the field has been rendered; otherwise, false.

      The field name.

    

    
      Sets a value that indicates whether the specified field has been rendered in the form.

      The field name.

      true to specify that the field has been rendered in the form; otherwise, false.

    

    
      Determines whether client validation errors should be dynamically added to the validation summary.

      true if client validation errors should be added to the validation summary; otherwise, false.

    

    
      Gets or sets the identifier for the validation summary.

      The identifier for the validation summary.

    

    
      Enumerates the HTTP request types for a form.

    

    
      Specifies a GET request.

    

    
      Specifies a POST request.

    

    
      Represents a value provider for form values that are contained in a   object.

    

    
      Initializes a new instance of the   class.

      An object that encapsulates information about the current HTTP request.

    

    
      Represents a class that is responsible for creating a new instance of a form-value provider object.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a form-value provider object for the specified controller context.

      A form-value provider object.

      An object that encapsulates information about the current HTTP request.

      The   parameter is null.

    

    
      Represents a class that contains all the global filters.

    

    
      Initializes a new instance of the   class.

    

    
      Adds the specified filter to the global filter collection.

      The filter.

    

    
      Adds the specified filter to the global filter collection using the specified filter run order.

      The filter.

      The filter run order.

    

    
      Removes all filters from the global filter collection.

    

    
      Determines whether a filter is in the global filter collection.

      true if   is found in the global filter collection; otherwise, false.

      The filter.

    

    
      Gets the number of filters in the global filter collection.

      The number of filters in the global filter collection.

    

    
      Returns an enumerator that iterates through the global filter collection.

      An enumerator that iterates through the global filter collection.

    

    
      Removes all the filters that match the specified filter.

      The filter to remove.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. 

      An enumerator that iterates through the global filter collection.

    

    
      This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.

      An enumerator that iterates through the global filter collection.

      The controller context.

      The action descriptor.

    

    
      Represents the global filter collection.

    

    
      Gets or sets the global filter collection.

      The global filter collection.

    

    
      Represents an attribute that is used to handle an exception that is thrown by an action method.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the type of the exception.

      The type of the exception.

    

    
      Gets or sets the master view for displaying exception information.

      The master view.

    

    
      Called when an exception occurs.

      The action-filter context.

      The   parameter is null.

    

    
      Gets the unique identifier for this attribute.

      The unique identifier for this attribute.

    

    
      Gets or sets the page view for displaying exception information.

      The page view.

    

    
      Encapsulates information for handling an error that was thrown by an action method.

    

    
      Initializes a new instance of the   class.

      The exception.

      The name of the controller.

      The name of the action.

      The   parameter is null.

      The   or   parameter is null or empty.

    

    
      Gets or sets the name of the action that was executing when the exception was thrown.

      The name of the action.

    

    
      Gets or sets the name of the controller that contains the action method that threw the exception.

      The name of the controller.

    

    
      Gets or sets the exception object.

      The exception object.

    

    
      Represents an attribute that is used to indicate whether a property or field value should be rendered as a hidden input element.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets a value that indicates whether to display the value of the hidden input element.

      true if the value should be displayed; otherwise, false.

    

    
      Represents support for rendering HTML controls in a view.

    

    
      Initializes a new instance of the   class by using the specified view context and view data container.

      The view context.

      The view data container.

      The   or the   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified view context, view data container, and route collection.

      The view context.

      The view data container.

      The route collection.

      One or more parameters is null.

    

    
      Replaces underscore characters (_) with hyphens (-) in the specified HTML attributes.

      The HTML attributes with underscore characters replaced by hyphens.

      The HTML attributes.

    

    
      Generates a hidden form field (anti-forgery token) that is validated when the form is submitted.

      The generated form field (anti-forgery token).

    

    
      Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value.

      The generated form field (anti-forgery token).

      The salt value, which can be any non-empty string.

    

    
      Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value, domain, and path.

      The generated form field (anti-forgery token).

      The salt value, which can be any non-empty string.

      The application domain.

      The virtual path.

    

    
      Converts the specified attribute object to an HTML-encoded string.

      The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.

      The object to encode.

    

    
      Converts the specified attribute string to an HTML-encoded string.

      The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.

      The string to encode.

    

    
      Gets or sets a value that indicates whether client validation is enabled.

      true if enable client validation is enabled; otherwise, false.

    

    
      Enables input validation that is performed by using client script in the browser.

    

    
      Enables or disables client validation.

      true to enable client validation; otherwise, false.

    

    
      Enables unobtrusive JavaScript.

    

    
      Enables or disables unobtrusive JavaScript.

      true to enable unobtrusive JavaScript; otherwise, false.

    

    
      Converts the value of the specified object to an HTML-encoded string.

      The HTML-encoded string.

      The object to encode.

    

    
      Converts the specified string to an HTML-encoded string.

      The HTML-encoded string.

      The string to encode.

    

    
      Formats the value.

      The formatted value.

      The value.

      The format string. 

    

    
      Creates an HTML element ID using the specified element name.

      The ID of the HTML element.

      The name of the HTML element.

      The   parameter is null.

    

    
      Creates an HTML element ID using the specified element name and a string that replaces dots in the name.

      The ID of the HTML element.

      The name of the HTML element.

      The string that replaces dots (.) in the   parameter.

      The   parameter or the   parameter is null.

    

    
      Generates an HTML anchor element (a element) that links to the specified action method, and enables the user to specify the communication protocol, name of the host, and a URL fragment.

      An HTML element that links to the specified action method.

      The context of the HTTP request.

      The collection of URL routes.

      The text caption to display for the link.

      The name of the route that is used to return a virtual path.

      The name of the action method.

      The name of the controller.

      The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.

      The name of the host.

      The fragment identifier.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes for the element.

    

    
      Generates an HTML anchor element (a element) that links to the specified action method.

      An HTML element that links to the specified action method.

      The context of the HTTP request.

      The collection of URL routes.

      The text caption to display for the link.

      The name of the route that is used to return a virtual path.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes for the element.

    

    
      Generates an HTML anchor element (a element) that links to the specified URL route, and enables the user to specify the communication protocol, name of the host, and a URL fragment.

      An HTML element that links to the specified URL route.

      The context of the HTTP request.

      The collection of URL routes.

      The text caption to display for the link.

      The name of the route that is used to return a virtual path.

      The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.

      The name of the host.

      The fragment identifier.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes for the element.

    

    
      Generates an HTML anchor element (a element) that links to the specified URL route.

      An HTML element that links to the specified URL route.

      The context of the HTTP request.

      The collection of URL routes.

      The text caption to display for the link.

      The name of the route that is used to return a virtual path.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes for the element.

    

    
      Returns the HTTP method that handles form input (GET or POST) as a string.

      The form method string, either "get" or "post".

      The HTTP method that handles the form.

    

    
      Returns the HTML input control type as a string.

      The input type string ("checkbox", "hidden", "password", "radio", or "text").

      The enumerated input type.

    

    
      Gets the collection of unobtrusive JavaScript validation attributes using the specified HTML name attribute.

      The collection of unobtrusive JavaScript validation attributes.

      The HTML name attribute.

    

    
      Gets the collection of unobtrusive JavaScript validation attributes using the specified HTML name attribute and model metadata.

      The collection of unobtrusive JavaScript validation attributes.

      The HTML name attribute.

      The model metadata.

    

    
      Returns a hidden input element that identifies the override method for the specified HTTP data-transfer method that was used by the client.

      The override method that uses the HTTP data-transfer method that was used by the client.

      The HTTP data-transfer method that was used by the client (DELETE, HEAD, or PUT).

      The   parameter is not "PUT", "DELETE", or "HEAD".

    

    
      Returns a hidden input element that identifies the override method for the specified verb that represents the HTTP data-transfer method used by the client.

      The override method that uses the verb that represents the HTTP data-transfer method used by the client.

      The verb that represents the HTTP data-transfer method used by the client.

      The   parameter is not "PUT", "DELETE", or "HEAD".

    

    
      Gets or sets the character that replaces periods in the ID attribute of an element.

      The character that replaces periods in the ID attribute of an element.

    

    
      Returns markup that is not HTML encoded.

      Markup that is not HTML encoded.

      The value.

    

    
      Returns markup that is not HTML encoded.

      The HTML markup without encoding.

      The HTML markup.

    

    
      Gets or sets the collection of routes for the application.

      The collection of routes for the application.

    

    
      Gets or sets a value that indicates whether unobtrusive JavaScript is enabled.

      true if unobtrusive JavaScript is enabled; otherwise, false.

    

    
      The name of the CSS class that is used to style an input field when a validation error occurs.

    

    
      The name of the CSS class that is used to style an input field when the input is valid.

    

    
      The name of the CSS class that is used to style the error message when a validation error occurs.

    

    
      The name of the CSS class that is used to style the validation message when the input is valid.

    

    
      The name of the CSS class that is used to style validation summary error messages.

    

    
      The name of the CSS class that is used to style the validation summary when the input is valid.

    

    
      Gets the view bag.

      The view bag.

    

    
      Gets or sets the context information about the view.

      The context of the view.

    

    
      Gets the current view data dictionary.

      The view data dictionary.

    

    
      Gets or sets the view data container.

      The view data container.

    

    
      Represents support for rendering HTML controls in a strongly typed view.

      The type of the model.

    

    
      Initializes a new instance of the   class by using the specified view context and view data container.

      The view context.

      The view data container.

    

    
      Initializes a new instance of the   class by using the specified view context, view data container, and route collection.

      The view context.

      The view data container.

      The route collection.

    

    
      Gets the view bag.

      The view bag.

    

    
      Gets the strongly typed view data dictionary.

      The strongly typed view data dictionary.

    

    
      Represents an attribute that is used to restrict an action method so that the method handles only HTTP DELETE requests.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP DELETE request.

      true if the request is valid; otherwise, false.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      Encapsulates information about a method, such as its type, return type, and arguments.

    

    
      Represents a value provider to use with values that come from a collection of HTTP files.

    

    
      Initializes a new instance of the   class.

      An object that encapsulates information about the current HTTP request.

    

    
      Represents a class that is responsible for creating a new instance of an HTTP file collection value provider object.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a value provider object for the specified controller context.

      An HTTP file collection value provider.

      An object that encapsulates information about the HTTP request.

      The   parameter is null.

    

    
      Represents an attribute that is used to restrict an action method so that the method handles only HTTP GET requests.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP GET request.

      true if the request is valid; otherwise, false.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      Encapsulates information about a method, such as its type, return type, and arguments.

    

    
      Specifies that the HTTP request must be the HTTP HEAD method.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP HEAD request.

      true if the request is HEAD; otherwise, false.

      The controller context.

      The method info.

    

    
      Defines an object that is used to indicate that the requested resource was not found.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using a status description.

      The status description.

    

    
      Represents an attribute that is used to restrict an action method so that the method handles only HTTP OPTIONS requests.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP OPTIONS request.

      true if the request is OPTIONS; otherwise, false.

      The controller context.

      The method info.

    

    
      Represents an attribute that is used to restrict an action method so that the method handles only HTTP PATCH requests.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP PATCH request.

      true if the request is PATCH; otherwise, false.

      The controller context.

      The method info.

    

    
      Represents an attribute that is used to restrict an action method so that the method handles only HTTP POST requests.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP POST request.

      true if the request is valid; otherwise, false.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      Encapsulates information about a method, such as its type, return type, and arguments.

    

    
      Binds a model to a posted file.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model.

      The bound value.

      The controller context.

      The binding context.

      One or both parameters are null.

    

    
      Represents an attribute that is used to restrict an action method so that the method handles only HTTP PUT requests.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether a request is a valid HTTP PUT request.

      true if the request is valid; otherwise, false.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      Encapsulates information about a method, such as its type, return type, and arguments.

    

    
      Extends the   class that contains the HTTP values that were sent by a client during a Web request.

    

    
      Retrieves the HTTP data-transfer method override that was used by the client.

      The HTTP data-transfer method override that was used by the client.

      An object that contains the HTTP values that were sent by a client during a Web request.

      The   parameter is null.

      The HTTP data-transfer method override was not implemented.

    

    
      Provides a way to return an action result with a specific HTTP response status code and description.

    

    
      Initializes a new instance of the   class using a status code.

      The status code.

    

    
      Initializes a new instance of the   class using a status code and status description.

      The status code.

      The status description.

    

    
      Initializes a new instance of the   class using a status code.

      The status code.

    

    
      Initializes a new instance of the   class using a status code and status description.

      The status code.

      The status description.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.

    

    
      Gets the HTTP status code.

      The HTTP status code.

    

    
      Gets the HTTP status description.

      the HTTP status description.

    

    
      Represents the result of an unauthorized HTTP request.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the status description.

      The status description.

    

    
      Enumerates the HTTP verbs.

    

    
      Retrieves the information or entity that is identified by the URI of the request.

    

    
      Posts a new entity as an addition to a URI.

    

    
      Replaces an entity that is identified by a URI.

    

    
      Requests that a specified URI be deleted.

    

    
      Retrieves the message headers for the information or entity that is identified by the URI of the request.

    

    
      Requests that a set of changes described in the   request entity be applied to the resource identified by the Request-   URI.

    

    
      Represents a request for information about the communication options available on the request/response chain identified by the Request-URI.

    

    
      Defines the methods that are used in an action filter.

    

    
      Called after the action method executes.

      The filter context.

    

    
      Called before an action method executes.

      The filter context.

    

    
      Defines the contract for an action invoker, which is used to invoke an action in response to an HTTP request.

    

    
      Invokes the specified action by using the specified controller context.

      true if the action was found; otherwise, false.

      The controller context.

      The name of the action.

    

    
      Defines the methods that are required for an authorization filter.

    

    
      Called when authorization is required.

      The filter context.

    

    
      Provides a way for the ASP.NET MVC validation framework to discover at run time whether a validator has support for client validation.

    

    
      When implemented in a class, returns client validation rules for that class.

      The client validation rules for this validator.

      The model metadata.

      The controller context.

    

    
      Defines the methods that are required for a controller.

    

    
      Executes the specified request context.

      The request context.

    

    
      Provides fine-grained control over how controllers are instantiated using dependency injection.

    

    
      When implemented in a class, creates a controller.

      The created controller.

      The request context.

      The controller type.

    

    
      Defines the methods that are required for a controller factory.

    

    
      Creates the specified controller by using the specified request context.

      The controller.

      The request context.

      The name of the controller.

    

    
      Gets the controller's session behavior.

      The controller's session behavior.

      The request context.

      The name of the controller whose session behavior you want to get.

    

    
      Releases the specified controller.

      The controller.

    

    
      Defines the methods that simplify service location and dependency resolution.

    

    
      Resolves singly registered services that support arbitrary object creation.

      The requested service or object.

      The type of the requested service or object.

    

    
      Resolves multiply registered services.

      The requested services.

      The type of the requested services.

    

    
      Represents a special   that has the ability to be enumerable.

    

    
      Gets the keys from the prefix.

      The keys.

      The prefix.

    

    
      Defines the methods that are required for an exception filter.

    

    
      Called when an exception occurs.

      The filter context.

    

    
      Provides an interface for finding filters.

    

    
      Returns an enumerator that contains all the   instances in the service locator.

      The enumerator that contains all the   instances in the service locator.

      The controller context.

      The action descriptor.

    

    
      Provides an interface for exposing attributes to the   class.

    

    
      When implemented in a class, provides metadata to the model metadata creation process.

      The model metadata.

    

    
      Defines the methods that are required for a model binder.

    

    
      Binds the model to a value by using the specified controller context and binding context.

      The bound value.

      The controller context.

      The binding context.

    

    
      Defines methods that enable dynamic implementations of model binding for classes that implement the   interface. 

    

    
      Returns the model binder for the specified type.

      The model binder for the specified type.

      The type of the model.

    

    
      Defines members that specify the order of filters and whether multiple filters are allowed.

    

    
      When implemented in a class, gets or sets a value that indicates whether multiple filters are allowed.

      true if multiple filters are allowed; otherwise, false.

    

    
      When implemented in a class, gets the filter order.

      The filter order.

    

    
      Enumerates the types of input controls.

    

    
      A check box.

    

    
      A hidden field.

    

    
      A password box.

    

    
      A radio button.

    

    
      A text box.

    

    
      Defines the methods that are required for a result filter.

    

    
      Called after an action result executes.

      The filter context.

    

    
      Called before an action result executes.

      The filter context.

    

    
      Associates a route with an area in an ASP.NET MVC application.

    

    
      Gets the name of the area to associate the route with.

      The name of the area to associate the route with.

    

    
      Defines the contract for temporary-data providers that store data that is viewed on the next request.

    

    
      Loads the temporary data.

      The temporary data.

      The controller context.

    

    
      Saves the temporary data.

      The controller context.

      The values.

    

    
      Represents an   interface that can skip request validation.

    

    
      Retrieves the value of the object that is associated with the specified key.

      The value of the object for the specified key.

      The key.

      true if validation should be skipped; otherwise, false.

    

    
      Defines the methods that are required for a value provider in ASP.NET MVC.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

    

    
      Retrieves a value object using the specified key.

      The value object for the specified key.

      The key of the value object to retrieve.

    

    
      Defines the methods that are required for a view.

    

    
      Renders the specified view context by using the specified the writer object.

      The view context.

      The writer object.

    

    
      Defines the methods that are required for a view data dictionary.

    

    
      Gets or sets the view data dictionary.

      The view data dictionary.

    

    
      Defines the methods that are required for a view engine.

    

    
      Finds the specified partial view by using the specified controller context.

      The partial view.

      The controller context.

      The name of the partial view.

      true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.

    

    
      Finds the specified view by using the specified controller context.

      The page view.

      The controller context.

      The name of the view.

      The name of the master.

      true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.

    

    
      Releases the specified view by using the specified controller context.

      The controller context.

      The view.

    

    
      Defines the methods that are required in order to cache view locations in memory.

    

    
      Gets the view location by using the specified HTTP context and the cache key.

      The view location.

      The HTTP context.

      The cache key.

    

    
      Inserts the specified view location into the cache by using the specified HTTP context and the cache key.

      The HTTP context.

      The cache key.

      The virtual path.

    

    
      Provides fine-grained control over how view pages are created using dependency injection.

    

    
      Provides fine-grained control over how view pages are created using dependency injection.

      The created view page.

      The controller context.

      The type of the controller.

    

    
      Sends JavaScript content to the response.

    

    
      Initializes a new instance of the   class.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context within which the result is executed.

      The   parameter is null.

    

    
      Gets or sets the script.

      The script.

    

    
      Specifies whether HTTP GET requests from the client are allowed.

    

    
      HTTP GET requests from the client are allowed.

    

    
      HTTP GET requests from the client are not allowed.

    

    
      Represents a class that is used to send JSON-formatted content to the response.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the content encoding.

      The content encoding.

    

    
      Gets or sets the type of the content.

      The type of the content.

    

    
      Gets or sets the data.

      The data.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context within which the result is executed.

      The   parameter is null.

    

    
      Gets or sets a value that indicates whether HTTP GET requests from the client are allowed.

      A value that indicates whether HTTP GET requests from the client are allowed.

    

    
      Gets or sets the maximum length of data.

      The maximum length of data.

    

    
      Gets or sets the recursion limit.

      The recursion limit.

    

    
      Enables action methods to send and receive JSON-formatted text and to model-bind the JSON text to parameters of action methods.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a JSON value-provider object for the specified controller context.

      A JSON value-provider object for the specified controller context.

      The controller context.

    

    
      Maps a browser request to a LINQ   object.

    

    
      Initializes a new instance of the   class.

    

    
      Binds the model by using the specified controller context and binding context.

      The bound data object. If the model cannot be bound, this method returns null.

      The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.

      The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.

    

    
      Represents an attribute that is used to associate a model type to a model-builder type.

    

    
      Initializes a new instance of the   class.

      The type of the binder.

      The   parameter is null.

    

    
      Gets or sets the type of the binder.

      The type of the binder.

    

    
      Retrieves an instance of the model binder.

      A reference to an object that implements the   interface.

      An error occurred while an instance of the model binder was being created.

    

    
      Represents a class that contains all model binders for the application, listed by binder type.

    

    
      Initializes a new instance of the   class.

    

    
      Adds the specified item to the model binder dictionary.

      The object to add to the   instance.

      The   object is read-only.

    

    
      Adds the specified item to the model binder dictionary using the specified key.

      The key of the element to add.

      The value of the element to add.

      The   object is read-only.

      
          is null.

      An element that has the same key already exists in the   object.

    

    
      Removes all items from the model binder dictionary.

      The   object is read-only.

    

    
      Determines whether the model binder dictionary contains a specified value.

      true if   is found in the model binder dictionary; otherwise, false.

      The object to locate in the   object.

    

    
      Determines whether the model binder dictionary contains an element that has the specified key.

      true if the model binder dictionary contains an element that has the specified key; otherwise, false.

      The key to locate in the   object.

      
          is null.

    

    
      Copies the elements of the model binder dictionary to an array, starting at a specified index.

      The one-dimensional array that is the destination of the elements copied from  . The array must have zero-based indexing.

      The zero-based index in   at which copying starts.

      
          is null.

      
          is less than 0.

      
          is multidimensional.-or-   is equal to or greater than the length of  .-or- The number of elements in the source   object is greater than the available space from   to the end of the destination array. -or- Type   cannot be cast automatically to the type of the destination array.

    

    
      Gets the number of elements in the model binder dictionary.

      The number of elements in the model binder dictionary.

    

    
      Gets or sets the default model binder.

      The default model binder.

    

    
      Retrieves the model binder for the specified type.

      The model binder.

      The type of the model to retrieve.

      The   parameter is null.

    

    
      Retrieves the model binder for the specified type or retrieves the default model binder.

      The model binder.

      The type of the model to retrieve.

      true to retrieve the default model binder.

      The   parameter is null.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets a value that indicates whether the model binder dictionary is read-only.

      true if the model binder dictionary is read-only; otherwise, false.

    

    
      Gets or sets the specified key in an object that implements the   interface.

      The key for the specified item.

      The item key.

    

    
      Gets a collection that contains the keys in the model binder dictionary.

      A collection that contains the keys in the model binder dictionary.

    

    
      Removes the first occurrence of the specified element from the model binder dictionary.

      true if   was successfully removed from the model binder dictionary; otherwise, false. This method also returns false if   is not found in the model binder dictionary.

      The object to remove from the   object.

      The   object is read-only.

    

    
      Removes the element that has the specified key from the model binder dictionary.

      true if the element is successfully removed; otherwise, false. This method also returns false if   was not found in the model binder dictionary.

      The key of the element to remove.

      The   object is read-only.

      
          is null.

    

    
      Returns an enumerator that can be used to iterate through a collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets the value that is associated with the specified key.

      true if the object that implements   contains an element that has the specified key; otherwise, false.

      The key of the value to get.

      When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the   parameter. This parameter is passed uninitialized.

      
          is null.

    

    
      Gets a collection that contains the values in the model binder dictionary.

      A collection that contains the values in the model binder dictionary.

    

    
      Provides a container for model binder providers.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using a list of model binder providers.

      A list of model binder providers.

    

    
      Returns a model binder of the specified type.

      A model binder of the specified type.

      The type of the model binder.

    

    
      Inserts a model binder provider into the   at the specified index.

      The index.

      The model binder provider.

    

    
      Replaces the model binder provider element at the specified index.

      The index.

      The model binder provider.

    

    
      Provides a container for model binder providers.

    

    
      Provides a registration point for model binder providers for applications that do not use dependency injection.

      The model binder provider collection.

    

    
      Provides global access to the model binders for the application.

    

    
      Gets the model binders for the application.

      The model binders for the application.

    

    
      Provides the context in which a model binder functions.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the binding context.

      The binding context.

    

    
      Gets or sets a value that indicates whether the binder should use an empty prefix.

      true if the binder should use an empty prefix; otherwise, false.

    

    
      Gets or sets the model.

      The model.

    

    
      Gets or sets the model metadata.

      The model metadata.

    

    
      Gets or sets the name of the model.

      The name of the model.

    

    
      Gets or sets the state of the model.

      The state of the model.

    

    
      Gets or sets the type of the model.

      The type of the model.

    

    
      Gets or sets the property filter.

      The property filter.

    

    
      Gets the property metadata.

      The property metadata.

    

    
      Gets or sets the value provider.

      The value provider.

    

    
      Represents an error that occurs during model binding.

    

    
      Initializes a new instance of the   class by using the specified exception.

      The exception.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified exception and error message.

      The exception.

      The error message.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified error message.

      The error message.

    

    
      Gets or sets the error message.

      The error message.

    

    
      Gets or sets the exception object.

      The exception object.

    

    
      A collection of   instances.

    

    
      Initializes a new instance of the   class.

    

    
      Adds the specified   object to the model-error collection.

      The exception.

    

    
      Adds the specified error message to the model-error collection.

      The error message.

    

    
      Provides a container for common metadata, for the   class, and for the   class for a data model.

    

    
      Initializes a new instance of the   class.

      The provider.

      The type of the container.

      The model accessor.

      The type of the model.

      The name of the model.

    

    
      Gets a dictionary that contains additional metadata about the model.

      A dictionary that contains additional metadata about the model.

    

    
      Gets or sets the type of the container for the model.

      The type of the container for the model.

    

    
      Gets or sets a value that indicates whether empty strings that are posted back in forms should be converted to null.

      true if empty strings that are posted back in forms should be converted to null; otherwise, false. The default value is true.

    

    
      Gets or sets meta information about the data type. 

      Meta information about the data type. 

    

    
      The default order value, which is 10000.

    

    
      Gets or sets the description of the model.

      The description of the model. The default value is null.

    

    
      Gets or sets the display format string for the model.

      The display format string for the model.

    

    
      Gets or sets the display name of the model.

      The display name of the model.

    

    
      Gets or sets the edit format string of the model.

      The edit format string of the model.

    

    
      Returns the metadata from the   parameter for the model.

      The metadata.

      An expression that identifies the model.

      The view data dictionary.

      The type of the parameter.

      The type of the value.

    

    
      Gets the metadata from the expression parameter for the model.

      The metadata for the model.

      An expression that identifies the model.

      The view data dictionary.

    

    
      Gets the display name for the model.

      The display name for the model.

    

    
      Returns the simple description of the model.

      The simple description of the model.

    

    
      Gets a list of validators for the model.

      A list of validators for the model.

      The controller context.

    

    
      Gets or sets a value that indicates whether the model object should be rendered using associated HTML elements.

      true if the associated HTML elements that contains the model object should be included with the object; otherwise, false.

    

    
      Gets or sets a value that indicates whether the model is a complex type.

      A value that indicates whether the model is considered a complex type by the MVC framework.

    

    
      Gets a value that indicates whether the type is nullable.

      true if the type is nullable; otherwise, false.

    

    
      Gets or sets a value that indicates whether the model is read-only.

      true if the model is read-only; otherwise, false.

    

    
      Gets or sets a value that indicates whether the model is required.

      true if the model is required; otherwise, false.

    

    
      Gets the value of the model.

      The value of the model. For more information about  , see the entry ASP.NET MVC 2 Templates, Part 2: ModelMetadata on Brad Wilson's blog

    

    
      Gets the type of the model.

      The type of the model.

    

    
      Gets or sets the string to display for null values.

      The string to display for null values.

    

    
      Gets or sets a value that represents order of the current metadata.

      The order value of the current metadata.

    

    
      Gets a collection of model metadata objects that describe the properties of the model.

      A collection of model metadata objects that describe the properties of the model.

    

    
      Gets the property name.

      The property name.

    

    
      Gets or sets the provider.

      The provider.

    

    
      Gets or sets a value that indicates whether request validation is enabled.

      true if request validation is enabled; otherwise, false.

    

    
      Gets or sets a short display name.

      The short display name.

    

    
      Gets or sets a value that indicates whether the property should be displayed in read-only views such as list and detail views.

      true if the model should be displayed in read-only views; otherwise, false.

    

    
      Gets or sets a value that indicates whether the model should be displayed in editable views.

      true if the model should be displayed in editable views; otherwise, false.

    

    
      Gets or sets the simple display string for the model.

      The simple display string for the model.

    

    
      Gets or sets a hint that suggests what template to use for this model.

      A hint that suggests what template to use for this model.

    

    
      Gets or sets a value that can be used as a watermark.

      The watermark.

    

    
      Provides an abstract base class for a custom metadata provider.

    

    
      When overridden in a derived class, initializes a new instance of the object that derives from the   class.

    

    
      Gets a   object for each property of a model.

      A   object for each property of a model.

      The container.

      The type of the container.

    

    
      Gets metadata for the specified property.

      A   object for the property.

      The model accessor.

      The type of the container.

      The property to get the metadata model for.

    

    
      Gets metadata for the specified model accessor and model type.

      A   object for the specified model accessor and model type.

      The model accessor.

      The type of the model.

    

    
      Provides a container for the current   instance.

    

    
      Gets or sets the current   object.

      The current   object.

    

    
      Encapsulates the state of model binding to a property of an action-method argument, or to the argument itself.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a   object that contains any errors that occurred during model binding.

      The errors.

    

    
      Returns a   object that encapsulates the value that was being bound during model binding.

      The value.

    

    
      Represents the state of an attempt to bind a posted form to an action method, which includes validation information.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using values that are copied from the specified model-state dictionary.

      The model-state dictionary.

      The  parameter is null.

    

    
      Adds the specified item to the model-state dictionary.

      The object to add to the model-state dictionary.

      The model-state dictionary is read-only.

    

    
      Adds an element that has the specified key and value to the model-state dictionary.

      The key of the element to add.

      The value of the element to add.

      The model-state dictionary is read-only.

      
          is null.

      An element that has the specified key already occurs in the model-state dictionary.

    

    
      Adds the specified model error to the errors collection for the model-state dictionary that is associated with the specified key.

      The key.

      The exception.

    

    
      Adds the specified error message to the errors collection for the model-state dictionary that is associated with the specified key.

      The key.

      The error message.

    

    
      Removes all items from the model-state dictionary.

      The model-state dictionary is read-only.

    

    
      Determines whether the model-state dictionary contains a specific value.

      true if   is found in the model-state dictionary; otherwise, false.

      The object to locate in the model-state dictionary.

    

    
      Determines whether the model-state dictionary contains the specified key.

      true if the model-state dictionary contains the specified key; otherwise, false.

      The key to locate in the model-state dictionary. 

    

    
      Copies the elements of the model-state dictionary to an array, starting at a specified index.

      The one-dimensional array that is the destination of the elements copied from the   object. The array must have zero-based indexing.

      The zero-based index in   at which copying starts.

      
          is null.

      
          is less than 0.

      
          is multidimensional.-or-   is equal to or greater than the length of  .-or- The number of elements in the source collection is greater than the available space from   to the end of the destination  .-or- Type   cannot be cast automatically to the type of the destination  .

    

    
      Gets the number of key/value pairs in the collection.

      The number of key/value pairs in the collection.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets a value that indicates whether the collection is read-only.

      true if the collection is read-only; otherwise, false.

    

    
      Gets a value that indicates whether this instance of the model-state dictionary is valid.

      true if this instance is valid; otherwise, false.

    

    
      Determines whether there are any   objects that are associated with or prefixed with the specified key.

      true if the model-state dictionary contains a value that is associated with the specified key; otherwise, false.

      The key.

      The   parameter is null.

    

    
      Gets or sets the value that is associated with the specified key.

      The model state item.

      The key.

    

    
      Gets a collection that contains the keys in the dictionary.

      A collection that contains the keys of the model-state dictionary.

    

    
      Copies the values from the specified   object into this dictionary, overwriting existing values if keys are the same.

      The dictionary.

    

    
      Removes the first occurrence of the specified object from the model-state dictionary.

      true if   was successfully removed the model-state dictionary; otherwise, false. This method also returns false if   is not found in the model-state dictionary.

      The object to remove from the model-state dictionary.

      The model-state dictionary is read-only.

    

    
      Removes the element that has the specified key from the model-state dictionary.

      true if the element is successfully removed; otherwise, false. This method also returns false if   was not found in the model-state dictionary.

      The key of the element to remove.

      The model-state dictionary is read-only.

      
          is null.

    

    
      Sets the value for the specified key by using the specified value provider dictionary.

      The key.

      The value.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Attempts to gets the value that is associated with the specified key.

      true if the object that implements   contains an element that has the specified key; otherwise, false.

      The key of the value to get.

      When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the   parameter. This parameter is passed uninitialized.

      
          is null.

    

    
      Gets a collection that contains the values in the dictionary.

      A collection that contains the values of the model-state dictionary.

    

    
      Provides a container for a validation result.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the name of the member.

      The name of the member.

    

    
      Gets or sets the validation result message.

      The validation result message.

    

    
      Provides a base class for implementing validation logic.

    

    
      Called from constructors in derived classes to initialize the   class.

      The metadata.

      The controller context.

    

    
      Gets the controller context.

      The controller context.

    

    
      When implemented in a derived class, returns metadata for client validation.

      The metadata for client validation.

    

    
      Returns a composite model validator for the model.

      A composite model validator for the model.

      The metadata.

      The controller context.

    

    
      Gets or sets a value that indicates whether a model property is required.

      true if the model property is required; otherwise, false.

    

    
      Gets the metadata for the model validator.

      The metadata for the model validator.

    

    
      When implemented in a derived class, validates the object.

      A list of validation results.

      The container.

    

    
      Provides a list of validators for a model.

    

    
      When implemented in a derived class, initializes a new instance of the   class.

    

    
      Gets a list of validators.

      A list of validators.

      The metadata.

      The context.

    

    
      Provides a container for a list of validation providers.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using a list of model-validation providers.

      A list of model-validation providers.

    

    
      Returns the list of model validators.

      The list of model validators.

      The model metadata.

      The controller context.

    

    
      Inserts a model-validator provider into the collection.

      The zero-based index at which item should be inserted.

      The model-validator provider object to insert.

    

    
      Replaces the model-validator provider element at the specified index.

      The zero-based index of the model-validator provider element to replace.

      The new value for the model-validator provider element.

    

    
      Provides a container for the current validation provider.

    

    
      Gets the model validator provider collection.

      The model validator provider collection.

    

    
      Represents a list of items that users can select more than one item from.

    

    
      Initializes a new instance of the   class by using the specified items to include in the list.

      The items.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified items to include in the list and the selected values.

      The items.

      The selected values.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the items to include in the list, the data value field, and the data text field.

      The items.

      The data value field.

      The data text field.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the items to include in the list, the data value field, the data text field, and the selected values.

      The items.

      The data value field.

      The data text field.

      The selected values.

      The   parameter is null.

    

    
      Gets or sets the data text field.

      The data text field.

    

    
      Gets or sets the data value field.

      The data value field.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets or sets the items in the list.

      The items in the list.

    

    
      Gets or sets the selected values.

      The selected values.

    

    
      Returns an enumerator can be used to iterate through a collection.

      An enumerator that can be used to iterate through the collection.

    

    
      When implemented in a derived class, provides a metadata class that contains a reference to the implementation of one or more of the filter interfaces, the filter's order, and the filter's scope.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class and specifies the order of filters and whether multiple filters are allowed.

      true to specify that multiple filters of the same type are allowed; otherwise, false.

      The filter order.

    

    
      Gets a value that indicates whether more than one instance of the filter attribute can be specified.

      true if more than one instance of the filter attribute is allowed; otherwise, false.

    

    
      Gets a value that indicates the order in which a filter is applied.

      A value that indicates the order in which a filter is applied.

    

    
      Selects the controller that will handle an HTTP request.

    

    
      Initializes a new instance of the   class.

      The request context.

      The   parameter is null.

    

    
      Adds the version header by using the specified HTTP context.

      The HTTP context.

    

    
      Called by ASP.NET to begin asynchronous request processing.

      The status of the asynchronous call.

      The HTTP context.

      The asynchronous callback method.

      The state of the asynchronous object.

    

    
      Called by ASP.NET to begin asynchronous request processing using the base HTTP context.

      The status of the asynchronous call.

      The HTTP context.

      The asynchronous callback method.

      The state of the asynchronous object.

    

    
      Gets or sets a value that indicates whether the MVC response header is disabled.

      true if the MVC response header is disabled; otherwise, false.

    

    
      Called by ASP.NET when asynchronous request processing has ended.

      The asynchronous result.

    

    
      Gets a value that indicates whether another request can use the   instance.

      true if the   instance is reusable; otherwise, false.

    

    
      Contains the header name of the ASP.NET MVC version.

    

    
      Processes the request by using the specified HTTP request context.

      The HTTP context.

    

    
      Processes the request by using the specified base HTTP request context.

      The HTTP context.

    

    
      Gets the request context.

      The request context.

    

    
      Called by ASP.NET to begin asynchronous request processing using the base HTTP context.

      The status of the asynchronous call.

      The HTTP context.

      The asynchronous callback method.

      The data.

    

    
      Called by ASP.NET when asynchronous request processing has ended.

      The asynchronous result.

    

    
      Gets a value that indicates whether another request can use the   instance.

      true if the   instance is reusable; otherwise, false.

    

    
      Enables processing of HTTP Web requests by a custom HTTP handler that implements the   interface.

      An   object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) that are used to service HTTP requests.

    

    
      Represents an HTML-encoded string that should not be encoded again.

    

    
      Initializes a new instance of the   class.

      The string to create. If no value is assigned, the object is created using an empty-string value.

    

    
      Creates an HTML-encoded string using the specified text value.

      An HTML-encoded string.

      The value of the string to create .

    

    
      Contains an empty HTML string.

    

    
      Determines whether the specified string contains content or is either null or empty.

      true if the string is null or empty; otherwise, false.

      The string.

    

    
      Verifies and processes an HTTP request.

    

    
      Initializes a new instance of the   class.

    

    
      Called by ASP.NET to begin asynchronous request processing.

      The status of the asynchronous call.

      The HTTP context.

      The asynchronous callback method.

      The state.

    

    
      Called by ASP.NET to begin asynchronous request processing.

      The status of the asynchronous call.

      The base HTTP context.

      The asynchronous callback method.

      The state.

    

    
      Called by ASP.NET when asynchronous request processing has ended.

      The asynchronous result.

    

    
      Called by ASP.NET to begin asynchronous request processing.

      The status of the asynchronous call.

      The context.

      The asynchronous callback method.

      An object that contains data.

    

    
      Called by ASP.NET when asynchronous request processing has ended.

      The status of the asynchronous operations.

    

    
      Verifies and processes an HTTP request.

      The HTTP handler.

      The HTTP context.

    

    
      Creates an object that implements the IHttpHandler interface and passes the request context to it.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified factory controller object.

      The controller factory.

    

    
      Returns the HTTP handler by using the specified HTTP context.

      The HTTP handler.

      The request context.

    

    
      Returns the session behavior.

      The session behavior.

      The request context.

    

    
      Returns the HTTP handler by using the specified request context.

      The HTTP handler.

      The request context.

    

    
      Creates instances of   files.

    

    
      Initializes a new instance of the   class. 

    

    
      Creates a Razor host.

      A Razor host.

      The virtual path to the target file.

      The physical path to the target file.

    

    
      Extends a NameValueCollection object so that the collection can be copied to a specified dictionary.

    

    
      Copies the specified collection to the specified destination.

      The collection.

      The destination.

    

    
      Copies the specified collection to the specified destination, and optionally replaces previous entries.

      The collection.

      The destination.

      true to replace previous entries; otherwise, false.

    

    
      Represents the base class for value providers whose values come from a   object.

    

    
      Initializes a new instance of the   class using the specified unvalidated collection.

      A collection that contains the values that are used to initialize the provider.

      A collection that contains the values that are used to initialize the provider. This collection will not be validated.

      An object that contains information about the target culture.

    

    
      Initializes a new instance of the   class.

      A collection that contains the values that are used to initialize the provider.

      An object that contains information about the target culture.

      The   parameter is null.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

      The   parameter is null.

    

    
      Gets the keys using the specified prefix.

      They keys.

      The prefix.

    

    
      Returns a value object using the specified key.

      The value object for the specified key.

      The key of the value object to retrieve.

      The   parameter is null.

    

    
      Returns a value object using the specified key and validation directive.

      The value object for the specified key.

      The key.

      true if validation should be skipped; otherwise, false.

    

    
      Provides a convenience wrapper for the   attribute.

    

    
      Initializes a new instance of the   class.

    

    
      Represents an attribute that is used to indicate that a controller method is not an action method.

    

    
      Initializes a new instance of the   class.

    

    
      Determines whether the attribute marks a method that is not an action method by using the specified controller context.

      true if the attribute marks a valid non-action method; otherwise, false.

      The controller context.

      The method information.

    

    
      Represents an attribute that is used to mark an action method whose output will be cached.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the cache profile name.

      The cache profile name.

    

    
      Gets or sets the child action cache.

      The child action cache.

    

    
      Gets or sets the cache duration, in seconds.

      The cache duration.

    

    
      Returns a value that indicates whether a child action cache is active.

      true if the child action cache is active; otherwise, false.

      The controller context.

    

    
      Gets or sets the location.

      The location.

    

    
      Gets or sets a value that indicates whether to store the cache.

      true if the cache should be stored; otherwise, false.

    

    
      This method is an implementation of   and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code. 

      The filter context.

    

    
      This method is an implementation of   and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.

      The filter context.

    

    
      This method is an implementation of   and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.

      The filter context.

    

    
      This method is an implementation of   and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.

      The filter context.

    

    
      Called before the action result executes.

      The filter context, which encapsulates information for using  .

      The   parameter is null.

    

    
      Gets or sets the SQL dependency.

      The SQL dependency.

    

    
      Gets or sets the vary-by-content encoding.

      The vary-by-content encoding.

    

    
      Gets or sets the vary-by-custom value.

      The vary-by-custom value.

    

    
      Gets or sets the vary-by-header value.

      The vary-by-header value.

    

    
      Gets or sets the vary-by-param value.

      The vary-by-param value.

    

    
      Encapsulates information for binding action-method parameters to a data model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the model binder.

      The model binder.

    

    
      Gets a comma-delimited list of property names for which binding is disabled.

      The exclude list.

    

    
      Gets a comma-delimited list of property names for which binding is enabled.

      The include list.

    

    
      Gets the prefix to use when the MVC framework binds a value to an action parameter or to a model property.

      The prefix.

    

    
      Contains information that describes a parameter.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the action descriptor.

      The action descriptor.

    

    
      Gets the binding information.

      The binding information.

    

    
      Gets the default value of the parameter.

      The default value of the parameter.

    

    
      Returns an array of custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Returns an array of custom attributes that are defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

      The   parameter is null.

    

    
      Indicates whether one or more instances of a custom attribute type are defined for this member.

      true if the custom attribute type is defined for this member; otherwise, false.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The   parameter is null.

    

    
      Gets the name of the parameter.

      The name of the parameter.

    

    
      Gets the type of the parameter.

      The type of the parameter.

    

    
      Represents a base class that is used to send a partial view to the response.

    

    
      Initializes a new instance of the   class.

    

    
      Returns the   object that is used to render the view.

      The view engine result.

      The controller context.

      An error occurred while the method was attempting to find the view.

    

    
      Provides a registration point for ASP.NET Razor pre-application start code.

    

    
      Registers Razor pre-application start code.

    

    
      Represents a value provider for query strings that are contained in a   object.

    

    
      Initializes a new instance of the   class.

      An object that encapsulates information about the current HTTP request.

    

    
      Represents a class that is responsible for creating a new instance of a query-string value-provider object.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a value-provider object for the specified controller context.

      A query-string value-provider object.

      An object that encapsulates information about the current HTTP request.

      The   parameter is null.

    

    
      Provides an adapter for the   attribute.

    

    
      Initializes a new instance of the   class.

      The model metadata.

      The controller context.

      The range attribute.

    

    
      Gets a list of client validation rules for a range check.

      A list of client validation rules for a range check.

    

    
      Represents the class used to create views that have Razor syntax.

    

    
      Initializes a new instance of the   class.

      The controller context.

      The view path.

      The layout or master page.

      A value that indicates whether view start files should be executed before the view.

      The set of extensions that will be used when looking up view start files.

    

    
      Initializes a new instance of the   class using the view page activator.

      The controller context.

      The view path.

      The layout or master page.

      A value that indicates whether view start files should be executed before the view.

      The set of extensions that will be used when looking up view start files.

      The view page activator.

    

    
      Gets the layout or master page.

      The layout or master page.

    

    
      Renders the specified view context by using the specified writer and   instance.

      The view context.

      The writer that is used to render the view to the response.

      The   instance.

    

    
      Gets a value that indicates whether view start files should be executed before the view.

      A value that indicates whether view start files should be executed before the view.

    

    
      Gets or sets the set of file extensions that will be used when looking up view start files.

      The set of file extensions that will be used when looking up view start files.

    

    
      Represents a view engine that is used to render a Web page that uses the ASP.NET Razor syntax.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the view page activator.

      The view page activator.

    

    
      Creates a partial view using the specified controller context and partial path.

      The partial view.

      The controller context.

      The path to the partial view.

    

    
      Creates a view by using the specified controller context and the paths of the view and master view.

      The view.

      The controller context.

      The path to the view.

      The path to the master view.

    

    
      Controls the processing of application actions by redirecting to a specified URI.

    

    
      Initializes a new instance of the   class.

      The target URL.

      The   parameter is null.

    

    
      Initializes a new instance of the   class using the specified URL and permanent-redirection flag.

      The URL.

      A value that indicates whether the redirection should be permanent.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context within which the result is executed.

      The   parameter is null.

    

    
      Gets a value that indicates whether the redirection should be permanent.

      true if the redirection should be permanent; otherwise, false.

    

    
      Gets or sets the target URL.

      The target URL.

    

    
      Represents a result that performs a redirection by using the specified route values dictionary.

    

    
      Initializes a new instance of the   class by using the specified route name and route values.

      The name of the route.

      The route values.

    

    
      Initializes a new instance of the   class by using the specified route name, route values, and permanent-redirection flag.

      The name of the route.

      The route values.

      A value that indicates whether the redirection should be permanent.

    

    
      Initializes a new instance of the   class by using the specified route values.

      The route values.

    

    
      Enables processing of the result of an action method by a custom type that inherits from the   class.

      The context within which the result is executed.

      The   parameter is null.

    

    
      Gets a value that indicates whether the redirection should be permanent.

      true if the redirection should be permanent; otherwise, false.

    

    
      Gets or sets the name of the route.

      The name of the route.

    

    
      Gets or sets the route values.

      The route values.

    

    
      Contains information that describes a reflected action method.

    

    
      Initializes a new instance of the   class.

      The action-method information.

      The name of the action.

      The controller descriptor.

      Either the   or   parameter is null.

      The   parameter is null or empty.

    

    
      Gets the name of the action.

      The name of the action.

    

    
      Gets the controller descriptor.

      The controller descriptor.

    

    
      Executes the specified controller context by using the specified action-method parameters.

      The action return value.

      The controller context.

      The parameters.

      The   or   parameter is null.

    

    
      Returns an array of custom attributes defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Returns an array of custom attributes defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Gets the filter attributes.

      The filter attributes.

      true to use the cache, otherwise false.

    

    
      Retrieves the parameters of the action method.

      The parameters of the action method.

    

    
      Retrieves the action selectors.

      The action selectors.

    

    
      Indicates whether one or more instances of a custom attribute type are defined for this member.

      true if the custom attribute type is defined for this member; otherwise, false.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Gets or sets the action-method information.

      The action-method information.

    

    
      Gets the unique ID for the reflected action descriptor using lazy initialization.

      The unique ID.

    

    
      Contains information that describes a reflected controller.

    

    
      Initializes a new instance of the   class.

      The type of the controller.

      The   parameter is null.

    

    
      Gets the type of the controller.

      The type of the controller.

    

    
      Finds the specified action for the specified controller context.

      The information about the action.

      The controller context.

      The name of the action.

      The   parameter is null.

      The   parameter is null or empty.

    

    
      Returns the list of actions for the controller.

      A list of action descriptors for the controller.

    

    
      Returns an array of custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Returns an array of custom attributes that are defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Gets the filter attributes.

      The filter attributes.

      true to use the cache, otherwise false.

    

    
      Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.

      true if the custom attribute type is defined for this member; otherwise, false.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Contains information that describes a reflected action-method parameter.

    

    
      Initializes a new instance of the   class.

      The parameter information.

      The action descriptor.

      The   or   parameter is null.

    

    
      Gets the action descriptor.

      The action descriptor.

    

    
      Gets the binding information.

      The binding information.

    

    
      Gets the default value of the reflected parameter.

      The default value of the reflected parameter.

    

    
      Returns an array of custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Returns an array of custom attributes that are defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

      The custom attribute type cannot be loaded.

      There is more than one attribute of type   defined for this member.

    

    
      Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.

      true if the custom attribute type is defined for this member; otherwise, false.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Gets or sets the parameter information.

      The parameter information.

    

    
      Gets the name of the parameter.

      The name of the parameter.

    

    
      Gets the type of the parameter.

      The type of the parameter.

    

    
      Provides an adapter for the   attribute.

    

    
      Initializes a new instance of the   class.

      The model metadata.

      The controller context.

      The regular expression attribute.

    

    
      Gets a list of regular-expression client validation rules.

      A list of regular-expression client validation rules.

    

    
      Provides an attribute that uses the jQuery validation plug-in remote validator. 

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified route name.

      The route name.

    

    
      Initializes a new instance of the   class using the specified action-method name and controller name.

      The name of the action method.

      The name of the controller.

    

    
      Initializes a new instance of the   class using the specified action-method name, controller name, and area name.

      The name of the action method.

      The name of the controller.

      The name of the area.

    

    
      Gets or sets the additional fields that are required for validation.

      The additional fields that are required for validation.

    

    
      Returns a comma-delimited string of validation field names.

      A comma-delimited string of validation field names.

      The name of the validation property.

    

    
      Formats the error message that is displayed when validation fails.

      A formatted error message.

      A name to display with the error message.

    

    
      Formats the property for client validation by prepending an asterisk (*) and a dot.

      The string "*." Is prepended to the property.

      The property.

    

    
      Gets a list of client validation rules for the property.

      A list of remote client validation rules for the property.

      The model metadata.

      The controller context.

    

    
      Gets the URL for the remote validation call.

      The URL for the remote validation call.

      The controller context.

    

    
      Gets or sets the HTTP method used for remote validation.

      The HTTP method used for remote validation. The default value is "Get".

    

    
      This method always returns true.

      true

      The validation target.

    

    
      Gets the route data dictionary.

      The route data dictionary.

    

    
      Gets or sets the route name.

      The route name.

    

    
      Gets the route collection from the route table.

      The route collection from the route table.

    

    
      Provides an adapter for the   attribute.

    

    
      Initializes a new instance of the   class.

      The model metadata.

      The controller context.

      The required attribute.

    

    
      Gets a list of required-value client validation rules.

      A list of required-value client validation rules.

    

    
      Represents an attribute that forces an unsecured HTTP request to be re-sent over HTTPS.

    

    
      Initializes a new instance of the   class.

    

    
      Handles unsecured HTTP requests that are sent to the action method.

      An object that encapsulates information that is required in order to use the   attribute.

      The HTTP request contains an invalid transfer method override. All GET requests are considered invalid.

    

    
      Determines whether a request is secured (HTTPS) and, if it is not, calls the   method.

      An object that encapsulates information that is required in order to use the   attribute.

      The   parameter is null.

    

    
      Provides the context for the   method of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class.

      The controller context.

      The result object.

      true to cancel execution; otherwise, false.

      The exception object.

      The   parameter is null.

    

    
      Gets or sets a value that indicates whether this   instance is canceled.

      true if the instance is canceled; otherwise, false.

    

    
      Gets or sets the exception object.

      The exception object.

    

    
      Gets or sets a value that indicates whether the exception has been handled.

      true if the exception has been handled; otherwise, false.

    

    
      Gets or sets the action result.

      The action result.

    

    
      Provides the context for the   method of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified controller context and action result.

      The controller context.

      The action result.

      The   parameter is null.

    

    
      Gets or sets a value that indicates whether this   value is "cancel".

      true if the value is "cancel"; otherwise, false.

    

    
      Gets or sets the action result.

      The action result.

    

    
      Extends a   object for MVC routing.

    

    
      Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.

      An object that contains information about the route and virtual path that are the result of generating a URL in the current area.

      An object that contains the routes for the applications.

      An object that encapsulates information about the requested route.

      The name of the route to use when information about the URL path is retrieved.

      An object that contains the parameters for a route.

    

    
      Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.

      An object that contains information about the route and virtual path that are the result of generating a URL in the current area.

      An object that contains the routes for the applications.

      An object that encapsulates information about the requested route.

      An object that contains the parameters for a route.

    

    
      Ignores the specified URL route for the given list of available routes.

      A collection of routes for the application.

      The URL pattern for the route to ignore.

      The   or   parameter is null.

    

    
      Ignores the specified URL route for the given list of the available routes and a list of constraints.

      A collection of routes for the application.

      The URL pattern for the route to ignore.

      A set of expressions that specify values for the   parameter.

      The   or   parameter is null.

    

    
      Maps the specified URL route.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The URL pattern for the route.

      The   or   parameter is null.

    

    
      Maps the specified URL route and sets default route values.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The URL pattern for the route.

      An object that contains default route values.

      The   or   parameter is null.

    

    
      Maps the specified URL route and sets default route values and constraints.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The URL pattern for the route.

      An object that contains default route values.

      A set of expressions that specify values for the   parameter.

      The   or   parameter is null.

    

    
      Maps the specified URL route and sets default route values, constraints, and namespaces.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The URL pattern for the route.

      An object that contains default route values.

      A set of expressions that specify values for the   parameter.

      A set of namespaces for the application.

      The   or   parameter is null.

    

    
      Maps the specified URL route and sets default route values and namespaces.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The URL pattern for the route.

      An object that contains default route values.

      A set of namespaces for the application.

      The   or   parameter is null.

    

    
      Maps the specified URL route and sets the namespaces.

      A reference to the mapped route.

      A collection of routes for the application.

      The name of the route to map.

      The URL pattern for the route.

      A set of namespaces for the application.

      The   or   parameter is null.

    

    
      Represents a value provider for route data that is contained in an object that implements the   interface.

    

    
      Initializes a new instance of the   class.

      An object that contain information about the HTTP request.

    

    
      Represents a factory for creating route-data value provider objects.

    

    
      Initialized a new instance of the   class.

    

    
      Returns a value-provider object for the specified controller context.

      A value-provider object.

      An object that encapsulates information about the current HTTP request.

      The   parameter is null.

    

    
      Represents a list that lets users select one item.

    

    
      Initializes a new instance of the   class by using the specified items for the list.

      The items.

    

    
      Initializes a new instance of the   class by using the specified items for the list and a selected value.

      The items.

      The selected value.

    

    
      Initializes a new instance of the   class by using the specified items for the list, the data value field, and the data text field.

      The items.

      The data value field.

      The data text field.

    

    
      Initializes a new instance of the   class by using the specified items for the list, the data value field, the data text field, and a selected value.

      The items.

      The data value field.

      The data text field.

      The selected value.

    

    
      Gets the list value that was selected by the user.

      The selected value.

    

    
      Represents the selected item in an instance of the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets a value that indicates whether this   is selected.

      true if the item is selected; otherwise, false.

    

    
      Gets or sets the text of the selected item.

      The text.

    

    
      Gets or sets the value of the selected item.

      The value.

    

    
      Specifies the session state of the controller.

    

    
      Initializes a new instance of the   class

      The type of the session state.

    

    
      Get the session state behavior for the controller.

      The session state behavior for the controller.

    

    
      Provides session-state data to the current   object.

    

    
      Initializes a new instance of the   class.

    

    
      Loads the temporary data by using the specified controller context.

      The temporary data.

      The controller context.

      An error occurred when the session context was being retrieved.

    

    
      Saves the specified values in the temporary data dictionary by using the specified controller context.

      The controller context.

      The values.

      An error occurred the session context was being retrieved.

    

    
      Provides an adapter for the   attribute.

    

    
      Initializes a new instance of the   class.

      The model metadata.

      The controller context.

      The string-length attribute.

    

    
      Gets a list of string-length client validation rules.

      A list of string-length client validation rules.

    

    
      Represents a set of data that persists only from one request to the next.

    

    
      Initializes a new instance of the   class.

    

    
      Adds an element that has the specified key and value to the   object.

      The key of the element to add.

      The value of the element to add.

      The   object is read-only.

      
          is null.

      An element that has the same key already exists in the   object.

    

    
      Removes all items from the   instance.

      The   object is read-only.

    

    
      Determines whether the   instance contains an element that has the specified key.

      true if the   instance contains an element that has the specified key; otherwise, false.

      The key to locate in the   instance.

      
          is null.

    

    
      Determines whether the dictionary contains the specified value.

      true if the dictionary contains the specified value; otherwise, false.

      The value.

    

    
      Gets the number of elements in the   object.

      The number of elements in the   object.

    

    
      Gets the enumerator.

      The enumerator.

    

    
      Gets or sets the object that has the specified key.

      The object that has the specified key.

      The key to access.

    

    
      Marks all keys in the dictionary for retention.

    

    
      Marks the specified key in the dictionary for retention.

      The key to retain in the dictionary.

    

    
      Gets an   object that contains the keys of elements in the   object.

      The keys of the elements in the   object.

    

    
      Loads the specified controller context by using the specified data provider.

      The controller context.

      The temporary data provider.

    

    
      Returns an object that contains the element that is associated with the specified key, without marking the key for deletion.

      An object that contains the element that is associated with the specified key.

      The key of the element to return.

    

    
      Removes the element that has the specified key from the   object.

      true if the element was removed successfully; otherwise, false. This method also returns false if   was not found in the  . instance.

      The key of the element to remove.

      The   object is read-only.

      
          is null.

    

    
      Saves the specified controller context by using the specified data provider.

      The controller context.

      The temporary data provider.

    

    
      Adds the specified key/value pair to the dictionary.

      The key/value pair.

    

    
      Determines whether a sequence contains a specified element by using the default equality comparer.

      true if the dictionary contains the specified key/value pair; otherwise, false.

      The key/value pair to search for.

    

    
      Copies a key/value pair to the specified array at the specified index.

      The target array.

      The index.

    

    
      Gets a value that indicates whether the dictionary is read-only.

      true if the dictionary is read-only; otherwise, false.

    

    
      Deletes the specified key/value pair from the dictionary.

      true if the key/value pair was removed successfully; otherwise, false.

      The key/value pair.

    

    
      Returns an enumerator that can be used to iterate through a collection.

      An   object that can be used to iterate through the collection.

    

    
      Gets the value of the element that has the specified key.

      true if the object that implements   contains an element that has the specified key; otherwise, false.

      The key of the value to get.

      When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the   parameter. This parameter is passed uninitialized.

      
          is null.

    

    
      Gets the   object that contains the values in the   object.

      The values of the elements in the object that implements  .

    

    
      Encapsulates information about the current template context.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the formatted model value.

      The formatted model value.

    

    
      Retrieves the full DOM ID of a field using the specified HTML name attribute.

      The full DOM ID.

      The value of the HTML name attribute.

    

    
      Retrieves the fully qualified name (including a prefix) for a field using the specified HTML name attribute.

      The prefixed name of the field.

      The value of the HTML name attribute.

    

    
      Gets or sets the HTML field prefix.

      The HTML field prefix.

    

    
      Contains the number of objects that were visited by the user.

      The number of objects.

    

    
      Determines whether the template has been visited by the user.

      true if the template has been visited by the user; otherwise, false.

      An object that encapsulates information that describes the model.

    

    
      Contains methods to build URLs for ASP.NET MVC within an application.

    

    
      Initializes a new instance of the   class using the specified request context.

      An object that contains information about the current request and about the route that it matched.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified request context and route collection.

      An object that contains information about the current request and about the route that it matched.

      A collection of routes.

      The   or the   parameter is null.

    

    
      Generates a fully qualified URL to an action method by using the specified action name.

      The fully qualified URL to an action method.

      The name of the action method.

    

    
      Generates a fully qualified URL to an action method by using the specified action name and route values.

      The fully qualified URL to an action method.

      The name of the action method.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

    

    
      Generates a fully qualified URL to an action method by using the specified action name and controller name.

      The fully qualified URL to an action method.

      The name of the action method.

      The name of the controller.

    

    
      Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.

      The fully qualified URL to an action method.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

    

    
      Generates a fully qualified URL to an action method by using the specified action name, controller name, route values, and protocol to use.

      The fully qualified URL to an action method.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      The protocol for the URL, such as "http" or "https".

    

    
      Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.

      The fully qualified URL to an action method.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

    

    
      Generates a fully qualified URL for an action method by using the specified action name, controller name, route values, protocol to use, and host name.

      The fully qualified URL to an action method.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

    

    
      Generates a fully qualified URL to an action method for the specified action name and route values.

      The fully qualified URL to an action method.

      The name of the action method.

      An object that contains the parameters for a route.

    

    
      Converts a virtual (relative) path to an application absolute path.

      The application absolute path.

      The virtual path of the content.

    

    
      Encodes special characters in a URL string into character-entity equivalents.

      An encoded URL string.

      The text to encode.

    

    
      Returns a string that contains a content URL.

      A string that contains a content URL.

      The content path.

      The HTTP context.

    

    
      Returns a string that contains a URL.

      A string that contains a URL.

      The route name.

      The action name.

      The controller name.

      The HTTP protocol.

      The host name.

      The fragment.

      The route values.

      The route collection.

      The request context.

      true to include implicit MVC values; otherwise false.

    

    
      Returns a string that contains a URL.

      A string that contains a URL.

      The route name.

      The action name.

      The controller name.

      The route values.

      The route collection.

      The request context.

      true to include implicit MVC values; otherwise. false.

    

    
      Generates a fully qualified URL for the specified route values.

      A fully qualified URL for the specified route values.

      The route name.

      The route values.

    

    
      Generates a fully qualified URL for the specified route values.

      A fully qualified URL for the specified route values.

      The route name.

      The route values.

    

    
      Returns a value that indicates whether the URL is local.

      true if the URL is local; otherwise, false.

      The URL.

    

    
      Gets information about an HTTP request that matches a defined route.

      The request context.

    

    
      Gets a collection that contains the routes that are registered for the application.

      The route collection.

    

    
      Generates a fully qualified URL for the specified route values.

      The fully qualified URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

    

    
      Generates a fully qualified URL for the specified route name.

      The fully qualified URL.

      The name of the route that is used to generate the URL.

    

    
      Generates a fully qualified URL for the specified route values by using a route name.

      The fully qualified URL.

      The name of the route that is used to generate the URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

    

    
      Generates a fully qualified URL for the specified route values by using a route name and the protocol to use.

      The fully qualified URL.

      The name of the route that is used to generate the URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      The protocol for the URL, such as "http" or "https".

    

    
      Generates a fully qualified URL for the specified route values by using a route name.

      The fully qualified URL.

      The name of the route that is used to generate the URL.

      An object that contains the parameters for a route.

    

    
      Generates a fully qualified URL for the specified route values by using the specified route name, protocol to use, and host name.

      The fully qualified URL.

      The name of the route that is used to generate the URL.

      An object that contains the parameters for a route.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

    

    
      Generates a fully qualified URL for the specified route values.

      The fully qualified URL.

      An object that contains the parameters for a route.

    

    
      Represents an optional parameter that is used by the   class during routing.

    

    
      Contains the read-only value for the optional parameter.

    

    
      Returns an empty string. This method supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.

      An empty string.

    

    
      Provides an object adapter that can be validated.

    

    
      Initializes a new instance of the   class.

      The model metadata.

      The controller context.

    

    
      Validates the specified object.

      A list of validation results.

      The container.

    

    
      Represents an attribute that is used to prevent forgery of a request.

    

    
      Initializes a new instance of the   class.

    

    
      Called when authorization is required.

      The filter context.

      The   parameter is null.

    

    
      Gets or sets the salt string.

      The salt string.

    

    
      Represents an attribute that is used to mark action methods whose input must be validated.

    

    
      Initializes a new instance of the   class.

      true to enable validation.

    

    
      Gets or sets a value that indicates whether to enable validation.

      true if validation is enabled; otherwise, false.

    

    
      Called when authorization is required.

      The filter context.

      The   parameter is null.

    

    
      Represents the collection of value-provider objects for the application.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class and registers the specified value providers.

      The list of value providers to register.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

    

    
      Gets the keys using the specified prefix.

      They keys.

      The prefix.

    

    
      Returns a value object using the specified key.

      The value object for the specified key.

      The key of the value object to retrieve.

    

    
      Returns a value object using the specified key and skip-validation parameter.

      The value object for the specified key.

      The key of the value object to retrieve.

      true to specify that validation should be skipped; otherwise, false.

    

    
      Inserts the specified value-provider object into the collection at the specified index location.

      The zero-based index location at which to insert the value provider into the collection.

      The value-provider object to insert.

      The   parameter is null.

    

    
      Replaces the value provider at the specified index location with a new value provider.

      The zero-based index of the element to replace.

      The new value for the element at the specified index.

      The   parameter is null.

    

    
      Represents a dictionary of value providers for the application.

    

    
      Initializes a new instance of the   class.

      The controller context.

    

    
      Adds the specified item to the collection of value providers.

      The object to add to the   object.

      The   object is read-only.

    

    
      Adds an element that has the specified key and value to the collection of value providers.

      The key of the element to add.

      The value of the element to add.

      The   object is read-only.

      
          is null.

      An element that has the specified key already exists in the   object.

    

    
      Adds an element that has the specified key and value to the collection of value providers.

      The key of the element to add.

      The value of the element to add.

      The   object is read-only.

      
          is null.

      An element that has the specified key already exists in the   object.

    

    
      Removes all items from the collection of value providers.

      The   object is read-only.

    

    
      Determines whether the collection of value providers contains the specified item.

      true if   is found in the collection of value providers; otherwise, false.

      The object to locate in the   instance.

    

    
      Determines whether the collection of value providers contains an element that has the specified key.

      true if the collection of value providers contains an element that has the key; otherwise, false.

      The key of the element to find in the   instance.

      
          is null.

    

    
      Gets or sets the controller context.

      The controller context.

    

    
      Copies the elements of the collection to an array, starting at the specified index.

      The one-dimensional array that is the destination of the elements copied from the   object. The array must have zero-based indexing.

      The zero-based index in   at which copying starts.

      
          is null.

      
          is less than 0.

      
          is multidimensional.-or-  is equal to or greater than the length of  .-or-The number of elements in the source collection is greater than the available space from   to the end of the destination  .-or-Type   cannot be cast automatically to the type of the destination array.

    

    
      Gets the number of elements in the collection.

      The number of elements in the collection.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets a value that indicates whether the collection is read-only.

      true if the collection is read-only; otherwise, false.

    

    
      Gets or sets the   object that has the specified key.

      The   object.

      The key.

    

    
      Gets a collection that contains the keys of the   instance.

      A collection that contains the keys of the object that implements the   interface.

    

    
      Removes the first occurrence of the specified item from the collection of value providers.

      true if   was successfully removed from the collection; otherwise, false. This method also returns false if   is not found in the collection.

      The object to remove from the   instance.

      The   object is read-only.

    

    
      Removes the element that has the specified key from the collection of value providers.

      true if the element was successfully removed; otherwise, false. This method also returns false if   was not found in the collection.

      The key of the element to remove.

      The   object is read-only.

      
          is null.

    

    
      Returns an enumerator that can be used to iterate through a collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Determines whether the collection contains the specified prefix.

      true if the collection contains the specified prefix; otherwise, false.

      The prefix to search for.

    

    
      Returns a value object using the specified key.

      The value object for the specified key.

      The key of the value object to return.

    

    
      Gets the value of the element that has the specified key.

      true if the object that implements   contains an element that has the specified key; otherwise, false.

      The key of the element to get.

      When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the   parameter. This parameter is passed uninitialized.

      
          is null.

    

    
      Gets a collection that contains the values in the   object.

      A collection of the values in the object that implements the   interface.

    

    
      Represents a container for value-provider factory objects.

    

    
      Gets the collection of value-provider factories for the application.

      The collection of value-provider factory objects.

    

    
      Represents a factory for creating value-provider objects.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a value-provider object for the specified controller context.

      A value-provider object.

      An object that encapsulates information about the current HTTP request.

    

    
      Represents the collection of value-provider factories for the application.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified list of value-provider factories.

      A list of value-provider factories to initialize the collection with.

    

    
      Returns the value-provider factory for the specified controller context.

      The value-provider factory object for the specified controller context.

      An object that encapsulates information about the current HTTP request.

    

    
      Inserts the specified value-provider factory object at the specified index location.

      The zero-based index location at which to insert the value provider into the collection.

      The value-provider factory object to insert.

      The   parameter is null.

    

    
      Sets the specified value-provider factory object at the given index location.

      The zero-based index location at which to insert the value provider into the collection.

      The value-provider factory object to set.

      The   parameter is null.

    

    
      Represents the result of binding a value (such as from a form post or query string) to an action-method argument property, or to the argument itself.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified raw value, attempted value, and culture information.

      The raw value.

      The attempted value.

      The culture.

    

    
      Gets or sets the raw value that is converted to a string for display.

      The raw value.

    

    
      Converts the value that is encapsulated by this result to the specified type.

      The converted value.

      The target type.

      The   parameter is null.

    

    
      Converts the value that is encapsulated by this result to the specified type by using the specified culture information.

      The converted value.

      The target type.

      The culture to use in the conversion.

      The   parameter is null.

    

    
      Gets or sets the culture.

      The culture.

    

    
      Gets or set the raw value that is supplied by the value provider.

      The raw value.

    

    
      Encapsulates information that is related to rendering a view.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified controller context, view, view data dictionary, temporary data dictionary, and text writer.

      Encapsulates information about the HTTP request.

      The view to render.

      The dictionary that contains the data that is required in order to render the view.

      The dictionary that contains temporary data for the view.

      The text writer object that is used to write HTML output.

      One of the parameters is null.

    

    
      Gets or sets a value that indicates whether client-side validation is enabled.

      true if client-side validation is enabled; otherwise, false.

    

    
      Gets or sets an object that encapsulates information that is required in order to validate and process the input data from an HTML form.

      An object that encapsulates information that is required in order to validate and process the input data from an HTML form.

    

    
      Writes the client validation information to the HTTP response.

    

    
      Gets data that is associated with this request and that is available for only one request.

      The temporary data.

    

    
      Gets or sets a value that indicates whether unobtrusive JavaScript is enabled.

      true if unobtrusive JavaScript is enabled; otherwise, false.

    

    
      Gets an object that implements the   interface to render in the browser.

      The view.

    

    
      Gets the dynamic view data dictionary.

      The dynamic view data dictionary.

    

    
      Gets the view data that is passed to the view.

      The view data.

    

    
      Gets or sets the text writer object that is used to write HTML output.

      The object that is used to write the HTML output.

    

    
      Represents a container that is used to pass data between a controller and a view.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified model.

      The model.

    

    
      Initializes a new instance of the   class by using the specified dictionary.

      The dictionary.

      The   parameter is null.

    

    
      Adds the specified item to the collection.

      The object to add to the collection.

      The collection is read-only.

    

    
      Adds an element to the collection using the specified key and value .

      The key of the element to add.

      The value of the element to add.

      The   object is read-only.

      
          is null.

      An element with the same key already exists in the   object.

    

    
      Removes all items from the collection.

      The   object is read-only.

    

    
      Determines whether the collection contains the specified item.

      true if   is found in the collection; otherwise, false.

      The object to locate in the collection.

    

    
      Determines whether the collection contains an element that has the specified key.

      true if the collection contains an element that has the specified key; otherwise, false.

      The key of the element to locate in the collection.

      
          is null.

    

    
      Copies the elements of the collection to an array, starting at a particular index.

      The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.

      The zero-based index in   at which copying begins.

      
          is null.

      
          is less than 0.

      
          is multidimensional.-or-   is equal to or greater than the length of  .-or- The number of elements in the source collection is greater than the available space from   to the end of the destination  .-or- Type   cannot be cast automatically to the type of the destination  .

    

    
      Gets the number of elements in the collection.

      The number of elements in the collection.

    

    
      Evaluates the specified expression.

      The results of the evaluation.

      The expression.

      The   parameter is null or empty.

    

    
      Evaluates the specified expression by using the specified format.

      The results of the evaluation.

      The expression.

      The format.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Returns information about the view data as defined by the   parameter.

      An object that contains the view data information that is defined by the   parameter.

      A set of key/value pairs that define the view-data information to return.

      The   parameter is either null or empty.

    

    
      Gets a value that indicates whether the collection is read-only.

      true if the collection is read-only; otherwise, false.

    

    
      Gets or sets the item that is associated with the specified key.

      The value of the selected item.

      The key.

    

    
      Gets a collection that contains the keys of this dictionary.

      A collection that contains the keys of the object that implements  .

    

    
      Gets or sets the model that is associated with the view data.

      The model that is associated with the view data.

    

    
      Gets or sets information about the model.

      Information about the model.

    

    
      Gets the state of the model.

      The state of the model.

    

    
      Removes the first occurrence of a specified object from the collection.

      true if   was successfully removed from the collection; otherwise, false. This method also returns false if   is not found in the collection.

      The object to remove from the collection.

      The collection is read-only.

    

    
      Removes the element from the collection using the specified key.

      true if the element is successfully removed; otherwise, false. This method also returns false if   was not found in the original collection.

      The key of the element to remove.

      The collection is read-only.

      
          is null.

    

    
      Sets the data model to use for the view.

      The data model to use for the view.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets or sets an object that encapsulates information about the current template context.

      An object that contains information about the current template.

    

    
      Attempts to retrieve the value that is associated with the specified key.

      true if the collection contains an element with the specified key; otherwise, false.

      The key of the value to get.

      When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the   parameter. This parameter is passed uninitialized.

      
          is null.

    

    
      Gets a collection that contains the values in this dictionary.

      A collection that contains the values of the object that implements  .

    

    
      Represents a container that is used to pass strongly typed data between a controller and a view.

      The type of the model.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified view data dictionary.

      An existing view data dictionary to copy into this instance.

    

    
      Initializes a new instance of the   class by using the specified model.

      The data model to use for the view.

    

    
      Gets or sets the model.

      A reference to the data model.

    

    
      Gets or sets information about the model.

      Information about the model.

    

    
      Sets the data model to use for the view.

      The data model to use for the view.

      An error occurred while the model was being set.

    

    
      Encapsulates information about the current template content that is used to develop templates and about HTML helpers that interact with templates.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the T:System.Web.Mvc.ViewDataInfo class and associates a delegate for accessing the view data information.

      A delegate that defines how the view data information is accessed.

    

    
      Gets or sets the object that contains the values to be displayed by the template.

      The object that contains the values to be displayed by the template.

    

    
      Gets or sets the description of the property to be displayed by the template.

      The description of the property to be displayed by the template.

    

    
      Gets or sets the current value to be displayed by the template.

      The current value to be displayed by the template.

    

    
      Represents a collection of view engines that are available to the application.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using the specified list of view engines.

      The list that is wrapped by the new collection.

      
          is null.

    

    
      Finds the specified partial view by using the specified controller context.

      The partial view.

      The controller context.

      The name of the partial view.

      The   parameter is null.

      The   parameter is null or empty.

    

    
      Finds the specified view by using the specified controller context and master view.

      The view.

      The controller context.

      The name of the view.

      The name of the master view.

      The   parameter is null.

      The   parameter is null or empty.

    

    
      Inserts an element into the collection at the specified index.

      The zero-based index at which   should be inserted.

      The object to insert. 

      
          is less than zero.-or-  is greater than the number of items in the collection.

      The   parameter is null.

    

    
      Replaces the element at the specified index.

      The zero-based index of the element to replace.

      The new value for the element at the specified index. 

      
          is less than zero.-or-  is greater than the number of items in the collection.

      The   parameter is null.

    

    
      Represents the result of locating a view engine.

    

    
      Initializes a new instance of the   class by using the specified searched locations.

      The searched locations.

      The   parameter is null.

    

    
      Initializes a new instance of the   class by using the specified view and view engine.

      The view.

      The view engine.

      The  or   parameter is null.

    

    
      Gets or sets the searched locations.

      The searched locations.

    

    
      Gets or sets the view.

      The view.

    

    
      Gets or sets the view engine.

      The view engine.

    

    
      Represents a collection of view engines that are available to the application.

    

    
      Gets the view engines.

      The view engines.

    

    
      Represents the information that is needed to build a master view page.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the AJAX script for the master page.

      The AJAX script for the master page.

    

    
      Gets the HTML for the master page.

      The HTML for the master page.

    

    
      Gets the model.

      The model.

    

    
      Gets the temporary data.

      The temporary data.

    

    
      Gets the URL.

      The URL.

    

    
      Gets the dynamic view-bag dictionary.

      The dynamic view-bag dictionary.

    

    
      Gets the view context.

      The view context.

    

    
      Gets the view data.

      The view data.

    

    
      Gets the writer that is used to render the master page.

      The writer that is used to render the master page.

    

    
      Represents the information that is required in order to build a strongly typed master view page.

      The type of the model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the AJAX script for the master page.

      The AJAX script for the master page.

    

    
      Gets the HTML for the master page.

      The HTML for the master page.

    

    
      Gets the model.

      A reference to the data model.

    

    
      Gets the view data.

      The view data.

    

    
      Represents the properties and methods that are needed to render a view as a Web Forms page.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the   object that is used to render HTML in Ajax scenarios.

      The Ajax helper object that is associated with the view.

    

    
      Gets or sets the   object that is used to render HTML elements.

      The HTML helper object that is associated with the view.

    

    
      Initializes the  ,  , and   properties.

    

    
      Gets or sets the path of the master view.

      The path of the master view.

    

    
      Gets the Model property of the associated   object.

      The Model property of the associated   object.

    

    
      Raises the   event at the beginning of page initialization.

      The event data.

    

    
      Enables processing of the specified HTTP request by the ASP.NET MVC framework.

      An object that encapsulates HTTP-specific information about the current HTTP request.

    

    
      Initializes the   object that receives the page content to be rendered.

      The object that receives the page content.

    

    
      Renders the view page to the response using the specified view context.

      An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.

    

    
      Sets the text writer that is used to render the view to the response.

      The writer that is used to render the view to the response.

    

    
      Sets the view data dictionary for the associated view.

      A dictionary of data to pass to the view.

    

    
      Gets the temporary data to pass to the view.

      The temporary data to pass to the view.

    

    
      Gets or sets the URL of the rendered page.

      The URL of the rendered page.

    

    
      Gets the view bag.

      The view bag.

    

    
      Gets or sets the information that is used to render the view.

      The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.

    

    
      Gets or sets a dictionary that contains data to pass between the controller and the view.

      A dictionary that contains data to pass between the controller and the view.

    

    
      Gets the text writer that is used to render the view to the response.

      The text writer that is used to render the view to the response.

    

    
      Represents the information that is required in order to render a strongly typed view as a Web Forms page.

      The type of the model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the   object that supports rendering HTML in Ajax scenarios.

      The Ajax helper object that is associated with the view.

    

    
      Gets or sets the   object that provides support for rendering elements.

      The HTML helper object that is associated with the view.

    

    
      Instantiates and initializes the   and   properties.

    

    
      Gets the   property of the associated   object.

      A reference to the data model.

    

    
      Sets the view data dictionary for the associated view.

      A dictionary of data to pass to the view.

    

    
      Gets or sets a dictionary that contains data to pass between the controller and the view.

      A dictionary that contains data to pass between the controller and the view.

    

    
      Represents a class that is used to render a view by using an   instance that is returned by an   object.

    

    
      Initializes a new instance of the   class.

    

    
      Searches the registered view engines and returns the object that is used to render the view.

      The object that is used to render the view.

      The controller context.

      An error occurred while the method was searching for the view.

    

    
      Gets the name of the master view (such as a master page or template) to use when the view is rendered.

      The name of the master view.

    

    
      Represents a base class that is used to provide the model to the view and then render the view to the response.

    

    
      Initializes a new instance of the   class.

    

    
      When called by the action invoker, renders the view to the response.

      The context that the result is executed in.

      The   parameter is null.

    

    
      Returns the   object that is used to render the view.

      The view engine.

      The context.

    

    
      Gets the view data model.

      The view data model.

    

    
      Gets or sets the   object for this result.

      The temporary data.

    

    
      Gets or sets the   object that is rendered to the response.

      The view.

    

    
      Gets the view bag.

      The view bag.

    

    
      Gets or sets the view data   object for this result.

      The view data.

    

    
      Gets or sets the collection of view engines that are associated with this result.

      The collection of view engines.

    

    
      Gets or sets the name of the view to render.

      The name of the view.

    

    
      Provides an abstract class that can be used to implement a view start (master) page.

    

    
      When implemented in a derived class, initializes a new instance of the   class.

    

    
      When implemented in a derived class, gets the HTML markup for the view start page.

      The HTML markup for the view start page.

    

    
      When implemented in a derived class, gets the URL for the view start page.

      The URL for the view start page.

    

    
      When implemented in a derived class, gets the view context for the view start page.

      The view context for the view start page.

    

    
      Provides a container for   objects.

    

    
      Initializes a new instance of the   class.

    

    
      Provides a container for   objects.

      The type of the model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the formatted value.

      The formatted value.

    

    
      Represents the type of a view.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the name of the type.

      The name of the type.

    

    
      Represents the information that is needed to build a user control.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the AJAX script for the view.

      The AJAX script for the view.

    

    
      Ensures that view data is added to the   object of the user control if the view data exists.

    

    
      Gets the HTML for the view.

      The HTML for the view.

    

    
      Gets the model.

      The model.

    

    
      Renders the view by using the specified view context.

      The view context.

    

    
      Sets the text writer that is used to render the view to the response.

      The writer that is used to render the view to the response.

    

    
      Sets the view-data dictionary by using the specified view data.

      The view data.

    

    
      Gets the temporary-data dictionary.

      The temporary-data dictionary.

    

    
      Gets the URL for the view.

      The URL for the view.

    

    
      Gets the view bag.

      The view bag.

    

    
      Gets or sets the view context.

      The view context.

    

    
      Gets or sets the view-data dictionary.

      The view-data dictionary.

    

    
      Gets or sets the view-data key.

      The view-data key.

    

    
      Gets the writer that is used to render the view to the response.

      The writer that is used to render the view to the response.

    

    
      Represents the information that is required in order to build a strongly typed user control.

      The type of the model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the AJAX script for the view.

      The AJAX script for the view.

    

    
      Gets the HTML for the view.

      The HTML for the view.

    

    
      Gets the model.

      A reference to the data model.

    

    
      Sets the view data for the view.

      The view data.

    

    
      Gets or sets the view data.

      The view data.

    

    
      Represents an abstract base-class implementation of the   interface.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the area-enabled master location formats.

      The area-enabled master location formats.

    

    
      Gets or sets the area-enabled partial-view location formats.

      The area-enabled partial-view location formats.

    

    
      Gets or sets the area-enabled view location formats.

      The area-enabled view location formats.

    

    
      Creates the specified partial view by using the specified controller context.

      A reference to the partial view.

      The controller context.

      The partial path for the new partial view.

    

    
      Creates the specified view by using the controller context, path of the view, and path of the master view.

      A reference to the view.

      The controller context.

      The path of the view.

      The path of the master view.

    

    
      Gets or sets the display mode provider.

      The display mode provider.

    

    
      Returns a value that indicates whether the file is in the specified path by using the specified controller context.

      true if the file is in the specified path; otherwise, false.

      The controller context.

      The virtual path.

    

    
      Gets or sets the file-name extensions that are used to locate a view.

      The file-name extensions that are used to locate a view.

    

    
      Finds the specified partial view by using the specified controller context.

      The partial view.

      The controller context.

      The name of the partial view.

      true to use the cached partial view.

      The   parameter is null (Nothing in Visual Basic).

      The   parameter is null or empty.

    

    
      Finds the specified view by using the specified controller context and master view name.

      The page view.

      The controller context.

      The name of the view.

      The name of the master view.

      true to use the cached view.

      The   parameter is null (Nothing in Visual Basic).

      The   parameter is null or empty.

    

    
      Gets or sets the master location formats.

      The master location formats.

    

    
      Gets or sets the partial-view location formats.

      The partial-view location formats.

    

    
      Releases the specified view by using the specified controller context.

      The controller context.

      The view to release.

    

    
      Gets or sets the view location cache.

      The view location cache.

    

    
      Gets or sets the view location formats.

      The view location formats.

    

    
      Gets or sets the virtual path provider.

      The virtual path provider.

    

    
      Represents the information that is needed to build a Web Forms page in ASP.NET MVC.

    

    
      Initializes a new instance of the   class using the controller context and view path.

      The controller context.

      The view path.

    

    
      Initializes a new instance of the   class using the controller context, view path, and the path to the master page.

      The controller context.

      The view path.

      The path to the master page.

    

    
      Initializes a new instance of the   class using the controller context, view path, the path to the master page, and a   instance.

      The controller context.

      The view path.

      The path to the master page.

      An instance of the view page activator interface.

    

    
      Gets or sets the master path.

      The master path.

    

    
      Renders the view to the response.

      An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.

      The text writer object that is used to write HTML output.

      The view page instance.

    

    
      Represents a view engine that is used to render a Web Forms page to the response.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified view page activator.

      An instance of a class that implements the   interface.

    

    
      Creates the specified partial view by using the specified controller context.

      The partial view.

      The controller context.

      The partial path.

    

    
      Creates the specified view by using the specified controller context and the paths of the view and master view.

      The view.

      The controller context.

      The view path.

      The master-view path.

    

    
      Represents the properties and methods that are needed in order to render a view that uses ASP.NET Razor syntax.

    

    
      Initializes a new instance of the   class. 

    

    
      Gets or sets the   object that is used to render HTML using Ajax. 

      The   object that is used to render HTML using Ajax.

    

    
      Sets the view context and view data for the page.

      The parent page.

    

    
      Gets the   object that is associated with the page.

      The   object that is associated with the page.

    

    
      Runs the page hierarchy for the ASP.NET Razor execution pipeline.

    

    
      Gets or sets the   object that is used to render HTML elements.

      The   object that is used to render HTML elements.

    

    
      Initializes the  ,  , and   classes.

    

    
      Gets the Model property of the associated   object.

      The Model property of the associated   object.

    

    
      Sets the view data.

      The view data.

    

    
      Gets the temporary data to pass to the view.

      The temporary data to pass to the view.

    

    
      Gets or sets the URL of the rendered page.

      The URL of the rendered page.

    

    
      Gets the view bag.

      The view bag.

    

    
      Gets or sets the information that is used to render the view.

      The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.

    

    
      Gets or sets a dictionary that contains data to pass between the controller and the view.

      A dictionary that contains data to pass between the controller and the view.

    

    
      Represents the properties and methods that are needed in order to render a view that uses ASP.NET Razor syntax.

      The type of the view data model.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the   object that is used to render HTML markup using Ajax.

      The   object that is used to render HTML markup using Ajax.

    

    
      Gets or sets the   object that is used to render HTML elements.

      The   object that is used to render HTML elements.

    

    
      Initializes the  ,  , and   classes.

    

    
      Gets the Model property of the associated   object.

      The Model property of the associated   object.

    

    
      Sets the view data.

      The view data.

    

    
      Gets or sets a dictionary that contains data to pass between the controller and the view.

      A dictionary that contains data to pass between the controller and the view.

    

    
      Represents support for ASP.NET AJAX within an ASP.NET MVC application.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the action method.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      The name of the controller.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      The name of the controller.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      The name of the controller.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response. 

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the action method that will handle the request.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element..

    

    
      Writes an opening &lt;form&gt; tag to the response.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response using the specified routing information.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response using the specified routing information.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response using the specified routing information.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the route to use to obtain the form post URL.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response using the specified routing information.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

    

    
      Writes an opening &lt;form&gt; tag to the response using the specified routing information.

      An opening &lt;form&gt; tag.

      The AJAX helper.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML script element that contains a reference to a globalization script that defines the culture information.

      A script element whose src attribute is set to the globalization script, as in the following example: &lt;script type="text/javascript"     src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;

      The AJAX helper object that this method extends.

    

    
      Returns an HTML script element that contains a reference to a globalization script that defines the specified culture information.

      An HTML script element whose src attribute is set to the globalization script, as in the following example:&lt;script type="text/javascript"    src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;

      The AJAX helper object that this method extends.

      Encapsulates information about the target culture, such as date formats.

      The   parameter is null.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      The name of the route to use to obtain the form post URL.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      The   parameter is null or empty.

    

    
      Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.

      An anchor element.

      The AJAX helper.

      The inner text of the anchor element.

      An object that contains the parameters for a route.

      An object that provides options for the asynchronous request.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Represents option settings for running Ajax scripts in an ASP.NET MVC application.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the message to display in a confirmation window before a request is submitted.

      The message to display in a confirmation window.

    

    
      Gets or sets the HTTP request method ("Get" or "Post").

      The HTTP request method. The default value is "Post".

    

    
      Gets or sets the mode that specifies how to insert the response into the target DOM element.

      The insertion mode ("InsertAfter", "InsertBefore", or "Replace"). The default value is "Replace".

    

    
      Gets or sets a value, in milliseconds, that controls the duration of the animation when showing or hiding the loading element.

      A value, in milliseconds, that controls the duration of the animation when showing or hiding the loading element.

    

    
      Gets or sets the id attribute of an HTML element that is displayed while the Ajax function is loading.

      The ID of the element that is displayed while the Ajax function is loading.

    

    
      Gets or sets the name of the JavaScript function to call immediately before the page is updated.

      The name of the JavaScript function to call before the page is updated.

    

    
      Gets or sets the JavaScript function to call when response data has been instantiated but before the page is updated.

      The JavaScript function to call when the response data has been instantiated.

    

    
      Gets or sets the JavaScript function to call if the page update fails.

      The JavaScript function to call if the page update fails.

    

    
      Gets or sets the JavaScript function to call after the page is successfully updated.

      The JavaScript function to call after the page is successfully updated.

    

    
      Returns the Ajax options as a collection of HTML attributes to support unobtrusive JavaScript.

      The Ajax options as a collection of HTML attributes to support unobtrusive JavaScript.

    

    
      Gets or sets the ID of the DOM element to update by using the response from the server.

      The ID of the DOM element to update.

    

    
      Gets or sets the URL to make the request to.

      The URL to make the request to.

    

    
      Enumerates the AJAX script insertion modes.

    

    
      Replace the element.

    

    
      Insert before the element.

    

    
      Insert after the element.

    

    
      Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.

    

    
      Initializes a new instance of the   class.

    

    
      Invokes the asynchronous action method by using the specified parameters and controller context.

      An object that contains the result of an asynchronous call.

      The controller context.

      The parameters of the action method.

      The callback method.

      An object that contains information to be used by the callback method. This parameter can be null.

    

    
      Returns the result of an asynchronous operation.

      The result of an asynchronous operation.

      An object that represents the status of an asynchronous operation.

    

    
      Executes the asynchronous action method by using the specified parameters and controller context.

      The result of executing the asynchronous action method.

      The controller context.

      The parameters of the action method.

    

    
      Represents a class that is responsible for invoking the action methods of an asynchronous controller.

    

    
      Initializes a new instance of the   class.

    

    
      Invokes the asynchronous action method by using the specified controller context, action name, callback method, and state.

      An object that contains the result of an asynchronous operation.

      The controller context.

      The name of the action.

      The callback method.

      An object that contains information to be used by the callback method. This parameter can be null.

    

    
      Invokes the asynchronous action method by using the specified controller context, action descriptor, parameters, callback method, and state.

      An object that contains the result of an asynchronous operation.

      The controller context.

      The action descriptor.

      The parameters for the asynchronous action method.

      The callback method.

      An object that contains information to be used by the callback method. This parameter can be null.

    

    
      Invokes the asynchronous action method by using the specified controller context, filters, action descriptor, parameters, callback method, and state.

      An object that contains the result of an asynchronous operation.

      The controller context.

      The filters.

      The action descriptor.

      The parameters for the asynchronous action method.

      The callback method.

      An object that contains information to be used by the callback method. This parameter can be null.

    

    
      Cancels the action.

      true if the action was canceled; otherwise, false.

      The user-defined object that qualifies or contains information about an asynchronous operation.

    

    
      Cancels the action.

      true if the action was canceled; otherwise, false.

      The user-defined object that qualifies or contains information about an asynchronous operation.

    

    
      Cancels the action.

      true if the action was canceled; otherwise, false.

      The user-defined object that qualifies or contains information about an asynchronous operation.

    

    
      Returns the controller descriptor.

      The controller descriptor.

      The controller context.

    

    
      Provides asynchronous operations for the   class.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the synchronization context.

      The synchronization context.

    

    
      Notifies ASP.NET that all asynchronous operations are complete.

    

    
      Occurs when the   method is called.

    

    
      Gets the number of outstanding operations.

      The number of outstanding operations.

    

    
      Gets the parameters that were passed to the asynchronous completion method.

      The parameters that were passed to the asynchronous completion method.

    

    
      Executes a callback in the current synchronization context.

      The asynchronous action.

    

    
      Gets or sets the asynchronous timeout value, in milliseconds.

      The asynchronous timeout value, in milliseconds.

    

    
      Defines the interface for an action invoker, which is used to invoke an asynchronous action in response to an HTTP request.

    

    
      Invokes the specified action.

      The status of the asynchronous result.

      The controller context.

      The name of the asynchronous action.

      The callback method.

      The state.

    

    
      Cancels the asynchronous action.

      true if the asynchronous method could be canceled; otherwise, false.

      The asynchronous result.

    

    
      Defines the methods that are required for an asynchronous controller.

    

    
      Executes the specified request context.

      The status of the asynchronous operation.

      The request context.

      The asynchronous callback method.

      The state.

    

    
      Ends the asynchronous operation.

      The asynchronous result.

    

    
      Provides a container for the asynchronous manager object.

    

    
      Gets the asynchronous manager object.

      The asynchronous manager object.

    

    
      Provides a container that maintains a count of pending asynchronous operations.

    

    
      Initializes a new instance of the   class.

    

    
      Occurs when an asynchronous method completes.

    

    
      Gets the operation count.

      The operation count.

    

    
      Reduces the operation count by 1.

      The updated operation count.

    

    
      Reduces the operation count by the specified value.

      The updated operation count.

      The number of operations to reduce the count by.

    

    
      Increments the operation count by one.

      The updated operation count.

    

    
      Increments the operation count by the specified value.

      The updated operation count.

      The number of operations to increment the count by.

    

    
      Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.

    

    
      Initializes a new instance of the   class.

      An object that contains information about the method that begins the asynchronous operation (the method whose name ends with "Asynch").

      An object that contains information about the completion method (method whose name ends with "Completed").

      The name of the action.

      The controller descriptor.

    

    
      Gets the name of the action method.

      The name of the action method.

    

    
      Gets the method information for the asynchronous action method.

      The method information for the asynchronous action method.

    

    
      Begins running the asynchronous action method by using the specified parameters and controller context.

      An object that contains the result of an asynchronous call.

      The controller context.

      The parameters of the action method.

      The callback method.

      An object that contains information to be used by the callback method. This parameter can be null.

    

    
      Gets the method information for the asynchronous completion method.

      The method information for the asynchronous completion method.

    

    
      Gets the controller descriptor for the asynchronous action method.

      The controller descriptor for the asynchronous action method.

    

    
      Returns the result of an asynchronous operation.

      The result of an asynchronous operation.

      An object that represents the status of an asynchronous operation.

    

    
      Returns an array of custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Returns an array of custom attributes that are defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes of the specified type exist.

      The type of the custom attributes to return.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Gets the filter attributes.

      The filter attributes.

      Use cache flag.

    

    
      Returns the parameters of the action method.

      The parameters of the action method.

    

    
      Returns the action-method selectors.

      The action-method selectors.

    

    
      Determines whether one or more instances of the specified attribute type are defined for the action member.

      true if an attribute of type that is represented by   is defined for this member; otherwise, false.

      The type of the custom attribute.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Gets the lazy initialized unique ID of the instance of this class.

      The lazy initialized unique ID of the instance of this class.

    

    
      Encapsulates information that describes an asynchronous controller, such as its name, type, and actions.

    

    
      Initializes a new instance of the   class.

      The type of the controller.

    

    
      Gets the type of the controller.

      The type of the controller.

    

    
      Finds an action method by using the specified name and controller context.

      The information about the action method.

      The controller context.

      The name of the action.

    

    
      Returns a list of action method descriptors in the controller.

      A list of action method descriptors in the controller.

    

    
      Returns custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Returns custom attributes of a specified type that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Gets the filter attributes.

      The filter attributes.

      true to use the cache, otherwise false.

    

    
      Returns a value that indicates whether one or more instances of the specified custom attribute are defined for this member.

      true if an attribute of the type represented by   is defined for this member; otherwise, false.

      The type of the custom attribute.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Represents an exception that occurred during the synchronous processing of an HTTP request in an ASP.NET MVC application.

    

    
      Initializes a new instance of the   class using a system-supplied message.

    

    
      Initializes a new instance of the   class using the specified message.

      The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.

    

    
      Initializes a new instance of the   class using a specified error message and a reference to the inner exception that is the cause of this exception.

      The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. 

      The exception that is the cause of the current exception. If the   parameter is not null, the current exception is raised in a catch block that handles the inner exception. 

    

    
      When an action method returns either Task or Task&lt;T&gt; the   provides information about the action.

    

    
      Initializes a new instance of the   class.

      The task method information.

      The action name.

      The controller descriptor.

    

    
      Gets the name of the action method.

      The name of the action method.

    

    
      Invokes the asynchronous action method using the specified parameters, controller context callback and state.

      An object that contains the result of an asynchronous call.

      The controller context.

      The parameters of the action method.

      The optional callback method.

      An object that contains information to be used by the callback method. This parameter can be null.

    

    
      Gets the controller descriptor.

      The controller descriptor.

    

    
      Ends the asynchronous operation.

      The result of an asynchronous operation.

      An object that represents the status of an asynchronous operation.

    

    
      Executes the asynchronous action method

      The result of executing the asynchronous action method.

      The controller context.

      The parameters of the action method.

    

    
      Returns an array of custom attributes that are defined for this member, excluding named attributes.

      An array of custom attributes, or an empty array if no custom attributes exist.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Returns an array of custom attributes that are defined for this member, identified by type.

      An array of custom attributes, or an empty array if no custom attributes exist.

      The type of the custom attributes.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Returns an array of all custom attributes applied to this member.

      An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.

      true to search this member's inheritance chain to find the attributes; otherwise, false.

    

    
      Returns the parameters of the asynchronous action method.

      The parameters of the asynchronous action method.

    

    
      Returns the asynchronous action-method selectors.

      The asynchronous action-method selectors.

    

    
      Returns a value that indicates whether one or more instance of the specified custom attribute are defined for this member.

      A value that indicates whether one or more instance of the specified custom attribute are defined for this member.

      The type of the custom attribute.

      true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.

    

    
      Gets information for the asynchronous task.

      Information for the asynchronous task.

    

    
      Gets the unique ID for the task.

      The unique ID for the task.

    

    
      Represents support for calling child action methods and rendering the result inline in a parent view.

    

    
      Invokes the specified child action method and returns the result as an HTML string.

      The child action result as an HTML string.

      The HTML helper instance that this method extends.

      The name of the action method to invoke.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method with the specified parameters and returns the result as an HTML string.

      The child action result as an HTML string.

      The HTML helper instance that this method extends.

      The name of the action method to invoke.

      An object that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified controller name and returns the result as an HTML string.

      The child action result as an HTML string.

      The HTML helper instance that this method extends.

      The name of the action method to invoke.

      The name of the controller that contains the action method.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.

      The child action result as an HTML string.

      The HTML helper instance that this method extends.

      The name of the action method to invoke.

      The name of the controller that contains the action method.

      An object that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.

      The child action result as an HTML string.

      The HTML helper instance that this method extends.

      The name of the action method to invoke.

      The name of the controller that contains the action method.

      A dictionary that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and returns the result as an HTML string.

      The child action result as an HTML string.

      The HTML helper instance that this method extends.

      The name of the action method to invoke.

      A dictionary that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method and renders the result inline in the parent view.

      The HTML helper instance that this method extends.

      The name of the child action method to invoke.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.

      The HTML helper instance that this method extends.

      The name of the child action method to invoke.

      An object that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified controller name and renders the result inline in the parent view.

      The HTML helper instance that this method extends.

      The name of the child action method to invoke.

      The name of the controller that contains the action method.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.

      The HTML helper instance that this method extends.

      The name of the child action method to invoke.

      The name of the controller that contains the action method.

      An object that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.

      The HTML helper instance that this method extends.

      The name of the child action method to invoke.

      The name of the controller that contains the action method.

      A dictionary that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.

      The HTML helper instance that this method extends.

      The name of the child action method to invoke.

      A dictionary that contains the parameters for a route. You can use   to provide the parameters that are bound to the action method parameters. The   parameter is merged with the original route values and overrides them.

      The   parameter is null.

      The   parameter is null or empty.

      The required virtual path data cannot be found.

    

    
      Represents support for rendering object values as HTML.

    

    
      Returns HTML markup for each property in the object that is represented by a string expression.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

    

    
      Returns HTML markup for each property in the object that is represented by a string expression, using additional view data.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns HTML markup for each property in the object that is represented by the expression, using the specified template.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

    

    
      Returns HTML markup for each property in the object that is represented by the expression, using the specified template and additional view data.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns HTML markup for each property in the object that is represented by the expression, using the specified template and an HTML field ID.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

    

    
      Returns HTML markup for each property in the object that is represented by the expression, using the specified template, HTML field ID, and additional view data.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns HTML markup for each property in the object that is represented by the   expression.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The type of the model.

      The type of the value.

    

    
      Returns a string that contains each property value in the object that is represented by the specified expression, using additional view data.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

      The type of the model.

      The type of the value.

    

    
      Returns a string that contains each property value in the object that is represented by the  , using the specified template.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      The type of the model.

      The type of the value.

    

    
      Returns a string that contains each property value in the object that is represented by the specified expression, using the specified template and additional view data.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

      The type of the model.

      The type of the value.

    

    
      Returns HTML markup for each property in the object that is represented by the  , using the specified template and an HTML field ID.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      The type of the model.

      The type of the value.

    

    
      Returns HTML markup for each property in the object that is represented by the specified expression, using the template, an HTML field ID, and additional view data.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template that is used to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

      The type of the model.

      The type of the value.

    

    
      Returns HTML markup for each property in the model.

      The HTML markup for each property in the model.

      The HTML helper instance that this method extends.

    

    
      Returns HTML markup for each property in the model, using additional view data.

      The HTML markup for each property in the model.

      The HTML helper instance that this method extends.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns HTML markup for each property in the model using the specified template.

      The HTML markup for each property in the model.

      The HTML helper instance that this method extends.

      The name of the template that is used to render the object.

    

    
      Returns HTML markup for each property in the model, using the specified template and additional view data.

      The HTML markup for each property in the model.

      The HTML helper instance that this method extends.

      The name of the template that is used to render the object.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns HTML markup for each property in the model using the specified template and HTML field ID.

      The HTML markup for each property in the model.

      The HTML helper instance that this method extends.

      The name of the template that is used to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

    

    
      Returns HTML markup for each property in the model, using the specified template, an HTML field ID, and additional view data.

      The HTML markup for each property in the model.

      The HTML helper instance that this method extends.

      The name of the template that is used to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Provides a mechanism to get display names.

    

    
      Gets the display name.

      The display name.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the display name.

    

    
      Gets the display name for the model.

      The display name for the model.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the display name.

      The type of the model.

      The type of the value.

    

    
      Gets the display name for the model.

      The display name for the model.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the display name.

      The type of the model.

      The type of the value.

    

    
      Gets the display name for the model.

      The display name for the model.

      The HTML helper instance that this method extends.

    

    
      Provides a way to render object values as HTML.

    

    
      Returns HTML markup for each property in the object that is represented by the specified expression.

      The HTML markup for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

    

    
      Returns HTML markup for each property in the object that is represented by the specified expression.

      The HTML markup for each property.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The type of the model.

      The type of the result.

    

    
      Represents support for the HTML input element in an application.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using additional view data.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using the specified template.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and HTML field name.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns an HTML input element for each property in the object that is represented by the   expression.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The type of the model.

      The type of the value.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using additional view data.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

      The type of the model.

      The type of the value.

    

    
      Returns an HTML input element for each property in the object that is represented by the   expression, using the specified template.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      The type of the model.

      The type of the value.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

      The type of the model.

      The type of the value.

    

    
      Returns an HTML input element for each property in the object that is represented by the   expression, using the specified template and HTML field name.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      The type of the model.

      The type of the value.

    

    
      Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.

      An HTML input element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      The name of the template to use to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

      The type of the model.

      The type of the value.

    

    
      Returns an HTML input element for each property in the model.

      An HTML input element for each property in the model.

      The HTML helper instance that this method extends.

    

    
      Returns an HTML input element for each property in the model, using additional view data.

      An HTML input element for each property in the model.

      The HTML helper instance that this method extends.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns an HTML input element for each property in the model, using the specified template.

      An HTML input element for each property in the model and in the specified template.

      The HTML helper instance that this method extends.

      The name of the template to use to render the object.

    

    
      Returns an HTML input element for each property in the model, using the specified template and additional view data.

      An HTML input element for each property in the model.

      The HTML helper instance that this method extends.

      The name of the template to use to render the object.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Returns an HTML input element for each property in the model, using the specified template name and HTML field name.

      An HTML input element for each property in the model and in the named template.

      The HTML helper instance that this method extends.

      The name of the template to use to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

    

    
      Returns an HTML input element for each property in the model, using the template name, HTML field name, and additional view data.

      An HTML input element for each property in the model.

      The HTML helper instance that this method extends.

      The name of the template to use to render the object.

      A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.

      An anonymous object that can contain additional view data that will be merged into the   instance that is created for the template.

    

    
      Represents support for HTML in an application.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag. 

      The HTML helper instance that this method extends.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      The HTTP method for processing the form, either GET or POST.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      The HTTP method for processing the form, either GET or POST.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

      The HTTP method for processing the form, either GET or POST.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the action method.

      The name of the controller.

      An object that contains the parameters for a route.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      An object that contains the parameters for a route.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      The HTTP method for processing the form, either GET or POST.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      The HTTP method for processing the form, either GET or POST.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      An object that contains the parameters for a route

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      An object that contains the parameters for a route

      The HTTP method for processing the form, either GET or POST.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      The name of the route to use to obtain the form-post URL.

      An object that contains the parameters for a route

      The HTTP method for processing the form, either GET or POST.

      An object that contains the HTML attributes to set for the element.

    

    
      Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.

      An opening &lt;form&gt; tag.

      The HTML helper instance that this method extends.

      An object that contains the parameters for a route

    

    
      Renders the closing &lt;/form&gt; tag to the response. 

      The HTML helper instance that this method extends.

    

    
      Represents support for HTML input controls in an application.

    

    
      Returns a check box input element by using the specified HTML helper and the name of the form field.

      An input element whose type attribute is set to "checkbox".

      The HTML helper instance that this method extends.

      The name of the form field.

    

    
      Returns a check box input element by using the specified HTML helper, the name of the form field, and a value to indicate whether the check box is selected.

      An input element whose type attribute is set to "checkbox".

      The HTML helper instance that this method extends.

      The name of the form field.

      true to select the check box; otherwise, false.

    

    
      Returns a check box input element by using the specified HTML helper, the name of the form field, a value to indicate whether the check box is selected, and the HTML attributes.

      An input element whose type attribute is set to "checkbox".

      The HTML helper instance that this method extends.

      The name of the form field.

      true to select the check box; otherwise, false.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a check box input element by using the specified HTML helper, the name of the form field, a value that indicates whether the check box is selected, and the HTML attributes.

      An input element whose type attribute is set to "checkbox".

      The HTML helper instance that this method extends.

      The name of the form field.

      true to select the check box; otherwise, false.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.

      An input element whose type attribute is set to "checkbox".

      The HTML helper instance that this method extends.

      The name of the form field.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.

      An input element whose type attribute is set to "checkbox".

      The HTML helper instance that this method extends.

      The name of the form field.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a check box input element for each property in the object that is represented by the specified expression.

      An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The   parameter is null.

    

    
      Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The   parameter is null.

    

    
      Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The   parameter is null.

    

    
      Returns a hidden input element by using the specified HTML helper and the name of the form field.

      An input element whose type attribute is set to "hidden".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

    

    
      Returns a hidden input element by using the specified HTML helper, the name of the form field, and the value.

      An input element whose type attribute is set to "hidden".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the hidden input element. The value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object. If the element is not found in the   or the  , the value parameter is used.

    

    
      Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.

      An input element whose type attribute is set to "hidden".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the hidden input element. The value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object. If the element is not found in the   object or the   object, the value parameter is used.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.

      An input element whose type attribute is set to "hidden".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the hidden input element The value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object. If the element is not found in the   object or the   object, the value parameter is used.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML hidden input element for each property in the object that is represented by the specified expression.

      An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The type of the property.

    

    
      Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

    

    
      Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

    

    
      Returns a password input element by using the specified HTML helper and the name of the form field.

      An input element whose type attribute is set to "password".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

    

    
      Returns a password input element by using the specified HTML helper, the name of the form field, and the value.

      An input element whose type attribute is set to "password".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the password input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

    

    
      Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.

      An input element whose type attribute is set to "password".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the password input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.

      An input element whose type attribute is set to "password".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the password input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a password input element for each property in the object that is represented by the specified expression.

      An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a radio button input element that is used to present mutually exclusive options.

      An input element whose type attribute is set to "radio".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      The   parameter is null or empty.

      The   parameter is null.

    

    
      Returns a radio button input element that is used to present mutually exclusive options.

      An input element whose type attribute is set to "radio".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      true to select the radio button; otherwise, false.

      The   parameter is null or empty.

      The   parameter is null.

    

    
      Returns a radio button input element that is used to present mutually exclusive options.

      An input element whose type attribute is set to "radio".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      true to select the radio button; otherwise, false.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

      The   parameter is null.

    

    
      Returns a radio button input element that is used to present mutually exclusive options.

      An input element whose type attribute is set to "radio".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      true to select the radio button; otherwise, false.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

      The   parameter is null.

    

    
      Returns a radio button input element that is used to present mutually exclusive options.

      An input element whose type attribute is set to "radio".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

      The   parameter is null.

    

    
      Returns a radio button input element that is used to present mutually exclusive options.

      An input element whose type attribute is set to "radio".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

      The   parameter is null.

    

    
      Returns a radio button input element for each property in the object that is represented by the specified expression.

      An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the   or the   object matches this value, this radio button is selected.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a text input element by using the specified HTML helper and the name of the form field.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

    

    
      Returns a text input element by using the specified HTML helper, the name of the form field, and the value.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the text input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

    

    
      Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the text input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the text input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a text input element.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field.

      The value of the text input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      A string that is used to format the input.

    

    
      Returns a text input element.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the text input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      A string that is used to format the input.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a text input element.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      The name of the form field and the   key that is used to look up the value.

      The value of the text input element. If this value is null, the value of the element is retrieved from the   object. If no value exists there, the value is retrieved from the   object.

      A string that is used to format the input.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns a text input element for each property in the object that is represented by the specified expression.

      An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The type of the value.

      The   parameter is null or empty.

    

    
      Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element type attribute is set to "text" for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null or empty.

    

    
      Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.

      An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null or empty.

    

    
      Returns a text input element.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A string that is used to format the input.

      The type of the model.

      The type of the value.

    

    
      Returns a text input element.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A string that is used to format the input.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

    

    
      Returns a text input element.

      An input element whose type attribute is set to "text".

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A string that is used to format the input.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

    

    
      Represents support for the HTML label element in an ASP.NET MVC view.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      Returns  .

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      The label text to display.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      The label text.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      The label text.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      The  type of the model.

      The type of the value.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      An object that contains the HTML attributes to set for the element.

      The  type of the model.

      

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      An object that contains the HTML attributes to set for the element.

      The  type of the model.

      The value.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      The label text to display.

      The  type of the model.

      The type of the value.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      An object that contains the HTML attributes to set for the element.

      The  type of the model.

      

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the property to display.

      The label text.

      An object that contains the HTML attributes to set for the element.

      The  type of the model.

      The Value.

    

    
      Returns an HTML label element and the property name of the property that is represented by the model.

      An HTML label element and the property name of the property that is represented by the model.

      The HTML helper instance that this method extends.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      The label text to display.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      The label Text.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML label element and the property name of the property that is represented by the specified expression.

      An HTML label element and the property name of the property that is represented by the expression.

      The HTML helper instance that this method extends.

      The label text.

      An object that contains the HTML attributes to set for the element.

    

    
      Represents support for HTML links in an application.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      An object that contains the HTML attributes for the element. The attributes are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      The name of the controller.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      The name of the controller.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      The name of the controller.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      The name of the controller.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      The name of the controller.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      An object that contains the parameters for a route.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the action.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      The protocol for the URL, such as "http" or "https".

      The host name for the URL.

      The URL fragment name (the anchor name).

      An object that contains the parameters for a route.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      An object that contains the parameters for a route.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      The name of the route that is used to return a virtual path.

      An object that contains the parameters for a route. 

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      An object that contains the parameters for a route.

      The   parameter is null or empty.

    

    
      Returns an anchor element (a element) that contains the virtual path of the specified action.

      An anchor element (a element).

      The HTML helper instance that this method extends.

      The inner text of the anchor element.

      An object that contains the parameters for a route.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Represents an HTML form element in an MVC view.

    

    
      Initializes a new instance of the   class using the specified HTTP response object.

      The HTTP response object.

      The  parameter is null.

    

    
      Initializes a new instance of the   class using the specified view context.

      An object that encapsulates the information that is required in order to render a view.

      The   parameter is null.

    

    
      Releases all resources that are used by the current instance of the   class.

    

    
      Releases unmanaged and, optionally, managed resources used by the current instance of the   class.

      true to release both managed and unmanaged resources; false to release only unmanaged resources.

    

    
      Ends the form and disposes of all form resources.

    

    
      Gets the HTML ID and name attributes of the   string.

    

    
      Gets the ID of the   string.

      The HTML ID attribute value for the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the ID.

    

    
       Gets the ID of the   string

      The HTML ID attribute value for the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the ID.

      The type of the model.

      The type of the property.

    

    
      Gets the ID of the   string.

      The HTML ID attribute value for the object that is represented by the expression.

      The HTML helper instance that this method extends.

    

    
      Gets the full HTML field name for the object that is represented by the expression.

      The full HTML field name for the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the name.

    

    
      Gets the full HTML field name for the object that is represented by the expression.

      The full HTML field name for the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the name.

      The type of the model.

      The type of the property.

    

    
      Gets the full HTML field name for the object that is represented by the expression.

      The full HTML field name for the object that is represented by the expression.

      The HTML helper instance that this method extends.

    

    
      Represents the functionality to render a partial view as an HTML-encoded string.

    

    
      Renders the specified partial view as an HTML-encoded string.

      The partial view that is rendered as an HTML-encoded string.

      The HTML helper instance that this method extends.

      The name of the partial view to render.

    

    
      Renders the specified partial view as an HTML-encoded string.

      The partial view that is rendered as an HTML-encoded string.

      The HTML helper instance that this method extends.

      The name of the partial view to render.

      The model for the partial view.

    

    
      Renders the specified partial view as an HTML-encoded string.

      The partial view that is rendered as an HTML-encoded string.

      The HTML helper instance that this method extends.

      The name of the partial view.

      The model for the partial view.

      The view data dictionary for the partial view.

    

    
      Renders the specified partial view as an HTML-encoded string.

      The partial view that is rendered as an HTML-encoded string.

      The HTML helper instance that this method extends.

      The name of the partial view to render.

      The view data dictionary for the partial view.

    

    
      Provides support for rendering a partial view.

    

    
      Renders the specified partial view by using the specified HTML helper.

      The HTML helper.

      The name of the partial view

    

    
      Renders the specified partial view, passing it a copy of the current   object, but with the Model property set to the specified model.

      The HTML helper.

      The name of the partial view.

      The model.

    

    
      Renders the specified partial view, replacing the partial view's ViewData property with the specified   object and setting the Model property of the view data to the specified model.

      The HTML helper.

      The name of the partial view.

      The model for the partial view.

      The view data for the partial view.

    

    
      Renders the specified partial view, replacing its ViewData property with the specified   object.

      The HTML helper.

      The name of the partial view.

      The view data.

    

    
      Represents support for making selections in a list.

    

    
      Returns a single-selection select element using the specified HTML helper and the name of the form field.

      An HTML select element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, and the specified list items.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and an option label.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      The text for a default empty item. This parameter can be null.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      The text for a default empty item. This parameter can be null.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      The text for a default empty item. This parameter can be null.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns a single-selection select element using the specified HTML helper, the name of the form field, and an option label.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The text for a default empty item. This parameter can be null.

      The   parameter is null or empty.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and option label.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      The text for a default empty item. This parameter can be null.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      The text for a default empty item. This parameter can be null.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      The text for a default empty item. This parameter can be null.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the value.

      The   parameter is null.

    

    
      Returns a multi-select select element using the specified HTML helper and the name of the form field.

      An HTML select element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The   parameter is null or empty.

    

    
      Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.

      An HTML select element with an option subelement for each item in the list.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      The   parameter is null or empty.

    

    
      Returns a multi-select select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HMTL attributes.

      An HTML select element with an option subelement for each item in the list..

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.

      An HTML select element with an option subelement for each item in the list..

      The HTML helper instance that this method extends.

      The name of the form field to return.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The   parameter is null or empty.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression and using the specified list items.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.

      An HTML select element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to display.

      A collection of   objects that are used to populate the drop-down list.

      An object that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Represents support for HTML textarea controls.

    

    
      Returns the specified textarea element by using the specified HTML helper and the name of the form field.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

    

    
      Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the specified HTML attributes.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns the specified textarea element by using the specified HTML helper and HTML attributes.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the text content.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The text content.

    

    
      Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The text content.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The text content.

      The number of rows.

      The number of columns.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The text content.

      The number of rows.

      The number of columns.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.

      The textarea element.

      The HTML helper instance that this method extends.

      The name of the form field to return.

      The text content.

      An object that contains the HTML attributes to set for the element.

    

    
      Returns an HTML textarea element for each property in the object that is represented by the specified expression.

      An HTML textarea element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.

      An HTML textarea element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.

      An HTML textarea element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The number of rows.

      The number of columns.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.

      An HTML textarea element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The number of rows.

      The number of columns.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.

      An HTML textarea element for each property in the object that is represented by the expression.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      A dictionary that contains the HTML attributes to set for the element.

      The type of the model.

      The type of the property.

      The   parameter is null.

    

    
      Provides support for validating the input from an HTML form.

    

    
      Gets or sets the name of the resource file (class key) that contains localized string values.

      The name of the resource file (class key).

    

    
      Retrieves the validation metadata for the specified model and applies each rule to the data field.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

      The   parameter is null.

    

    
      Retrieves the validation metadata for the specified model and applies each rule to the data field.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The type of the property.

    

    
      Displays a validation message if an error exists for the specified field in the   object.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

    

    
      Displays a validation message if an error exists for the specified field in the   object.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

      An object that contains the HTML attributes for the element.

    

    
      Displays a validation message if an error exists for the specified field in the   object.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

      An object that contains the HTML attributes for the element. 

    

    
      Displays a validation message if an error exists for the specified field in the   object.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

      The message to display if the specified field contains an error.

    

    
      Displays a validation message if an error exists for the specified field in the   object.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

      The message to display if the specified field contains an error.

      An object that contains the HTML attributes for the element.

    

    
      Displays a validation message if an error exists for the specified field in the   object.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      The name of the property or model object that is being validated.

      The message to display if the specified field contains an error.

      An object that contains the HTML attributes for the element. 

    

    
      Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The type of the model.

      The type of the property.

    

    
      Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The message to display if the specified field contains an error.

      The type of the model.

      The type of the property.

    

    
      Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The message to display if the specified field contains an error.

      An object that contains the HTML attributes for the element.

      The type of the model.

      The type of the property.

    

    
      Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.

      If the property or object is valid, an empty string; otherwise, a span element that contains an error message.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to render.

      The message to display if the specified field contains an error.

      An object that contains the HTML attributes for the element.

      The type of the model.

      The type of the property.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object and optionally displays only model-level errors.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

      true to have the summary display model-level errors only, or false to have the summary display all errors.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object and optionally displays only model-level errors.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

      true to have the summary display model-level errors only, or false to have the summary display all errors.

      The message to display with the validation summary.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object and optionally displays only model-level errors.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

      true to have the summary display model-level errors only, or false to have the summary display all errors.

      The message to display with the validation summary.

      A dictionary that contains the HTML attributes for the element.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object and optionally displays only model-level errors.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

      true to have the summary display model-level errors only, or false to have the summary display all errors.

      The message to display with the validation summary.

      An object that contains the HTML attributes for the element.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object.

      A string that contains an unordered list (ul element) of validation messages.

      The HMTL helper instance that this method extends.

      The message to display if the specified field contains an error.

    

    
      Returns an unordered list (ul element) of validation messages that are in the   object.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

      The message to display if the specified field contains an error.

      A dictionary that contains the HTML attributes for the element.

    

    
      Returns an unordered list (ul element) of validation messages in the   object.

      A string that contains an unordered list (ul element) of validation messages.

      The HTML helper instance that this method extends.

      The message to display if the specified field contains an error.

      An object that contains the HTML attributes for the element. 

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

      The HTML markup for the value.

      The HTML helper instance that this method extends.

      The name of the model.

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

      The HTML markup for the value.

      The HTML helper instance that this method extends.

      The name of the model.

      The format string.

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

      The HTML markup for the value.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to expose.

      The model.

      The property.

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

      The HTML markup for the value.

      The HTML helper instance that this method extends.

      An expression that identifies the object that contains the properties to expose.

      The format string.

      The model.

      The property.

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

      The HTML markup for the value.

      The HTML helper instance that this method extends.

    

    
      Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates.

      The HTML markup for the value.

      The HTML helper instance that this method extends.

      The format string.

    

    
      Compiles ASP.NET Razor views into classes.

    

    
      Initializes a new instance of the   class.

    

    
      The inherits directive.

    

    
      The model directive.

    

    
      Extends the VBCodeParser class by adding support for the @model keyword.

    

    
      Initializes a new instance of the   class.

    

    
      Sets a value that indicates whether the current code block and model should be inherited.

      true if the code block and model is inherited; otherwise, false.

    

    
      The Model Type Directive.

      Returns void.

    

    
      Configures the ASP.NET Razor parser and code generator for a specified file.

    

    
      Initializes a new instance of the   class. 

      The virtual path of the ASP.NET Razor file.

      The physical path of the ASP.NET Razor file.

    

    
      Returns the ASP.NET MVC language-specific Razor code generator.

      The ASP.NET MVC language-specific Razor code generator.

      The C# or Visual Basic code generator.

    

    
      Returns the ASP.NET MVC language-specific Razor code parser using the specified language parser.

      The ASP.NET MVC language-specific Razor code parser.

      The C# or Visual Basic code parser.

    

  






bin/System.Web.Optimization.dll









		00004550
		
		0003
		4fd8fcee
		00000000
		00000000
		00e0
		







		010b
		11.00
		0000b400
		00000600
		00000000
		0000d29e
		00002000
		0000e000
		10000000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00012000
		00000200
		00015b97
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		0000d250
		0000004b
		
		0000e000
		000003c0
		0000bc00
		00001a80
		
		00010000
		0000000c
		0000d118
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0000b2a4
		00002000
		0000b400
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003c0
		0000e000
		00000400
		0000b600
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00010000
		00000200
		0000ba00
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.Razor.dll









		00004550
		
		0003
		502e8acc
		00000000
		00000000
		00e0
		







		010b
		8.00
		0003f000
		00000600
		00000000
		00040fbe
		00002000
		00042000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00046000
		00000200
		0004616a
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00040f64
		00000057
		
		00042000
		000003f0
		0003f800
		00001a88
		
		00044000
		0000000c
		00040ee0
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0003efc4
		00002000
		0003f000
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		000003f0
		00042000
		00000400
		0003f200
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00044000
		00000200
		0003f600
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.Razor.xml




  
    System.Web.Razor

  

  
    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code. 

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

      

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

      

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      .

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

      

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Enumerates the list of Visual Basic keywords.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

  






bin/System.Web.WebPages.Deployment.dll









		00004550
		
		0003
		4ffc7b08
		00000000
		00000000
		00e0
		







		010b
		8.00
		00007c00
		00000800
		00000000
		00009bce
		00002000
		0000a000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0000e000
		00000200
		00012403
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		00009b80
		0000004b
		
		0000a000
		00000448
		00008600
		00001a58
		
		0000c000
		0000000c
		00009ae0
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00007bd4
		00002000
		00007c00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000448
		0000a000
		00000600
		00007e00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0000c000
		00000200
		00008400
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.WebPages.Deployment.xml




  
    System.Web.WebPages.Deployment

  

  
    
      Provides a registration point for pre-application start code for Web Pages deployment.

    

    
      Registers pre-application start code for Web Pages deployment.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      The path of the root directory for the application.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

  






bin/System.Web.WebPages.dll









		00004550
		
		0003
		4ffc7b0c
		00000000
		00000000
		00e0
		







		010b
		8.00
		0002fc00
		00000600
		00000000
		00031a0e
		00002000
		00032000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00036000
		00000200
		0003982b
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		000319b4
		00000057
		
		00032000
		00000400
		00030400
		00001a70
		
		00034000
		0000000c
		00031928
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		0002fa14
		00002000
		0002fc00
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000400
		00032000
		00000400
		0002fe00
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00034000
		00000200
		00030200
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.WebPages.Razor.dll









		00004550
		
		0003
		4ffc7b0f
		00000000
		00000000
		00e0
		







		010b
		8.00
		00007600
		00000800
		00000000
		0000943e
		00002000
		0000a000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		0000e000
		00000200
		00015ce3
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		000093e8
		00000053
		
		0000a000
		00000420
		00008000
		00001a70
		
		0000c000
		0000000c
		00009350
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		00007444
		00002000
		00007600
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000420
		0000a000
		00000600
		00007800
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		0000c000
		00000200
		00007e00
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




bin/System.Web.WebPages.Razor.xml




  
    System.Web.WebPages.Razor

  

  
    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Provides configuration system support for the host configuration section.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the host factory.

      The host factory.

    

    
      Represents the name of the configuration section for a Razor host environment.

    

    
      Provides configuration system support for the pages configuration section.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the collection of namespaces to add to Web Pages pages in the current application.

      The collection of namespaces.

    

    
      Gets or sets the name of the page base type class.

      The name of the page base type class.

    

    
      Represents the name of the configuration section for Razor pages.

    

    
      Provides configuration system support for the system.web.webPages.razor configuration section.

    

    
      Initializes a new instance of the   class.

    

    
      Represents the name of the configuration section for Razor Web section. Contains the static, read-only string "system.web.webPages.razor".

    

    
      Gets or sets the host value for system.web.webPages.razor section group.

      The host value.

    

    
      Gets or sets the value of the pages element for the system.web.webPages.razor section.

      The pages element value.

    

  






bin/System.Web.WebPages.xml




  
    System.Web.WebPages

  

  
    
      Helps prevent malicious scripts from submitting forged page requests.

    

    
      Adds an authenticating token to a form to help protect against request forgery.

      Returns a string that contains the encrypted token value in a hidden HTML field.

      The current   object is null.

    

    
      Adds an authenticating token to a form to help protect against request forgery and lets callers specify authentication details.

      Returns the encrypted token value in a hidden HTML field.

      The HTTP context data for a request.

      An optional string of random characters (such as Z*7g1&amp;p4) that is used to add complexity to the encryption for extra safety. The default is null.

      The domain of a web application that a request is submitted from.

      The virtual root path of a web application that a request is submitted from.

      
          is null.

    

    

    
      Validates that input data from an HTML form field comes from the user who submitted the data.

      The current   value is null.

      The HTTP cookie token that accompanies a valid request is missing-or-The form token is missing.-or-The form token value does not match the cookie token value.-or-The form token value does not match the cookie token value.

    

    

    
      Validates that input data from an HTML form field comes from the user who submitted the data and lets callers specify additional validation details.

      The HTTP context data for a request.

      An optional string of random characters (such as Z*7g1&amp;p4) that is used to decrypt an authentication token created by the   class. The default is null.

      The current   value is null.

      The HTTP cookie token that accompanies a valid request is missing.-or-The form token is missing.-or-The form token value does not match the cookie token value.-or-The form token value does not match the cookie token value.-or-The   value supplied does not match the   value that was used to create the form token.

    

    
      Provides programmatic configuration for the anti-forgery token system.

    

    
      Gets a data provider that can provide additional data to put into all generated tokens and that can validate additional data in incoming tokens.

      The data provider.

    

    
      Gets or sets the name of the cookie that is used by the anti-forgery system.

      The cookie name.

    

    
      Gets or sets a value that indicates whether the anti-forgery cookie requires SSL in order to be returned to the server.

      true if SSL is required to return the anti-forgery cookie to the server; otherwise, false. 

    

    
      Gets or sets a value that indicates whether the anti-forgery system should skip checking for conditions that might indicate misuse of the system.

      true if the anti-forgery system should not check for possible misuse; otherwise, false.

    

    
      If claims-based authorization is in use, gets or sets the claim type from the identity that is used to uniquely identify the user.

      The claim type.

    

    
      Provides a way to include or validate custom data for anti-forgery tokens.

    

    
      Provides additional data to store for the anti-forgery tokens that are generated during this request.

      The supplemental data to embed in the anti-forgery token.

      Information about the current request.

    

    
      Validates additional data that was embedded inside an incoming anti-forgery token.

      true if the data is valid, or false if the data is invalid.

      Information about the current request.

      The supplemental data that was embedded in the token.

    

    
      Provides access to unvalidated form values in the   object.

    

    
      Gets a collection of unvalidated form values that were posted from the browser.

      An unvalidated collection of form values.

    

    
      Gets the specified unvalidated object from the collection of posted values in the   object.

      The specified member, or null if the specified item is not found.

      The name of the collection member to get.

    

    
      Gets a collection of unvalidated query-string values.

      A collection of unvalidated query-string values.

    

    
      Excludes fields of the Request object from being checked for potentially unsafe HTML markup and client script.

    

    
      Returns a version of form values, cookies, and query-string variables without checking them first for HTML markup and client script.

      An object that contains unvalidated versions of the form and query-string values.

      The   object that contains values to exclude from request validation.

    

    
      Returns a value from the specified form field, cookie, or query-string variable without checking it first for HTML markup and client script.

      A string that contains unvalidated text from the specified field, cookie, or query-string value.

      The   object that contains values to exclude from validation.

      The name of the field to exclude from validation.   can refer to a form field, to a cookie, or to the query-string variable.

    

    
      Returns all values from the Request object (including form fields, cookies, and the query string) without checking them first for HTML markup and client script.

      An object that contains unvalidated versions of the form, cookie, and query-string values.

      The   object that contains values to exclude from validation.

    

    
      Returns the specified value from the Request object without checking it first for HTML markup and client script.

      A string that contains unvalidated text from the specified field, cookie, or query-string value.

      The   object that contains values to exclude from validation.

      The name of the field to exclude from validation.   can refer to a form field, to a cookie, or to the query-string variable.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      The message.

      The inner exception.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      The error message.

      The other.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      The error message.

      The minimum value.

      The maximum value.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Contains classes and properties that are used to create HTML elements. This class is used to write helpers, such as those found in the   namespace.

    

    
      Creates a new tag that has the specified tag name.

      The tag name without the "&lt;", "/", or "&gt;" delimiters.

      
          is null or empty.

    

    
      Adds a CSS class to the list of CSS classes in the tag.

      The CSS class to add.

    

    
      Gets the collection of attributes.

      The collection of attributes.

    

    
      Replaces each invalid character in the tag ID with a valid HTML character.

      The sanitized tag ID, or null if   is null or empty, or if   does not begin with a letter.

      The ID that might contain characters to replace.

    

    
      Replaces each invalid character in the tag ID with the specified replacement string.

      The sanitized tag ID, or null if   is null or empty, or if   does not begin with a letter.

      The ID that might contain characters to replace.

      The replacement string.

      
          is null.

    

    
      Generates a sanitized ID attribute for the tag by using the specified name.

      The name to use to generate an ID attribute.

    

    
      Gets or sets a string that can be used to replace invalid HTML characters.

      The string to use to replace invalid HTML characters.

    

    
      Gets or sets the inner HTML value for the element.

      The inner HTML value for the element.

    

    
      Adds a new attribute to the tag.

      The key for the attribute.

      The value of the attribute.

    

    
      Adds a new attribute or optionally replaces an existing attribute in the opening tag.

      The key for the attribute.

      The value of the attribute.

      true to replace an existing attribute if an attribute exists that has the specified   value, or false to leave the original attribute unchanged.

    

    
      Adds new attributes to the tag.

      The collection of attributes to add.

      The type of the key object.

      The type of the value object.

    

    
      Adds new attributes or optionally replaces existing attributes in the tag.

      The collection of attributes to add or replace.

      For each attribute in  , true to replace the attribute if an attribute already exists that has the same key, or false to leave the original attribute unchanged.

      The type of the key object.

      The type of the value object.

    

    
      Sets the   property of the element to an HTML-encoded version of the specified string.

      The string to HTML-encode.

    

    
      Gets the tag name for this tag.

      The name.

    

    
      Renders the element as a   element.

    

    
      Renders the HTML tag by using the specified render mode.

      The rendered HTML tag.

      The render mode.

    

    
      Enumerates the modes that are available for rendering HTML tags.

    

    
      Represents the mode for rendering normal text.

    

    
      Represents the mode for rendering an opening tag (for example, &lt;tag&gt;).

    

    
      Represents the mode for rendering a closing tag (for example, &lt;/tag&gt;).

    

    
      Represents the mode for rendering a self-closing tag (for example, &lt;tag /&gt;).

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Contains methods to register assemblies as application parts.

    

    
      Initializes a new instance of the   class by using the specified assembly and root virtual path.

      The assembly.

      The root virtual path.

      
          is null or empty.

    

    
      Resolves a path to the specified assembly or resource within an assembly by using the specified base virtual path and specified virtual path.

      The path of the assembly or resource.

      The assembly.

      The base virtual path.

      The virtual path.

      
          is not registered.

    

    
      Adds an assembly and all web pages within the assembly to the list of available application parts.

      The application part.

      
          is already registered.

    

    
      Provides objects and methods that are used to execute and render ASP.NET Web Pages application start pages (_AppStart.cshtml or _AppStart.vbhtml files).

    

    
      Initializes a new instance of the   class.

    

    
      Gets the HTTP application object that references this application startup page.

      The HTTP application object that references this application startup page.

    

    
      The prefix that is applied to all keys that are added to the cache by the application start page.

    

    
      Gets the   object that represents context data that is associated with this page.

      The current context data.

    

    
      Returns the text writer instance that is used to render the page.

      The text writer.

    

    
      Gets the output from the application start page as an HTML-encoded string.

      The output from the application start page as an HTML-encoded string.

    

    
      Gets the text writer for the page.

      The text writer for the page.

    

    
      The path to the application start page.

    

    
      Gets or sets the virtual path of the page.

      The virtual path.

    

    
      Writes the string representation of the specified object as an HTML-encoded string.

      The object to encode and write.

    

    
      Writes the specified   object as an HTML-encoded string.

      The helper result to encode and write.

    

    
      Writes the specified object without HTML encoding.

      The object to write.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Provides a way to specify custom browser (user agent) information.

    

    
      Removes any overridden user agent for the current request.

      The current context.

    

    
      Returns the browser capabilities object for the overridden browser capabilities or for the actual browser if no override has been specified.

      The browser capabilities.

      The current context.

    

    
      Returns the overridden user agent value or the actual user agent string if no override has been specified.

      The user agent string

      The current context.

    

    
      Gets a string that varies based on the type of the browser.

      A string that identifies the browser.

      The current context.

    

    
      Gets a string that varies based on the type of the browser. 

      A string that identifies the browser.

      The current context base.

    

    
      Overrides the request's actual user agent value using the specified user agent.

      The current context.

      The user agent to use.

    

    
      Overrides the request's actual user agent value using the specified browser override information.

      The current context.

      One of the enumeration values that represents the browser override information to use.

    

    
      Specifies browser types that can be defined for the   method.

    

    
      Specifies a desktop browser.

    

    
      Specifies a mobile browser.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Represents a base class for pages that is used when ASP.NET compiles a .cshtml or .vbhtml file and that exposes page-level and application-level properties and methods.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Gets the application-state data as a   object that callers can use to create and access custom application-scoped properties.

      The application-state data.

    

    
      Gets a reference to global application-state data that can be shared across sessions and requests in an ASP.NET application.

      The application-state data.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Gets the cache object for the current application domain.

      The cache object.

    

    
      Gets the   object that is associated with a page.

      The current context data.

    

    
      Gets the current page for this helper page.

      The current page.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Builds an absolute URL from an application-relative URL by using the specified parameters.

      The absolute URL.

      The initial path to use in the URL.

      Additional path information, such as folders and subfolders.

    

    
      Gets the   object that is associated with a page.

      An object that supports rendering HTML form controls in a page.

    

    
      Gets a value that indicates whether Ajax is being used during the request of the web page.

      true if Ajax is being used during the request; otherwise, false.

    

    
      Gets a value that indicates whether the current request is a post (submitted using the HTTP POST verb).

      true if the HTTP verb is POST; otherwise, false.

    

    
      Gets the model that is associated with a page.

      An object that represents a model that is associated with the view data for a page.

    

    
      Gets the state data for the model that is associated with a page.

      The state of the model.

    

    
      Gets property-like access to page data that is shared between pages, layout pages, and partial pages.

      An object that contains page data.

    

    
      Gets and sets the HTTP context for the web page.

      The HTTP context for the web page.

    

    
      Gets array-like access to page data that is shared between pages, layout pages, and partial pages.

      An object that provides array-like access to page data.

    

    
      Gets the   object for the current HTTP request.

      An   object that contains the HTTP values that were sent by a client during a web request.

    

    
      Gets the   object for the current HTTP response.

      An   object that contains the HTTP-response information from an ASP.NET operation.

    

    
      Gets the   object that provides methods that can be used as part of web-page processing.

      The   object.

    

    
      Gets the   object for the current HTTP request.

      The   object for the current HTTP request.

    

    
      Gets data related to the URL path.

      Data related to the URL path.

    

    
      Gets a user value based on the HTTP context.

      A user value based on the HTTP context.

    

    
      Gets the virtual path of the page.

      The virtual path.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code..

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Defines methods that are implemented by virtual path handler factories.

    

    
      Creates a handler factory for the specified virtual path.

      A handler factory for the specified virtual path.

      The virtual path.

    

    
      Determines whether the specified virtual path is associated with a handler factory.

      true if a handler factory exists for the specified virtual path; otherwise, false.

      The virtual path.

    

    
      Defines methods to implement an executor class that can execute the code on a web page.

    

    
      Executes the code on the specified web page.

      true if the executor took over execution of the web page; otherwise, false.

      The web page.

    

    
      Represents a path attribute for a web page class.

    

    
      Initializes a new instance of the   class by using the specified virtual path.

      The virtual path.

    

    
      Gets the virtual path of the current web page.

      The virtual path.

    

    
      Provides a registration point for pre-application start code for web pages.

    

    
      Registers pre-application start code for web pages.

    

    
      Defines extension methods for the   class.

    

    
      Determines whether the specified URL references the local computer.

      true if the specified URL references the local computer; otherwise, false.

      The HTTP request object.

      The URL to test.

    

    
      Serves as the abstract base class for the validation helper classes.

    

    
      Initializes a new instance of the derived class and specifies the name of the HTML element that is being validated.

      The name (value of the name attribute) of the user input element to validate.

    

    
      Initializes a new instance of the derived class, registers the specified string as the error message to display if no value is supplied, and specifies whether the method can use unvalidated data.

      The error message.

      true to use unvalidated user input; false to reject unvalidated data. This parameter is set to true by calling methods in circumstances when the actual value of the user input is not important, such as for required fields.

    

    
      When implemented in a derived class, gets a container for client validation for the required field.

      The container.

    

    
      Returns the HTTP context of the current request.

      The context.

      The validation context.

    

    
      Returns the value to validate.

      The value to validate.

      The current request.

      The name of the field from the current request to validate.

    

    
      Returns a value that indicates whether the specified value is valid.

      true if the value is valid; otherwise, false.

      The current context.

      The value to validate.

    

    
      Performs the validation test.

      The result of the validation test.

      The context.

    

    
      Defines extension methods for the   base class.

    

    
      Configures the cache policy of an HTTP response instance.

      The HTTP response instance.

      The length of time, in seconds, before items expire from the cache.

      true to indicate that items expire from the cache on a sliding basis; false to indicate that items expire when they reach the predefined expiration time.

      The list of all parameters that can be received by a GET or POST operation that affect caching.

      The list of all HTTP headers that affect caching.

      The list of all Content-Encoding headers that affect caching.

      One of the enumeration values that specifies how items are cached.

    

    
      Sets the HTTP status code of an HTTP response using the specified integer value.

      The HTTP response instance.

      The HTTP status code.

    

    
      Sets the HTTP status code of an HTTP response using the specified HTTP status code enumeration value.

      The HTTP response instance.

      The HTTP status code

    

    
      Writes a sequence of bytes that represent binary content of an unspecified type to the output stream of an HTTP response.

      The HTTP response instance.

      An array that contains the bytes to write.

    

    
      Writes a sequence of bytes that represent binary content of the specified MIME type to the output stream of an HTTP response.

      The receiving HTTP response instance.

      An array that contains the bytes to write.

      The MIME type of the binary content.

    

    
      Provides a delegate that represents one or more methods that are called when a content section is written.

    

    
      Provides methods and properties that are used to render start pages that use the Razor view engine.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets the child page of the current start page.

      The child page of the current start page.

    

    
      Gets or sets the context of the   page.

      The context of the   page.

    

    
      Calls the methods that are used to execute the developer-written code in the _PageStart start page and in the   page.

    

    
      Returns the text writer instance that is used to render the page.

      The text writer.

    

    
      Returns the initialization page for the specified page.

      The _AppStart page if the _AppStart page exists. If the _AppStart page cannot be found, returns the _PageStart page if a _PageStart page exists. If the _AppStart and _PageStart pages cannot be found, returns  .

      The page.

      The file name of the page.

      The collection of file-name extensions that can contain ASP.NET Razor syntax, such as "cshtml" and "vbhtml".

      Either   or   are null.

      
          is null or empty.

    

    
      Gets or sets the path of the layout page for the   page.

      The path of the layout page for the   page.

    

    
      Gets property-like access to   page data that is shared between pages, layout pages, and partial pages.

      An object that contains   page data.

    

    
      Gets array-like access to   page data that is shared between pages, layout pages, and partial pages.

      An object that provides array-like access to   page data.

    

    
      Renders the   page.

      The HTML markup that represents the web page.

      The path of the page to render.

      Additional data that is used to render the page.

    

    
      Executes the developer-written code in the   page.

    

    
      Writes the string representation of the specified object as an HTML-encoded string.

      The object to encode and write.

    

    
      Writes the string representation of the specified   object as an HTML-encoded string.

      The helper result to encode and write.

    

    
      Writes the string representation of the specified object without HTML encoding.

      The object to write.

    

    
      Provides utility methods for converting string values to other data types.

    

    
      Converts a string to a strongly typed value of the specified data type.

      The converted value.

      The value to convert.

      The data type to convert to.

    

    
      Converts a string to the specified data type and specifies a default value.

      The converted value.

      The value to convert.

      The value to return if   is null.

      The data type to convert to.

    

    
      Converts a string to a Boolean (true/false) value.

      The converted value.

      The value to convert.

    

    
      Converts a string to a Boolean (true/false) value and specifies a default value.

      The converted value.

      The value to convert.

      The value to return if   is null or is an invalid value.

    

    
      Converts a string to a   value.

      The converted value.

      The value to convert.

    

    
      Converts a string to a   value and specifies a default value.

      The converted value.

      The value to convert.

      The value to return if   is null or is an invalid value. The default is the minimum time value on the system.

    

    
      Converts a string to a   number.

      The converted value.

      The value to convert.

    

    
      Converts a string to a   number and specifies a default value.

      The converted value.

      The value to convert.

      The value to return if   is null or invalid.

    

    
      Converts a string to a   number.

      The converted value.

      The value to convert.

    

    
      Converts a string to a   number and specifies a default value.

      The converted value.

      The value to convert.

      The value to return if   is null.

    

    
      Converts a string to an integer.

      The converted value.

      The value to convert.

    

    
      Converts a string to an integer and specifies a default value.

      The converted value.

      The value to convert.

      The value to return if   is null or is an invalid value.

    

    
      Checks whether a string can be converted to the specified data type.

      true if   can be converted to the specified type; otherwise, false.

      The value to test.

      The data type to convert to.

    

    
      Checks whether a string can be converted to the Boolean (true/false) type.

      true if   can be converted to the specified type; otherwise, false.

      The string value to test.

    

    
      Checks whether a string can be converted to the   type.

      true if   can be converted to the specified type; otherwise, false.

      The string value to test.

    

    
      Checks whether a string can be converted to the   type.

      true if   can be converted to the specified type; otherwise, false.

      The string value to test.

    

    
      Checks whether a string value is null or empty.

      true if   is null or is a zero-length string (""); otherwise, false.

      The string value to test.

    

    
      Checks whether a string can be converted to the   type.

      true if   can be converted to the specified type; otherwise, false.

      The string value to test.

    

    
      Checks whether a string can be converted to an integer.

      true if   can be converted to the specified type; otherwise, false.

      The string value to test.

    

    
      Contains methods and properties that describe a file information template.

    

    
      Initializes a new instance of the   class by using the specified virtual path.

      The virtual path.

    

    
      Gets the virtual path of the web page.

      The virtual path.

    

    
      Represents a last-in-first-out (LIFO) collection of   template files.

    

    
      Returns the current template file from the specified HTTP context.

      The template file, removed from the top of the stack.

       The HTTP context that contains the stack that stores the template files.

    

    
      Removes and returns the template file that is at the top of the stack in the specified HTTP context.

      The template file, removed from the top of the stack.

      The HTTP context that contains the stack that stores the template files.

      
          is null.

    

    
      Inserts a template file at the top of the stack in the specified HTTP context.

      The HTTP context that contains the stack that stores the template files.

      The template file to push onto the specified stack.

      
          or   are null.

    

    
      Implements validation for user input.

    

    
      Registers a list of user input elements for validation.

      The names (value of the name attribute) of the user input elements to validate.

      The type of validation to register for each user input element specified in  .

    

    
      Registers a user input element for validation.

      The name (value of the name attribute) of the user input element to validate.

      A list of one or more types of validation to register.

    

    

    
      Renders an attribute that references the CSS style definition to use when validation messages for the user input element are rendered.

      The attribute.

      The name (value of the name attribute) of the user input element to validate.

    

    
      Renders attributes that enable client-side validation for an individual user input element.

      The attributes to render.

      The name (value of the name attribute) of the user input element to validate.

    

    
      Gets the name of the current form. This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code. 

      The name.

    

    
      Returns a list of current validation errors, , and optionally lets you specify a list of fields to check.

      The list of errors.

      Optional. The names (value of the name attribute) of the user input elements to get error information for. You can specify any number of element names, separated by commas. If you do not specify a list of fields, the method returns errors for all fields.

    

    
      Gets the name of the class that is used to specify the appearance of error-message display when errors have occurred. This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code. 

      The name.

    

    
      Determines whether the contents of the user input fields pass validation checks, and optionally lets you specify a list of fields to check.

      true if all specified field or fields pass validation checks; false if any field contains a validation error.

      Optional. The names (value of the name attribute) of the user input elements to check for validation errors. You can specify any number of element names, separated by commas. If you do not specify a list of fields, the method checks all elements that are registered for validation.

    

    
      Registers the specified field as one that requires user entry.

      The name (value of the name attribute) of the user input element to validate.

    

    
      Registers the specified field as one that requires user entry and registers the specified string as the error message to display if no value is supplied.

      The name (value of the name attribute) of the user input element to validate.

      The error message.

    

    
      Registers the specified fields as ones that require user entry.

      The names (value of the name attribute) of the user input elements to validate. You can specify any number of element names, separated by commas.

    

    
      Performs validation on elements registered for validation, and optionally lets you specify a list of fields to check.

      The list of errors for the specified fields, if any validation errors occurred.

      Optional. The names (value of the name attribute) of the user input elements to validate. You can specify any number of element names, separated by commas. If you do not specify a list, the method validates all registered elements.

    

    
      Gets the name of the class that is used to specify the appearance of error-message display when errors have occurred. This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code. 

      The name.

    

    
      Defines validation tests that can be registered using the   method.

    

    
      Initializes a new instance of the   class.

    

    
      Defines a validation test that tests whether a value can be treated as a date/time value.

      The validation test.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether a value can be treated as a decimal number.

      The validation test.

      The error message to display if validation fails.

    

    
      Defines a validation test that test user input against the value of another field.

      The validation test.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether a value can be treated as a floating-point number.

      The validation test.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether a value can be treated as an integer.

      The validation test.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether a decimal number falls within a specific range.

      The validation test.

      The minimum value. The default is 0.

      The maximum value.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether an integer value falls within a specific range.

      The validation test.

      The minimum value. The default is 0.

      The maximum value. 

      The error message to display if validation fails.

    

    
      Defines a validation test that tests a value against a pattern specified as a regular expression.

      The validation test.

      The regular expression to use to test the user input.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether a value has been provided.

      The validation test.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests the length of a string.

      The validation test.

      The maximum length of the string.

      The minimum length of the string. The default is 0.

      The error message to display if validation fails.

    

    
      Defines a validation test that tests whether a value is a well-formed URL.

      The validation test.

      The error message to display if validation fails.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Represents an ASP.NET Razor page.

    

    
      Called from a derived class to create a new instance that is based on the   class.

    

    
      Gets or sets the   object that is associated with a page.

      The current context data.

    

    
      Executes the code in a set of dependent pages.

    

    
      Gets the   object that is associated with a page.

      An object that can render HTML form controls in a page.

    

    
      Initializes an object that inherits from the   class.

    

    
      Gets the model that is associated with a page.

      An object that represents a model that is associated with the view data for a page.

    

    
      Gets the state of the model that is associated with a page.

      The state of the model.

    

    
      Adds a class to a list of classes that handle page execution and that implement custom features for pages.

      The class to add.

    

    
      Renders a content page.

      An object that can write the output of the page.

      The path of the page to render.

      Data to pass to the page.

    

    
      Gets the validation helper for the current page context.

      The validation helper.

    

    
      Serves as the base class for classes that represent an ASP.NET Razor page.

    

    
      Initializes the   class for use by an inherited class instance. This constructor can only be called by an inherited class.

    

    
      When overridden in a derived class, configures the current web page based on the configuration of the parent web page.

      The parent page from which to read configuration information.

    

    
      Creates a new instance of the   class by using the specified virtual path.

      The new   object.

      The virtual path to use to create the instance.

    

    
      Called by content pages to create named content sections.

      The name of the section to create.

      The type of action to take with the new section.

    

    
      Executes the code in a set of dependent web pages.

    

    
      Executes the code in a set of dependent web pages by using the specified parameters.

      The context data for the page.

      The writer to use to write the executed HTML.

    

    
      Executes the code in a set of dependent web pages by using the specified context, writer, and start page.

      The context data for the page.

      The writer to use to write the executed HTML.

      The page to start execution in the page hierarchy.

    

    
      Returns the text writer instance that is used to render the page.

      The text writer.

    

    
      Initializes the current page.

    

    
      Returns a value that indicates whether the specified section is defined in the page.

      true if the specified section is defined in the page; otherwise, false.

      The name of the section to search for.

    

    
      Gets or sets the path of a layout page.

      The path of the layout page.

    

    
      Gets the current   object for the page.

      The   object.

    

    
      Gets the stack of   objects for the current page context.

      The   objects.

    

    
      Provides property-like access to page data that is shared between pages, layout pages, and partial pages.

      An object that contains page data.

    

    
      Provides array-like access to page data that is shared between pages, layout pages, and partial pages.

      A dictionary that contains page data.

    

    
      Returns and removes the context from the top of the   instance.

    

    
      Inserts the specified context at the top of the   instance.

      The page context to push onto the   instance.

      The writer for the page context.

    

    
      In layout pages, renders the portion of a content page that is not within a named section.

      The HTML content to render.

    

    
      Renders the content of one page within another page.

      The HTML content to render.

      The path of the page to render.

      (Optional) An array of data to pass to the page being rendered. In the rendered page, these parameters can be accessed by using the   property.

    

    
      In layout pages, renders the content of a named section.

      The HTML content to render.

      The section to render.

      The   section was already rendered.-or-The   section was marked as required but was not found.

    

    
      In layout pages, renders the content of a named section and specifies whether the section is required.

      The HTML content to render.

      The section to render.

      true to specify that the section is required; otherwise, false.

    

    
      Writes the specified object as an HTML-encoded string.

      The object to encode and write.

    

    
      Writes the specified   object as an HTML-encoded string.

      The helper result to encode and write.

    

    
      Writes the specified object without HTML-encoding it first.

      The object to write.

    

    
      Contains data that is used by a   object to reference details about the web application, the current HTTP request, the current execution context, and page-rendering data.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the class by using the specified context, page, and model.

      The HTTP request context data to associate with the page context.

      The page data to share between pages, layout pages, and partial pages.

      The model to associate with the view data.

    

    
      Gets a reference to the current   object that is associated with a page.

      The current page context object.

    

    
      Gets the model that is associated with a page.

      An object that represents a model that is associated with the view data for a page.

    

    
      Gets the   object that is associated with a page.

      The object that renders the page.

    

    
      Gets the page data that is shared between pages, layout pages, and partial pages.

      A dictionary that contains page data.

    

    
      Provides objects and methods that are used to execute and render ASP.NET pages that include Razor syntax.

    

    
      Initializes  the   class for use by an inherited class instance. This constructor can only be called by an inherited class.

    

    
      Gets the application-state data as a   object that callers can use to create and access custom application-scoped properties.

      The application-state data.

    

    
      Gets a reference to global application-state data that can be shared across sessions and requests in an ASP.NET application.

      The application-state data.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      When overridden in a derived class, gets or sets the   object that is associated with a page.

      The current context data.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Executes the server code in the current web page that is marked using Razor syntax.

    

    
      Returns the text writer instance that is used to render the page.

      The text writer.

    

    
      Builds an absolute URL from an application-relative URL by using the specified parameters.

      The absolute URL.

      The initial path to use in the URL.

      Additional path information, such as folders and subfolders.

    

    
      Returns a normalized path from the specified path.

      The normalized path.

      The path to normalize.

    

    
      Gets or sets the virtual path of the page.

      The virtual path.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Writes the string representation of the specified object as an HTML-encoded string.

      The object to encode and write.

    

    
      Writes the specified   object as an HTML-encoded string.

      The helper result to encode and write.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Writes the specified object without HTML encoding.

      The object to write.

    

    
      Writes the specified object to the specified   instance without HTML encoding.

      The text writer.

      The object to write.

    

    
      Writes the specified object as an HTML-encoded string to the specified text writer.

      The text writer.

      The object to encode and write.

    

    
      Writes the specified   object as an HTML-encoded string to the specified text writer.

      The text writer.

      The helper result to encode and write.

    

    
      Provides methods and properties that are used to process specific URL extensions.

    

    
      Initializes a new instance of the   class by using the specified web page.

      The web page to process.

      
          is null.

    

    
      Creates a new   handler object from the specified virtual path.

      A   object for the specified virtual path.

      The virtual path to use to create the handler.

    

    
      Gets or sets a value that indicates whether web page response headers are disabled.

      true if web page response headers are disabled; otherwise, false.

    

    
      Returns a list of file name extensions that the current   instance can process.

      A read-only list of file name extensions that are processed by the current   instance.

    

    
      Gets a value that indicates whether another request can use the   instance.

      true if the   instance is reusable; otherwise, false.

    

    
      Processes the web page by using the specified context.

      The context to use when processing the web page.

    

    
      Adds a file name extension to the list of extensions that are processed by the current   instance.

      The extension to add, without a leading period.

    

    
      The HTML tag name (X-AspNetWebPages-Version) for the version of the ASP.NET Web Pages specification that is used by this web page.

    

    
      Provides methods and properties that are used to render pages that use the Razor view engine.

    

    
      Initializes a new instance of the   class.

    

    
      When overridden in a derived class, gets the cache object for the current application domain.

      The cache object.

    

    
      When overridden in a derived class, gets or sets the culture for the current thread.

      The culture for the current thread.

    

    
      Gets the display mode for the request.

      The display mode.

    

    
      When overridden in a derived class, calls the methods that are used to initialize the page.

    

    
      When overridden in a derived class, get a value that indicates whether Ajax is being used during the request of the web page.

      true if Ajax is being used during the request; otherwise, false.

    

    
      When overridden in a derived class, returns a value that indicates whether the HTTP data transfer method used by the client to request the web page is a POST request.

      true if the HTTP verb is "POST"; otherwise, false.

    

    
      When overridden in a derived class, gets or sets the path of a layout page.

      The path of a layout page.

    

    
      When overridden in a derived class, provides property-like access to page data that is shared between pages, layout pages, and partial pages.

      An object that contains page data.

    

    
      When overridden in a derived class, gets the HTTP context for the web page.

      The HTTP context for the web page.

    

    
      When overridden in a derived class, provides array-like access to page data that is shared between pages, layout pages, and partial pages.

      An object that provides array-like access to page data.

    

    
      Gets profile information for the current request context.

      The profile information.

    

    
      When overridden in a derived class, renders a web page.

      The markup that represents the web page.

      The path of the page to render.

      Additional data that is used to render the page.

    

    
      When overridden in a derived class, gets the   object for the current HTTP request.

      An   object that contains the HTTP values sent by a client during a web request.

    

    
      When overridden in a derived class, gets the   object for the current HTTP response.

      An   object that contains the HTTP response information from an ASP.NET operation.

    

    
      When overridden in a derived class, gets the   object that provides methods that can be used as part of web-page processing.

      The   object.

    

    
      When overridden in a derived class, gets the   object for the current HTTP request.

      Session data for the current request.

    

    
      When overridden in a derived class, gets information about the currently executing file.

      Information about the currently executing file.

    

    
      When overridden in a derived class, gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.

      The current culture used by the Resource Manager.

    

    
      When overridden in a derived class, gets data related to the URL path.

      Data related to the URL path.

    

    
      When overridden in a derived class, gets a user value based on the HTTP context.

      A user value based on the HTTP context.

    

    
      Provides support for rendering HTML form controls and performing form validation in a web page.

    

    
      Returns an HTML-encoded string that represents the specified object by using a minimal encoding that is suitable only for HTML attributes that are enclosed in quotation marks.

      An HTML-encoded string that represents the object.

      The object to encode.

    

    
      Returns an HTML-encoded string that represents the specified string by using a minimal encoding that is suitable only for HTML attributes that are enclosed in quotation marks.

      An HTML-encoded string that represents the original string.

      The string to encode

    

    
      Returns an HTML check box control that has the specified name.

      The HTML markup that represents the check box control.

      The value to assign to the name attribute of the HTML control element.

      
          is null or empty.

    

    
      Returns an HTML check box control that has the specified name and default checked status.

      The HTML markup that represents the check box control.

      The value to assign to the name attribute of the HTML control element.

      true to indicate that the checked attribute is set to checked; otherwise, false.

      
          is null or empty.

    

    
      Returns an HTML check box control that has the specified name, default checked status, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the check box control.

      The value to assign to the name attribute of the HTML control element.

      true to indicate that the checked attribute is set to checked; otherwise, false.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML check box control that has the specified name, default checked status, and custom attributes defined by an attribute object.

      The HTML markup that represents the check box control.

      The value to assign to the name attribute of the HTML control element.

      true to indicate that the checked attribute is set to checked; otherwise, false.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML check box control that has the specified name and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the check box control.

       The value to assign to the name attribute of the HTML control element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML check box control that has the specified name and custom attributes defined by an attribute object.

      The HTML markup that represents the check box control.

      The value to assign to the name attribute of the HTML control element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name and that contains the specified list items.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name and custom attributes defined by an attribute dictionary, and that contains the specified list items.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name and custom attributes defined by an attribute object, and that contains the specified list items.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name, and that contains the specified list items and default item.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name and custom attributes defined by an attribute dictionary, and that contains the specified list items and default item.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name and custom attributes defined by an attribute object, and that contains the specified list items and default item.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name, custom attributes defined by an attribute dictionary, and default selection, and that contains the specified list items and default item.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      The value that specifies the item in the list that is selected by default. The selected item is the first item in the list whose value matches the parameter (or whose text matches, if there is no value.) 

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML drop-down list control that has the specified name, custom attributes defined by an attribute object, and default selection, and that contains the specified list items and default item.

      The HTML markup that represents the drop-down list control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      The value that specifies the item in the list that is selected by default. The item that is selected is the first item in the list that has a matching value, or that matches the items displayed text if the item has no value.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML-encoded string that represents the specified object by using a full encoding that is suitable for arbitrary HTML.

      An HTML-encoded string that represents the object.

      The object to encode.

    

    
      Returns an HTML-encoded string that represents the specified string by using a full encoding that is suitable for arbitrary HTML.

      An HTML-encoded string that represents the original string.

      The string to encode.

    

    
      Returns an HTML hidden control that has the specified name.

      The HTML markup that represents the hidden control.

      The value to assign to the name attribute of the HTML control element.

      
          is null or empty.

    

    
      Returns an HTML hidden control that has the specified name and value.

      The HTML markup that represents the hidden control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      
          is null or empty.

    

    
      Returns an HTML hidden control that has the specified name, value, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the hidden control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML hidden control that has the specified name, value, and custom attributes defined by an attribute object.

      The HTML markup that represents the hidden control.

       The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Gets or sets the character that is used to replace the dot (.) in the id attribute of rendered form controls.

      The character that is used to replace the dot in the id attribute of rendered form controls. The default is an underscore (_).

    

    
      Returns an HTML label that displays the specified text.

      The HTML markup that represents the label.

      The text to display.

      
          is null or empty.

    

    
      Returns an HTML label that displays the specified text and that has the specified custom attributes.

      The HTML markup that represents the label.

      The text to display.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML label that displays the specified text and that has the specified for attribute.

      The HTML markup that represents the label.

      The text to display.

      The value to assign to the for attribute of the HTML control element.

      
          is null or empty.

    

    
      Returns an HTML label that displays the specified text, and that has the specified for attribute and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the label.

      The text to display.

       The value to assign to the for attribute of the HTML control element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML label that displays the specified text, and that has the specified for attribute and custom attributes defined by an attribute object.

      The HTML markup that represents the label.

      The text to display.

      The value to assign to the for attribute of the HTML control element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name and that contains the specified list items.

      The HTML markup that represents the list box control.

       The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name and custom attributes defined by an attribute dictionary, and that contains the specified list items.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name and custom attributes defined by an attribute object, and that contains the specified list items.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name, size, list items, and default selections, and that specifies whether multiple selections are enabled.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      A list of   instances that are used to populate the list.

      An object that specifies the items in the list that are selected by default. The selections are retrieved through reflection by examining the properties of the object.

      The value to assign to the size attribute of the element.

      true to indicate that the multiple selections are enabled; otherwise, false.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name, and that contains the specified list items and default item.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list box.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name and custom attributes defined by an attribute dictionary, and that contains the specified list items and default item.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name and custom attributes defined by an attribute object, and that contains the specified list items and default item.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list box.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name and custom attributes defined by an attribute dictionary, and that contains the specified list items, default item, and selections.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      An object that specifies the items in the list that are selected by default. The selections are retrieved through reflection by examining the properties of the object. 

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name, size, items, default item, and selections, and that specifies whether multiple selections are enabled.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      An object that specifies the items in the list that are selected by default. The selections are retrieved through reflection by examining the properties of the object.

      The value to assign to the size attribute of the element.

      true to indicate that multiple selections are enabled; otherwise, false.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name, size, custom attributes defined by an attribute dictionary, items, default item, and selections, and that specifies whether multiple selections are enabled.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      An object that specifies the items in the list that are selected by default. The selections are retrieved through reflection by examining the properties of the object.

      The value to assign to the size attribute of the element.

      true to indicate that multiple selections are enabled; otherwise, false.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name, size, custom attributes defined by an attribute object, items, default item, and selections, and that specifies whether multiple selections are enabled.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      An object that specifies the items in the list that are selected by default. The selections are retrieved through reflection by examining the properties of the object.

      The value to assign to the size attribute of the element.

      true to indicate that multiple selections are enabled; otherwise, false.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML list box control that has the specified name, items, default item, and custom attributes defined by an attribute object, and selections.

      The HTML markup that represents the list box control.

      The value to assign to the name attribute of the HTML select element.

      The text to display for the default option in the list.

      A list of   instances that are used to populate the list.

      An object that specifies the items in the list that are selected by default. The selections are retrieved through reflection by examining the properties of the object.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML password control that has the specified name.

      The HTML markup that represents the password control.

      The value to assign to the name attribute of the HTML control element.

      
          is null or empty.

    

    
      Returns an HTML password control that has the specified name and value.

      The HTML markup that represents the password control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      
          is null or empty.

    

    
      Returns an HTML password control that has the specified name, value, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the password control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML password control that has the specified name, value, and custom attributes defined by an attribute object.

      The HTML markup that represents the password control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

       An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML radio button control that has the specified name and value.

      The HTML markup that represents the radio button control.

      The value to assign to the name attribute of the HTML control element. The name attribute defines the group that the radio button belongs to.

      The value to assign to the value attribute of the element.

      
          is null or empty.

    

    
      Returns an HTML radio button control that has the specified name, value, and default selected status.

      The HTML markup that represents the radio button control.

      The value to assign to the name attribute of the HTML control element. The name attribute defines the group that the radio button belongs to.

      The value to assign to the value attribute of the element.

      true to indicate that the control is selected; otherwise, false.

      
          is null or empty.

    

    
      Returns an HTML radio button control that has the specified name, value, default selected status, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the radio button control.

      The value to assign to the name attribute of the HTML control element. The name attribute defines the group that the radio button belongs to.

      The value to assign to the value attribute of the element.

      true to indicate that the control is selected; otherwise, false.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML radio button control that has the specified name, value, default selected status, and custom attributes defined by an attribute object.

      The HTML markup that represents the radio button control.

      The value to assign to the name attribute of the HTML control element. The name attribute defines the group that the radio button belongs to.

      The value to assign to the value attribute of the element.

      true to indicate that the control is selected; otherwise, false.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML radio button control that has the specified name, value, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the radio button control.

      The value to assign to the name attribute of the HTML control element. The name attribute defines the group that the radio button belongs to.

      The value to assign to the value attribute of the element.

       The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML radio button control that has the specified name, value, and custom attributes defined by an attribute object.

      The HTML markup that represents the radio button control.

      The value to assign to the name attribute of the HTML control element. The name attribute defines the group that the radio button belongs to.

      The value to assign to the value attribute of the element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Wraps HTML markup in an   instance so that it is interpreted as HTML markup.

      The unencoded HTML.

      The object to render HTML for.

    

    
      Wraps HTML markup in an   instance so that it is interpreted as HTML markup.

      The unencoded HTML.

      The string to interpret as HTML markup instead of being HTML-encoded.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textarea element.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textarea element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name and custom attributes defined by an attribute object.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textarea element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name and value.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textrarea element.

      The text to display.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name, value, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textarea element.

      The text to display.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name, value, row attribute, col attribute, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textarea element.

      The text to display.

      The value to assign to the rows attribute of the element.

      The value to assign to the cols attribute of the element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name, value, row attribute, col attribute, and custom attributes defined by an attribute object.

      The HTML markup that represents the text area control.

       The value to assign to the name attribute of the HTML textarea element.

      The text to display.

      The value to assign to the rows attribute of the element.

      The value to assign to the cols attribute of the element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML multi-line text input (text area) control that has the specified name, value, and custom attributes defined by an attribute object.

      The HTML markup that represents the text area control.

      The value to assign to the name attribute of the HTML textarea element.

      The text to display.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML text control that has the specified name.

      The HTML markup that represents the text control.

      The value to assign to the name attribute of the HTML control element.

      
          is null or empty.

    

    
      Returns an HTML text control that has the specified name and value.

      The HTML markup that represents the text control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      
          is null or empty.

    

    
      Returns an HTML text control that has the specified name, value, and custom attributes defined by an attribute dictionary.

      The HTML markup that represents the text control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML text control that has the specified name, value, and custom attributes defined by an attribute object.

      The HTML markup that represents the text control.

      The value to assign to the name attribute of the HTML control element.

      The value to assign to the value attribute of the element.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Gets or sets a value that indicates whether the page uses unobtrusive JavaScript for Ajax functionality.

      true if the page uses unobtrusive JavaScript; otherwise, false.

    

    
      Gets or sets the name of the CSS class that defines the appearance of input elements when validation fails.

      The name of the CSS class. The default is field-validation-error.

    

    
      Gets or sets the name of the CSS class that defines the appearance of input elements when validation passes.

      The name of the CSS class. The default is input-validation-valid.

    

    
      Returns an HTML span element that contains the first validation error message for the specified form field.

      If the value in the specified field is valid, null; otherwise, the HTML markup that represents the validation error message that is associated with the specified field.

      The name of the form field that was validated.

      
          is null or empty.

    

    
      Returns an HTML span element that has the specified custom attributes defined by an attribute dictionary, and that contains the first validation error message for the specified form field.

      If the value in the specified field is valid, null; otherwise, the HTML markup that represents the validation error message that is associated with the specified field.

      The name of the form field that was validated.

      The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML span element that has the specified custom attributes defined by an attribute object, and that contains the first validation error message for the specified form field.

      If the value in the specified field is valid, null; otherwise, the HTML markup that represents the validation error message that is associated with the specified field.

      The name of the form field that was validated.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Returns an HTML span element that contains a validation error message for the specified form field.

      If the value in the specified field is valid, null; otherwise, the HTML markup that represents the validation error message that is associated with the specified field.

      The name of the form field that was validated.

      The validation error message to display. If null, the first validation error message that is associated with the specified form field is displayed.

      
          is null or empty.

    

    
      Returns an HTML span element that has the specified custom attributes defined by an attribute dictionary, and that contains a validation error message for the specified form field.

      If the specified field is valid, null; otherwise, the HTML markup that represents a validation error message that is associated with the specified field.

      The name of the form field that was validated.

      The validation error message to display. If null, the first validation error message that is associated with the specified form field is displayed.

       The names and values of custom attributes for the element.

      
          is null or empty.

    

    
      Returns an HTML span element that has the specified custom attributes defined by an attribute object, and that contains a validation error message for the specified form field.

      If the specified field is valid, null; otherwise, the HTML markup that represents a validation error message that is associated with the specified field.

      The name of the form field that was validated.

      The validation error message to display. If null, the first validation error message that is associated with the specified form field is displayed.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

      
          is null or empty.

    

    
      Gets or sets the name of the CSS class that defines the appearance of validation error messages when validation fails.

      The name of the CSS class.  The default is field-validation-error.

    

    
      Gets or sets the name of the CSS class that defines the appearance of validation error messages when validation passes.

      The name of the CSS class. The default is field-validation-valid.

    

    
      Returns an HTML div element that contains an unordered list of all validation error messages from the model-state dictionary.

      The HTML markup that represents the validation error messages.

    

    
      Returns an HTML div element that contains an unordered list of validation error message from the model-state dictionary, optionally excluding field-level errors.

      The HTML markup that represents the validation error messages.

      true to exclude field-level validation error messages from the list; false to include both model-level and field-level validation error messages.

    

    
      Returns an HTML div element that has the specified custom attributes defined by an attribute dictionary, and that contains an unordered list of all validation error messages that are in the model-state dictionary.

      The HTML markup that represents the validation error messages.

      The names and values of custom attributes for the element.

    

    
      Returns an HTML div element that has the specified custom attributes defined by an attribute object, and that contains an unordered list of all validation error messages that are in the model-state dictionary.

      The HTML markup that represents the validation error messages.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

    

    
      Returns an HTML div element that contains a summary message and an unordered list of all validation error messages that are in the model-state dictionary.

      The HTML markup that represents the validation error messages.

      The message that comes before the list of validation error messages.

    

    
      Returns an HTML div element that has the specified custom attributes defined by an attribute dictionary, and that contains a summary message and an unordered list of validation error message from the model-state dictionary, optionally excluding field-level errors.

      The HTML markup that represents the validation error messages.

      The summary message that comes before the list of validation error messages.

      true to exclude field-level validation error messages from the results; false to include both model-level and field-level validation error messages.

      The names and values of custom attributes for the element.

    

    
      Returns an HTML div element that has the specified custom attributes defined by an attribute object, and that contains a summary message and an unordered list of validation error message from the model-state dictionary, optionally excluding field-level errors.

      The HTML markup that represents the validation error messages.

      The summary message that comes before the list of validation error messages.

      true to exclude field-level validation error messages from the results; false to include and field-level validation error messages.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

    

    
      Returns an HTML div element that has the specified custom attributes defined by an attribute dictionary, and that contains a summary message and an unordered list of all validation error message from the model-state dictionary.

      The HTML markup that represents the validation error messages.

      The message that comes before the list of validation error messages.

      The names and values of custom attributes for the element.

    

    
      Returns an HTML div element that has the specified custom attributes defined by an attribute object, and that contains a summary message and an unordered list of all validation error message from the model-state dictionary.

      The HTML markup that represents the validation error messages.

      The summary message that comes before the list of validation error messages.

      An object that contains custom attributes for the element. The attribute names and values are retrieved through reflection by examining the properties of the object.

    

    
      Gets or sets the name of the CSS class that defines the appearance of a validation summary when validation fails.

      The name of the CSS class. The default is validation-summary-errors.

    

    
      Gets or sets the name of the CSS class that defines the appearance of a validation summary when validation passes.

      The name of the CSS class. The default is validation-summary-valid.

    

    
      Encapsulates the state of model binding to a property of an action-method argument, or to the argument itself.

    

    
      Initializes a new instance of the   class.

    

    
      Returns a list of strings that contains any errors that occurred during model binding.

      The errors that occurred during model binding.

    

    
      Returns an object that encapsulates the value that was bound during model binding.

      The value that was bound.

    

    
      Represents the result of binding a posted form to an action method, which includes information such as validation status and validation error messages.

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class by using values that are copied from the specified model-state dictionary.

      The model-state dictionary that values are copied from.

    

    
      Adds the specified item to the model-state dictionary.

      The item to add to the model-state dictionary.

    

    
      Adds an item that has the specified key and value to the model-state dictionary.

      The key.

      The value.

    

    
      Adds an error message to the model state that is associated with the specified key.

      The key that is associated with the model state that the error message is added to.

      The error message.

    

    
      Adds an error message to the model state that is associated with the entire form.

      The error message.

    

    
      Removes all items from the model-state dictionary.

    

    
      Determines whether the model-state dictionary contains the specified item.

      true if the model-state dictionary contains the specified item; otherwise, false.

      The item to look for.

    

    
      Determines whether the model-state dictionary contains the specified key.

      true if the model-state dictionary contains the specified key; otherwise, false.

      The key to look for.

    

    
      Copies the elements of the model-state dictionary to an array, starting at the specified index.

      The one-dimensional   instance where the elements will be copied to.

      The index in   at which copying begins.

    

    
      Gets the number of model states that the model-state dictionary contains.

      The number of model states in the model-state dictionary.

    

    
      Returns an enumerator that can be used to iterate through the collection.

      An enumerator that can be used to iterate through the collection.

    

    
      Gets a value that indicates whether the model-state dictionary is read-only.

      true if the model-state dictionary is read-only; otherwise, false.

    

    
      Gets a value that indicates whether any error messages are associated with any model state in the model-state dictionary.

      true if any error messages are associated with any model state in the dictionary; otherwise, false.

    

    
      Determines whether any error messages are associated with the specified key.

      true if no error messages are associated with the specified key, or the specified key does not exist; otherwise, false.

      The key.

      
          is null.

    

    
      Gets or sets the model state that is associated with the specified key in the model-state dictionary.

      The model state that is associated with the specified key in the dictionary.

      The key that is associated with the model state.

    

    
      Gets a list that contains the keys in the model-state dictionary.

      The list of keys in the dictionary.

    

    
      Copies the values from the specified model-state dictionary into this   instance, overwriting existing values when the keys are the same.

      The model-state dictionary that values are copied from.

    

    
      Removes the first occurrence of the specified item from the model-state dictionary.

      true if the item was successfully removed from the model-state dictionary; false if the item was not removed or if the item does not exist in the model-state dictionary.

      The item to remove.

    

    
      Removes the item that has the specified key from the model-state dictionary.

      true if the item was successfully removed from the model-state dictionary; false if the item was not removed or does not exist in the model-state dictionary.

      The key of the element to remove.

    

    
      Sets the value of the model state that is associated with the specified key.

      The key to set the value of.

      The value to set the key to.

    

    
      Returns an enumerator that can be used to iterate through the model-state dictionary.

      An enumerator that can be used to iterate through the model-state dictionary.

    

    
      Gets the model-state value that is associated with the specified key.

      true if the model-state dictionary contains an element that has the specified key; otherwise, false.

      The key to get the value of.

      When this method returns, if the key is found, contains the model-state value that is associated with the specified key; otherwise, contains the default value for the   type. This parameter is passed uninitialized.

    

    
      Gets a list that contains the values in the model-state dictionary.

      The list of values in the dictionary.

    

    
      Represents an item in an HTML select list.

    

    
      Initializes a new instance of the   class using the default settings.

    

    
      Initializes a new instance of the   class by copying the specified select list item.

      The select list item to copy.

    

    
      Gets or sets a value that indicates whether the   instance is selected.

      true if the select list item is selected; otherwise, false.

    

    
      Gets or sets the text that is used to display the   instance on a web page.

      The text that is used to display the select list item.

    

    
      Gets or sets the value of the HTML value attribute of the HTML option element that is associated with the   instance.

      The value of the HTML value attribute that is associated with the select list item.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

      

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.

    

    
      Defines an ASP.NET request scope storage provider.

    

    
      Initializes a new instance of the   class.

    

    
      Gets the dictionary to store data in the application scope.

      The dictionary that stores application scope data.

    

    
      Gets or sets the dictionary to store data in the current scope.

      The dictionary that stores current scope data.

      The application start page was not executed before the attempt was made to set this property.

    

    
      Gets the dictionary to store data in the global scope.

      The dictionary that stores global scope data.

    

    
      Gets the dictionary to store data in the request scope.

      The dictionary that stores request scope data.

      The application start page was not executed before the attempt was made to get this property.

    

    
      Defines a dictionary that provides scoped access to data.

    

    
      Gets and sets the dictionary that is used to store data in the current scope.

      The dictionary that stores current scope data.

    

    
      Gets the dictionary that is used to store data in the global scope.

      The dictionary that stores global scope data.

    

    
      Defines a class that is used to contain storage for a transient scope.

    

    
      Returns a dictionary that is used to store data in a transient scope, based on the scope in the   property.

      The dictionary that stores transient scope data.

    

    
      Returns a dictionary that is used to store data in a transient scope.

      The dictionary that stores transient scope data.

      The context.

    

    
      Gets or sets the current scope provider.

      The current scope provider.

    

    
      Gets the dictionary that is used to store data in the current scope.

      The dictionary that stores current scope data.

    

    
      Gets the dictionary that is used to store data in the global scope.

      The dictionary that stores global scope data.

    

    
      Represents a collection of keys and values that are used to store data at different scope levels (local, global, and so on).

    

    
      Initializes a new instance of the   class.

    

    
      Initializes a new instance of the   class using the specified base scope.

      The base scope.

    

    
      Adds a key/value pair to the   object using the specified generic collection.

      The key/value pair.

    

    
      Adds the specified key and specified value to the   object.

      The key.

      The value.

    

    
      Gets the dictionary that stores the   object data.

    

    
      Gets the base scope for the   object.

      The base scope for the   object.

    

    
      Removes all keys and values from the concatenated   and   objects.

    

    
      Returns a value that indicates whether the specified key/value pair exists in either the   object or in the   object.

      true if the   object or the   object contains an element that has the specified key/value pair; otherwise, false.

      The key/value pair.

    

    
      Returns a value that indicates whether the specified key exists in the   object or in the   object.

      true if the   object or the   object contains an element that has the specified key; otherwise, false.

      The key.

    

    
      Copies all of the elements in the   object and the   object to an   object, starting at the specified index.

      The array.

      The zero-based index in  .

    

    
      Gets the number of key/value pairs that are in the concatenated   and   objects.

      The number of key/value pairs.

    

    
      Returns an enumerator that can be used to iterate through concatenated   and   objects.

      An   object.

    

    
      Returns an enumerator that can be used to iterate through the distinct elements of concatenated   and   objects.

      An enumerator that contains distinct elements from the concatenated dictionary objects.

    

    
      Gets a value that indicates whether the   object is read-only.

      true if the   object is read-only; otherwise, false.

    

    
      Gets or sets the element that is associated with the specified key.

      The element that has the specified key.

      The key of the element to get or set.

    

    
      Gets a   object that contains the keys from the concatenated   and   objects.

      An object that contains that contains the keys.

    

    
      Removes the specified key/value pair from the concatenated   and   objects.

      true if the key/value pair is removed, or false if   is not found in the concatenated   and   objects.

      The key/value pair.

    

    
      Removes the value that has the specified key from the concatenated   and   objects.

      true if the key/value pair is removed, or false if   is not found in the concatenated   and   objects.

      The key.

    

    
      Sets a value using the specified key in the concatenated   and   objects.

      The key.

      The value.

    

    
      Returns an enumerator for the concatenated   and   objects.

      The enumerator.

    

    
      Gets the value that is associated with the specified key from the concatenated   and   objects.

      true if the concatenated   and   objects contain an element that has the specified key; otherwise, false.

      The key.

      When this method returns, if the key is found, contains the value that is associated with the specified key; otherwise, the default value for the type of the   parameter. This parameter is passed uninitialized.

    

    
      Gets a   object that contains the values from the concatenated   and   objects.

      The object that contains the values.

    

    
      Provides scoped access to static data.

    

    
      Initializes a new instance of the   class.

    

    
      Gets or sets a dictionary that stores current data under a static context.

      The dictionary that provides current scoped data.

    

    
      Gets a dictionary that stores global data under a static context.

      The dictionary that provides global scoped data.

    

  






bin/WebGrease.dll









		00004550
		
		0003
		50622ba5
		00000000
		00000000
		00e0
		






		010b
		8.00
		000ff600
		00000600
		00000000
		00101416
		00002000
		00102000
		00400000
		00002000
		00000200
		4.00
		0.00
		4.00
		00000000
		00106000
		00000200
		0010c059
		
		34112
		00100000
		00001000
		00100000
		00001000
		00000000
		00000010
		001013c8
		0000004c
		
		00102000
		00000350
		000ffe00
		00001a48
		
		00104000
		0000000c
		0010142c
		0000001c

		




mscoree.dll
		

0000	_CorDllMain




		.text
		000ff4a4
		00002000
		000ff600
		00000200
		00000000
		00000000
		0000
		0000
		



		

		.rsrc
		00000350
		00102000
		00000400
		000ff800
		00000000
		00000000
		0000
		0000
		


		

		.reloc
		0000000c
		00104000
		00000200
		000ffc00
		00000000
		00000000
		0000
		0000
		



		


		5a4d
		0090
		0003
		0000
		0004
		0000
		ffff
		0000
		00b8
		0000
		0000
		0000
		0040
		0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		0000 0000 0000 0000
		00000080
		2K




Content/themes/base/images/ui-bg_flat_0_aaaaaa_40x100.png





Content/themes/base/images/ui-bg_flat_75_ffffff_40x100.png





Content/themes/base/images/ui-bg_glass_55_fbf9ee_1x400.png





Content/themes/base/images/ui-bg_glass_65_ffffff_1x400.png





Content/themes/base/images/ui-bg_glass_75_dadada_1x400.png





Content/themes/base/images/ui-bg_glass_75_e6e6e6_1x400.png





Content/themes/base/images/ui-bg_glass_95_fef1ec_1x400.png





Content/themes/base/images/ui-bg_highlight-soft_75_cccccc_1x100.png





Content/themes/base/images/ui-icons_222222_256x240.png





Content/themes/base/images/ui-icons_2e83ff_256x240.png





Content/themes/base/images/ui-icons_454545_256x240.png





Content/themes/base/images/ui-icons_888888_256x240.png





Content/themes/base/images/ui-icons_cd0a0a_256x240.png





Content/themes/base/minified/images/ui-bg_flat_0_aaaaaa_40x100.png





Content/themes/base/minified/images/ui-bg_flat_75_ffffff_40x100.png





Content/themes/base/minified/images/ui-bg_glass_55_fbf9ee_1x400.png





Content/themes/base/minified/images/ui-bg_glass_65_ffffff_1x400.png





Content/themes/base/minified/images/ui-bg_glass_75_dadada_1x400.png





Content/themes/base/minified/images/ui-bg_glass_75_e6e6e6_1x400.png





Content/themes/base/minified/images/ui-bg_glass_95_fef1ec_1x400.png





Content/themes/base/minified/images/ui-bg_highlight-soft_75_cccccc_1x100.png





Content/themes/base/minified/images/ui-icons_222222_256x240.png





Content/themes/base/minified/images/ui-icons_2e83ff_256x240.png





Content/themes/base/minified/images/ui-icons_454545_256x240.png





Content/themes/base/minified/images/ui-icons_888888_256x240.png





Content/themes/base/minified/images/ui-icons_cd0a0a_256x240.png





Content/themes/base/minified/jquery-ui.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.core.css, jquery.ui.accordion.css, jquery.ui.autocomplete.css, jquery.ui.button.css, jquery.ui.datepicker.css, jquery.ui.dialog.css, jquery.ui.progressbar.css, jquery.ui.resizable.css, jquery.ui.selectable.css, jquery.ui.slider.css, jquery.ui.tabs.css, jquery.ui.theme.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-helper-hidden{display:none}.ui-helper-hidden-accessible{position:absolute!important;clip:rect(1px);clip:rect(1px,1px,1px,1px)}.ui-helper-reset{margin:0;padding:0;border:0;outline:0;line-height:1.3;text-decoration:none;font-size:100%;list-style:none}.ui-helper-clearfix:before,.ui-helper-clearfix:after{content:"";display:table}.ui-helper-clearfix:after{clear:both}.ui-helper-clearfix{zoom:1}.ui-helper-zfix{width:100%;height:100%;top:0;left:0;position:absolute;opacity:0;filter:Alpha(Opacity=0)}.ui-state-disabled{cursor:default!important}.ui-icon{display:block;text-indent:-99999px;overflow:hidden;background-repeat:no-repeat}.ui-widget-overlay{position:absolute;top:0;left:0;width:100%;height:100%}.ui-accordion{width:100%}.ui-accordion .ui-accordion-header{cursor:pointer;position:relative;margin-top:1px;zoom:1}.ui-accordion .ui-accordion-li-fix{display:inline}.ui-accordion .ui-accordion-header-active{border-bottom:0!important}.ui-accordion .ui-accordion-header a{display:block;font-size:1em;padding:.5em .5em .5em .7em}.ui-accordion-icons .ui-accordion-header a{padding-left:2.2em}.ui-accordion .ui-accordion-header .ui-icon{position:absolute;left:.5em;top:50%;margin-top:-8px}.ui-accordion .ui-accordion-content{padding:1em 2.2em;border-top:0;margin-top:-2px;position:relative;top:1px;margin-bottom:2px;overflow:auto;display:none;zoom:1}.ui-accordion .ui-accordion-content-active{display:block}.ui-autocomplete{position:absolute;cursor:default}* html .ui-autocomplete{width:1px}.ui-menu{list-style:none;padding:2px;margin:0;display:block;float:left}.ui-menu .ui-menu{margin-top:-3px}.ui-menu .ui-menu-item{margin:0;padding:0;zoom:1;float:left;clear:left;width:100%}.ui-menu .ui-menu-item a{text-decoration:none;display:block;padding:.2em .4em;line-height:1.5;zoom:1}.ui-menu .ui-menu-item a.ui-state-hover,.ui-menu .ui-menu-item a.ui-state-active{font-weight:normal;margin:-1px}.ui-button{display:inline-block;position:relative;padding:0;margin-right:.1em;text-decoration:none!important;cursor:pointer;text-align:center;zoom:1;overflow:visible}.ui-button-icon-only{width:2.2em}button.ui-button-icon-only{width:2.4em}.ui-button-icons-only{width:3.4em}button.ui-button-icons-only{width:3.7em}.ui-button .ui-button-text{display:block;line-height:1.4}.ui-button-text-only .ui-button-text{padding:.4em 1em}.ui-button-icon-only .ui-button-text,.ui-button-icons-only .ui-button-text{padding:.4em;text-indent:-9999999px}.ui-button-text-icon-primary .ui-button-text,.ui-button-text-icons .ui-button-text{padding:.4em 1em .4em 2.1em}.ui-button-text-icon-secondary .ui-button-text,.ui-button-text-icons .ui-button-text{padding:.4em 2.1em .4em 1em}.ui-button-text-icons .ui-button-text{padding-left:2.1em;padding-right:2.1em}input.ui-button{padding:.4em 1em}.ui-button-icon-only .ui-icon,.ui-button-text-icon-primary .ui-icon,.ui-button-text-icon-secondary .ui-icon,.ui-button-text-icons .ui-icon,.ui-button-icons-only .ui-icon{position:absolute;top:50%;margin-top:-8px}.ui-button-icon-only .ui-icon{left:50%;margin-left:-8px}.ui-button-text-icon-primary .ui-button-icon-primary,.ui-button-text-icons .ui-button-icon-primary,.ui-button-icons-only .ui-button-icon-primary{left:.5em}.ui-button-text-icon-secondary .ui-button-icon-secondary,.ui-button-text-icons .ui-button-icon-secondary,.ui-button-icons-only .ui-button-icon-secondary{right:.5em}.ui-button-text-icons .ui-button-icon-secondary,.ui-button-icons-only .ui-button-icon-secondary{right:.5em}.ui-buttonset{margin-right:7px}.ui-buttonset .ui-button{margin-left:0;margin-right:-.3em}button.ui-button::-moz-focus-inner{border:0;padding:0}.ui-datepicker{width:17em;padding:.2em .2em 0;display:none}.ui-datepicker .ui-datepicker-header{position:relative;padding:.2em 0}.ui-datepicker .ui-datepicker-prev,.ui-datepicker .ui-datepicker-next{position:absolute;top:2px;width:1.8em;height:1.8em}.ui-datepicker .ui-datepicker-prev-hover,.ui-datepicker .ui-datepicker-next-hover{top:1px}.ui-datepicker .ui-datepicker-prev{left:2px}.ui-datepicker .ui-datepicker-next{right:2px}.ui-datepicker .ui-datepicker-prev-hover{left:1px}.ui-datepicker .ui-datepicker-next-hover{right:1px}.ui-datepicker .ui-datepicker-prev span,.ui-datepicker .ui-datepicker-next span{display:block;position:absolute;left:50%;margin-left:-8px;top:50%;margin-top:-8px}.ui-datepicker .ui-datepicker-title{margin:0 2.3em;line-height:1.8em;text-align:center}.ui-datepicker .ui-datepicker-title select{font-size:1em;margin:1px 0}.ui-datepicker select.ui-datepicker-month-year{width:100%}.ui-datepicker select.ui-datepicker-month,.ui-datepicker select.ui-datepicker-year{width:49%}.ui-datepicker table{width:100%;font-size:.9em;border-collapse:collapse;margin:0 0 .4em}.ui-datepicker th{padding:.7em .3em;text-align:center;font-weight:bold;border:0}.ui-datepicker td{border:0;padding:1px}.ui-datepicker td span,.ui-datepicker td a{display:block;padding:.2em;text-align:right;text-decoration:none}.ui-datepicker .ui-datepicker-buttonpane{background-image:none;margin:.7em 0 0 0;padding:0 .2em;border-left:0;border-right:0;border-bottom:0}.ui-datepicker .ui-datepicker-buttonpane button{float:right;margin:.5em .2em .4em;cursor:pointer;padding:.2em .6em .3em .6em;width:auto;overflow:visible}.ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current{float:left}.ui-datepicker.ui-datepicker-multi{width:auto}.ui-datepicker-multi .ui-datepicker-group{float:left}.ui-datepicker-multi .ui-datepicker-group table{width:95%;margin:0 auto .4em}.ui-datepicker-multi-2 .ui-datepicker-group{width:50%}.ui-datepicker-multi-3 .ui-datepicker-group{width:33.3%}.ui-datepicker-multi-4 .ui-datepicker-group{width:25%}.ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header{border-left-width:0}.ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header{border-left-width:0}.ui-datepicker-multi .ui-datepicker-buttonpane{clear:left}.ui-datepicker-row-break{clear:both;width:100%;font-size:0em}.ui-datepicker-rtl{direction:rtl}.ui-datepicker-rtl .ui-datepicker-prev{right:2px;left:auto}.ui-datepicker-rtl .ui-datepicker-next{left:2px;right:auto}.ui-datepicker-rtl .ui-datepicker-prev:hover{right:1px;left:auto}.ui-datepicker-rtl .ui-datepicker-next:hover{left:1px;right:auto}.ui-datepicker-rtl .ui-datepicker-buttonpane{clear:right}.ui-datepicker-rtl .ui-datepicker-buttonpane button{float:left}.ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current{float:right}.ui-datepicker-rtl .ui-datepicker-group{float:right}.ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header{border-right-width:0;border-left-width:1px}.ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header{border-right-width:0;border-left-width:1px}.ui-datepicker-cover{position:absolute;z-index:-1;filter:mask();top:-4px;left:-4px;width:200px;height:200px}.ui-dialog{position:absolute;padding:.2em;width:300px;overflow:hidden}.ui-dialog .ui-dialog-titlebar{padding:.4em 1em;position:relative}.ui-dialog .ui-dialog-title{float:left;margin:.1em 16px .1em 0}.ui-dialog .ui-dialog-titlebar-close{position:absolute;right:.3em;top:50%;width:19px;margin:-10px 0 0 0;padding:1px;height:18px}.ui-dialog .ui-dialog-titlebar-close span{display:block;margin:1px}.ui-dialog .ui-dialog-titlebar-close:hover,.ui-dialog .ui-dialog-titlebar-close:focus{padding:0}.ui-dialog .ui-dialog-content{position:relative;border:0;padding:.5em 1em;background:none;overflow:auto;zoom:1}.ui-dialog .ui-dialog-buttonpane{text-align:left;border-width:1px 0 0 0;background-image:none;margin:.5em 0 0 0;padding:.3em 1em .5em .4em}.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset{float:right}.ui-dialog .ui-dialog-buttonpane button{margin:.5em .4em .5em 0;cursor:pointer}.ui-dialog .ui-resizable-se{width:14px;height:14px;right:3px;bottom:3px}.ui-draggable .ui-dialog-titlebar{cursor:move}.ui-progressbar{height:2em;text-align:left;overflow:hidden}.ui-progressbar .ui-progressbar-value{margin:-1px;height:100%}.ui-resizable{position:relative}.ui-resizable-handle{position:absolute;font-size:0.1px;display:block}.ui-resizable-disabled .ui-resizable-handle,.ui-resizable-autohide .ui-resizable-handle{display:none}.ui-resizable-n{cursor:n-resize;height:7px;width:100%;top:-5px;left:0}.ui-resizable-s{cursor:s-resize;height:7px;width:100%;bottom:-5px;left:0}.ui-resizable-e{cursor:e-resize;width:7px;right:-5px;top:0;height:100%}.ui-resizable-w{cursor:w-resize;width:7px;left:-5px;top:0;height:100%}.ui-resizable-se{cursor:se-resize;width:12px;height:12px;right:1px;bottom:1px}.ui-resizable-sw{cursor:sw-resize;width:9px;height:9px;left:-5px;bottom:-5px}.ui-resizable-nw{cursor:nw-resize;width:9px;height:9px;left:-5px;top:-5px}.ui-resizable-ne{cursor:ne-resize;width:9px;height:9px;right:-5px;top:-5px}.ui-selectable-helper{position:absolute;z-index:100;border:1px dotted black}.ui-slider{position:relative;text-align:left}.ui-slider .ui-slider-handle{position:absolute;z-index:2;width:1.2em;height:1.2em;cursor:default}.ui-slider .ui-slider-range{position:absolute;z-index:1;font-size:.7em;display:block;border:0;background-position:0 0}.ui-slider-horizontal{height:.8em}.ui-slider-horizontal .ui-slider-handle{top:-.3em;margin-left:-.6em}.ui-slider-horizontal .ui-slider-range{top:0;height:100%}.ui-slider-horizontal .ui-slider-range-min{left:0}.ui-slider-horizontal .ui-slider-range-max{right:0}.ui-slider-vertical{width:.8em;height:100px}.ui-slider-vertical .ui-slider-handle{left:-.3em;margin-left:0;margin-bottom:-.6em}.ui-slider-vertical .ui-slider-range{left:0;width:100%}.ui-slider-vertical .ui-slider-range-min{bottom:0}.ui-slider-vertical .ui-slider-range-max{top:0}.ui-tabs{position:relative;padding:.2em;zoom:1}.ui-tabs .ui-tabs-nav{margin:0;padding:.2em .2em 0}.ui-tabs .ui-tabs-nav li{list-style:none;float:left;position:relative;top:1px;margin:0 .2em 1px 0;border-bottom:0!important;padding:0;white-space:nowrap}.ui-tabs .ui-tabs-nav li a{float:left;padding:.5em 1em;text-decoration:none}.ui-tabs .ui-tabs-nav li.ui-tabs-selected{margin-bottom:0;padding-bottom:1px}.ui-tabs .ui-tabs-nav li.ui-tabs-selected a,.ui-tabs .ui-tabs-nav li.ui-state-disabled a,.ui-tabs .ui-tabs-nav li.ui-state-processing a{cursor:text}.ui-tabs .ui-tabs-nav li a,.ui-tabs.ui-tabs-collapsible .ui-tabs-nav li.ui-tabs-selected a{cursor:pointer}.ui-tabs .ui-tabs-panel{display:block;border-width:0;padding:1em 1.4em;background:none}.ui-tabs .ui-tabs-hide{display:none!important}.ui-widget{font-family:Verdana,Arial,sans-serif;font-size:1.1em}.ui-widget .ui-widget{font-size:1em}.ui-widget input,.ui-widget select,.ui-widget textarea,.ui-widget button{font-family:Verdana,Arial,sans-serif;font-size:1em}.ui-widget-content{border:1px solid #aaa;background:#fff url(images/ui-bg_flat_75_ffffff_40x100.png) 50% 50% repeat-x;color:#222}.ui-widget-content a{color:#222}.ui-widget-header{border:1px solid #aaa;background:#ccc url(images/ui-bg_highlight-soft_75_cccccc_1x100.png) 50% 50% repeat-x;color:#222;font-weight:bold}.ui-widget-header a{color:#222}.ui-state-default,.ui-widget-content .ui-state-default,.ui-widget-header .ui-state-default{border:1px solid #d3d3d3;background:#e6e6e6 url(images/ui-bg_glass_75_e6e6e6_1x400.png) 50% 50% repeat-x;font-weight:normal;color:#555}.ui-state-default a,.ui-state-default a:link,.ui-state-default a:visited{color:#555;text-decoration:none}.ui-state-hover,.ui-widget-content .ui-state-hover,.ui-widget-header .ui-state-hover,.ui-state-focus,.ui-widget-content .ui-state-focus,.ui-widget-header .ui-state-focus{border:1px solid #999;background:#dadada url(images/ui-bg_glass_75_dadada_1x400.png) 50% 50% repeat-x;font-weight:normal;color:#212121}.ui-state-hover a,.ui-state-hover a:hover{color:#212121;text-decoration:none}.ui-state-active,.ui-widget-content .ui-state-active,.ui-widget-header .ui-state-active{border:1px solid #aaa;background:#fff url(images/ui-bg_glass_65_ffffff_1x400.png) 50% 50% repeat-x;font-weight:normal;color:#212121}.ui-state-active a,.ui-state-active a:link,.ui-state-active a:visited{color:#212121;text-decoration:none}.ui-widget:active{outline:none}.ui-state-highlight,.ui-widget-content .ui-state-highlight,.ui-widget-header .ui-state-highlight{border:1px solid #fcefa1;background:#fbf9ee url(images/ui-bg_glass_55_fbf9ee_1x400.png) 50% 50% repeat-x;color:#363636}.ui-state-highlight a,.ui-widget-content .ui-state-highlight a,.ui-widget-header .ui-state-highlight a{color:#363636}.ui-state-error,.ui-widget-content .ui-state-error,.ui-widget-header .ui-state-error{border:1px solid #cd0a0a;background:#fef1ec url(images/ui-bg_glass_95_fef1ec_1x400.png) 50% 50% repeat-x;color:#cd0a0a}.ui-state-error a,.ui-widget-content .ui-state-error a,.ui-widget-header .ui-state-error a{color:#cd0a0a}.ui-state-error-text,.ui-widget-content .ui-state-error-text,.ui-widget-header .ui-state-error-text{color:#cd0a0a}.ui-priority-primary,.ui-widget-content .ui-priority-primary,.ui-widget-header .ui-priority-primary{font-weight:bold}.ui-priority-secondary,.ui-widget-content .ui-priority-secondary,.ui-widget-header .ui-priority-secondary{opacity:.7;filter:Alpha(Opacity=70);font-weight:normal}.ui-state-disabled,.ui-widget-content .ui-state-disabled,.ui-widget-header .ui-state-disabled{opacity:.35;filter:Alpha(Opacity=35);background-image:none}.ui-icon{width:16px;height:16px;background-image:url(images/ui-icons_222222_256x240.png)}.ui-widget-content .ui-icon{background-image:url(images/ui-icons_222222_256x240.png)}.ui-widget-header .ui-icon{background-image:url(images/ui-icons_222222_256x240.png)}.ui-state-default .ui-icon{background-image:url(images/ui-icons_888888_256x240.png)}.ui-state-hover .ui-icon,.ui-state-focus .ui-icon{background-image:url(images/ui-icons_454545_256x240.png)}.ui-state-active .ui-icon{background-image:url(images/ui-icons_454545_256x240.png)}.ui-state-highlight .ui-icon{background-image:url(images/ui-icons_2e83ff_256x240.png)}.ui-state-error .ui-icon,.ui-state-error-text .ui-icon{background-image:url(images/ui-icons_cd0a0a_256x240.png)}.ui-icon-carat-1-n{background-position:0 0}.ui-icon-carat-1-ne{background-position:-16px 0}.ui-icon-carat-1-e{background-position:-32px 0}.ui-icon-carat-1-se{background-position:-48px 0}.ui-icon-carat-1-s{background-position:-64px 0}.ui-icon-carat-1-sw{background-position:-80px 0}.ui-icon-carat-1-w{background-position:-96px 0}.ui-icon-carat-1-nw{background-position:-112px 0}.ui-icon-carat-2-n-s{background-position:-128px 0}.ui-icon-carat-2-e-w{background-position:-144px 0}.ui-icon-triangle-1-n{background-position:0 -16px}.ui-icon-triangle-1-ne{background-position:-16px -16px}.ui-icon-triangle-1-e{background-position:-32px -16px}.ui-icon-triangle-1-se{background-position:-48px -16px}.ui-icon-triangle-1-s{background-position:-64px -16px}.ui-icon-triangle-1-sw{background-position:-80px -16px}.ui-icon-triangle-1-w{background-position:-96px -16px}.ui-icon-triangle-1-nw{background-position:-112px -16px}.ui-icon-triangle-2-n-s{background-position:-128px -16px}.ui-icon-triangle-2-e-w{background-position:-144px -16px}.ui-icon-arrow-1-n{background-position:0 -32px}.ui-icon-arrow-1-ne{background-position:-16px -32px}.ui-icon-arrow-1-e{background-position:-32px -32px}.ui-icon-arrow-1-se{background-position:-48px -32px}.ui-icon-arrow-1-s{background-position:-64px -32px}.ui-icon-arrow-1-sw{background-position:-80px -32px}.ui-icon-arrow-1-w{background-position:-96px -32px}.ui-icon-arrow-1-nw{background-position:-112px -32px}.ui-icon-arrow-2-n-s{background-position:-128px -32px}.ui-icon-arrow-2-ne-sw{background-position:-144px -32px}.ui-icon-arrow-2-e-w{background-position:-160px -32px}.ui-icon-arrow-2-se-nw{background-position:-176px -32px}.ui-icon-arrowstop-1-n{background-position:-192px -32px}.ui-icon-arrowstop-1-e{background-position:-208px -32px}.ui-icon-arrowstop-1-s{background-position:-224px -32px}.ui-icon-arrowstop-1-w{background-position:-240px -32px}.ui-icon-arrowthick-1-n{background-position:0 -48px}.ui-icon-arrowthick-1-ne{background-position:-16px -48px}.ui-icon-arrowthick-1-e{background-position:-32px -48px}.ui-icon-arrowthick-1-se{background-position:-48px -48px}.ui-icon-arrowthick-1-s{background-position:-64px -48px}.ui-icon-arrowthick-1-sw{background-position:-80px -48px}.ui-icon-arrowthick-1-w{background-position:-96px -48px}.ui-icon-arrowthick-1-nw{background-position:-112px -48px}.ui-icon-arrowthick-2-n-s{background-position:-128px -48px}.ui-icon-arrowthick-2-ne-sw{background-position:-144px -48px}.ui-icon-arrowthick-2-e-w{background-position:-160px -48px}.ui-icon-arrowthick-2-se-nw{background-position:-176px -48px}.ui-icon-arrowthickstop-1-n{background-position:-192px -48px}.ui-icon-arrowthickstop-1-e{background-position:-208px -48px}.ui-icon-arrowthickstop-1-s{background-position:-224px -48px}.ui-icon-arrowthickstop-1-w{background-position:-240px -48px}.ui-icon-arrowreturnthick-1-w{background-position:0 -64px}.ui-icon-arrowreturnthick-1-n{background-position:-16px -64px}.ui-icon-arrowreturnthick-1-e{background-position:-32px -64px}.ui-icon-arrowreturnthick-1-s{background-position:-48px -64px}.ui-icon-arrowreturn-1-w{background-position:-64px -64px}.ui-icon-arrowreturn-1-n{background-position:-80px -64px}.ui-icon-arrowreturn-1-e{background-position:-96px -64px}.ui-icon-arrowreturn-1-s{background-position:-112px -64px}.ui-icon-arrowrefresh-1-w{background-position:-128px -64px}.ui-icon-arrowrefresh-1-n{background-position:-144px -64px}.ui-icon-arrowrefresh-1-e{background-position:-160px -64px}.ui-icon-arrowrefresh-1-s{background-position:-176px -64px}.ui-icon-arrow-4{background-position:0 -80px}.ui-icon-arrow-4-diag{background-position:-16px -80px}.ui-icon-extlink{background-position:-32px -80px}.ui-icon-newwin{background-position:-48px -80px}.ui-icon-refresh{background-position:-64px -80px}.ui-icon-shuffle{background-position:-80px -80px}.ui-icon-transfer-e-w{background-position:-96px -80px}.ui-icon-transferthick-e-w{background-position:-112px -80px}.ui-icon-folder-collapsed{background-position:0 -96px}.ui-icon-folder-open{background-position:-16px -96px}.ui-icon-document{background-position:-32px -96px}.ui-icon-document-b{background-position:-48px -96px}.ui-icon-note{background-position:-64px -96px}.ui-icon-mail-closed{background-position:-80px -96px}.ui-icon-mail-open{background-position:-96px -96px}.ui-icon-suitcase{background-position:-112px -96px}.ui-icon-comment{background-position:-128px -96px}.ui-icon-person{background-position:-144px -96px}.ui-icon-print{background-position:-160px -96px}.ui-icon-trash{background-position:-176px -96px}.ui-icon-locked{background-position:-192px -96px}.ui-icon-unlocked{background-position:-208px -96px}.ui-icon-bookmark{background-position:-224px -96px}.ui-icon-tag{background-position:-240px -96px}.ui-icon-home{background-position:0 -112px}.ui-icon-flag{background-position:-16px -112px}.ui-icon-calendar{background-position:-32px -112px}.ui-icon-cart{background-position:-48px -112px}.ui-icon-pencil{background-position:-64px -112px}.ui-icon-clock{background-position:-80px -112px}.ui-icon-disk{background-position:-96px -112px}.ui-icon-calculator{background-position:-112px -112px}.ui-icon-zoomin{background-position:-128px -112px}.ui-icon-zoomout{background-position:-144px -112px}.ui-icon-search{background-position:-160px -112px}.ui-icon-wrench{background-position:-176px -112px}.ui-icon-gear{background-position:-192px -112px}.ui-icon-heart{background-position:-208px -112px}.ui-icon-star{background-position:-224px -112px}.ui-icon-link{background-position:-240px -112px}.ui-icon-cancel{background-position:0 -128px}.ui-icon-plus{background-position:-16px -128px}.ui-icon-plusthick{background-position:-32px -128px}.ui-icon-minus{background-position:-48px -128px}.ui-icon-minusthick{background-position:-64px -128px}.ui-icon-close{background-position:-80px -128px}.ui-icon-closethick{background-position:-96px -128px}.ui-icon-key{background-position:-112px -128px}.ui-icon-lightbulb{background-position:-128px -128px}.ui-icon-scissors{background-position:-144px -128px}.ui-icon-clipboard{background-position:-160px -128px}.ui-icon-copy{background-position:-176px -128px}.ui-icon-contact{background-position:-192px -128px}.ui-icon-image{background-position:-208px -128px}.ui-icon-video{background-position:-224px -128px}.ui-icon-script{background-position:-240px -128px}.ui-icon-alert{background-position:0 -144px}.ui-icon-info{background-position:-16px -144px}.ui-icon-notice{background-position:-32px -144px}.ui-icon-help{background-position:-48px -144px}.ui-icon-check{background-position:-64px -144px}.ui-icon-bullet{background-position:-80px -144px}.ui-icon-radio-off{background-position:-96px -144px}.ui-icon-radio-on{background-position:-112px -144px}.ui-icon-pin-w{background-position:-128px -144px}.ui-icon-pin-s{background-position:-144px -144px}.ui-icon-play{background-position:0 -160px}.ui-icon-pause{background-position:-16px -160px}.ui-icon-seek-next{background-position:-32px -160px}.ui-icon-seek-prev{background-position:-48px -160px}.ui-icon-seek-end{background-position:-64px -160px}.ui-icon-seek-start{background-position:-80px -160px}.ui-icon-seek-first{background-position:-80px -160px}.ui-icon-stop{background-position:-96px -160px}.ui-icon-eject{background-position:-112px -160px}.ui-icon-volume-off{background-position:-128px -160px}.ui-icon-volume-on{background-position:-144px -160px}.ui-icon-power{background-position:0 -176px}.ui-icon-signal-diag{background-position:-16px -176px}.ui-icon-signal{background-position:-32px -176px}.ui-icon-battery-0{background-position:-48px -176px}.ui-icon-battery-1{background-position:-64px -176px}.ui-icon-battery-2{background-position:-80px -176px}.ui-icon-battery-3{background-position:-96px -176px}.ui-icon-circle-plus{background-position:0 -192px}.ui-icon-circle-minus{background-position:-16px -192px}.ui-icon-circle-close{background-position:-32px -192px}.ui-icon-circle-triangle-e{background-position:-48px -192px}.ui-icon-circle-triangle-s{background-position:-64px -192px}.ui-icon-circle-triangle-w{background-position:-80px -192px}.ui-icon-circle-triangle-n{background-position:-96px -192px}.ui-icon-circle-arrow-e{background-position:-112px -192px}.ui-icon-circle-arrow-s{background-position:-128px -192px}.ui-icon-circle-arrow-w{background-position:-144px -192px}.ui-icon-circle-arrow-n{background-position:-160px -192px}.ui-icon-circle-zoomin{background-position:-176px -192px}.ui-icon-circle-zoomout{background-position:-192px -192px}.ui-icon-circle-check{background-position:-208px -192px}.ui-icon-circlesmall-plus{background-position:0 -208px}.ui-icon-circlesmall-minus{background-position:-16px -208px}.ui-icon-circlesmall-close{background-position:-32px -208px}.ui-icon-squaresmall-plus{background-position:-48px -208px}.ui-icon-squaresmall-minus{background-position:-64px -208px}.ui-icon-squaresmall-close{background-position:-80px -208px}.ui-icon-grip-dotted-vertical{background-position:0 -224px}.ui-icon-grip-dotted-horizontal{background-position:-16px -224px}.ui-icon-grip-solid-vertical{background-position:-32px -224px}.ui-icon-grip-solid-horizontal{background-position:-48px -224px}.ui-icon-gripsmall-diagonal-se{background-position:-64px -224px}.ui-icon-grip-diagonal-se{background-position:-80px -224px}.ui-corner-all,.ui-corner-top,.ui-corner-left,.ui-corner-tl{-moz-border-radius-topleft:4px;-webkit-border-top-left-radius:4px;-khtml-border-top-left-radius:4px;border-top-left-radius:4px}.ui-corner-all,.ui-corner-top,.ui-corner-right,.ui-corner-tr{-moz-border-radius-topright:4px;-webkit-border-top-right-radius:4px;-khtml-border-top-right-radius:4px;border-top-right-radius:4px}.ui-corner-all,.ui-corner-bottom,.ui-corner-left,.ui-corner-bl{-moz-border-radius-bottomleft:4px;-webkit-border-bottom-left-radius:4px;-khtml-border-bottom-left-radius:4px;border-bottom-left-radius:4px}.ui-corner-all,.ui-corner-bottom,.ui-corner-right,.ui-corner-br{-moz-border-radius-bottomright:4px;-webkit-border-bottom-right-radius:4px;-khtml-border-bottom-right-radius:4px;border-bottom-right-radius:4px}.ui-widget-overlay{background:#aaa url(images/ui-bg_flat_0_aaaaaa_40x100.png) 50% 50% repeat-x;opacity:.3;filter:Alpha(Opacity=30)}.ui-widget-shadow{margin:-8px 0 0 -8px;padding:8px;background:#aaa url(images/ui-bg_flat_0_aaaaaa_40x100.png) 50% 50% repeat-x;opacity:.3;filter:Alpha(Opacity=30);-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}



Content/themes/base/minified/jquery.ui.accordion.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.accordion.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-accordion{width:100%}.ui-accordion .ui-accordion-header{cursor:pointer;position:relative;margin-top:1px;zoom:1}.ui-accordion .ui-accordion-li-fix{display:inline}.ui-accordion .ui-accordion-header-active{border-bottom:0!important}.ui-accordion .ui-accordion-header a{display:block;font-size:1em;padding:.5em .5em .5em .7em}.ui-accordion-icons .ui-accordion-header a{padding-left:2.2em}.ui-accordion .ui-accordion-header .ui-icon{position:absolute;left:.5em;top:50%;margin-top:-8px}.ui-accordion .ui-accordion-content{padding:1em 2.2em;border-top:0;margin-top:-2px;position:relative;top:1px;margin-bottom:2px;overflow:auto;display:none;zoom:1}.ui-accordion .ui-accordion-content-active{display:block}



Content/themes/base/minified/jquery.ui.autocomplete.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.autocomplete.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-autocomplete{position:absolute;cursor:default}* html .ui-autocomplete{width:1px}.ui-menu{list-style:none;padding:2px;margin:0;display:block;float:left}.ui-menu .ui-menu{margin-top:-3px}.ui-menu .ui-menu-item{margin:0;padding:0;zoom:1;float:left;clear:left;width:100%}.ui-menu .ui-menu-item a{text-decoration:none;display:block;padding:.2em .4em;line-height:1.5;zoom:1}.ui-menu .ui-menu-item a.ui-state-hover,.ui-menu .ui-menu-item a.ui-state-active{font-weight:normal;margin:-1px}



Content/themes/base/minified/jquery.ui.button.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.button.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-button{display:inline-block;position:relative;padding:0;margin-right:.1em;text-decoration:none!important;cursor:pointer;text-align:center;zoom:1;overflow:visible}.ui-button-icon-only{width:2.2em}button.ui-button-icon-only{width:2.4em}.ui-button-icons-only{width:3.4em}button.ui-button-icons-only{width:3.7em}.ui-button .ui-button-text{display:block;line-height:1.4}.ui-button-text-only .ui-button-text{padding:.4em 1em}.ui-button-icon-only .ui-button-text,.ui-button-icons-only .ui-button-text{padding:.4em;text-indent:-9999999px}.ui-button-text-icon-primary .ui-button-text,.ui-button-text-icons .ui-button-text{padding:.4em 1em .4em 2.1em}.ui-button-text-icon-secondary .ui-button-text,.ui-button-text-icons .ui-button-text{padding:.4em 2.1em .4em 1em}.ui-button-text-icons .ui-button-text{padding-left:2.1em;padding-right:2.1em}input.ui-button{padding:.4em 1em}.ui-button-icon-only .ui-icon,.ui-button-text-icon-primary .ui-icon,.ui-button-text-icon-secondary .ui-icon,.ui-button-text-icons .ui-icon,.ui-button-icons-only .ui-icon{position:absolute;top:50%;margin-top:-8px}.ui-button-icon-only .ui-icon{left:50%;margin-left:-8px}.ui-button-text-icon-primary .ui-button-icon-primary,.ui-button-text-icons .ui-button-icon-primary,.ui-button-icons-only .ui-button-icon-primary{left:.5em}.ui-button-text-icon-secondary .ui-button-icon-secondary,.ui-button-text-icons .ui-button-icon-secondary,.ui-button-icons-only .ui-button-icon-secondary{right:.5em}.ui-button-text-icons .ui-button-icon-secondary,.ui-button-icons-only .ui-button-icon-secondary{right:.5em}.ui-buttonset{margin-right:7px}.ui-buttonset .ui-button{margin-left:0;margin-right:-.3em}button.ui-button::-moz-focus-inner{border:0;padding:0}



Content/themes/base/minified/jquery.ui.core.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.core.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-helper-hidden{display:none}.ui-helper-hidden-accessible{position:absolute!important;clip:rect(1px);clip:rect(1px,1px,1px,1px)}.ui-helper-reset{margin:0;padding:0;border:0;outline:0;line-height:1.3;text-decoration:none;font-size:100%;list-style:none}.ui-helper-clearfix:before,.ui-helper-clearfix:after{content:"";display:table}.ui-helper-clearfix:after{clear:both}.ui-helper-clearfix{zoom:1}.ui-helper-zfix{width:100%;height:100%;top:0;left:0;position:absolute;opacity:0;filter:Alpha(Opacity=0)}.ui-state-disabled{cursor:default!important}.ui-icon{display:block;text-indent:-99999px;overflow:hidden;background-repeat:no-repeat}.ui-widget-overlay{position:absolute;top:0;left:0;width:100%;height:100%}



Content/themes/base/minified/jquery.ui.datepicker.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.datepicker.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-datepicker{width:17em;padding:.2em .2em 0;display:none}.ui-datepicker .ui-datepicker-header{position:relative;padding:.2em 0}.ui-datepicker .ui-datepicker-prev,.ui-datepicker .ui-datepicker-next{position:absolute;top:2px;width:1.8em;height:1.8em}.ui-datepicker .ui-datepicker-prev-hover,.ui-datepicker .ui-datepicker-next-hover{top:1px}.ui-datepicker .ui-datepicker-prev{left:2px}.ui-datepicker .ui-datepicker-next{right:2px}.ui-datepicker .ui-datepicker-prev-hover{left:1px}.ui-datepicker .ui-datepicker-next-hover{right:1px}.ui-datepicker .ui-datepicker-prev span,.ui-datepicker .ui-datepicker-next span{display:block;position:absolute;left:50%;margin-left:-8px;top:50%;margin-top:-8px}.ui-datepicker .ui-datepicker-title{margin:0 2.3em;line-height:1.8em;text-align:center}.ui-datepicker .ui-datepicker-title select{font-size:1em;margin:1px 0}.ui-datepicker select.ui-datepicker-month-year{width:100%}.ui-datepicker select.ui-datepicker-month,.ui-datepicker select.ui-datepicker-year{width:49%}.ui-datepicker table{width:100%;font-size:.9em;border-collapse:collapse;margin:0 0 .4em}.ui-datepicker th{padding:.7em .3em;text-align:center;font-weight:bold;border:0}.ui-datepicker td{border:0;padding:1px}.ui-datepicker td span,.ui-datepicker td a{display:block;padding:.2em;text-align:right;text-decoration:none}.ui-datepicker .ui-datepicker-buttonpane{background-image:none;margin:.7em 0 0 0;padding:0 .2em;border-left:0;border-right:0;border-bottom:0}.ui-datepicker .ui-datepicker-buttonpane button{float:right;margin:.5em .2em .4em;cursor:pointer;padding:.2em .6em .3em .6em;width:auto;overflow:visible}.ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current{float:left}.ui-datepicker.ui-datepicker-multi{width:auto}.ui-datepicker-multi .ui-datepicker-group{float:left}.ui-datepicker-multi .ui-datepicker-group table{width:95%;margin:0 auto .4em}.ui-datepicker-multi-2 .ui-datepicker-group{width:50%}.ui-datepicker-multi-3 .ui-datepicker-group{width:33.3%}.ui-datepicker-multi-4 .ui-datepicker-group{width:25%}.ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header{border-left-width:0}.ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header{border-left-width:0}.ui-datepicker-multi .ui-datepicker-buttonpane{clear:left}.ui-datepicker-row-break{clear:both;width:100%;font-size:0em}.ui-datepicker-rtl{direction:rtl}.ui-datepicker-rtl .ui-datepicker-prev{right:2px;left:auto}.ui-datepicker-rtl .ui-datepicker-next{left:2px;right:auto}.ui-datepicker-rtl .ui-datepicker-prev:hover{right:1px;left:auto}.ui-datepicker-rtl .ui-datepicker-next:hover{left:1px;right:auto}.ui-datepicker-rtl .ui-datepicker-buttonpane{clear:right}.ui-datepicker-rtl .ui-datepicker-buttonpane button{float:left}.ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current{float:right}.ui-datepicker-rtl .ui-datepicker-group{float:right}.ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header{border-right-width:0;border-left-width:1px}.ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header{border-right-width:0;border-left-width:1px}.ui-datepicker-cover{position:absolute;z-index:-1;filter:mask();top:-4px;left:-4px;width:200px;height:200px}



Content/themes/base/minified/jquery.ui.dialog.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.dialog.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-dialog{position:absolute;padding:.2em;width:300px;overflow:hidden}.ui-dialog .ui-dialog-titlebar{padding:.4em 1em;position:relative}.ui-dialog .ui-dialog-title{float:left;margin:.1em 16px .1em 0}.ui-dialog .ui-dialog-titlebar-close{position:absolute;right:.3em;top:50%;width:19px;margin:-10px 0 0 0;padding:1px;height:18px}.ui-dialog .ui-dialog-titlebar-close span{display:block;margin:1px}.ui-dialog .ui-dialog-titlebar-close:hover,.ui-dialog .ui-dialog-titlebar-close:focus{padding:0}.ui-dialog .ui-dialog-content{position:relative;border:0;padding:.5em 1em;background:none;overflow:auto;zoom:1}.ui-dialog .ui-dialog-buttonpane{text-align:left;border-width:1px 0 0 0;background-image:none;margin:.5em 0 0 0;padding:.3em 1em .5em .4em}.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset{float:right}.ui-dialog .ui-dialog-buttonpane button{margin:.5em .4em .5em 0;cursor:pointer}.ui-dialog .ui-resizable-se{width:14px;height:14px;right:3px;bottom:3px}.ui-draggable .ui-dialog-titlebar{cursor:move}



Content/themes/base/minified/jquery.ui.progressbar.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.progressbar.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-progressbar{height:2em;text-align:left;overflow:hidden}.ui-progressbar .ui-progressbar-value{margin:-1px;height:100%}



Content/themes/base/minified/jquery.ui.resizable.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.resizable.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-resizable{position:relative}.ui-resizable-handle{position:absolute;font-size:0.1px;display:block}.ui-resizable-disabled .ui-resizable-handle,.ui-resizable-autohide .ui-resizable-handle{display:none}.ui-resizable-n{cursor:n-resize;height:7px;width:100%;top:-5px;left:0}.ui-resizable-s{cursor:s-resize;height:7px;width:100%;bottom:-5px;left:0}.ui-resizable-e{cursor:e-resize;width:7px;right:-5px;top:0;height:100%}.ui-resizable-w{cursor:w-resize;width:7px;left:-5px;top:0;height:100%}.ui-resizable-se{cursor:se-resize;width:12px;height:12px;right:1px;bottom:1px}.ui-resizable-sw{cursor:sw-resize;width:9px;height:9px;left:-5px;bottom:-5px}.ui-resizable-nw{cursor:nw-resize;width:9px;height:9px;left:-5px;top:-5px}.ui-resizable-ne{cursor:ne-resize;width:9px;height:9px;right:-5px;top:-5px}



Content/themes/base/minified/jquery.ui.selectable.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.selectable.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-selectable-helper{position:absolute;z-index:100;border:1px dotted black}



Content/themes/base/minified/jquery.ui.slider.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.slider.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-slider{position:relative;text-align:left}.ui-slider .ui-slider-handle{position:absolute;z-index:2;width:1.2em;height:1.2em;cursor:default}.ui-slider .ui-slider-range{position:absolute;z-index:1;font-size:.7em;display:block;border:0;background-position:0 0}.ui-slider-horizontal{height:.8em}.ui-slider-horizontal .ui-slider-handle{top:-.3em;margin-left:-.6em}.ui-slider-horizontal .ui-slider-range{top:0;height:100%}.ui-slider-horizontal .ui-slider-range-min{left:0}.ui-slider-horizontal .ui-slider-range-max{right:0}.ui-slider-vertical{width:.8em;height:100px}.ui-slider-vertical .ui-slider-handle{left:-.3em;margin-left:0;margin-bottom:-.6em}.ui-slider-vertical .ui-slider-range{left:0;width:100%}.ui-slider-vertical .ui-slider-range-min{bottom:0}.ui-slider-vertical .ui-slider-range-max{top:0}



Content/themes/base/minified/jquery.ui.tabs.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.tabs.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-tabs{position:relative;padding:.2em;zoom:1}.ui-tabs .ui-tabs-nav{margin:0;padding:.2em .2em 0}.ui-tabs .ui-tabs-nav li{list-style:none;float:left;position:relative;top:1px;margin:0 .2em 1px 0;border-bottom:0!important;padding:0;white-space:nowrap}.ui-tabs .ui-tabs-nav li a{float:left;padding:.5em 1em;text-decoration:none}.ui-tabs .ui-tabs-nav li.ui-tabs-selected{margin-bottom:0;padding-bottom:1px}.ui-tabs .ui-tabs-nav li.ui-tabs-selected a,.ui-tabs .ui-tabs-nav li.ui-state-disabled a,.ui-tabs .ui-tabs-nav li.ui-state-processing a{cursor:text}.ui-tabs .ui-tabs-nav li a,.ui-tabs.ui-tabs-collapsible .ui-tabs-nav li.ui-tabs-selected a{cursor:pointer}.ui-tabs .ui-tabs-panel{display:block;border-width:0;padding:1em 1.4em;background:none}.ui-tabs .ui-tabs-hide{display:none!important}



Content/themes/base/minified/jquery.ui.theme.min.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.theme.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
.ui-widget{font-family:Verdana,Arial,sans-serif;font-size:1.1em}.ui-widget .ui-widget{font-size:1em}.ui-widget input,.ui-widget select,.ui-widget textarea,.ui-widget button{font-family:Verdana,Arial,sans-serif;font-size:1em}.ui-widget-content{border:1px solid #aaa;background:#fff url(images/ui-bg_flat_75_ffffff_40x100.png) 50% 50% repeat-x;color:#222}.ui-widget-content a{color:#222}.ui-widget-header{border:1px solid #aaa;background:#ccc url(images/ui-bg_highlight-soft_75_cccccc_1x100.png) 50% 50% repeat-x;color:#222;font-weight:bold}.ui-widget-header a{color:#222}.ui-state-default,.ui-widget-content .ui-state-default,.ui-widget-header .ui-state-default{border:1px solid #d3d3d3;background:#e6e6e6 url(images/ui-bg_glass_75_e6e6e6_1x400.png) 50% 50% repeat-x;font-weight:normal;color:#555}.ui-state-default a,.ui-state-default a:link,.ui-state-default a:visited{color:#555;text-decoration:none}.ui-state-hover,.ui-widget-content .ui-state-hover,.ui-widget-header .ui-state-hover,.ui-state-focus,.ui-widget-content .ui-state-focus,.ui-widget-header .ui-state-focus{border:1px solid #999;background:#dadada url(images/ui-bg_glass_75_dadada_1x400.png) 50% 50% repeat-x;font-weight:normal;color:#212121}.ui-state-hover a,.ui-state-hover a:hover{color:#212121;text-decoration:none}.ui-state-active,.ui-widget-content .ui-state-active,.ui-widget-header .ui-state-active{border:1px solid #aaa;background:#fff url(images/ui-bg_glass_65_ffffff_1x400.png) 50% 50% repeat-x;font-weight:normal;color:#212121}.ui-state-active a,.ui-state-active a:link,.ui-state-active a:visited{color:#212121;text-decoration:none}.ui-widget:active{outline:none}.ui-state-highlight,.ui-widget-content .ui-state-highlight,.ui-widget-header .ui-state-highlight{border:1px solid #fcefa1;background:#fbf9ee url(images/ui-bg_glass_55_fbf9ee_1x400.png) 50% 50% repeat-x;color:#363636}.ui-state-highlight a,.ui-widget-content .ui-state-highlight a,.ui-widget-header .ui-state-highlight a{color:#363636}.ui-state-error,.ui-widget-content .ui-state-error,.ui-widget-header .ui-state-error{border:1px solid #cd0a0a;background:#fef1ec url(images/ui-bg_glass_95_fef1ec_1x400.png) 50% 50% repeat-x;color:#cd0a0a}.ui-state-error a,.ui-widget-content .ui-state-error a,.ui-widget-header .ui-state-error a{color:#cd0a0a}.ui-state-error-text,.ui-widget-content .ui-state-error-text,.ui-widget-header .ui-state-error-text{color:#cd0a0a}.ui-priority-primary,.ui-widget-content .ui-priority-primary,.ui-widget-header .ui-priority-primary{font-weight:bold}.ui-priority-secondary,.ui-widget-content .ui-priority-secondary,.ui-widget-header .ui-priority-secondary{opacity:.7;filter:Alpha(Opacity=70);font-weight:normal}.ui-state-disabled,.ui-widget-content .ui-state-disabled,.ui-widget-header .ui-state-disabled{opacity:.35;filter:Alpha(Opacity=35);background-image:none}.ui-icon{width:16px;height:16px;background-image:url(images/ui-icons_222222_256x240.png)}.ui-widget-content .ui-icon{background-image:url(images/ui-icons_222222_256x240.png)}.ui-widget-header .ui-icon{background-image:url(images/ui-icons_222222_256x240.png)}.ui-state-default .ui-icon{background-image:url(images/ui-icons_888888_256x240.png)}.ui-state-hover .ui-icon,.ui-state-focus .ui-icon{background-image:url(images/ui-icons_454545_256x240.png)}.ui-state-active .ui-icon{background-image:url(images/ui-icons_454545_256x240.png)}.ui-state-highlight .ui-icon{background-image:url(images/ui-icons_2e83ff_256x240.png)}.ui-state-error .ui-icon,.ui-state-error-text .ui-icon{background-image:url(images/ui-icons_cd0a0a_256x240.png)}.ui-icon-carat-1-n{background-position:0 0}.ui-icon-carat-1-ne{background-position:-16px 0}.ui-icon-carat-1-e{background-position:-32px 0}.ui-icon-carat-1-se{background-position:-48px 0}.ui-icon-carat-1-s{background-position:-64px 0}.ui-icon-carat-1-sw{background-position:-80px 0}.ui-icon-carat-1-w{background-position:-96px 0}.ui-icon-carat-1-nw{background-position:-112px 0}.ui-icon-carat-2-n-s{background-position:-128px 0}.ui-icon-carat-2-e-w{background-position:-144px 0}.ui-icon-triangle-1-n{background-position:0 -16px}.ui-icon-triangle-1-ne{background-position:-16px -16px}.ui-icon-triangle-1-e{background-position:-32px -16px}.ui-icon-triangle-1-se{background-position:-48px -16px}.ui-icon-triangle-1-s{background-position:-64px -16px}.ui-icon-triangle-1-sw{background-position:-80px -16px}.ui-icon-triangle-1-w{background-position:-96px -16px}.ui-icon-triangle-1-nw{background-position:-112px -16px}.ui-icon-triangle-2-n-s{background-position:-128px -16px}.ui-icon-triangle-2-e-w{background-position:-144px -16px}.ui-icon-arrow-1-n{background-position:0 -32px}.ui-icon-arrow-1-ne{background-position:-16px -32px}.ui-icon-arrow-1-e{background-position:-32px -32px}.ui-icon-arrow-1-se{background-position:-48px -32px}.ui-icon-arrow-1-s{background-position:-64px -32px}.ui-icon-arrow-1-sw{background-position:-80px -32px}.ui-icon-arrow-1-w{background-position:-96px -32px}.ui-icon-arrow-1-nw{background-position:-112px -32px}.ui-icon-arrow-2-n-s{background-position:-128px -32px}.ui-icon-arrow-2-ne-sw{background-position:-144px -32px}.ui-icon-arrow-2-e-w{background-position:-160px -32px}.ui-icon-arrow-2-se-nw{background-position:-176px -32px}.ui-icon-arrowstop-1-n{background-position:-192px -32px}.ui-icon-arrowstop-1-e{background-position:-208px -32px}.ui-icon-arrowstop-1-s{background-position:-224px -32px}.ui-icon-arrowstop-1-w{background-position:-240px -32px}.ui-icon-arrowthick-1-n{background-position:0 -48px}.ui-icon-arrowthick-1-ne{background-position:-16px -48px}.ui-icon-arrowthick-1-e{background-position:-32px -48px}.ui-icon-arrowthick-1-se{background-position:-48px -48px}.ui-icon-arrowthick-1-s{background-position:-64px -48px}.ui-icon-arrowthick-1-sw{background-position:-80px -48px}.ui-icon-arrowthick-1-w{background-position:-96px -48px}.ui-icon-arrowthick-1-nw{background-position:-112px -48px}.ui-icon-arrowthick-2-n-s{background-position:-128px -48px}.ui-icon-arrowthick-2-ne-sw{background-position:-144px -48px}.ui-icon-arrowthick-2-e-w{background-position:-160px -48px}.ui-icon-arrowthick-2-se-nw{background-position:-176px -48px}.ui-icon-arrowthickstop-1-n{background-position:-192px -48px}.ui-icon-arrowthickstop-1-e{background-position:-208px -48px}.ui-icon-arrowthickstop-1-s{background-position:-224px -48px}.ui-icon-arrowthickstop-1-w{background-position:-240px -48px}.ui-icon-arrowreturnthick-1-w{background-position:0 -64px}.ui-icon-arrowreturnthick-1-n{background-position:-16px -64px}.ui-icon-arrowreturnthick-1-e{background-position:-32px -64px}.ui-icon-arrowreturnthick-1-s{background-position:-48px -64px}.ui-icon-arrowreturn-1-w{background-position:-64px -64px}.ui-icon-arrowreturn-1-n{background-position:-80px -64px}.ui-icon-arrowreturn-1-e{background-position:-96px -64px}.ui-icon-arrowreturn-1-s{background-position:-112px -64px}.ui-icon-arrowrefresh-1-w{background-position:-128px -64px}.ui-icon-arrowrefresh-1-n{background-position:-144px -64px}.ui-icon-arrowrefresh-1-e{background-position:-160px -64px}.ui-icon-arrowrefresh-1-s{background-position:-176px -64px}.ui-icon-arrow-4{background-position:0 -80px}.ui-icon-arrow-4-diag{background-position:-16px -80px}.ui-icon-extlink{background-position:-32px -80px}.ui-icon-newwin{background-position:-48px -80px}.ui-icon-refresh{background-position:-64px -80px}.ui-icon-shuffle{background-position:-80px -80px}.ui-icon-transfer-e-w{background-position:-96px -80px}.ui-icon-transferthick-e-w{background-position:-112px -80px}.ui-icon-folder-collapsed{background-position:0 -96px}.ui-icon-folder-open{background-position:-16px -96px}.ui-icon-document{background-position:-32px -96px}.ui-icon-document-b{background-position:-48px -96px}.ui-icon-note{background-position:-64px -96px}.ui-icon-mail-closed{background-position:-80px -96px}.ui-icon-mail-open{background-position:-96px -96px}.ui-icon-suitcase{background-position:-112px -96px}.ui-icon-comment{background-position:-128px -96px}.ui-icon-person{background-position:-144px -96px}.ui-icon-print{background-position:-160px -96px}.ui-icon-trash{background-position:-176px -96px}.ui-icon-locked{background-position:-192px -96px}.ui-icon-unlocked{background-position:-208px -96px}.ui-icon-bookmark{background-position:-224px -96px}.ui-icon-tag{background-position:-240px -96px}.ui-icon-home{background-position:0 -112px}.ui-icon-flag{background-position:-16px -112px}.ui-icon-calendar{background-position:-32px -112px}.ui-icon-cart{background-position:-48px -112px}.ui-icon-pencil{background-position:-64px -112px}.ui-icon-clock{background-position:-80px -112px}.ui-icon-disk{background-position:-96px -112px}.ui-icon-calculator{background-position:-112px -112px}.ui-icon-zoomin{background-position:-128px -112px}.ui-icon-zoomout{background-position:-144px -112px}.ui-icon-search{background-position:-160px -112px}.ui-icon-wrench{background-position:-176px -112px}.ui-icon-gear{background-position:-192px -112px}.ui-icon-heart{background-position:-208px -112px}.ui-icon-star{background-position:-224px -112px}.ui-icon-link{background-position:-240px -112px}.ui-icon-cancel{background-position:0 -128px}.ui-icon-plus{background-position:-16px -128px}.ui-icon-plusthick{background-position:-32px -128px}.ui-icon-minus{background-position:-48px -128px}.ui-icon-minusthick{background-position:-64px -128px}.ui-icon-close{background-position:-80px -128px}.ui-icon-closethick{background-position:-96px -128px}.ui-icon-key{background-position:-112px -128px}.ui-icon-lightbulb{background-position:-128px -128px}.ui-icon-scissors{background-position:-144px -128px}.ui-icon-clipboard{background-position:-160px -128px}.ui-icon-copy{background-position:-176px -128px}.ui-icon-contact{background-position:-192px -128px}.ui-icon-image{background-position:-208px -128px}.ui-icon-video{background-position:-224px -128px}.ui-icon-script{background-position:-240px -128px}.ui-icon-alert{background-position:0 -144px}.ui-icon-info{background-position:-16px -144px}.ui-icon-notice{background-position:-32px -144px}.ui-icon-help{background-position:-48px -144px}.ui-icon-check{background-position:-64px -144px}.ui-icon-bullet{background-position:-80px -144px}.ui-icon-radio-off{background-position:-96px -144px}.ui-icon-radio-on{background-position:-112px -144px}.ui-icon-pin-w{background-position:-128px -144px}.ui-icon-pin-s{background-position:-144px -144px}.ui-icon-play{background-position:0 -160px}.ui-icon-pause{background-position:-16px -160px}.ui-icon-seek-next{background-position:-32px -160px}.ui-icon-seek-prev{background-position:-48px -160px}.ui-icon-seek-end{background-position:-64px -160px}.ui-icon-seek-start{background-position:-80px -160px}.ui-icon-seek-first{background-position:-80px -160px}.ui-icon-stop{background-position:-96px -160px}.ui-icon-eject{background-position:-112px -160px}.ui-icon-volume-off{background-position:-128px -160px}.ui-icon-volume-on{background-position:-144px -160px}.ui-icon-power{background-position:0 -176px}.ui-icon-signal-diag{background-position:-16px -176px}.ui-icon-signal{background-position:-32px -176px}.ui-icon-battery-0{background-position:-48px -176px}.ui-icon-battery-1{background-position:-64px -176px}.ui-icon-battery-2{background-position:-80px -176px}.ui-icon-battery-3{background-position:-96px -176px}.ui-icon-circle-plus{background-position:0 -192px}.ui-icon-circle-minus{background-position:-16px -192px}.ui-icon-circle-close{background-position:-32px -192px}.ui-icon-circle-triangle-e{background-position:-48px -192px}.ui-icon-circle-triangle-s{background-position:-64px -192px}.ui-icon-circle-triangle-w{background-position:-80px -192px}.ui-icon-circle-triangle-n{background-position:-96px -192px}.ui-icon-circle-arrow-e{background-position:-112px -192px}.ui-icon-circle-arrow-s{background-position:-128px -192px}.ui-icon-circle-arrow-w{background-position:-144px -192px}.ui-icon-circle-arrow-n{background-position:-160px -192px}.ui-icon-circle-zoomin{background-position:-176px -192px}.ui-icon-circle-zoomout{background-position:-192px -192px}.ui-icon-circle-check{background-position:-208px -192px}.ui-icon-circlesmall-plus{background-position:0 -208px}.ui-icon-circlesmall-minus{background-position:-16px -208px}.ui-icon-circlesmall-close{background-position:-32px -208px}.ui-icon-squaresmall-plus{background-position:-48px -208px}.ui-icon-squaresmall-minus{background-position:-64px -208px}.ui-icon-squaresmall-close{background-position:-80px -208px}.ui-icon-grip-dotted-vertical{background-position:0 -224px}.ui-icon-grip-dotted-horizontal{background-position:-16px -224px}.ui-icon-grip-solid-vertical{background-position:-32px -224px}.ui-icon-grip-solid-horizontal{background-position:-48px -224px}.ui-icon-gripsmall-diagonal-se{background-position:-64px -224px}.ui-icon-grip-diagonal-se{background-position:-80px -224px}.ui-corner-all,.ui-corner-top,.ui-corner-left,.ui-corner-tl{-moz-border-radius-topleft:4px;-webkit-border-top-left-radius:4px;-khtml-border-top-left-radius:4px;border-top-left-radius:4px}.ui-corner-all,.ui-corner-top,.ui-corner-right,.ui-corner-tr{-moz-border-radius-topright:4px;-webkit-border-top-right-radius:4px;-khtml-border-top-right-radius:4px;border-top-right-radius:4px}.ui-corner-all,.ui-corner-bottom,.ui-corner-left,.ui-corner-bl{-moz-border-radius-bottomleft:4px;-webkit-border-bottom-left-radius:4px;-khtml-border-bottom-left-radius:4px;border-bottom-left-radius:4px}.ui-corner-all,.ui-corner-bottom,.ui-corner-right,.ui-corner-br{-moz-border-radius-bottomright:4px;-webkit-border-bottom-right-radius:4px;-khtml-border-bottom-right-radius:4px;border-bottom-right-radius:4px}.ui-widget-overlay{background:#aaa url(images/ui-bg_flat_0_aaaaaa_40x100.png) 50% 50% repeat-x;opacity:.3;filter:Alpha(Opacity=30)}.ui-widget-shadow{margin:-8px 0 0 -8px;padding:8px;background:#aaa url(images/ui-bg_flat_0_aaaaaa_40x100.png) 50% 50% repeat-x;opacity:.3;filter:Alpha(Opacity=30);-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}



Content/themes/base/jquery-ui.css


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.core.css, jquery.ui.accordion.css, jquery.ui.autocomplete.css, jquery.ui.button.css, jquery.ui.datepicker.css, jquery.ui.dialog.css, jquery.ui.progressbar.css, jquery.ui.resizable.css, jquery.ui.selectable.css, jquery.ui.slider.css, jquery.ui.tabs.css, jquery.ui.theme.css
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */

/* Layout helpers
----------------------------------*/
.ui-helper-hidden { display: none; }
.ui-helper-hidden-accessible { position: absolute !important; clip: rect(1px 1px 1px 1px); clip: rect(1px,1px,1px,1px); }
.ui-helper-reset { margin: 0; padding: 0; border: 0; outline: 0; line-height: 1.3; text-decoration: none; font-size: 100%; list-style: none; }
.ui-helper-clearfix:before, .ui-helper-clearfix:after { content: ""; display: table; }
.ui-helper-clearfix:after { clear: both; }
.ui-helper-clearfix { zoom: 1; }
.ui-helper-zfix { width: 100%; height: 100%; top: 0; left: 0; position: absolute; opacity: 0; filter:Alpha(Opacity=0); }


/* Interaction Cues
----------------------------------*/
.ui-state-disabled { cursor: default !important; }


/* Icons
----------------------------------*/

/* states and images */
.ui-icon { display: block; text-indent: -99999px; overflow: hidden; background-repeat: no-repeat; }


/* Misc visuals
----------------------------------*/

/* Overlays */
.ui-widget-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }

/* IE/Win - Fix animation bug - #4615 */
.ui-accordion { width: 100%; }
.ui-accordion .ui-accordion-header { cursor: pointer; position: relative; margin-top: 1px; zoom: 1; }
.ui-accordion .ui-accordion-li-fix { display: inline; }
.ui-accordion .ui-accordion-header-active { border-bottom: 0 !important; }
.ui-accordion .ui-accordion-header a { display: block; font-size: 1em; padding: .5em .5em .5em .7em; }
.ui-accordion-icons .ui-accordion-header a { padding-left: 2.2em; }
.ui-accordion .ui-accordion-header .ui-icon { position: absolute; left: .5em; top: 50%; margin-top: -8px; }
.ui-accordion .ui-accordion-content { padding: 1em 2.2em; border-top: 0; margin-top: -2px; position: relative; top: 1px; margin-bottom: 2px; overflow: auto; display: none; zoom: 1; }
.ui-accordion .ui-accordion-content-active { display: block; }

.ui-autocomplete { position: absolute; cursor: default; }	

/* workarounds */
* html .ui-autocomplete { width:1px; } /* without this, the menu expands to 100% in IE6 */

/*
 * jQuery UI Menu 1.8.24
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Menu#theming
 */
.ui-menu {
	list-style:none;
	padding: 2px;
	margin: 0;
	display:block;
	float: left;
}
.ui-menu .ui-menu {
	margin-top: -3px;
}
.ui-menu .ui-menu-item {
	margin:0;
	padding: 0;
	zoom: 1;
	float: left;
	clear: left;
	width: 100%;
}
.ui-menu .ui-menu-item a {
	text-decoration:none;
	display:block;
	padding:.2em .4em;
	line-height:1.5;
	zoom:1;
}
.ui-menu .ui-menu-item a.ui-state-hover,
.ui-menu .ui-menu-item a.ui-state-active {
	font-weight: normal;
	margin: -1px;
}

.ui-button { display: inline-block; position: relative; padding: 0; margin-right: .1em; text-decoration: none !important; cursor: pointer; text-align: center; zoom: 1; overflow: visible; } /* the overflow property removes extra width in IE */
.ui-button-icon-only { width: 2.2em; } /* to make room for the icon, a width needs to be set here */
button.ui-button-icon-only { width: 2.4em; } /* button elements seem to need a little more width */
.ui-button-icons-only { width: 3.4em; } 
button.ui-button-icons-only { width: 3.7em; } 

/*button text element */
.ui-button .ui-button-text { display: block; line-height: 1.4;  }
.ui-button-text-only .ui-button-text { padding: .4em 1em; }
.ui-button-icon-only .ui-button-text, .ui-button-icons-only .ui-button-text { padding: .4em; text-indent: -9999999px; }
.ui-button-text-icon-primary .ui-button-text, .ui-button-text-icons .ui-button-text { padding: .4em 1em .4em 2.1em; }
.ui-button-text-icon-secondary .ui-button-text, .ui-button-text-icons .ui-button-text { padding: .4em 2.1em .4em 1em; }
.ui-button-text-icons .ui-button-text { padding-left: 2.1em; padding-right: 2.1em; }
/* no icon support for input elements, provide padding by default */
input.ui-button { padding: .4em 1em; }

/*button icon element(s) */
.ui-button-icon-only .ui-icon, .ui-button-text-icon-primary .ui-icon, .ui-button-text-icon-secondary .ui-icon, .ui-button-text-icons .ui-icon, .ui-button-icons-only .ui-icon { position: absolute; top: 50%; margin-top: -8px; }
.ui-button-icon-only .ui-icon { left: 50%; margin-left: -8px; }
.ui-button-text-icon-primary .ui-button-icon-primary, .ui-button-text-icons .ui-button-icon-primary, .ui-button-icons-only .ui-button-icon-primary { left: .5em; }
.ui-button-text-icon-secondary .ui-button-icon-secondary, .ui-button-text-icons .ui-button-icon-secondary, .ui-button-icons-only .ui-button-icon-secondary { right: .5em; }
.ui-button-text-icons .ui-button-icon-secondary, .ui-button-icons-only .ui-button-icon-secondary { right: .5em; }

/*button sets*/
.ui-buttonset { margin-right: 7px; }
.ui-buttonset .ui-button { margin-left: 0; margin-right: -.3em; }

/* workarounds */
button.ui-button::-moz-focus-inner { border: 0; padding: 0; } /* reset extra padding in Firefox */

.ui-datepicker { width: 17em; padding: .2em .2em 0; display: none; }
.ui-datepicker .ui-datepicker-header { position:relative; padding:.2em 0; }
.ui-datepicker .ui-datepicker-prev, .ui-datepicker .ui-datepicker-next { position:absolute; top: 2px; width: 1.8em; height: 1.8em; }
.ui-datepicker .ui-datepicker-prev-hover, .ui-datepicker .ui-datepicker-next-hover { top: 1px; }
.ui-datepicker .ui-datepicker-prev { left:2px; }
.ui-datepicker .ui-datepicker-next { right:2px; }
.ui-datepicker .ui-datepicker-prev-hover { left:1px; }
.ui-datepicker .ui-datepicker-next-hover { right:1px; }
.ui-datepicker .ui-datepicker-prev span, .ui-datepicker .ui-datepicker-next span { display: block; position: absolute; left: 50%; margin-left: -8px; top: 50%; margin-top: -8px;  }
.ui-datepicker .ui-datepicker-title { margin: 0 2.3em; line-height: 1.8em; text-align: center; }
.ui-datepicker .ui-datepicker-title select { font-size:1em; margin:1px 0; }
.ui-datepicker select.ui-datepicker-month-year {width: 100%;}
.ui-datepicker select.ui-datepicker-month, 
.ui-datepicker select.ui-datepicker-year { width: 49%;}
.ui-datepicker table {width: 100%; font-size: .9em; border-collapse: collapse; margin:0 0 .4em; }
.ui-datepicker th { padding: .7em .3em; text-align: center; font-weight: bold; border: 0;  }
.ui-datepicker td { border: 0; padding: 1px; }
.ui-datepicker td span, .ui-datepicker td a { display: block; padding: .2em; text-align: right; text-decoration: none; }
.ui-datepicker .ui-datepicker-buttonpane { background-image: none; margin: .7em 0 0 0; padding:0 .2em; border-left: 0; border-right: 0; border-bottom: 0; }
.ui-datepicker .ui-datepicker-buttonpane button { float: right; margin: .5em .2em .4em; cursor: pointer; padding: .2em .6em .3em .6em; width:auto; overflow:visible; }
.ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current { float:left; }

/* with multiple calendars */
.ui-datepicker.ui-datepicker-multi { width:auto; }
.ui-datepicker-multi .ui-datepicker-group { float:left; }
.ui-datepicker-multi .ui-datepicker-group table { width:95%; margin:0 auto .4em; }
.ui-datepicker-multi-2 .ui-datepicker-group { width:50%; }
.ui-datepicker-multi-3 .ui-datepicker-group { width:33.3%; }
.ui-datepicker-multi-4 .ui-datepicker-group { width:25%; }
.ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header { border-left-width:0; }
.ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header { border-left-width:0; }
.ui-datepicker-multi .ui-datepicker-buttonpane { clear:left; }
.ui-datepicker-row-break { clear:both; width:100%; font-size:0em; }

/* RTL support */
.ui-datepicker-rtl { direction: rtl; }
.ui-datepicker-rtl .ui-datepicker-prev { right: 2px; left: auto; }
.ui-datepicker-rtl .ui-datepicker-next { left: 2px; right: auto; }
.ui-datepicker-rtl .ui-datepicker-prev:hover { right: 1px; left: auto; }
.ui-datepicker-rtl .ui-datepicker-next:hover { left: 1px; right: auto; }
.ui-datepicker-rtl .ui-datepicker-buttonpane { clear:right; }
.ui-datepicker-rtl .ui-datepicker-buttonpane button { float: left; }
.ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current { float:right; }
.ui-datepicker-rtl .ui-datepicker-group { float:right; }
.ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header { border-right-width:0; border-left-width:1px; }
.ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header { border-right-width:0; border-left-width:1px; }

/* IE6 IFRAME FIX (taken from datepicker 1.5.3 */
.ui-datepicker-cover {
    position: absolute; /*must have*/
    z-index: -1; /*must have*/
    filter: mask(); /*must have*/
    top: -4px; /*must have*/
    left: -4px; /*must have*/
    width: 200px; /*must have*/
    height: 200px; /*must have*/
}
.ui-dialog { position: absolute; padding: .2em; width: 300px; overflow: hidden; }
.ui-dialog .ui-dialog-titlebar { padding: .4em 1em; position: relative;  }
.ui-dialog .ui-dialog-title { float: left; margin: .1em 16px .1em 0; } 
.ui-dialog .ui-dialog-titlebar-close { position: absolute; right: .3em; top: 50%; width: 19px; margin: -10px 0 0 0; padding: 1px; height: 18px; }
.ui-dialog .ui-dialog-titlebar-close span { display: block; margin: 1px; }
.ui-dialog .ui-dialog-titlebar-close:hover, .ui-dialog .ui-dialog-titlebar-close:focus { padding: 0; }
.ui-dialog .ui-dialog-content { position: relative; border: 0; padding: .5em 1em; background: none; overflow: auto; zoom: 1; }
.ui-dialog .ui-dialog-buttonpane { text-align: left; border-width: 1px 0 0 0; background-image: none; margin: .5em 0 0 0; padding: .3em 1em .5em .4em; }
.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset { float: right; }
.ui-dialog .ui-dialog-buttonpane button { margin: .5em .4em .5em 0; cursor: pointer; }
.ui-dialog .ui-resizable-se { width: 14px; height: 14px; right: 3px; bottom: 3px; }
.ui-draggable .ui-dialog-titlebar { cursor: move; }

.ui-progressbar { height:2em; text-align: left; overflow: hidden; }
.ui-progressbar .ui-progressbar-value {margin: -1px; height:100%; }
.ui-resizable { position: relative;}
.ui-resizable-handle { position: absolute;font-size: 0.1px; display: block; }
.ui-resizable-disabled .ui-resizable-handle, .ui-resizable-autohide .ui-resizable-handle { display: none; }
.ui-resizable-n { cursor: n-resize; height: 7px; width: 100%; top: -5px; left: 0; }
.ui-resizable-s { cursor: s-resize; height: 7px; width: 100%; bottom: -5px; left: 0; }
.ui-resizable-e { cursor: e-resize; width: 7px; right: -5px; top: 0; height: 100%; }
.ui-resizable-w { cursor: w-resize; width: 7px; left: -5px; top: 0; height: 100%; }
.ui-resizable-se { cursor: se-resize; width: 12px; height: 12px; right: 1px; bottom: 1px; }
.ui-resizable-sw { cursor: sw-resize; width: 9px; height: 9px; left: -5px; bottom: -5px; }
.ui-resizable-nw { cursor: nw-resize; width: 9px; height: 9px; left: -5px; top: -5px; }
.ui-resizable-ne { cursor: ne-resize; width: 9px; height: 9px; right: -5px; top: -5px;}
.ui-selectable-helper { position: absolute; z-index: 100; border:1px dotted black; }

.ui-slider { position: relative; text-align: left; }
.ui-slider .ui-slider-handle { position: absolute; z-index: 2; width: 1.2em; height: 1.2em; cursor: default; }
.ui-slider .ui-slider-range { position: absolute; z-index: 1; font-size: .7em; display: block; border: 0; background-position: 0 0; }

.ui-slider-horizontal { height: .8em; }
.ui-slider-horizontal .ui-slider-handle { top: -.3em; margin-left: -.6em; }
.ui-slider-horizontal .ui-slider-range { top: 0; height: 100%; }
.ui-slider-horizontal .ui-slider-range-min { left: 0; }
.ui-slider-horizontal .ui-slider-range-max { right: 0; }

.ui-slider-vertical { width: .8em; height: 100px; }
.ui-slider-vertical .ui-slider-handle { left: -.3em; margin-left: 0; margin-bottom: -.6em; }
.ui-slider-vertical .ui-slider-range { left: 0; width: 100%; }
.ui-slider-vertical .ui-slider-range-min { bottom: 0; }
.ui-slider-vertical .ui-slider-range-max { top: 0; }
.ui-tabs { position: relative; padding: .2em; zoom: 1; } /* position: relative prevents IE scroll bug (element with position: relative inside container with overflow: auto appear as "fixed") */
.ui-tabs .ui-tabs-nav { margin: 0; padding: .2em .2em 0; }
.ui-tabs .ui-tabs-nav li { list-style: none; float: left; position: relative; top: 1px; margin: 0 .2em 1px 0; border-bottom: 0 !important; padding: 0; white-space: nowrap; }
.ui-tabs .ui-tabs-nav li a { float: left; padding: .5em 1em; text-decoration: none; }
.ui-tabs .ui-tabs-nav li.ui-tabs-selected { margin-bottom: 0; padding-bottom: 1px; }
.ui-tabs .ui-tabs-nav li.ui-tabs-selected a, .ui-tabs .ui-tabs-nav li.ui-state-disabled a, .ui-tabs .ui-tabs-nav li.ui-state-processing a { cursor: text; }
.ui-tabs .ui-tabs-nav li a, .ui-tabs.ui-tabs-collapsible .ui-tabs-nav li.ui-tabs-selected a { cursor: pointer; } /* first selector in group seems obsolete, but required to overcome bug in Opera applying cursor: text overall if defined elsewhere... */
.ui-tabs .ui-tabs-panel { display: block; border-width: 0; padding: 1em 1.4em; background: none; }
.ui-tabs .ui-tabs-hide { display: none !important; }

/* Component containers
----------------------------------*/
.ui-widget { font-family: Verdana,Arial,sans-serif/*{ffDefault}*/; font-size: 1.1em/*{fsDefault}*/; }
.ui-widget .ui-widget { font-size: 1em; }
.ui-widget input, .ui-widget select, .ui-widget textarea, .ui-widget button { font-family: Verdana,Arial,sans-serif/*{ffDefault}*/; font-size: 1em; }
.ui-widget-content { border: 1px solid #aaaaaa/*{borderColorContent}*/; background: #ffffff/*{bgColorContent}*/ url(images/ui-bg_flat_75_ffffff_40x100.png)/*{bgImgUrlContent}*/ 50%/*{bgContentXPos}*/ 50%/*{bgContentYPos}*/ repeat-x/*{bgContentRepeat}*/; color: #222222/*{fcContent}*/; }
.ui-widget-content a { color: #222222/*{fcContent}*/; }
.ui-widget-header { border: 1px solid #aaaaaa/*{borderColorHeader}*/; background: #cccccc/*{bgColorHeader}*/ url(images/ui-bg_highlight-soft_75_cccccc_1x100.png)/*{bgImgUrlHeader}*/ 50%/*{bgHeaderXPos}*/ 50%/*{bgHeaderYPos}*/ repeat-x/*{bgHeaderRepeat}*/; color: #222222/*{fcHeader}*/; font-weight: bold; }
.ui-widget-header a { color: #222222/*{fcHeader}*/; }

/* Interaction states
----------------------------------*/
.ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default { border: 1px solid #d3d3d3/*{borderColorDefault}*/; background: #e6e6e6/*{bgColorDefault}*/ url(images/ui-bg_glass_75_e6e6e6_1x400.png)/*{bgImgUrlDefault}*/ 50%/*{bgDefaultXPos}*/ 50%/*{bgDefaultYPos}*/ repeat-x/*{bgDefaultRepeat}*/; font-weight: normal/*{fwDefault}*/; color: #555555/*{fcDefault}*/; }
.ui-state-default a, .ui-state-default a:link, .ui-state-default a:visited { color: #555555/*{fcDefault}*/; text-decoration: none; }
.ui-state-hover, .ui-widget-content .ui-state-hover, .ui-widget-header .ui-state-hover, .ui-state-focus, .ui-widget-content .ui-state-focus, .ui-widget-header .ui-state-focus { border: 1px solid #999999/*{borderColorHover}*/; background: #dadada/*{bgColorHover}*/ url(images/ui-bg_glass_75_dadada_1x400.png)/*{bgImgUrlHover}*/ 50%/*{bgHoverXPos}*/ 50%/*{bgHoverYPos}*/ repeat-x/*{bgHoverRepeat}*/; font-weight: normal/*{fwDefault}*/; color: #212121/*{fcHover}*/; }
.ui-state-hover a, .ui-state-hover a:hover { color: #212121/*{fcHover}*/; text-decoration: none; }
.ui-state-active, .ui-widget-content .ui-state-active, .ui-widget-header .ui-state-active { border: 1px solid #aaaaaa/*{borderColorActive}*/; background: #ffffff/*{bgColorActive}*/ url(images/ui-bg_glass_65_ffffff_1x400.png)/*{bgImgUrlActive}*/ 50%/*{bgActiveXPos}*/ 50%/*{bgActiveYPos}*/ repeat-x/*{bgActiveRepeat}*/; font-weight: normal/*{fwDefault}*/; color: #212121/*{fcActive}*/; }
.ui-state-active a, .ui-state-active a:link, .ui-state-active a:visited { color: #212121/*{fcActive}*/; text-decoration: none; }
.ui-widget :active { outline: none; }

/* Interaction Cues
----------------------------------*/
.ui-state-highlight, .ui-widget-content .ui-state-highlight, .ui-widget-header .ui-state-highlight  {border: 1px solid #fcefa1/*{borderColorHighlight}*/; background: #fbf9ee/*{bgColorHighlight}*/ url(images/ui-bg_glass_55_fbf9ee_1x400.png)/*{bgImgUrlHighlight}*/ 50%/*{bgHighlightXPos}*/ 50%/*{bgHighlightYPos}*/ repeat-x/*{bgHighlightRepeat}*/; color: #363636/*{fcHighlight}*/; }
.ui-state-highlight a, .ui-widget-content .ui-state-highlight a,.ui-widget-header .ui-state-highlight a { color: #363636/*{fcHighlight}*/; }
.ui-state-error, .ui-widget-content .ui-state-error, .ui-widget-header .ui-state-error {border: 1px solid #cd0a0a/*{borderColorError}*/; background: #fef1ec/*{bgColorError}*/ url(images/ui-bg_glass_95_fef1ec_1x400.png)/*{bgImgUrlError}*/ 50%/*{bgErrorXPos}*/ 50%/*{bgErrorYPos}*/ repeat-x/*{bgErrorRepeat}*/; color: #cd0a0a/*{fcError}*/; }
.ui-state-error a, .ui-widget-content .ui-state-error a, .ui-widget-header .ui-state-error a { color: #cd0a0a/*{fcError}*/; }
.ui-state-error-text, .ui-widget-content .ui-state-error-text, .ui-widget-header .ui-state-error-text { color: #cd0a0a/*{fcError}*/; }
.ui-priority-primary, .ui-widget-content .ui-priority-primary, .ui-widget-header .ui-priority-primary { font-weight: bold; }
.ui-priority-secondary, .ui-widget-content .ui-priority-secondary,  .ui-widget-header .ui-priority-secondary { opacity: .7; filter:Alpha(Opacity=70); font-weight: normal; }
.ui-state-disabled, .ui-widget-content .ui-state-disabled, .ui-widget-header .ui-state-disabled { opacity: .35; filter:Alpha(Opacity=35); background-image: none; }

/* Icons
----------------------------------*/

/* states and images */
.ui-icon { width: 16px; height: 16px; background-image: url(images/ui-icons_222222_256x240.png)/*{iconsContent}*/; }
.ui-widget-content .ui-icon {background-image: url(images/ui-icons_222222_256x240.png)/*{iconsContent}*/; }
.ui-widget-header .ui-icon {background-image: url(images/ui-icons_222222_256x240.png)/*{iconsHeader}*/; }
.ui-state-default .ui-icon { background-image: url(images/ui-icons_888888_256x240.png)/*{iconsDefault}*/; }
.ui-state-hover .ui-icon, .ui-state-focus .ui-icon {background-image: url(images/ui-icons_454545_256x240.png)/*{iconsHover}*/; }
.ui-state-active .ui-icon {background-image: url(images/ui-icons_454545_256x240.png)/*{iconsActive}*/; }
.ui-state-highlight .ui-icon {background-image: url(images/ui-icons_2e83ff_256x240.png)/*{iconsHighlight}*/; }
.ui-state-error .ui-icon, .ui-state-error-text .ui-icon {background-image: url(images/ui-icons_cd0a0a_256x240.png)/*{iconsError}*/; }

/* positioning */
.ui-icon-carat-1-n { background-position: 0 0; }
.ui-icon-carat-1-ne { background-position: -16px 0; }
.ui-icon-carat-1-e { background-position: -32px 0; }
.ui-icon-carat-1-se { background-position: -48px 0; }
.ui-icon-carat-1-s { background-position: -64px 0; }
.ui-icon-carat-1-sw { background-position: -80px 0; }
.ui-icon-carat-1-w { background-position: -96px 0; }
.ui-icon-carat-1-nw { background-position: -112px 0; }
.ui-icon-carat-2-n-s { background-position: -128px 0; }
.ui-icon-carat-2-e-w { background-position: -144px 0; }
.ui-icon-triangle-1-n { background-position: 0 -16px; }
.ui-icon-triangle-1-ne { background-position: -16px -16px; }
.ui-icon-triangle-1-e { background-position: -32px -16px; }
.ui-icon-triangle-1-se { background-position: -48px -16px; }
.ui-icon-triangle-1-s { background-position: -64px -16px; }
.ui-icon-triangle-1-sw { background-position: -80px -16px; }
.ui-icon-triangle-1-w { background-position: -96px -16px; }
.ui-icon-triangle-1-nw { background-position: -112px -16px; }
.ui-icon-triangle-2-n-s { background-position: -128px -16px; }
.ui-icon-triangle-2-e-w { background-position: -144px -16px; }
.ui-icon-arrow-1-n { background-position: 0 -32px; }
.ui-icon-arrow-1-ne { background-position: -16px -32px; }
.ui-icon-arrow-1-e { background-position: -32px -32px; }
.ui-icon-arrow-1-se { background-position: -48px -32px; }
.ui-icon-arrow-1-s { background-position: -64px -32px; }
.ui-icon-arrow-1-sw { background-position: -80px -32px; }
.ui-icon-arrow-1-w { background-position: -96px -32px; }
.ui-icon-arrow-1-nw { background-position: -112px -32px; }
.ui-icon-arrow-2-n-s { background-position: -128px -32px; }
.ui-icon-arrow-2-ne-sw { background-position: -144px -32px; }
.ui-icon-arrow-2-e-w { background-position: -160px -32px; }
.ui-icon-arrow-2-se-nw { background-position: -176px -32px; }
.ui-icon-arrowstop-1-n { background-position: -192px -32px; }
.ui-icon-arrowstop-1-e { background-position: -208px -32px; }
.ui-icon-arrowstop-1-s { background-position: -224px -32px; }
.ui-icon-arrowstop-1-w { background-position: -240px -32px; }
.ui-icon-arrowthick-1-n { background-position: 0 -48px; }
.ui-icon-arrowthick-1-ne { background-position: -16px -48px; }
.ui-icon-arrowthick-1-e { background-position: -32px -48px; }
.ui-icon-arrowthick-1-se { background-position: -48px -48px; }
.ui-icon-arrowthick-1-s { background-position: -64px -48px; }
.ui-icon-arrowthick-1-sw { background-position: -80px -48px; }
.ui-icon-arrowthick-1-w { background-position: -96px -48px; }
.ui-icon-arrowthick-1-nw { background-position: -112px -48px; }
.ui-icon-arrowthick-2-n-s { background-position: -128px -48px; }
.ui-icon-arrowthick-2-ne-sw { background-position: -144px -48px; }
.ui-icon-arrowthick-2-e-w { background-position: -160px -48px; }
.ui-icon-arrowthick-2-se-nw { background-position: -176px -48px; }
.ui-icon-arrowthickstop-1-n { background-position: -192px -48px; }
.ui-icon-arrowthickstop-1-e { background-position: -208px -48px; }
.ui-icon-arrowthickstop-1-s { background-position: -224px -48px; }
.ui-icon-arrowthickstop-1-w { background-position: -240px -48px; }
.ui-icon-arrowreturnthick-1-w { background-position: 0 -64px; }
.ui-icon-arrowreturnthick-1-n { background-position: -16px -64px; }
.ui-icon-arrowreturnthick-1-e { background-position: -32px -64px; }
.ui-icon-arrowreturnthick-1-s { background-position: -48px -64px; }
.ui-icon-arrowreturn-1-w { background-position: -64px -64px; }
.ui-icon-arrowreturn-1-n { background-position: -80px -64px; }
.ui-icon-arrowreturn-1-e { background-position: -96px -64px; }
.ui-icon-arrowreturn-1-s { background-position: -112px -64px; }
.ui-icon-arrowrefresh-1-w { background-position: -128px -64px; }
.ui-icon-arrowrefresh-1-n { background-position: -144px -64px; }
.ui-icon-arrowrefresh-1-e { background-position: -160px -64px; }
.ui-icon-arrowrefresh-1-s { background-position: -176px -64px; }
.ui-icon-arrow-4 { background-position: 0 -80px; }
.ui-icon-arrow-4-diag { background-position: -16px -80px; }
.ui-icon-extlink { background-position: -32px -80px; }
.ui-icon-newwin { background-position: -48px -80px; }
.ui-icon-refresh { background-position: -64px -80px; }
.ui-icon-shuffle { background-position: -80px -80px; }
.ui-icon-transfer-e-w { background-position: -96px -80px; }
.ui-icon-transferthick-e-w { background-position: -112px -80px; }
.ui-icon-folder-collapsed { background-position: 0 -96px; }
.ui-icon-folder-open { background-position: -16px -96px; }
.ui-icon-document { background-position: -32px -96px; }
.ui-icon-document-b { background-position: -48px -96px; }
.ui-icon-note { background-position: -64px -96px; }
.ui-icon-mail-closed { background-position: -80px -96px; }
.ui-icon-mail-open { background-position: -96px -96px; }
.ui-icon-suitcase { background-position: -112px -96px; }
.ui-icon-comment { background-position: -128px -96px; }
.ui-icon-person { background-position: -144px -96px; }
.ui-icon-print { background-position: -160px -96px; }
.ui-icon-trash { background-position: -176px -96px; }
.ui-icon-locked { background-position: -192px -96px; }
.ui-icon-unlocked { background-position: -208px -96px; }
.ui-icon-bookmark { background-position: -224px -96px; }
.ui-icon-tag { background-position: -240px -96px; }
.ui-icon-home { background-position: 0 -112px; }
.ui-icon-flag { background-position: -16px -112px; }
.ui-icon-calendar { background-position: -32px -112px; }
.ui-icon-cart { background-position: -48px -112px; }
.ui-icon-pencil { background-position: -64px -112px; }
.ui-icon-clock { background-position: -80px -112px; }
.ui-icon-disk { background-position: -96px -112px; }
.ui-icon-calculator { background-position: -112px -112px; }
.ui-icon-zoomin { background-position: -128px -112px; }
.ui-icon-zoomout { background-position: -144px -112px; }
.ui-icon-search { background-position: -160px -112px; }
.ui-icon-wrench { background-position: -176px -112px; }
.ui-icon-gear { background-position: -192px -112px; }
.ui-icon-heart { background-position: -208px -112px; }
.ui-icon-star { background-position: -224px -112px; }
.ui-icon-link { background-position: -240px -112px; }
.ui-icon-cancel { background-position: 0 -128px; }
.ui-icon-plus { background-position: -16px -128px; }
.ui-icon-plusthick { background-position: -32px -128px; }
.ui-icon-minus { background-position: -48px -128px; }
.ui-icon-minusthick { background-position: -64px -128px; }
.ui-icon-close { background-position: -80px -128px; }
.ui-icon-closethick { background-position: -96px -128px; }
.ui-icon-key { background-position: -112px -128px; }
.ui-icon-lightbulb { background-position: -128px -128px; }
.ui-icon-scissors { background-position: -144px -128px; }
.ui-icon-clipboard { background-position: -160px -128px; }
.ui-icon-copy { background-position: -176px -128px; }
.ui-icon-contact { background-position: -192px -128px; }
.ui-icon-image { background-position: -208px -128px; }
.ui-icon-video { background-position: -224px -128px; }
.ui-icon-script { background-position: -240px -128px; }
.ui-icon-alert { background-position: 0 -144px; }
.ui-icon-info { background-position: -16px -144px; }
.ui-icon-notice { background-position: -32px -144px; }
.ui-icon-help { background-position: -48px -144px; }
.ui-icon-check { background-position: -64px -144px; }
.ui-icon-bullet { background-position: -80px -144px; }
.ui-icon-radio-off { background-position: -96px -144px; }
.ui-icon-radio-on { background-position: -112px -144px; }
.ui-icon-pin-w { background-position: -128px -144px; }
.ui-icon-pin-s { background-position: -144px -144px; }
.ui-icon-play { background-position: 0 -160px; }
.ui-icon-pause { background-position: -16px -160px; }
.ui-icon-seek-next { background-position: -32px -160px; }
.ui-icon-seek-prev { background-position: -48px -160px; }
.ui-icon-seek-end { background-position: -64px -160px; }
.ui-icon-seek-start { background-position: -80px -160px; }
/* ui-icon-seek-first is deprecated, use ui-icon-seek-start instead */
.ui-icon-seek-first { background-position: -80px -160px; }
.ui-icon-stop { background-position: -96px -160px; }
.ui-icon-eject { background-position: -112px -160px; }
.ui-icon-volume-off { background-position: -128px -160px; }
.ui-icon-volume-on { background-position: -144px -160px; }
.ui-icon-power { background-position: 0 -176px; }
.ui-icon-signal-diag { background-position: -16px -176px; }
.ui-icon-signal { background-position: -32px -176px; }
.ui-icon-battery-0 { background-position: -48px -176px; }
.ui-icon-battery-1 { background-position: -64px -176px; }
.ui-icon-battery-2 { background-position: -80px -176px; }
.ui-icon-battery-3 { background-position: -96px -176px; }
.ui-icon-circle-plus { background-position: 0 -192px; }
.ui-icon-circle-minus { background-position: -16px -192px; }
.ui-icon-circle-close { background-position: -32px -192px; }
.ui-icon-circle-triangle-e { background-position: -48px -192px; }
.ui-icon-circle-triangle-s { background-position: -64px -192px; }
.ui-icon-circle-triangle-w { background-position: -80px -192px; }
.ui-icon-circle-triangle-n { background-position: -96px -192px; }
.ui-icon-circle-arrow-e { background-position: -112px -192px; }
.ui-icon-circle-arrow-s { background-position: -128px -192px; }
.ui-icon-circle-arrow-w { background-position: -144px -192px; }
.ui-icon-circle-arrow-n { background-position: -160px -192px; }
.ui-icon-circle-zoomin { background-position: -176px -192px; }
.ui-icon-circle-zoomout { background-position: -192px -192px; }
.ui-icon-circle-check { background-position: -208px -192px; }
.ui-icon-circlesmall-plus { background-position: 0 -208px; }
.ui-icon-circlesmall-minus { background-position: -16px -208px; }
.ui-icon-circlesmall-close { background-position: -32px -208px; }
.ui-icon-squaresmall-plus { background-position: -48px -208px; }
.ui-icon-squaresmall-minus { background-position: -64px -208px; }
.ui-icon-squaresmall-close { background-position: -80px -208px; }
.ui-icon-grip-dotted-vertical { background-position: 0 -224px; }
.ui-icon-grip-dotted-horizontal { background-position: -16px -224px; }
.ui-icon-grip-solid-vertical { background-position: -32px -224px; }
.ui-icon-grip-solid-horizontal { background-position: -48px -224px; }
.ui-icon-gripsmall-diagonal-se { background-position: -64px -224px; }
.ui-icon-grip-diagonal-se { background-position: -80px -224px; }


/* Misc visuals
----------------------------------*/

/* Corner radius */
.ui-corner-all, .ui-corner-top, .ui-corner-left, .ui-corner-tl { -moz-border-radius-topleft: 4px/*{cornerRadius}*/; -webkit-border-top-left-radius: 4px/*{cornerRadius}*/; -khtml-border-top-left-radius: 4px/*{cornerRadius}*/; border-top-left-radius: 4px/*{cornerRadius}*/; }
.ui-corner-all, .ui-corner-top, .ui-corner-right, .ui-corner-tr { -moz-border-radius-topright: 4px/*{cornerRadius}*/; -webkit-border-top-right-radius: 4px/*{cornerRadius}*/; -khtml-border-top-right-radius: 4px/*{cornerRadius}*/; border-top-right-radius: 4px/*{cornerRadius}*/; }
.ui-corner-all, .ui-corner-bottom, .ui-corner-left, .ui-corner-bl { -moz-border-radius-bottomleft: 4px/*{cornerRadius}*/; -webkit-border-bottom-left-radius: 4px/*{cornerRadius}*/; -khtml-border-bottom-left-radius: 4px/*{cornerRadius}*/; border-bottom-left-radius: 4px/*{cornerRadius}*/; }
.ui-corner-all, .ui-corner-bottom, .ui-corner-right, .ui-corner-br { -moz-border-radius-bottomright: 4px/*{cornerRadius}*/; -webkit-border-bottom-right-radius: 4px/*{cornerRadius}*/; -khtml-border-bottom-right-radius: 4px/*{cornerRadius}*/; border-bottom-right-radius: 4px/*{cornerRadius}*/; }

/* Overlays */
.ui-widget-overlay { background: #aaaaaa/*{bgColorOverlay}*/ url(images/ui-bg_flat_0_aaaaaa_40x100.png)/*{bgImgUrlOverlay}*/ 50%/*{bgOverlayXPos}*/ 50%/*{bgOverlayYPos}*/ repeat-x/*{bgOverlayRepeat}*/; opacity: .3;filter:Alpha(Opacity=30)/*{opacityOverlay}*/; }
.ui-widget-shadow { margin: -8px/*{offsetTopShadow}*/ 0 0 -8px/*{offsetLeftShadow}*/; padding: 8px/*{thicknessShadow}*/; background: #aaaaaa/*{bgColorShadow}*/ url(images/ui-bg_flat_0_aaaaaa_40x100.png)/*{bgImgUrlShadow}*/ 50%/*{bgShadowXPos}*/ 50%/*{bgShadowYPos}*/ repeat-x/*{bgShadowRepeat}*/; opacity: .3;filter:Alpha(Opacity=30)/*{opacityShadow}*/; -moz-border-radius: 8px/*{cornerRadiusShadow}*/; -khtml-border-radius: 8px/*{cornerRadiusShadow}*/; -webkit-border-radius: 8px/*{cornerRadiusShadow}*/; border-radius: 8px/*{cornerRadiusShadow}*/; }



Content/themes/base/jquery.ui.accordion.css


/*!
 * jQuery UI Accordion 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Accordion#theming
 */
/* IE/Win - Fix animation bug - #4615 */
.ui-accordion { width: 100%; }
.ui-accordion .ui-accordion-header { cursor: pointer; position: relative; margin-top: 1px; zoom: 1; }
.ui-accordion .ui-accordion-li-fix { display: inline; }
.ui-accordion .ui-accordion-header-active { border-bottom: 0 !important; }
.ui-accordion .ui-accordion-header a { display: block; font-size: 1em; padding: .5em .5em .5em .7em; }
.ui-accordion-icons .ui-accordion-header a { padding-left: 2.2em; }
.ui-accordion .ui-accordion-header .ui-icon { position: absolute; left: .5em; top: 50%; margin-top: -8px; }
.ui-accordion .ui-accordion-content { padding: 1em 2.2em; border-top: 0; margin-top: -2px; position: relative; top: 1px; margin-bottom: 2px; overflow: auto; display: none; zoom: 1; }
.ui-accordion .ui-accordion-content-active { display: block; }




Content/themes/base/jquery.ui.all.css


/*!
 * jQuery UI CSS Framework 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Theming
 */
@import "jquery.ui.base.css";
@import "jquery.ui.theme.css";




Content/themes/base/jquery.ui.autocomplete.css


/*!
 * jQuery UI Autocomplete 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Autocomplete#theming
 */
.ui-autocomplete { position: absolute; cursor: default; }	

/* workarounds */
* html .ui-autocomplete { width:1px; } /* without this, the menu expands to 100% in IE6 */

/*
 * jQuery UI Menu 1.8.24
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Menu#theming
 */
.ui-menu {
	list-style:none;
	padding: 2px;
	margin: 0;
	display:block;
	float: left;
}
.ui-menu .ui-menu {
	margin-top: -3px;
}
.ui-menu .ui-menu-item {
	margin:0;
	padding: 0;
	zoom: 1;
	float: left;
	clear: left;
	width: 100%;
}
.ui-menu .ui-menu-item a {
	text-decoration:none;
	display:block;
	padding:.2em .4em;
	line-height:1.5;
	zoom:1;
}
.ui-menu .ui-menu-item a.ui-state-hover,
.ui-menu .ui-menu-item a.ui-state-active {
	font-weight: normal;
	margin: -1px;
}




Content/themes/base/jquery.ui.base.css


/*!
 * jQuery UI CSS Framework 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Theming
 */
@import url("jquery.ui.core.css");

@import url("jquery.ui.accordion.css");
@import url("jquery.ui.autocomplete.css");
@import url("jquery.ui.button.css");
@import url("jquery.ui.datepicker.css");
@import url("jquery.ui.dialog.css");
@import url("jquery.ui.progressbar.css");
@import url("jquery.ui.resizable.css");
@import url("jquery.ui.selectable.css");
@import url("jquery.ui.slider.css");
@import url("jquery.ui.tabs.css");




Content/themes/base/jquery.ui.button.css


/*!
 * jQuery UI Button 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Button#theming
 */
.ui-button { display: inline-block; position: relative; padding: 0; margin-right: .1em; text-decoration: none !important; cursor: pointer; text-align: center; zoom: 1; overflow: visible; } /* the overflow property removes extra width in IE */
.ui-button-icon-only { width: 2.2em; } /* to make room for the icon, a width needs to be set here */
button.ui-button-icon-only { width: 2.4em; } /* button elements seem to need a little more width */
.ui-button-icons-only { width: 3.4em; } 
button.ui-button-icons-only { width: 3.7em; } 

/*button text element */
.ui-button .ui-button-text { display: block; line-height: 1.4;  }
.ui-button-text-only .ui-button-text { padding: .4em 1em; }
.ui-button-icon-only .ui-button-text, .ui-button-icons-only .ui-button-text { padding: .4em; text-indent: -9999999px; }
.ui-button-text-icon-primary .ui-button-text, .ui-button-text-icons .ui-button-text { padding: .4em 1em .4em 2.1em; }
.ui-button-text-icon-secondary .ui-button-text, .ui-button-text-icons .ui-button-text { padding: .4em 2.1em .4em 1em; }
.ui-button-text-icons .ui-button-text { padding-left: 2.1em; padding-right: 2.1em; }
/* no icon support for input elements, provide padding by default */
input.ui-button { padding: .4em 1em; }

/*button icon element(s) */
.ui-button-icon-only .ui-icon, .ui-button-text-icon-primary .ui-icon, .ui-button-text-icon-secondary .ui-icon, .ui-button-text-icons .ui-icon, .ui-button-icons-only .ui-icon { position: absolute; top: 50%; margin-top: -8px; }
.ui-button-icon-only .ui-icon { left: 50%; margin-left: -8px; }
.ui-button-text-icon-primary .ui-button-icon-primary, .ui-button-text-icons .ui-button-icon-primary, .ui-button-icons-only .ui-button-icon-primary { left: .5em; }
.ui-button-text-icon-secondary .ui-button-icon-secondary, .ui-button-text-icons .ui-button-icon-secondary, .ui-button-icons-only .ui-button-icon-secondary { right: .5em; }
.ui-button-text-icons .ui-button-icon-secondary, .ui-button-icons-only .ui-button-icon-secondary { right: .5em; }

/*button sets*/
.ui-buttonset { margin-right: 7px; }
.ui-buttonset .ui-button { margin-left: 0; margin-right: -.3em; }

/* workarounds */
button.ui-button::-moz-focus-inner { border: 0; padding: 0; } /* reset extra padding in Firefox */




Content/themes/base/jquery.ui.core.css


/*!
 * jQuery UI CSS Framework 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Theming/API
 */

/* Layout helpers
----------------------------------*/
.ui-helper-hidden { display: none; }
.ui-helper-hidden-accessible { position: absolute !important; clip: rect(1px 1px 1px 1px); clip: rect(1px,1px,1px,1px); }
.ui-helper-reset { margin: 0; padding: 0; border: 0; outline: 0; line-height: 1.3; text-decoration: none; font-size: 100%; list-style: none; }
.ui-helper-clearfix:before, .ui-helper-clearfix:after { content: ""; display: table; }
.ui-helper-clearfix:after { clear: both; }
.ui-helper-clearfix { zoom: 1; }
.ui-helper-zfix { width: 100%; height: 100%; top: 0; left: 0; position: absolute; opacity: 0; filter:Alpha(Opacity=0); }


/* Interaction Cues
----------------------------------*/
.ui-state-disabled { cursor: default !important; }


/* Icons
----------------------------------*/

/* states and images */
.ui-icon { display: block; text-indent: -99999px; overflow: hidden; background-repeat: no-repeat; }


/* Misc visuals
----------------------------------*/

/* Overlays */
.ui-widget-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }




Content/themes/base/jquery.ui.datepicker.css


/*!
 * jQuery UI Datepicker 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Datepicker#theming
 */
.ui-datepicker { width: 17em; padding: .2em .2em 0; display: none; }
.ui-datepicker .ui-datepicker-header { position:relative; padding:.2em 0; }
.ui-datepicker .ui-datepicker-prev, .ui-datepicker .ui-datepicker-next { position:absolute; top: 2px; width: 1.8em; height: 1.8em; }
.ui-datepicker .ui-datepicker-prev-hover, .ui-datepicker .ui-datepicker-next-hover { top: 1px; }
.ui-datepicker .ui-datepicker-prev { left:2px; }
.ui-datepicker .ui-datepicker-next { right:2px; }
.ui-datepicker .ui-datepicker-prev-hover { left:1px; }
.ui-datepicker .ui-datepicker-next-hover { right:1px; }
.ui-datepicker .ui-datepicker-prev span, .ui-datepicker .ui-datepicker-next span { display: block; position: absolute; left: 50%; margin-left: -8px; top: 50%; margin-top: -8px;  }
.ui-datepicker .ui-datepicker-title { margin: 0 2.3em; line-height: 1.8em; text-align: center; }
.ui-datepicker .ui-datepicker-title select { font-size:1em; margin:1px 0; }
.ui-datepicker select.ui-datepicker-month-year {width: 100%;}
.ui-datepicker select.ui-datepicker-month, 
.ui-datepicker select.ui-datepicker-year { width: 49%;}
.ui-datepicker table {width: 100%; font-size: .9em; border-collapse: collapse; margin:0 0 .4em; }
.ui-datepicker th { padding: .7em .3em; text-align: center; font-weight: bold; border: 0;  }
.ui-datepicker td { border: 0; padding: 1px; }
.ui-datepicker td span, .ui-datepicker td a { display: block; padding: .2em; text-align: right; text-decoration: none; }
.ui-datepicker .ui-datepicker-buttonpane { background-image: none; margin: .7em 0 0 0; padding:0 .2em; border-left: 0; border-right: 0; border-bottom: 0; }
.ui-datepicker .ui-datepicker-buttonpane button { float: right; margin: .5em .2em .4em; cursor: pointer; padding: .2em .6em .3em .6em; width:auto; overflow:visible; }
.ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current { float:left; }

/* with multiple calendars */
.ui-datepicker.ui-datepicker-multi { width:auto; }
.ui-datepicker-multi .ui-datepicker-group { float:left; }
.ui-datepicker-multi .ui-datepicker-group table { width:95%; margin:0 auto .4em; }
.ui-datepicker-multi-2 .ui-datepicker-group { width:50%; }
.ui-datepicker-multi-3 .ui-datepicker-group { width:33.3%; }
.ui-datepicker-multi-4 .ui-datepicker-group { width:25%; }
.ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header { border-left-width:0; }
.ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header { border-left-width:0; }
.ui-datepicker-multi .ui-datepicker-buttonpane { clear:left; }
.ui-datepicker-row-break { clear:both; width:100%; font-size:0em; }

/* RTL support */
.ui-datepicker-rtl { direction: rtl; }
.ui-datepicker-rtl .ui-datepicker-prev { right: 2px; left: auto; }
.ui-datepicker-rtl .ui-datepicker-next { left: 2px; right: auto; }
.ui-datepicker-rtl .ui-datepicker-prev:hover { right: 1px; left: auto; }
.ui-datepicker-rtl .ui-datepicker-next:hover { left: 1px; right: auto; }
.ui-datepicker-rtl .ui-datepicker-buttonpane { clear:right; }
.ui-datepicker-rtl .ui-datepicker-buttonpane button { float: left; }
.ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current { float:right; }
.ui-datepicker-rtl .ui-datepicker-group { float:right; }
.ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header { border-right-width:0; border-left-width:1px; }
.ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header { border-right-width:0; border-left-width:1px; }

/* IE6 IFRAME FIX (taken from datepicker 1.5.3 */
.ui-datepicker-cover {
    position: absolute; /*must have*/
    z-index: -1; /*must have*/
    filter: mask(); /*must have*/
    top: -4px; /*must have*/
    left: -4px; /*must have*/
    width: 200px; /*must have*/
    height: 200px; /*must have*/
}



Content/themes/base/jquery.ui.dialog.css


/*!
 * jQuery UI Dialog 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Dialog#theming
 */
.ui-dialog { position: absolute; padding: .2em; width: 300px; overflow: hidden; }
.ui-dialog .ui-dialog-titlebar { padding: .4em 1em; position: relative;  }
.ui-dialog .ui-dialog-title { float: left; margin: .1em 16px .1em 0; } 
.ui-dialog .ui-dialog-titlebar-close { position: absolute; right: .3em; top: 50%; width: 19px; margin: -10px 0 0 0; padding: 1px; height: 18px; }
.ui-dialog .ui-dialog-titlebar-close span { display: block; margin: 1px; }
.ui-dialog .ui-dialog-titlebar-close:hover, .ui-dialog .ui-dialog-titlebar-close:focus { padding: 0; }
.ui-dialog .ui-dialog-content { position: relative; border: 0; padding: .5em 1em; background: none; overflow: auto; zoom: 1; }
.ui-dialog .ui-dialog-buttonpane { text-align: left; border-width: 1px 0 0 0; background-image: none; margin: .5em 0 0 0; padding: .3em 1em .5em .4em; }
.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset { float: right; }
.ui-dialog .ui-dialog-buttonpane button { margin: .5em .4em .5em 0; cursor: pointer; }
.ui-dialog .ui-resizable-se { width: 14px; height: 14px; right: 3px; bottom: 3px; }
.ui-draggable .ui-dialog-titlebar { cursor: move; }




Content/themes/base/jquery.ui.progressbar.css


/*!
 * jQuery UI Progressbar 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Progressbar#theming
 */
.ui-progressbar { height:2em; text-align: left; overflow: hidden; }
.ui-progressbar .ui-progressbar-value {margin: -1px; height:100%; }



Content/themes/base/jquery.ui.resizable.css


/*!
 * jQuery UI Resizable 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Resizable#theming
 */
.ui-resizable { position: relative;}
.ui-resizable-handle { position: absolute;font-size: 0.1px; display: block; }
.ui-resizable-disabled .ui-resizable-handle, .ui-resizable-autohide .ui-resizable-handle { display: none; }
.ui-resizable-n { cursor: n-resize; height: 7px; width: 100%; top: -5px; left: 0; }
.ui-resizable-s { cursor: s-resize; height: 7px; width: 100%; bottom: -5px; left: 0; }
.ui-resizable-e { cursor: e-resize; width: 7px; right: -5px; top: 0; height: 100%; }
.ui-resizable-w { cursor: w-resize; width: 7px; left: -5px; top: 0; height: 100%; }
.ui-resizable-se { cursor: se-resize; width: 12px; height: 12px; right: 1px; bottom: 1px; }
.ui-resizable-sw { cursor: sw-resize; width: 9px; height: 9px; left: -5px; bottom: -5px; }
.ui-resizable-nw { cursor: nw-resize; width: 9px; height: 9px; left: -5px; top: -5px; }
.ui-resizable-ne { cursor: ne-resize; width: 9px; height: 9px; right: -5px; top: -5px;}



Content/themes/base/jquery.ui.selectable.css


/*!
 * jQuery UI Selectable 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Selectable#theming
 */
.ui-selectable-helper { position: absolute; z-index: 100; border:1px dotted black; }




Content/themes/base/jquery.ui.slider.css


/*!
 * jQuery UI Slider 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Slider#theming
 */
.ui-slider { position: relative; text-align: left; }
.ui-slider .ui-slider-handle { position: absolute; z-index: 2; width: 1.2em; height: 1.2em; cursor: default; }
.ui-slider .ui-slider-range { position: absolute; z-index: 1; font-size: .7em; display: block; border: 0; background-position: 0 0; }

.ui-slider-horizontal { height: .8em; }
.ui-slider-horizontal .ui-slider-handle { top: -.3em; margin-left: -.6em; }
.ui-slider-horizontal .ui-slider-range { top: 0; height: 100%; }
.ui-slider-horizontal .ui-slider-range-min { left: 0; }
.ui-slider-horizontal .ui-slider-range-max { right: 0; }

.ui-slider-vertical { width: .8em; height: 100px; }
.ui-slider-vertical .ui-slider-handle { left: -.3em; margin-left: 0; margin-bottom: -.6em; }
.ui-slider-vertical .ui-slider-range { left: 0; width: 100%; }
.ui-slider-vertical .ui-slider-range-min { bottom: 0; }
.ui-slider-vertical .ui-slider-range-max { top: 0; }



Content/themes/base/jquery.ui.tabs.css


/*!
 * jQuery UI Tabs 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Tabs#theming
 */
.ui-tabs { position: relative; padding: .2em; zoom: 1; } /* position: relative prevents IE scroll bug (element with position: relative inside container with overflow: auto appear as "fixed") */
.ui-tabs .ui-tabs-nav { margin: 0; padding: .2em .2em 0; }
.ui-tabs .ui-tabs-nav li { list-style: none; float: left; position: relative; top: 1px; margin: 0 .2em 1px 0; border-bottom: 0 !important; padding: 0; white-space: nowrap; }
.ui-tabs .ui-tabs-nav li a { float: left; padding: .5em 1em; text-decoration: none; }
.ui-tabs .ui-tabs-nav li.ui-tabs-selected { margin-bottom: 0; padding-bottom: 1px; }
.ui-tabs .ui-tabs-nav li.ui-tabs-selected a, .ui-tabs .ui-tabs-nav li.ui-state-disabled a, .ui-tabs .ui-tabs-nav li.ui-state-processing a { cursor: text; }
.ui-tabs .ui-tabs-nav li a, .ui-tabs.ui-tabs-collapsible .ui-tabs-nav li.ui-tabs-selected a { cursor: pointer; } /* first selector in group seems obsolete, but required to overcome bug in Opera applying cursor: text overall if defined elsewhere... */
.ui-tabs .ui-tabs-panel { display: block; border-width: 0; padding: 1em 1.4em; background: none; }
.ui-tabs .ui-tabs-hide { display: none !important; }




Content/themes/base/jquery.ui.theme.css


/*!
 * jQuery UI CSS Framework 1.8.24
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Theming/API
 *
 * To view and modify this theme, visit http://jqueryui.com/themeroller/
 */


/* Component containers
----------------------------------*/
.ui-widget { font-family: Verdana,Arial,sans-serif/*{ffDefault}*/; font-size: 1.1em/*{fsDefault}*/; }
.ui-widget .ui-widget { font-size: 1em; }
.ui-widget input, .ui-widget select, .ui-widget textarea, .ui-widget button { font-family: Verdana,Arial,sans-serif/*{ffDefault}*/; font-size: 1em; }
.ui-widget-content { border: 1px solid #aaaaaa/*{borderColorContent}*/; background: #ffffff/*{bgColorContent}*/ url(images/ui-bg_flat_75_ffffff_40x100.png)/*{bgImgUrlContent}*/ 50%/*{bgContentXPos}*/ 50%/*{bgContentYPos}*/ repeat-x/*{bgContentRepeat}*/; color: #222222/*{fcContent}*/; }
.ui-widget-content a { color: #222222/*{fcContent}*/; }
.ui-widget-header { border: 1px solid #aaaaaa/*{borderColorHeader}*/; background: #cccccc/*{bgColorHeader}*/ url(images/ui-bg_highlight-soft_75_cccccc_1x100.png)/*{bgImgUrlHeader}*/ 50%/*{bgHeaderXPos}*/ 50%/*{bgHeaderYPos}*/ repeat-x/*{bgHeaderRepeat}*/; color: #222222/*{fcHeader}*/; font-weight: bold; }
.ui-widget-header a { color: #222222/*{fcHeader}*/; }

/* Interaction states
----------------------------------*/
.ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default { border: 1px solid #d3d3d3/*{borderColorDefault}*/; background: #e6e6e6/*{bgColorDefault}*/ url(images/ui-bg_glass_75_e6e6e6_1x400.png)/*{bgImgUrlDefault}*/ 50%/*{bgDefaultXPos}*/ 50%/*{bgDefaultYPos}*/ repeat-x/*{bgDefaultRepeat}*/; font-weight: normal/*{fwDefault}*/; color: #555555/*{fcDefault}*/; }
.ui-state-default a, .ui-state-default a:link, .ui-state-default a:visited { color: #555555/*{fcDefault}*/; text-decoration: none; }
.ui-state-hover, .ui-widget-content .ui-state-hover, .ui-widget-header .ui-state-hover, .ui-state-focus, .ui-widget-content .ui-state-focus, .ui-widget-header .ui-state-focus { border: 1px solid #999999/*{borderColorHover}*/; background: #dadada/*{bgColorHover}*/ url(images/ui-bg_glass_75_dadada_1x400.png)/*{bgImgUrlHover}*/ 50%/*{bgHoverXPos}*/ 50%/*{bgHoverYPos}*/ repeat-x/*{bgHoverRepeat}*/; font-weight: normal/*{fwDefault}*/; color: #212121/*{fcHover}*/; }
.ui-state-hover a, .ui-state-hover a:hover { color: #212121/*{fcHover}*/; text-decoration: none; }
.ui-state-active, .ui-widget-content .ui-state-active, .ui-widget-header .ui-state-active { border: 1px solid #aaaaaa/*{borderColorActive}*/; background: #ffffff/*{bgColorActive}*/ url(images/ui-bg_glass_65_ffffff_1x400.png)/*{bgImgUrlActive}*/ 50%/*{bgActiveXPos}*/ 50%/*{bgActiveYPos}*/ repeat-x/*{bgActiveRepeat}*/; font-weight: normal/*{fwDefault}*/; color: #212121/*{fcActive}*/; }
.ui-state-active a, .ui-state-active a:link, .ui-state-active a:visited { color: #212121/*{fcActive}*/; text-decoration: none; }
.ui-widget :active { outline: none; }

/* Interaction Cues
----------------------------------*/
.ui-state-highlight, .ui-widget-content .ui-state-highlight, .ui-widget-header .ui-state-highlight  {border: 1px solid #fcefa1/*{borderColorHighlight}*/; background: #fbf9ee/*{bgColorHighlight}*/ url(images/ui-bg_glass_55_fbf9ee_1x400.png)/*{bgImgUrlHighlight}*/ 50%/*{bgHighlightXPos}*/ 50%/*{bgHighlightYPos}*/ repeat-x/*{bgHighlightRepeat}*/; color: #363636/*{fcHighlight}*/; }
.ui-state-highlight a, .ui-widget-content .ui-state-highlight a,.ui-widget-header .ui-state-highlight a { color: #363636/*{fcHighlight}*/; }
.ui-state-error, .ui-widget-content .ui-state-error, .ui-widget-header .ui-state-error {border: 1px solid #cd0a0a/*{borderColorError}*/; background: #fef1ec/*{bgColorError}*/ url(images/ui-bg_glass_95_fef1ec_1x400.png)/*{bgImgUrlError}*/ 50%/*{bgErrorXPos}*/ 50%/*{bgErrorYPos}*/ repeat-x/*{bgErrorRepeat}*/; color: #cd0a0a/*{fcError}*/; }
.ui-state-error a, .ui-widget-content .ui-state-error a, .ui-widget-header .ui-state-error a { color: #cd0a0a/*{fcError}*/; }
.ui-state-error-text, .ui-widget-content .ui-state-error-text, .ui-widget-header .ui-state-error-text { color: #cd0a0a/*{fcError}*/; }
.ui-priority-primary, .ui-widget-content .ui-priority-primary, .ui-widget-header .ui-priority-primary { font-weight: bold; }
.ui-priority-secondary, .ui-widget-content .ui-priority-secondary,  .ui-widget-header .ui-priority-secondary { opacity: .7; filter:Alpha(Opacity=70); font-weight: normal; }
.ui-state-disabled, .ui-widget-content .ui-state-disabled, .ui-widget-header .ui-state-disabled { opacity: .35; filter:Alpha(Opacity=35); background-image: none; }

/* Icons
----------------------------------*/

/* states and images */
.ui-icon { width: 16px; height: 16px; background-image: url(images/ui-icons_222222_256x240.png)/*{iconsContent}*/; }
.ui-widget-content .ui-icon {background-image: url(images/ui-icons_222222_256x240.png)/*{iconsContent}*/; }
.ui-widget-header .ui-icon {background-image: url(images/ui-icons_222222_256x240.png)/*{iconsHeader}*/; }
.ui-state-default .ui-icon { background-image: url(images/ui-icons_888888_256x240.png)/*{iconsDefault}*/; }
.ui-state-hover .ui-icon, .ui-state-focus .ui-icon {background-image: url(images/ui-icons_454545_256x240.png)/*{iconsHover}*/; }
.ui-state-active .ui-icon {background-image: url(images/ui-icons_454545_256x240.png)/*{iconsActive}*/; }
.ui-state-highlight .ui-icon {background-image: url(images/ui-icons_2e83ff_256x240.png)/*{iconsHighlight}*/; }
.ui-state-error .ui-icon, .ui-state-error-text .ui-icon {background-image: url(images/ui-icons_cd0a0a_256x240.png)/*{iconsError}*/; }

/* positioning */
.ui-icon-carat-1-n { background-position: 0 0; }
.ui-icon-carat-1-ne { background-position: -16px 0; }
.ui-icon-carat-1-e { background-position: -32px 0; }
.ui-icon-carat-1-se { background-position: -48px 0; }
.ui-icon-carat-1-s { background-position: -64px 0; }
.ui-icon-carat-1-sw { background-position: -80px 0; }
.ui-icon-carat-1-w { background-position: -96px 0; }
.ui-icon-carat-1-nw { background-position: -112px 0; }
.ui-icon-carat-2-n-s { background-position: -128px 0; }
.ui-icon-carat-2-e-w { background-position: -144px 0; }
.ui-icon-triangle-1-n { background-position: 0 -16px; }
.ui-icon-triangle-1-ne { background-position: -16px -16px; }
.ui-icon-triangle-1-e { background-position: -32px -16px; }
.ui-icon-triangle-1-se { background-position: -48px -16px; }
.ui-icon-triangle-1-s { background-position: -64px -16px; }
.ui-icon-triangle-1-sw { background-position: -80px -16px; }
.ui-icon-triangle-1-w { background-position: -96px -16px; }
.ui-icon-triangle-1-nw { background-position: -112px -16px; }
.ui-icon-triangle-2-n-s { background-position: -128px -16px; }
.ui-icon-triangle-2-e-w { background-position: -144px -16px; }
.ui-icon-arrow-1-n { background-position: 0 -32px; }
.ui-icon-arrow-1-ne { background-position: -16px -32px; }
.ui-icon-arrow-1-e { background-position: -32px -32px; }
.ui-icon-arrow-1-se { background-position: -48px -32px; }
.ui-icon-arrow-1-s { background-position: -64px -32px; }
.ui-icon-arrow-1-sw { background-position: -80px -32px; }
.ui-icon-arrow-1-w { background-position: -96px -32px; }
.ui-icon-arrow-1-nw { background-position: -112px -32px; }
.ui-icon-arrow-2-n-s { background-position: -128px -32px; }
.ui-icon-arrow-2-ne-sw { background-position: -144px -32px; }
.ui-icon-arrow-2-e-w { background-position: -160px -32px; }
.ui-icon-arrow-2-se-nw { background-position: -176px -32px; }
.ui-icon-arrowstop-1-n { background-position: -192px -32px; }
.ui-icon-arrowstop-1-e { background-position: -208px -32px; }
.ui-icon-arrowstop-1-s { background-position: -224px -32px; }
.ui-icon-arrowstop-1-w { background-position: -240px -32px; }
.ui-icon-arrowthick-1-n { background-position: 0 -48px; }
.ui-icon-arrowthick-1-ne { background-position: -16px -48px; }
.ui-icon-arrowthick-1-e { background-position: -32px -48px; }
.ui-icon-arrowthick-1-se { background-position: -48px -48px; }
.ui-icon-arrowthick-1-s { background-position: -64px -48px; }
.ui-icon-arrowthick-1-sw { background-position: -80px -48px; }
.ui-icon-arrowthick-1-w { background-position: -96px -48px; }
.ui-icon-arrowthick-1-nw { background-position: -112px -48px; }
.ui-icon-arrowthick-2-n-s { background-position: -128px -48px; }
.ui-icon-arrowthick-2-ne-sw { background-position: -144px -48px; }
.ui-icon-arrowthick-2-e-w { background-position: -160px -48px; }
.ui-icon-arrowthick-2-se-nw { background-position: -176px -48px; }
.ui-icon-arrowthickstop-1-n { background-position: -192px -48px; }
.ui-icon-arrowthickstop-1-e { background-position: -208px -48px; }
.ui-icon-arrowthickstop-1-s { background-position: -224px -48px; }
.ui-icon-arrowthickstop-1-w { background-position: -240px -48px; }
.ui-icon-arrowreturnthick-1-w { background-position: 0 -64px; }
.ui-icon-arrowreturnthick-1-n { background-position: -16px -64px; }
.ui-icon-arrowreturnthick-1-e { background-position: -32px -64px; }
.ui-icon-arrowreturnthick-1-s { background-position: -48px -64px; }
.ui-icon-arrowreturn-1-w { background-position: -64px -64px; }
.ui-icon-arrowreturn-1-n { background-position: -80px -64px; }
.ui-icon-arrowreturn-1-e { background-position: -96px -64px; }
.ui-icon-arrowreturn-1-s { background-position: -112px -64px; }
.ui-icon-arrowrefresh-1-w { background-position: -128px -64px; }
.ui-icon-arrowrefresh-1-n { background-position: -144px -64px; }
.ui-icon-arrowrefresh-1-e { background-position: -160px -64px; }
.ui-icon-arrowrefresh-1-s { background-position: -176px -64px; }
.ui-icon-arrow-4 { background-position: 0 -80px; }
.ui-icon-arrow-4-diag { background-position: -16px -80px; }
.ui-icon-extlink { background-position: -32px -80px; }
.ui-icon-newwin { background-position: -48px -80px; }
.ui-icon-refresh { background-position: -64px -80px; }
.ui-icon-shuffle { background-position: -80px -80px; }
.ui-icon-transfer-e-w { background-position: -96px -80px; }
.ui-icon-transferthick-e-w { background-position: -112px -80px; }
.ui-icon-folder-collapsed { background-position: 0 -96px; }
.ui-icon-folder-open { background-position: -16px -96px; }
.ui-icon-document { background-position: -32px -96px; }
.ui-icon-document-b { background-position: -48px -96px; }
.ui-icon-note { background-position: -64px -96px; }
.ui-icon-mail-closed { background-position: -80px -96px; }
.ui-icon-mail-open { background-position: -96px -96px; }
.ui-icon-suitcase { background-position: -112px -96px; }
.ui-icon-comment { background-position: -128px -96px; }
.ui-icon-person { background-position: -144px -96px; }
.ui-icon-print { background-position: -160px -96px; }
.ui-icon-trash { background-position: -176px -96px; }
.ui-icon-locked { background-position: -192px -96px; }
.ui-icon-unlocked { background-position: -208px -96px; }
.ui-icon-bookmark { background-position: -224px -96px; }
.ui-icon-tag { background-position: -240px -96px; }
.ui-icon-home { background-position: 0 -112px; }
.ui-icon-flag { background-position: -16px -112px; }
.ui-icon-calendar { background-position: -32px -112px; }
.ui-icon-cart { background-position: -48px -112px; }
.ui-icon-pencil { background-position: -64px -112px; }
.ui-icon-clock { background-position: -80px -112px; }
.ui-icon-disk { background-position: -96px -112px; }
.ui-icon-calculator { background-position: -112px -112px; }
.ui-icon-zoomin { background-position: -128px -112px; }
.ui-icon-zoomout { background-position: -144px -112px; }
.ui-icon-search { background-position: -160px -112px; }
.ui-icon-wrench { background-position: -176px -112px; }
.ui-icon-gear { background-position: -192px -112px; }
.ui-icon-heart { background-position: -208px -112px; }
.ui-icon-star { background-position: -224px -112px; }
.ui-icon-link { background-position: -240px -112px; }
.ui-icon-cancel { background-position: 0 -128px; }
.ui-icon-plus { background-position: -16px -128px; }
.ui-icon-plusthick { background-position: -32px -128px; }
.ui-icon-minus { background-position: -48px -128px; }
.ui-icon-minusthick { background-position: -64px -128px; }
.ui-icon-close { background-position: -80px -128px; }
.ui-icon-closethick { background-position: -96px -128px; }
.ui-icon-key { background-position: -112px -128px; }
.ui-icon-lightbulb { background-position: -128px -128px; }
.ui-icon-scissors { background-position: -144px -128px; }
.ui-icon-clipboard { background-position: -160px -128px; }
.ui-icon-copy { background-position: -176px -128px; }
.ui-icon-contact { background-position: -192px -128px; }
.ui-icon-image { background-position: -208px -128px; }
.ui-icon-video { background-position: -224px -128px; }
.ui-icon-script { background-position: -240px -128px; }
.ui-icon-alert { background-position: 0 -144px; }
.ui-icon-info { background-position: -16px -144px; }
.ui-icon-notice { background-position: -32px -144px; }
.ui-icon-help { background-position: -48px -144px; }
.ui-icon-check { background-position: -64px -144px; }
.ui-icon-bullet { background-position: -80px -144px; }
.ui-icon-radio-off { background-position: -96px -144px; }
.ui-icon-radio-on { background-position: -112px -144px; }
.ui-icon-pin-w { background-position: -128px -144px; }
.ui-icon-pin-s { background-position: -144px -144px; }
.ui-icon-play { background-position: 0 -160px; }
.ui-icon-pause { background-position: -16px -160px; }
.ui-icon-seek-next { background-position: -32px -160px; }
.ui-icon-seek-prev { background-position: -48px -160px; }
.ui-icon-seek-end { background-position: -64px -160px; }
.ui-icon-seek-start { background-position: -80px -160px; }
/* ui-icon-seek-first is deprecated, use ui-icon-seek-start instead */
.ui-icon-seek-first { background-position: -80px -160px; }
.ui-icon-stop { background-position: -96px -160px; }
.ui-icon-eject { background-position: -112px -160px; }
.ui-icon-volume-off { background-position: -128px -160px; }
.ui-icon-volume-on { background-position: -144px -160px; }
.ui-icon-power { background-position: 0 -176px; }
.ui-icon-signal-diag { background-position: -16px -176px; }
.ui-icon-signal { background-position: -32px -176px; }
.ui-icon-battery-0 { background-position: -48px -176px; }
.ui-icon-battery-1 { background-position: -64px -176px; }
.ui-icon-battery-2 { background-position: -80px -176px; }
.ui-icon-battery-3 { background-position: -96px -176px; }
.ui-icon-circle-plus { background-position: 0 -192px; }
.ui-icon-circle-minus { background-position: -16px -192px; }
.ui-icon-circle-close { background-position: -32px -192px; }
.ui-icon-circle-triangle-e { background-position: -48px -192px; }
.ui-icon-circle-triangle-s { background-position: -64px -192px; }
.ui-icon-circle-triangle-w { background-position: -80px -192px; }
.ui-icon-circle-triangle-n { background-position: -96px -192px; }
.ui-icon-circle-arrow-e { background-position: -112px -192px; }
.ui-icon-circle-arrow-s { background-position: -128px -192px; }
.ui-icon-circle-arrow-w { background-position: -144px -192px; }
.ui-icon-circle-arrow-n { background-position: -160px -192px; }
.ui-icon-circle-zoomin { background-position: -176px -192px; }
.ui-icon-circle-zoomout { background-position: -192px -192px; }
.ui-icon-circle-check { background-position: -208px -192px; }
.ui-icon-circlesmall-plus { background-position: 0 -208px; }
.ui-icon-circlesmall-minus { background-position: -16px -208px; }
.ui-icon-circlesmall-close { background-position: -32px -208px; }
.ui-icon-squaresmall-plus { background-position: -48px -208px; }
.ui-icon-squaresmall-minus { background-position: -64px -208px; }
.ui-icon-squaresmall-close { background-position: -80px -208px; }
.ui-icon-grip-dotted-vertical { background-position: 0 -224px; }
.ui-icon-grip-dotted-horizontal { background-position: -16px -224px; }
.ui-icon-grip-solid-vertical { background-position: -32px -224px; }
.ui-icon-grip-solid-horizontal { background-position: -48px -224px; }
.ui-icon-gripsmall-diagonal-se { background-position: -64px -224px; }
.ui-icon-grip-diagonal-se { background-position: -80px -224px; }


/* Misc visuals
----------------------------------*/

/* Corner radius */
.ui-corner-all, .ui-corner-top, .ui-corner-left, .ui-corner-tl { -moz-border-radius-topleft: 4px/*{cornerRadius}*/; -webkit-border-top-left-radius: 4px/*{cornerRadius}*/; -khtml-border-top-left-radius: 4px/*{cornerRadius}*/; border-top-left-radius: 4px/*{cornerRadius}*/; }
.ui-corner-all, .ui-corner-top, .ui-corner-right, .ui-corner-tr { -moz-border-radius-topright: 4px/*{cornerRadius}*/; -webkit-border-top-right-radius: 4px/*{cornerRadius}*/; -khtml-border-top-right-radius: 4px/*{cornerRadius}*/; border-top-right-radius: 4px/*{cornerRadius}*/; }
.ui-corner-all, .ui-corner-bottom, .ui-corner-left, .ui-corner-bl { -moz-border-radius-bottomleft: 4px/*{cornerRadius}*/; -webkit-border-bottom-left-radius: 4px/*{cornerRadius}*/; -khtml-border-bottom-left-radius: 4px/*{cornerRadius}*/; border-bottom-left-radius: 4px/*{cornerRadius}*/; }
.ui-corner-all, .ui-corner-bottom, .ui-corner-right, .ui-corner-br { -moz-border-radius-bottomright: 4px/*{cornerRadius}*/; -webkit-border-bottom-right-radius: 4px/*{cornerRadius}*/; -khtml-border-bottom-right-radius: 4px/*{cornerRadius}*/; border-bottom-right-radius: 4px/*{cornerRadius}*/; }

/* Overlays */
.ui-widget-overlay { background: #aaaaaa/*{bgColorOverlay}*/ url(images/ui-bg_flat_0_aaaaaa_40x100.png)/*{bgImgUrlOverlay}*/ 50%/*{bgOverlayXPos}*/ 50%/*{bgOverlayYPos}*/ repeat-x/*{bgOverlayRepeat}*/; opacity: .3;filter:Alpha(Opacity=30)/*{opacityOverlay}*/; }
.ui-widget-shadow { margin: -8px/*{offsetTopShadow}*/ 0 0 -8px/*{offsetLeftShadow}*/; padding: 8px/*{thicknessShadow}*/; background: #aaaaaa/*{bgColorShadow}*/ url(images/ui-bg_flat_0_aaaaaa_40x100.png)/*{bgImgUrlShadow}*/ 50%/*{bgShadowXPos}*/ 50%/*{bgShadowYPos}*/ repeat-x/*{bgShadowRepeat}*/; opacity: .3;filter:Alpha(Opacity=30)/*{opacityShadow}*/; -moz-border-radius: 8px/*{cornerRadiusShadow}*/; -khtml-border-radius: 8px/*{cornerRadiusShadow}*/; -webkit-border-radius: 8px/*{cornerRadiusShadow}*/; border-radius: 8px/*{cornerRadiusShadow}*/; }



Content/Site.css


body {
    font-size: .85em;
    font-family: "Segoe UI", Verdana, Helvetica, Sans-Serif;
    color: #232323;
    background-color: #fff;
}

header, footer, nav, section {
    display: block;
}


/* Styles for basic forms
-----------------------------------------------------------*/
fieldset {
    border: 1px solid #ddd;
    padding: 0 1.4em 1.4em 1.4em;
    margin: 0 0 1.5em 0;
}

legend {
    font-size: 1.2em;
    font-weight: bold;
}

textarea {
    min-height: 75px;
}

.editor-label {
    margin: 1em 0 0 0;
}

.editor-field {
    margin: 0.5em 0 0 0;
}


/* Styles for validation helpers
-----------------------------------------------------------*/
.field-validation-error {
    color: #f00;
}

.field-validation-valid {
    display: none;
}

.input-validation-error {
    border: 1px solid #f00;
    background-color: #fee;
}

.validation-summary-errors {
    font-weight: bold;
    color: #f00;
}

.validation-summary-valid {
    display: none;
}




Scripts/jquery-1.8.2.js


/*!
 * jQuery JavaScript Library v1.8.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Thu Sep 20 2012 21:13:05 GMT-0400 (Eastern Daylight Time)
 */
(function( window, undefined ) {
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,
	navigator = window.navigator,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// Save a reference to some core methods
	core_push = Array.prototype.push,
	core_slice = Array.prototype.slice,
	core_indexOf = Array.prototype.indexOf,
	core_toString = Object.prototype.toString,
	core_hasOwn = Object.prototype.hasOwnProperty,
	core_trim = String.prototype.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

	// Used for detecting and trimming whitespace
	core_rnotwhite = /\S/,
	core_rspace = /\s+/,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over &lt;tag&gt; to avoid XSS via location.hash (#9521)
	rquickExpr = /^(?:[^#&lt;]*(&lt;[\w\W]+&gt;)[^&gt;]*$|#([\w\-]*)$)/,

	// Match a standalone tag
	rsingleTag = /^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// The ready event handler and self cleanup method
	DOMContentLoaded = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
			jQuery.ready();
		} else if ( document.readyState === "complete" ) {
			// we're here because readyState === "complete" in oldIE
			// which is good enough for us to call the dom ready!
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	},

	// [[Class]] -&gt; type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "&lt;" &amp;&amp; selector.charAt( selector.length - 1 ) === "&gt;" &amp;&amp; selector.length &gt;= 3 ) {
				// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match &amp;&amp; (match[1] || !context) ) {

				// HANDLE: $(html) -&gt; $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context &amp;&amp; context.nodeType ? context.ownerDocument || context : document );

					// scripts is true for back-compat
					selector = jQuery.parseHTML( match[1], doc, true );
					if ( rsingleTag.test( match[1] ) &amp;&amp; jQuery.isPlainObject( context ) ) {
						this.attr.call( selector, context, true );
					}

					return jQuery.merge( this, selector );

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem &amp;&amp; elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.8.2",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num &lt; 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ),
			"slice", core_slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" &amp;&amp; !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i &lt; length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src &amp;&amp; jQuery.isArray(src) ? src : [];

					} else {
						clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep &amp;&amp; window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready, 1 );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true &amp;&amp; --jQuery.readyWait &gt; 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null &amp;&amp; obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) &amp;&amp; isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ core_toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &amp;&amp;
				!core_hasOwn.call(obj, "constructor") &amp;&amp;
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// scripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, scripts ) {
		var parsed;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			scripts = context;
			context = 0;
		}
		context = context || document;

		// Single tag
		if ( (parsed = rsingleTag.exec( data )) ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
		return jQuery.merge( [],
			(parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
	},

	parseJSON: function( data ) {
		if ( !data || typeof data !== "string") {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON &amp;&amp; window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data &amp;&amp; core_rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName &amp;&amp; elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var name,
			i = 0,
			length = obj.length,
			isObj = length === undefined || jQuery.isFunction( obj );

		if ( args ) {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.apply( obj[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i &lt; length; ) {
					if ( callback.apply( obj[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i &lt; length; ) {
					if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim &amp;&amp; !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var type,
			ret = results || [];

		if ( arr != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			type = jQuery.type( arr );

			if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
				core_push.call( ret, arr );
			} else {
				jQuery.merge( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i &lt; 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i &lt; len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr &amp;&amp; arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j &lt; l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i &lt; length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key,
			ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined &amp;&amp; typeof length === "number" &amp;&amp; ( ( length &gt; 0 &amp;&amp; elems[ 0 ] &amp;&amp; elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i &lt; length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key &amp;&amp; typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined &amp;&amp; jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i &lt; length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready, 1 );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null &amp;&amp; document.documentElement;
			} catch(e) {}

			if ( top &amp;&amp; top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.split( core_rspace ), function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once &amp;&amp; [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory &amp;&amp; data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list &amp;&amp; firingIndex &lt; firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false &amp;&amp; options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" &amp;&amp; ( !options.unique || !self.has( arg ) ) ) {
								list.push( arg );
							} else if ( arg &amp;&amp; arg.length &amp;&amp; type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) &gt; -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index &lt;= firingLength ) {
									firingLength--;
								}
								if ( index &lt;= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				return jQuery.inArray( fn, list ) &gt; -1;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list &amp;&amp; ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
								function() {
									var returned = fn.apply( this, arguments );
									if ( returned &amp;&amp; jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								} :
								newDefer[ action ]
							);
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ] = list.fire
			deferred[ tuple[0] ] = list.fire;
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate &amp;&amp; jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length &gt; 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length &gt; 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i &lt; length; i++ ) {
				if ( resolveValues[ i ] &amp;&amp; jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		eventName,
		i,
		isSupported,
		clickFn,
		div = document.createElement("div");

	// Preliminary tests
	div.setAttribute( "className", "t" );
	div.innerHTML = "  &lt;link/&gt;&lt;table&gt;&lt;/table&gt;&lt;a href='/a'&gt;a&lt;/a&gt;&lt;input type='checkbox'/&gt;";

	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Can't get basic test support
	if ( !all || !all.length ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "&lt;:nav&gt;&lt;/:nav&gt;",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: ( document.compatMode === "CSS1Compat" ),

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener &amp;&amp; div.attachEvent &amp;&amp; div.fireEvent ) {
		div.attachEvent( "onclick", clickFn = function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent("onclick");
		div.detachEvent( "onclick", clickFn );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	input.setAttribute( "checked", "checked" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: true,
			change: true,
			focusin: true
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, div, tds, marginDiv,
			divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE &lt;= 8 fail this test)
		support.reliableHiddenOffsets = isSupported &amp;&amp; ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// NOTE: To any future maintainer, we've window.getComputedStyle
		// because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. For more
			// info see bug #3333
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = document.createElement("div");
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE &lt; 8 does this)
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "&lt;div&gt;&lt;/div&gt;";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			container.style.zoom = 1;
		}

		// Null elements to avoid leaks in IE
		body.removeChild( container );
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	fragment.removeChild( div );
	all = a = select = opt = input = fragment = div = null;

	return support;
})();
var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	deletedIds: [],

	// Remove at next major release (1.9/2.0)
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem &amp;&amp; !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] &amp;&amp; internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!pvt &amp;&amp; !cache[id].data)) &amp;&amp; getByName &amp;&amp; data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split(" ");
						}
					}
				}

				for ( i = 0, l = name.length; i &lt; l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
			delete cache[ id ];

		// When all else fails, null
		} else {
			cache[ id ] = null;
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		var noData = elem.nodeName &amp;&amp; jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true &amp;&amp; elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 &amp;&amp; !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i &lt; l; i++ ) {
						name = attr[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined &amp;&amp; elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined &amp;&amp; parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length &gt; 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined &amp;&amp; elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				// Only convert to a number if it doesn't change the string
				+data + "" === data ? +data :
				rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" &amp;&amp; jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength &amp;&amp; hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery.removeData( elem, type + "queue", true );
				jQuery.removeData( elem, key, true );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length &lt; setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" &amp;&amp; queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp &amp;&amp; tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook, fixSpecified,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea|)$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length &gt; 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length &gt; 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value &amp;&amp; typeof value === "string" ) {
			classNames = value.split( core_rspace );

			for ( i = 0, l = this.length; i &lt; l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className &amp;&amp; classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c &lt; cl; c++ ) {
							if ( setClass.indexOf( " " + classNames[ c ] + " " ) &lt; 0 ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var removes, className, elem, c, cl, i, l;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}
		if ( (value &amp;&amp; typeof value === "string") || value === undefined ) {
			removes = ( value || "" ).split( core_rspace );

			for ( i = 0, l = this.length; i &lt; l; i++ ) {
				elem = this[ i ];
				if ( elem.nodeType === 1 &amp;&amp; elem.className ) {

					className = (" " + elem.className + " ").replace( rclass, " " );

					// loop over each item in the removal list
					for ( c = 0, cl = removes.length; c &lt; cl; c++ ) {
						// Remove until there is nothing to remove,
						while ( className.indexOf(" " + removes[ c ] + " ") &gt;= 0 ) {
							className = className.replace( " " + removes[ c ] + " " , " " );
						}
					}
					elem.className = value ? jQuery.trim( className ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( core_rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i &lt; l; i++ ) {
			if ( this[i].nodeType === 1 &amp;&amp; (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) &gt;= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &amp;&amp; "get" in hooks &amp;&amp; (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index &lt; 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i &lt; max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected &amp;&amp; (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &amp;&amp;
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one &amp;&amp; !values.length &amp;&amp; options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) &gt;= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	// Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
	attrFn: {},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass &amp;&amp; jQuery.isFunction( jQuery.fn[ name ] ) ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks &amp;&amp; "set" in hooks &amp;&amp; notxml &amp;&amp; (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks &amp;&amp; "get" in hooks &amp;&amp; notxml &amp;&amp; (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, isBool,
			i = 0;

		if ( value &amp;&amp; elem.nodeType === 1 ) {

			attrNames = value.split( core_rspace );

			for ( ; i &lt; attrNames.length; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool &amp;&amp; propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) &amp;&amp; elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue &amp;&amp; value === "radio" &amp;&amp; jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook &amp;&amp; jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook &amp;&amp; jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks &amp;&amp; "set" in hooks &amp;&amp; (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks &amp;&amp; "get" in hooks &amp;&amp; (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode &amp;&amp; attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) &amp;&amp; elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" &amp;&amp; ( attrNode = elem.getAttributeNode(name) ) &amp;&amp; attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret &amp;&amp; ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.value = value + "" );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) &gt;= 0 );
			}
		}
	});
});
var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &amp;&amp; (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t &lt; types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector &amp;&amp; jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var t, tns, type, origType, namespaces, origCount,
			j, events, special, eventType, handleObj,
			elemData = jQuery.hasData( elem ) &amp;&amp; jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t &lt; types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j &lt; eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &amp;&amp;
					 ( !handler || handler.guid === handleObj.guid ) &amp;&amp;
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &amp;&amp;
					 ( !selector || selector === handleObj.selector || selector === "**" &amp;&amp; handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 &amp;&amp; origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, "events", true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem &amp;&amp; (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
			type = event.type || event,
			namespaces = [];

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) &gt;= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) &gt;= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) &amp;&amp; !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) &lt; 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events &amp;&amp; cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger &amp;&amp; special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers &amp;&amp; !special.noBubble &amp;&amp; !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			for ( old = elem; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old === (elem.ownerDocument || document) ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i &lt; eventPath.length &amp;&amp; !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &amp;&amp; jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype &amp;&amp; cur[ ontype ];
			if ( handle &amp;&amp; jQuery.acceptData( cur ) &amp;&amp; handle.apply &amp;&amp; handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers &amp;&amp; !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &amp;&amp;
				!(type === "click" &amp;&amp; jQuery.nodeName( elem, "a" )) &amp;&amp; jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE&lt;9 dies on focus/blur to hidden element (#1486)
				if ( ontype &amp;&amp; elem[ type ] &amp;&amp; ((type !== "focus" &amp;&amp; type !== "blur") || event.target.offsetWidth !== 0) &amp;&amp; !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
			handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = core_slice.call( arguments ),
			run_all = !event.exclusive &amp;&amp; !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [];

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch &amp;&amp; special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount &amp;&amp; !(event.button &amp;&amp; event.type === "click") ) {

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					selMatch = {};
					matches = [];
					for ( i = 0; i &lt; delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) &gt;= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length &gt; delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i &lt; handlerQueue.length &amp;&amp; !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j &lt; matched.matches.length &amp;&amp; !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace &amp;&amp; !handleObj.namespace) || event.namespace_re &amp;&amp; event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null &amp;&amp; original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc &amp;&amp; doc.scrollLeft || body &amp;&amp; body.scrollLeft || 0 ) - ( doc &amp;&amp; doc.clientLeft || body &amp;&amp; body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc &amp;&amp; doc.scrollTop  || body &amp;&amp; body.scrollTop  || 0 ) - ( doc &amp;&amp; doc.clientTop  || body &amp;&amp; body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget &amp;&amp; fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which &amp;&amp; button !== undefined ) {
				event.which = ( button &amp; 1 ? 1 : ( button &amp; 2 ? 3 : ( button &amp; 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 &amp; Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
		event.metaKey = !!event.metaKey;

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8 
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src &amp;&amp; src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault &amp;&amp; src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src &amp;&amp; src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target &amp;&amp; !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form &amp;&amp; !jQuery._data( form, "_submit_attached" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "_submit_attached", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode &amp;&amp; !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed &amp;&amp; !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) &amp;&amp; !jQuery._data( elem, "_change_attached" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode &amp;&amp; !event.isSimulated &amp;&amp; !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "_change_attached", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" &amp;&amp; elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // &amp;&amp; selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null &amp;&amp; fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types &amp;&amp; types.preventDefault &amp;&amp; types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i &lt; args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length &gt; 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var cachedruns,
	assertGetIdNotName,
	Expr,
	getText,
	isXML,
	contains,
	compile,
	sortOrder,
	hasDuplicate,
	outermostContext,

	baseHasDuplicate = true,
	strundefined = "undefined",

	expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

	Token = String,
	document = window.document,
	docElem = document.documentElement,
	dirruns = 0,
	done = 0,
	pop = [].pop,
	push = [].push,
	slice = [].slice,
	// Use a stripped-down indexOf if a native one is unavailable
	indexOf = [].indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i &lt; len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	// Augment a function for special use by Sizzle
	markFunction = function( fn, value ) {
		fn[ expando ] = value == null || value;
		return fn;
	},

	createCache = function() {
		var cache = {},
			keys = [];

		return markFunction(function( key, value ) {
			// Only keep the most recent entries
			if ( keys.push( key ) &gt; Expr.cacheLength ) {
				delete cache[ keys.shift() ];
			}

			return (cache[ key ] = value);
		}, cache );
	},

	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// Regex

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments not in parens/brackets,
	//   then attribute selectors and non-pseudos (denoted by :),
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

	// For matchExpr.POS and matchExpr.needsContext
	pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
		"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f&gt;+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

	rnot = /^:not/,
	rsibling = /[\x20\t\r\n\f]*[+~]/,
	rendsWithNot = /:not\($/,

	rheader = /h\d/i,
	rinputs = /input|select|textarea|button/i,

	rbackslash = /\\(?!\\)/g,

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"POS": new RegExp( pos, "i" ),
		"CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		"needsContext": new RegExp( "^" + whitespace + "*[&gt;+~]|" + pos, "i" )
	},

	// Support

	// Used for testing something on an element
	assert = function( fn ) {
		var div = document.createElement("div");

		try {
			return fn( div );
		} catch (e) {
			return false;
		} finally {
			// release memory in IE
			div = null;
		}
	},

	// Check if getElementsByTagName("*") returns only elements
	assertTagNameNoComments = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	}),

	// Check if getAttribute returns normalized href attributes
	assertHrefNotNormalized = assert(function( div ) {
		div.innerHTML = "&lt;a href='#'&gt;&lt;/a&gt;";
		return div.firstChild &amp;&amp; typeof div.firstChild.getAttribute !== strundefined &amp;&amp;
			div.firstChild.getAttribute("href") === "#";
	}),

	// Check if attributes should be retrieved by attribute nodes
	assertAttributes = assert(function( div ) {
		div.innerHTML = "&lt;select&gt;&lt;/select&gt;";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" &amp;&amp; type !== "string";
	}),

	// Check if getElementsByClassName can be trusted
	assertUsableClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "&lt;div class='hidden e'&gt;&lt;/div&gt;&lt;div class='hidden'&gt;&lt;/div&gt;";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	}),

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	assertUsableName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "&lt;a name='" + expando + "'&gt;&lt;/a&gt;&lt;div name='" + expando + "'&gt;&lt;/div&gt;";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = document.getElementsByName &amp;&amp;
			// buggy browsers will return fewer than the correct 2
			document.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			document.getElementsByName( expando + 0 ).length;
		assertGetIdNotName = !document.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

// If slice is not available, provide a backup
try {
	slice.call( docElem.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		for ( ; (elem = this[i]); i++ ) {
			results.push( elem );
		}
		return results;
	};
}

function Sizzle( selector, context, results, seed ) {
	results = results || [];
	context = context || document;
	var match, elem, xml, m,
		nodeType = context.nodeType;

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( nodeType !== 1 &amp;&amp; nodeType !== 9 ) {
		return [];
	}

	xml = isXML( context );

	if ( !xml &amp;&amp; !seed ) {
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem &amp;&amp; elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument &amp;&amp; (elem = context.ownerDocument.getElementById( m )) &amp;&amp;
						contains( context, elem ) &amp;&amp; elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) &amp;&amp; assertUsableClassName &amp;&amp; context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
}

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	return Sizzle( expr, null, null, [ elem ] ).length &gt; 0;
};

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" &amp;&amp; elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") &amp;&amp; elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (see #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	} else {

		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	}
	return ret;
};

isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem &amp;&amp; (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Element contains another
contains = Sizzle.contains = docElem.contains ?
	function( a, b ) {
		var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b &amp;&amp; b.parentNode;
		return a === bup || !!( bup &amp;&amp; bup.nodeType === 1 &amp;&amp; adown.contains &amp;&amp; adown.contains(bup) );
	} :
	docElem.compareDocumentPosition ?
	function( a, b ) {
		return b &amp;&amp; !!( a.compareDocumentPosition( b ) &amp; 16 );
	} :
	function( a, b ) {
		while ( (b = b.parentNode) ) {
			if ( b === a ) {
				return true;
			}
		}
		return false;
	};

Sizzle.attr = function( elem, name ) {
	var val,
		xml = isXML( elem );

	if ( !xml ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( xml || assertAttributes ) {
		return elem.getAttribute( name );
	}
	val = elem.getAttributeNode( name );
	return val ?
		typeof elem[ name ] === "boolean" ?
			elem[ name ] ? name : null :
			val.specified ? val.value : null :
		null;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	// IE6/7 return a modified href
	attrHandle: assertHrefNotNormalized ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		},

	find: {
		"ID": assertGetIdNotName ?
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined &amp;&amp; !xml ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m &amp;&amp; m.parentNode ? [m] : [];
				}
			} :
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined &amp;&amp; !xml ) {
					var m = context.getElementById( id );

					return m ?
						m.id === id || typeof m.getAttributeNode !== strundefined &amp;&amp; m.getAttributeNode("id").value === id ?
							[m] :
							undefined :
						[];
				}
			},

		"TAG": assertTagNameNoComments ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== strundefined ) {
					return context.getElementsByTagName( tag );
				}
			} :
			function( tag, context ) {
				var results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					var elem,
						tmp = [],
						i = 0;

					for ( ; (elem = results[i]); i++ ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			},

		"NAME": assertUsableName &amp;&amp; function( tag, context ) {
			if ( typeof context.getElementsByName !== strundefined ) {
				return context.getElementsByName( name );
			}
		},

		"CLASS": assertUsableClassName &amp;&amp; function( className, context, xml ) {
			if ( typeof context.getElementsByClassName !== strundefined &amp;&amp; !xml ) {
				return context.getElementsByClassName( className );
			}
		}
	},

	relative: {
		"&gt;": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( rbackslash, "" );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				3 xn-component of xn+y argument ([+-]?\d*n|)
				4 sign of xn-component
				5 x of xn-component
				6 sign of y-component
				7 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1] === "nth" ) {
				// nth-child requires argument
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
				match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

			// other types prohibit arguments
			} else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var unquoted, excess;
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			if ( match[3] ) {
				match[2] = match[3];
			} else if ( (unquoted = match[4]) ) {
				// Only check arguments that contain a pseudo
				if ( rpseudo.test(unquoted) &amp;&amp;
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &amp;&amp;
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					unquoted = unquoted.slice( 0, excess );
					match[0] = match[0].slice( 0, excess );
				}
				match[2] = unquoted;
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {
		"ID": assertGetIdNotName ?
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					return elem.getAttribute("id") === id;
				};
			} :
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== strundefined &amp;&amp; elem.getAttributeNode("id");
					return node &amp;&amp; node.value === id;
				};
			},

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}
			nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

			return function( elem ) {
				return elem.nodeName &amp;&amp; elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ expando ][ className ];
			if ( !pattern ) {
				pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
			}
			return function( elem ) {
				return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined &amp;&amp; elem.getAttribute("class")) || "" );
			};
		},

		"ATTR": function( name, operator, check ) {
			return function( elem, context ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check &amp;&amp; result.indexOf( check ) === 0 :
					operator === "*=" ? check &amp;&amp; result.indexOf( check ) &gt; -1 :
					operator === "$=" ? check &amp;&amp; result.substr( result.length - check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) &gt; -1 :
					operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, argument, first, last ) {

			if ( type === "nth" ) {
				return function( elem ) {
					var node, diff,
						parent = elem.parentNode;

					if ( first === 1 &amp;&amp; last === 0 ) {
						return true;
					}

					if ( parent ) {
						diff = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								diff++;
								if ( elem === node ) {
									break;
								}
							}
						}
					}

					// Incorporate the offset (or cast to NaN), then check against cycle size
					diff -= last;
					return diff === first || ( diff % first === 0 &amp;&amp; diff / first &gt;= 0 );
				};
			}

			return function( elem ) {
				var node = elem;

				switch ( type ) {
					case "only":
					case "first":
						while ( (node = node.previousSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						if ( type === "first" ) {
							return true;
						}

						node = elem;

						/* falls through */
					case "last":
						while ( (node = node.nextSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						return true;
				}
			};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length &gt; 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length &gt; 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) &gt; -1;
			};
		}),

		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" &amp;&amp; !!elem.checked) || (nodeName === "option" &amp;&amp; !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			var nodeType;
			elem = elem.firstChild;
			while ( elem ) {
				if ( elem.nodeName &gt; "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
					return false;
				}
				elem = elem.nextSibling;
			}
			return true;
		},

		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"text": function( elem ) {
			var type, attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &amp;&amp;
				(type = elem.type) === "text" &amp;&amp;
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
		},

		// Input types
		"radio": createInputPseudo("radio"),
		"checkbox": createInputPseudo("checkbox"),
		"file": createInputPseudo("file"),
		"password": createInputPseudo("password"),
		"image": createInputPseudo("image"),

		"submit": createButtonPseudo("submit"),
		"reset": createButtonPseudo("reset"),

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" &amp;&amp; elem.type === "button" || name === "button";
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"focus": function( elem ) {
			var doc = elem.ownerDocument;
			return elem === doc.activeElement &amp;&amp; (!doc.hasFocus || doc.hasFocus()) &amp;&amp; !!(elem.type || elem.href);
		},

		"active": function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		},

		// Positional types
		"first": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument &lt; 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = 0; i &lt; length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = 1; i &lt; length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument &lt; 0 ? argument + length : argument; --i &gt;= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument &lt; 0 ? argument + length : argument; ++i &lt; length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

function siblingCheck( a, b, ret ) {
	if ( a === b ) {
		return ret;
	}

	var cur = a.nextSibling;

	while ( cur ) {
		if ( cur === b ) {
			return -1;
		}

		cur = cur.nextSibling;
	}

	return 1;
}

sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
			a.compareDocumentPosition :
			a.compareDocumentPosition(b) &amp; 4
		) ? -1 : 1;
	} :
	function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex &amp;&amp; b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i &lt; al &amp;&amp; i &lt; bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
[0, 0].sort( sortOrder );
baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		i = 1;

	hasDuplicate = baseHasDuplicate;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				results.splice( i--, 1 );
			}
		}
	}

	return results;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type, soFar, groups, preFilters,
		cached = tokenCache[ expando ][ selector ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				soFar = soFar.slice( match[0].length );
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			tokens.push( matched = new Token( match.shift() ) );
			soFar = soFar.slice( matched.length );

			// Cast descendant combinators to space
			matched.type = match[0].replace( rtrim, " " );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) &amp;&amp; (!preFilters[ type ] ||
				// The last two arguments here are (context, xml) for backCompat
				(match = preFilters[ type ]( match, document, true ))) ) {

				tokens.push( matched = new Token( match.shift() ) );
				soFar = soFar.slice( matched.length );
				matched.type = type;
				matched.matches = match;
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base &amp;&amp; combinator.dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( checkNonElements || elem.nodeType === 1  ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( !xml ) {
				var cache,
					dirkey = dirruns + " " + doneName + " ",
					cachedkey = dirkey + cachedruns;
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( (cache = elem[ expando ]) === cachedkey ) {
							return elem.sizset;
						} else if ( typeof cache === "string" &amp;&amp; cache.indexOf(dirkey) === 0 ) {
							if ( elem.sizset ) {
								return elem;
							}
						} else {
							elem[ expando ] = cachedkey;
							if ( matcher( elem, context, xml ) ) {
								elem.sizset = true;
								return elem;
							}
							elem.sizset = false;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( matcher( elem, context, xml ) ) {
							return elem;
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length &gt; 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i &lt; len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter &amp;&amp; !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder &amp;&amp; !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		// Positional selectors apply to seed elements, so it is invalid to follow them with relative ones
		if ( seed &amp;&amp; postFinder ) {
			return;
		}

		var i, elem, postFilterIn,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [], seed ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter &amp;&amp; ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			postFilterIn = condense( matcherOut, postMap );
			postFilter( postFilterIn, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = postFilterIn.length;
			while ( i-- ) {
				if ( (elem = postFilterIn[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		// Keep seed and results synchronized
		if ( seed ) {
			// Ignore postFinder because it can't coexist with seed
			i = preFilter &amp;&amp; matcherOut.length;
			while ( i-- ) {
				if ( (elem = matcherOut[i]) ) {
					seed[ preMap[i] ] = !(results[ preMap[i] ] = elem);
				}
			}
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) &gt; -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative &amp;&amp; ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i &lt; len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			// The concatenated values are (context, xml) for backCompat
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j &lt; len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i &gt; 1 &amp;&amp; elementMatcher( matchers ),
					i &gt; 1 &amp;&amp; tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
					matcher,
					i &lt; j &amp;&amp; matcherFromTokens( tokens.slice( i, j ) ),
					j &lt; len &amp;&amp; matcherFromTokens( (tokens = tokens.slice( j )) ),
					j &lt; len &amp;&amp; tokens.join("")
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length &gt; 0,
		byElement = elementMatchers.length &gt; 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed &amp;&amp; [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement &amp;&amp; Expr.find["TAG"]( "*", expandContext &amp;&amp; context.parentNode || context ),
				// Nested matchers should use non-integer dirruns
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

			if ( outermost ) {
				outermostContext = context !== document &amp;&amp; context;
				cachedruns = superMatcher.el;
			}

			// Add elements passing elementMatchers directly to results
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement &amp;&amp; elem ) {
					for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++superMatcher.el;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher &amp;&amp; elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet &amp;&amp; i !== matchedCount ) {
				for ( j = 0; (matcher = setMatchers[j]); j++ ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount &gt; 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost &amp;&amp; !seed &amp;&amp; setMatched.length &gt; 0 &amp;&amp;
					( matchedCount + setMatchers.length ) &gt; 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	superMatcher.el = 0;
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ expando ][ selector ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results, seed ) {
	var i = 0,
		len = contexts.length;
	for ( ; i &lt; len; i++ ) {
		Sizzle( selector, contexts[i], results, seed );
	}
	return results;
}

function select( selector, context, results, seed, xml ) {
	var i, tokens, token, type, find,
		match = tokenize( selector ),
		j = match.length;

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length &gt; 2 &amp;&amp; (token = tokens[0]).type === "ID" &amp;&amp;
					context.nodeType === 9 &amp;&amp; !xml &amp;&amp;
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().length );
			}

			// Fetch a seed set for right-to-left matching
			for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i &gt;= 0; i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( rbackslash, "" ),
						rsibling.test( tokens[0].type ) &amp;&amp; context.parentNode || context,
						xml
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length &amp;&amp; tokens.join("");
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		xml,
		results,
		rsibling.test( selector )
	);
	return results;
}

if ( document.querySelectorAll ) {
	(function() {
		var disconnectedMatch,
			oldSelect = select,
			rescape = /'|\\/g,
			rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

			// qSa(:focus) reports false when true (Chrome 21),
			// A support test would require too much code (would include document ready)
			rbuggyQSA = [":focus"],

			// matchesSelector(:focus) reports false when true (Chrome 21),
			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			// A support test would require too much code (would include document ready)
			// just skip matchesSelector for :active
			rbuggyMatches = [ ":active", ":focus" ],
			matches = docElem.matchesSelector ||
				docElem.mozMatchesSelector ||
				docElem.webkitMatchesSelector ||
				docElem.oMatchesSelector ||
				docElem.msMatchesSelector;

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "&lt;select&gt;&lt;option selected=''&gt;&lt;/option&gt;&lt;/select&gt;";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here (do not put tests after this one)
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE9 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "&lt;p test=''&gt;&lt;/p&gt;";
			if ( div.querySelectorAll("[test^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here (do not put tests after this one)
			div.innerHTML = "&lt;input type='hidden'/&gt;";
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push(":enabled", ":disabled");
			}
		});

		// rbuggyQSA always contains :focus, so no need for a length check
		rbuggyQSA = /* rbuggyQSA.length &amp;&amp; */ new RegExp( rbuggyQSA.join("|") );

		select = function( selector, context, results, seed, xml ) {
			// Only use querySelectorAll when not filtering,
			// when this is not xml,
			// and when no QSA bugs apply
			if ( !seed &amp;&amp; !xml &amp;&amp; (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				var groups, i,
					old = true,
					nid = expando,
					newContext = context,
					newSelector = context.nodeType === 9 &amp;&amp; selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( context.nodeType === 1 &amp;&amp; context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&amp;" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + groups[i].join("");
					}
					newContext = rsibling.test( selector ) &amp;&amp; context.parentNode || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results, slice.call( newContext.querySelectorAll(
							newSelector
						), 0 ) );
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}

			return oldSelect( selector, context, results, seed, xml );
		};

		if ( matches ) {
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				try {
					matches.call( div, "[test!='']:sizzle" );
					rbuggyMatches.push( "!=", pseudos );
				} catch ( e ) {}
			});

			// rbuggyMatches always contains :active and :focus, so no need for a length check
			rbuggyMatches = /* rbuggyMatches.length &amp;&amp; */ new RegExp( rbuggyMatches.join("|") );

			Sizzle.matchesSelector = function( elem, expr ) {
				// Make sure that attribute selectors are quoted
				expr = expr.replace( rattributeQuotes, "='$1']" );

				// rbuggyMatches always contains :active, so no need for an existence check
				if ( !isXML( elem ) &amp;&amp; !rbuggyMatches.test( expr ) &amp;&amp; (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
					try {
						var ret = matches.call( elem, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9
								elem.document &amp;&amp; elem.document.nodeType !== 11 ) {
							return ret;
						}
					} catch(e) {}
				}

				return Sizzle( expr, null, null, [ elem ] ).length &gt; 0;
			};
		}
	})();
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, l, length, n, r, ret,
			self = this;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i &lt; l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		ret = this.pushStack( "", "find", selector );

		for ( i = 0, l = this.length; i &lt; l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i &gt; 0 ) {
				// Make sure that the results are unique
				for ( n = length; n &lt; ret.length; n++ ) {
					for ( r = 0; r &lt; length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i &lt; len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector &amp;&amp; (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) &gt;= 0 :
					jQuery.filter( selector, this ).length &gt; 0 :
				this.filter( selector ).length &gt; 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i &lt; l; i++ ) {
			cur = this[i];

			while ( cur &amp;&amp; cur.ownerDocument &amp;&amp; cur !== context &amp;&amp; cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) &gt; -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		ret = ret.length &gt; 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] &amp;&amp; this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector &amp;&amp; selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur &amp;&amp; cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent &amp;&amp; parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector &amp;&amp; typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length &gt; 1 &amp;&amp; !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length &gt; 1 &amp;&amp; rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur &amp;&amp; cur.nodeType !== 9 &amp;&amp; (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 &amp;&amp; n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) &gt;= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/gi,
	rtagName = /&lt;([\w:]+)/,
	rtbody = /&lt;tbody/i,
	rhtml = /&lt;|&amp;#?\w+;/,
	rnoInnerhtml = /&lt;(?:script|style|link)/i,
	rnocache = /&lt;(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("&lt;(?:" + nodeNames + ")[\\s/&gt;]", "i"),
	rcheckableType = /^(?:checkbox|radio)$/,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*&lt;!(?:\[CDATA\[|\-\-)|[\]\-]{2}&gt;\s*$/g,
	wrapMap = {
		option: [ 1, "&lt;select multiple='multiple'&gt;", "&lt;/select&gt;" ],
		legend: [ 1, "&lt;fieldset&gt;", "&lt;/fieldset&gt;" ],
		thead: [ 1, "&lt;table&gt;", "&lt;/table&gt;" ],
		tr: [ 2, "&lt;table&gt;&lt;tbody&gt;", "&lt;/tbody&gt;&lt;/table&gt;" ],
		td: [ 3, "&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;", "&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" ],
		col: [ 2, "&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;", "&lt;/colgroup&gt;&lt;/table&gt;" ],
		area: [ 1, "&lt;map&gt;", "&lt;/map&gt;" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "X&lt;div&gt;", "&lt;/div&gt;" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] &amp;&amp; this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild &amp;&amp; elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
		}
	},

	after: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData &amp;&amp; elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" &amp;&amp; !rnoInnerhtml.test( value ) &amp;&amp;
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &amp;&amp;
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &amp;&amp;
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "&lt;$1&gt;&lt;/$2&gt;" );

				try {
					for (; i &lt; l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( !isDisconnected( this[0] ) ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		}

		return this.length ?
			this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
			this;
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = [].concat.apply( [], args );

		var results, first, fragment, iNoClone,
			i = 0,
			value = args[0],
			scripts = [],
			l = this.length;

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone &amp;&amp; l &gt; 1 &amp;&amp; typeof value === "string" &amp;&amp; rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call( this, i, table ? self.html() : undefined );
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			results = jQuery.buildFragment( args, this, scripts );
			fragment = results.fragment;
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table &amp;&amp; jQuery.nodeName( first, "tr" );

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				// Fragments from the fragment cache must always be cloned and never used in place.
				for ( iNoClone = results.cacheable || l - 1; i &lt; l; i++ ) {
					callback.call(
						table &amp;&amp; jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						i === iNoClone ?
							fragment :
							jQuery.clone( fragment, true, true )
					);
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						if ( jQuery.ajax ) {
							jQuery.ajax({
								url: elem.src,
								type: "GET",
								dataType: "script",
								async: false,
								global: false,
								"throws": true
							});
						} else {
							jQuery.error("no ajax");
						}
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i &lt; l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	if ( nodeName === "object" ) {
		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone &amp;&amp; (src.innerHTML &amp;&amp; !jQuery.trim(dest.innerHTML)) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" &amp;&amp; rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" &amp;&amp; dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, context, scripts ) {
	var fragment, cacheable, cachehit,
		first = args[ 0 ];

	// Set context from what may come in as undefined or a jQuery collection or a node
	// Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &amp;
	// also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
	context = context || document;
	context = !context.nodeType &amp;&amp; context[0] || context;
	context = context.ownerDocument || context;

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put &lt;object&gt; or &lt;embed&gt; elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 &amp;&amp; typeof first === "string" &amp;&amp; first.length &lt; 512 &amp;&amp; context === document &amp;&amp;
		first.charAt(0) === "&lt;" &amp;&amp; !rnocache.test( first ) &amp;&amp;
		(jQuery.support.checkClone || !rchecked.test( first )) &amp;&amp;
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		// Mark cacheable and look for a hit
		cacheable = true;
		fragment = jQuery.fragments[ first ];
		cachehit = fragment !== undefined;
	}

	if ( !fragment ) {
		fragment = context.createDocumentFragment();
		jQuery.clean( args, context, fragment, scripts );

		// Update the cache, but only store false
		// unless this is a second parsing of the same content
		if ( cacheable ) {
			jQuery.fragments[ first ] = cachehit &amp;&amp; fragment;
		}
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			l = insert.length,
			parent = this.length === 1 &amp;&amp; this[0].parentNode;

		if ( (parent == null || parent &amp;&amp; parent.nodeType === 11 &amp;&amp; parent.childNodes.length === 1) &amp;&amp; l === 1 ) {
			insert[ original ]( this[0] );
			return this;
		} else {
			for ( ; i &lt; l; i++ ) {
				elems = ( i &gt; 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			clone;

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "&lt;" + elem.nodeName + "&gt;" ) ) {
			clone = elem.cloneNode( true );

		// IE&lt;=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &amp;&amp;
				(elem.nodeType === 1 || elem.nodeType === 11) &amp;&amp; !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
			safe = context === document &amp;&amp; safeFragment,
			ret = [];

		// Ensure that context is a document
		if ( !context || typeof context.createDocumentFragment === "undefined" ) {
			context = document;
		}

		// Use the already-created safe fragment if context permits
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Ensure a safe container in which to render the html
					safe = safe || createSafeFragment( context );
					div = context.createElement("div");
					safe.appendChild( div );

					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "&lt;$1&gt;&lt;/$2&gt;");

					// Go to html and back, then peel off extra wrappers
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					depth = wrap[0];
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted &lt;tbody&gt; from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a &lt;table&gt;, *may* have spurious &lt;tbody&gt;
						hasBody = rtbody.test(elem);
							tbody = tag === "table" &amp;&amp; !hasBody ?
								div.firstChild &amp;&amp; div.firstChild.childNodes :

								// String was a bare &lt;thead&gt; or &lt;tfoot&gt;
								wrap[1] === "&lt;table&gt;" &amp;&amp; !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j &gt;= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) &amp;&amp; !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace &amp;&amp; rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Take out of fragment container (we need a fresh div each time)
					div.parentNode.removeChild( div );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				jQuery.merge( ret, elem );
			}
		}

		// Fix #11356: Clear elements from safeFragment
		if ( div ) {
			elem = div = safe = null;
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
					fixDefaultChecked( elem );
				} else if ( typeof elem.getElementsByTagName !== "undefined" ) {
					jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
				}
			}
		}

		// Append elements to a provided document fragment
		if ( fragment ) {
			// Special handling of each script element
			handleScript = function( elem ) {
				// Check if we consider it executable
				if ( !elem.type || rscriptType.test( elem.type ) ) {
					// Detach the script and store it in the scripts array (if provided) or the fragment
					// Return truthy to indicate that it has been handled
					return scripts ?
						scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
						fragment.appendChild( elem );
				}
			};

			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				// Check if we're done after handling an executable script
				if ( !( jQuery.nodeName( elem, "script" ) &amp;&amp; handleScript( elem ) ) ) {
					// Append to fragment and handle embedded scripts
					fragment.appendChild( elem );
					if ( typeof elem.getElementsByTagName !== "undefined" ) {
						// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
						jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

						// Splice the scripts into ret after their former ancestor and advance our index beyond them
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						i += jsTags.length;
					}
				}
			}
		}

		return ret;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var data, id, elem, type,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id &amp;&amp; cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( elem.removeAttribute ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						jQuery.deletedIds.push( id );
					}
				}
			}
		}
	}
});
// Limit scope pollution from any deprecated API
(function() {

var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
jQuery.uaMatch = function( ua ) {
	ua = ua.toLowerCase();

	var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		/(msie) ([\w.]+)/.exec( ua ) ||
		ua.indexOf("compatible") &lt; 0 &amp;&amp; /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		[];

	return {
		browser: match[ 1 ] || "",
		version: match[ 2 ] || "0"
	};
};

matched = jQuery.uaMatch( navigator.userAgent );
browser = {};

if ( matched.browser ) {
	browser[ matched.browser ] = true;
	browser.version = matched.version;
}

// Chrome is Webkit, but Webkit is also Safari.
if ( browser.chrome ) {
	browser.webkit = true;
} else if ( browser.webkit ) {
	browser.safari = true;
}

jQuery.browser = browser;

jQuery.sub = function() {
	function jQuerySub( selector, context ) {
		return new jQuerySub.fn.init( selector, context );
	}
	jQuery.extend( true, jQuerySub, this );
	jQuerySub.superclass = this;
	jQuerySub.fn = jQuerySub.prototype = this();
	jQuerySub.fn.constructor = jQuerySub;
	jQuerySub.sub = this.sub;
	jQuerySub.fn.init = function init( selector, context ) {
		if ( context &amp;&amp; context instanceof jQuery &amp;&amp; !(context instanceof jQuerySub) ) {
			context = jQuerySub( context );
		}

		return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	};
	jQuerySub.fn.init.prototype = jQuerySub.fn;
	var rootjQuerySub = jQuerySub(document);
	return jQuerySub;
};

})();
var curCSS, iframe, iframeDoc,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
	elemdisplay = {},

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

	eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var elem, display,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index &lt; length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		values[ index ] = jQuery._data( elem, "olddisplay" );
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] &amp;&amp; elem.style.display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" &amp;&amp; isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {
			display = curCSS( elem, "display" );

			if ( !values[ index ] &amp;&amp; display !== "none" ) {
				jQuery._data( elem, "olddisplay", display );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index &lt; length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length &gt; 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state, fn2 ) {
		var bool = typeof state === "boolean";

		if ( jQuery.isFunction( state ) &amp;&amp; jQuery.isFunction( fn2 ) ) {
			return eventsToggle.apply( this, arguments );
		}

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" &amp;&amp; (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" &amp;&amp; isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" &amp;&amp; !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks &amp;&amp; "get" in hooks &amp;&amp; (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, numeric, extra ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks &amp;&amp; "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name );
		}

		//convert "normal" to computed value
		if ( val === "normal" &amp;&amp; name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( numeric || extra !== undefined ) {
			num = parseFloat( val );
			return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	curCSS = function( elem, name ) {
		var ret, width, minWidth, maxWidth,
			computed = window.getComputedStyle( elem, null ),
			style = elem.style;

		if ( computed ) {

			ret = computed[ name ];
			if ( ret === "" &amp;&amp; !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome &lt; 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) &amp;&amp; rmargin.test( name ) ) {
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	curCSS = function( elem, name ) {
		var left, rsLeft,
			ret = elem.currentStyle &amp;&amp; elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null &amp;&amp; style &amp;&amp; style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) &amp;&amp; !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle &amp;&amp; elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i &lt; 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			// we use jQuery.css instead of curCSS here
			// because of the reliableMarginRight CSS hook!
			val += jQuery.css( elem, extra + cssExpand[ i ], true );
		}

		// From this point on we use curCSS for maximum performance (relevant in animations)
		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		valueIsBorderBox = true,
		isBorderBox = jQuery.support.boxSizing &amp;&amp; jQuery.css( elem, "boxSizing" ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val &lt;= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name );
		if ( val &lt; 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &amp;&amp; ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox
		)
	) + "px";
}


// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	if ( elemdisplay[ nodeName ] ) {
		return elemdisplay[ nodeName ];
	}

	var elem = jQuery( "&lt;" + nodeName + "&gt;" ).appendTo( document.body ),
		display = elem.css("display");
	elem.remove();

	// If the simple way fails,
	// get element's real default display by attaching it to a temp iframe
	if ( display === "none" || display === "" ) {
		// Use the already-created iframe if possible
		iframe = document.body.appendChild(
			iframe || jQuery.extend( document.createElement("iframe"), {
				frameBorder: 0,
				width: 0,
				height: 0
			})
		);

		// Create a cacheable copy of the iframe document on first call.
		// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
		// document to it; WebKit &amp; Firefox won't allow reusing the iframe document.
		if ( !iframeDoc || !iframe.createElement ) {
			iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
			iframeDoc.write("&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;");
			iframeDoc.close();
		}

		elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

		display = curCSS( elem, "display" );
		document.body.removeChild( iframe );
	}

	// Store the correct default display
	elemdisplay[ nodeName ] = display;

	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				if ( elem.offsetWidth === 0 &amp;&amp; rdisplayswap.test( curCSS( elem, "display" ) ) ) {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				} else {
					return getWidthOrHeight( elem, name, extra );
				}
			}
		},

		set: function( elem, value, extra ) {
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing &amp;&amp; jQuery.css( elem, "boxSizing" ) === "border-box"
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed &amp;&amp; elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle &amp;&amp; currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value &gt;= 1 &amp;&amp; jQuery.trim( filter.replace( ralpha, "" ) ) === "" &amp;&amp;
				style.removeAttribute ) {

				// Setting style.filter to null, "" &amp; " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle &amp;&amp; !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "marginRight" );
					}
				});
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition &amp;&amp; jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						var ret = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
					}
				}
			};
		});
	}

});

if ( jQuery.expr &amp;&amp; jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		return ( elem.offsetWidth === 0 &amp;&amp; elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets &amp;&amp; ((elem.style &amp;&amp; elem.style.display) || curCSS( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i &lt; 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rselectTextarea = /^(?:select|textarea)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name &amp;&amp; !this.disabled &amp;&amp;
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery &lt;= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings &amp;&amp; jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery &amp;&amp; !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&amp;" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional &amp;&amp; jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi,
	rts = /([?&amp;])_=[^&amp;]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType, list, placeBefore,
			dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
			i = 0,
			length = dataTypes.length;

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			for ( ; i &lt; length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var selection,
		list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters );

	for ( ; i &lt; length &amp;&amp; ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) &amp;&amp; !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" &amp;&amp; _load ) {
		return _load.apply( this, arguments );
	}

	// Don't do a request if no elements are being requested
	if ( !this.length ) {
		return this;
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off &gt;= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params &amp;&amp; typeof params === "object" ) {
		type = "POST";
	}

	// Request the remote document
	jQuery.ajax({
		url: url,

		// if "type" variable is undefined, then "GET" method will be used
		type: type,
		dataType: "html",
		data: params,
		complete: function( jqXHR, status ) {
			if ( callback ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			}
		}
	}).done(function( responseText ) {

		// Save response for use in complete callback
		response = arguments;

		// See if a selector was specified
		self.html( selector ?

			// Create a dummy div to hold the results
			jQuery("&lt;div&gt;")

				// inject the contents of the document in, removing the scripts
				// to avoid any 'Permission Denied' errors in IE
				.append( responseText.replace( rscript, "" ) )

				// Locate the specified elements
				.find( selector ) :

			// If not, just inject the full result
			responseText );

	});

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // ifModified key
			ifModifiedKey,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &amp;&amp;
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || strAbort;
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status &gt; 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status &gt;= 200 &amp;&amp; status &lt; 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ ifModifiedKey ] = modified;
					}
					modified = jqXHR.getResponseHeader("Etag");
					if ( modified ) {
						jQuery.etag[ ifModifiedKey ] = modified;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status &lt; 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state &lt; 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.always( tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() ) || false;
			s.crossDomain = parts &amp;&amp; ( parts.join(":") + ( parts[ 3 ] ? "" : parts[ 1 ] === "http:" ? 80 : 443 ) ) !==
				( ajaxLocParts.join(":") + ( ajaxLocParts[ 3 ] ? "" : ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) );
		}

		// Convert data if not already a string
		if ( s.data &amp;&amp; s.processData &amp;&amp; typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals &amp;&amp; jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&amp;" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&amp;" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data &amp;&amp; s.hasContent &amp;&amp; s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] &amp;&amp; s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &amp;&amp; ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();

		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async &amp;&amp; s.timeout &gt; 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state &lt; 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] &amp;&amp; contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	var conv, conv2, current, tmp,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ],
		converters = {},
		i = 0;

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" &amp;&amp; prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv &amp;&amp; s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
var oldCallbacks = [],
	rquestion = /\?/,
	rjsonp = /(=)\?(?=&amp;|$)|\?\?/,
	nonce = jQuery.now();

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		data = s.data,
		url = s.url,
		hasCallback = s.jsonp !== false,
		replaceInUrl = hasCallback &amp;&amp; rjsonp.test( url ),
		replaceInData = hasCallback &amp;&amp; !replaceInUrl &amp;&amp; typeof data === "string" &amp;&amp;
			!( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &amp;&amp;
			rjsonp.test( data );

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;
		overwritten = window[ callbackName ];

		// Insert callback into url or form data
		if ( replaceInUrl ) {
			s.url = url.replace( rjsonp, "$1" + callbackName );
		} else if ( replaceInData ) {
			s.data = data.replace( rjsonp, "$1" + callbackName );
		} else if ( hasCallback ) {
			s.url += ( rquestion.test( url ) ? "&amp;" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer &amp;&amp; jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head &amp;&amp; script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});
var xhrCallbacks,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal &amp;&amp; createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr &amp;&amp; ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType &amp;&amp; xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain &amp;&amp; !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent &amp;&amp; s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback &amp;&amp; ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml &amp;&amp; xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( _ ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status &amp;&amp; s.isLocal &amp;&amp; !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 &amp; IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback, 0 );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" &amp;&amp; start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) &amp;&amp; scale !== 1 &amp;&amp; --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	}, 0 );
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index &lt; length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		index = 0,
		tweenerIndex = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				percent = 1 - ( remaining / animation.duration || 0 ),
				index = 0,
				length = animation.tweens.length;

			for ( ; index &lt; length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent &lt; 1 &amp;&amp; length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end, easing ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;

				for ( ; index &lt; length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index &lt; length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			anim: animation,
			queue: animation.opts.queue,
			elem: elem
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks &amp;&amp; "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index &lt; length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	var index, prop, value, length, dataShow, tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType &amp;&amp; isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 &amp;&amp; ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &amp;&amp;
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.done(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery.removeData( elem, "fxshow", true );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index &lt; length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks &amp;&amp; hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks &amp;&amp; hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &amp;&amp;
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing any value as a 4th parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, false, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style &amp;&amp; ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType &amp;&amp; tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ||
			// special check for .toggle( handler, handler, ... )
			( !i &amp;&amp; jQuery.isFunction( speed ) &amp;&amp; jQuery.isFunction( easing ) ) ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations resolve immediately
				if ( empty ) {
					anim.stop( true );
				}
			};

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue &amp;&amp; type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null &amp;&amp; type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] &amp;&amp; data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] &amp;&amp; data[ index ].stop &amp;&amp; rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &amp;&amp; (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i &lt; 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed &amp;&amp; typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn &amp;&amp; easing ||
			jQuery.isFunction( speed ) &amp;&amp; speed,
		duration: speed,
		easing: fn &amp;&amp; easing || easing &amp;&amp; !jQuery.isFunction( easing ) &amp;&amp; easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -&gt; "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	for ( ; i &lt; timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() &amp;&amp; timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
};

jQuery.fx.timer = function( timer ) {
	if ( timer() &amp;&amp; jQuery.timers.push( timer ) &amp;&amp; !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.interval = 13;

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat &lt;1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr &amp;&amp; jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
var rroot = /^(?:body|html)$/i;

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem &amp;&amp; elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	if ( (body = doc.body) === elem ) {
		return jQuery.offset.bodyOffset( elem );
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== "undefined" ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	clientTop  = docElem.clientTop  || body.clientTop  || 0;
	clientLeft = docElem.clientLeft || body.clientLeft || 0;
	scrollTop  = win.pageYOffset || docElem.scrollTop;
	scrollLeft = win.pageXOffset || docElem.scrollLeft;
	return {
		top: box.top  + scrollTop  - clientTop,
		left: box.left + scrollLeft - clientLeft
	};
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) &amp;&amp; jQuery.inArray("auto", [curCSSTop, curCSSLeft]) &gt; -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent &amp;&amp; (!rroot.test(offsetParent.nodeName) &amp;&amp; jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.body;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length &amp;&amp; ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, value, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" &amp;&amp; define.amd &amp;&amp; define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );




Scripts/jquery-1.8.2.min.js


/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&amp;&amp;a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&amp;&amp;p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&amp;&amp;a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)&gt;=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d&lt;e;d++)p.event.add(b,c,h[c][d])}g.data&amp;&amp;(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&amp;&amp;b.clearAttributes(),b.mergeAttributes&amp;&amp;b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&amp;&amp;(b.outerHTML=a.outerHTML),p.support.html5Clone&amp;&amp;a.innerHTML&amp;&amp;!p.trim(b.innerHTML)&amp;&amp;(b.innerHTML=a.innerHTML)):c==="input"&amp;&amp;bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&amp;&amp;(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&amp;&amp;b.text!==a.text&amp;&amp;(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&amp;&amp;(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f&lt;g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&amp;&amp;c.style.display==="none"&amp;&amp;(c.style.display=""),c.style.display===""&amp;&amp;bZ(c)&amp;&amp;(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&amp;&amp;d!=="none"&amp;&amp;p._data(c,"olddisplay",d))}for(f=0;f&lt;g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e&lt;4;e+=2)c==="margin"&amp;&amp;(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&amp;&amp;(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&amp;&amp;(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&amp;&amp;(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&amp;&amp;p.css(a,"boxSizing")==="border-box";if(d&lt;=0||d==null){d=bH(a,b);if(d&lt;0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&amp;&amp;(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("&lt;"+a+"&gt;").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&amp;&amp;p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&amp;&amp;(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h&lt;i;h++)d=g[h],f=/^\+/.test(d),f&amp;&amp;(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j&lt;k&amp;&amp;(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&amp;&amp;(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&amp;&amp;!g["*"]&amp;&amp;(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&amp;&amp;((f[d]?a:e||(e={}))[d]=c[d]);e&amp;&amp;p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&amp;&amp;(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&amp;&amp;(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&amp;&amp;i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&amp;&amp;j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&amp;&amp;(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&amp;&amp;h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&amp;&amp;(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&amp;&amp;a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e&lt;f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e&lt;f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d&lt;1&amp;&amp;f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c&lt;d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e&lt;g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&amp;&amp;j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&amp;&amp;(e=f[1],f=a[c]=f[0]),c!==d&amp;&amp;(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&amp;&amp;"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&amp;&amp;bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&amp;&amp;(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&amp;&amp;("height"in b||"width"in b)&amp;&amp;(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&amp;&amp;p.css(a,"float")==="none"&amp;&amp;(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&amp;&amp;(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d&lt;g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&amp;&amp;(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e&lt;4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&amp;&amp;(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#&lt;]*(&lt;[\w\W]+&gt;)[^&gt;]*$|#([\w\-]*)$)/,v=/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&amp;&amp;(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="&lt;"&amp;&amp;a.charAt(a.length-1)==="&gt;"&amp;&amp;a.length&gt;=3?f=[null,a,null]:f=u.exec(a);if(f&amp;&amp;(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&amp;&amp;c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&amp;&amp;p.isPlainObject(c)&amp;&amp;this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&amp;&amp;g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&amp;&amp;(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a&lt;0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&amp;&amp;(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&amp;&amp;(k=h,h=arguments[1]||{},i=2),typeof h!="object"&amp;&amp;!p.isFunction(h)&amp;&amp;(h={}),j===i&amp;&amp;(h=this,--i);for(;i&lt;j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&amp;&amp;e&amp;&amp;(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&amp;&amp;p.isArray(d)?d:[]):g=d&amp;&amp;p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&amp;&amp;(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&amp;&amp;(a.$=i),b&amp;&amp;a.jQuery===p&amp;&amp;(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&amp;&amp;--p.readyWait&gt;0)return;d.resolveWith(e,[p]),p.fn.trigger&amp;&amp;p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&amp;&amp;a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&amp;&amp;isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&amp;&amp;!n.call(a,"constructor")&amp;&amp;!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&amp;&amp;(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&amp;&amp;a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&amp;&amp;p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&amp;&amp;r.test(b)&amp;&amp;(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&amp;&amp;a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f&lt;g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f&lt;g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&amp;&amp;!o.call("")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&amp;&amp;(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c&lt;0?Math.max(0,d+c):c:0;for(;c&lt;d;c++)if(c in b&amp;&amp;b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f&lt;d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f&lt;g;f++)d=!!b(a[f],f),c!==d&amp;&amp;e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&amp;&amp;typeof i=="number"&amp;&amp;(i&gt;0&amp;&amp;a[0]&amp;&amp;a[i-1]||i===0||p.isArray(a));if(j)for(;h&lt;i;h++)e=c(a[h],h,d),e!=null&amp;&amp;(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&amp;&amp;(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&amp;&amp;(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&amp;&amp;typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&amp;&amp;p.isFunction(e),j&amp;&amp;(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k&lt;l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&amp;&amp;e.documentElement}catch(f){}c&amp;&amp;c.doScroll&amp;&amp;function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&amp;&amp;[],k=function(b){c=a.memory&amp;&amp;b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&amp;&amp;h&lt;g;h++)if(i[h].apply(b[0],b[1])===!1&amp;&amp;a.stopOnFalse){c=!1;break}e=!1,i&amp;&amp;(j?j.length&amp;&amp;k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&amp;&amp;(!a.unique||!l.has(c))?i.push(c):c&amp;&amp;c.length&amp;&amp;e!=="string"&amp;&amp;d(c)})})(arguments),e?g=i.length:c&amp;&amp;(f=b,k(c))}return this},remove:function(){return i&amp;&amp;p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))&gt;-1)i.splice(c,1),e&amp;&amp;(c&lt;=g&amp;&amp;g--,c&lt;=h&amp;&amp;h--)}),this},has:function(a){return p.inArray(a,i)&gt;-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&amp;&amp;(!d||j)&amp;&amp;(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&amp;&amp;p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&amp;&amp;g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&amp;&amp;a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&amp;&amp;p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length&gt;1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d&gt;1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b&lt;d;b++)c[b]&amp;&amp;p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  &lt;link/&gt;&lt;table&gt;&lt;/table&gt;&lt;a href='/a'&gt;a&lt;/a&gt;&lt;input type='checkbox'/&gt;",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="&lt;:nav&gt;&lt;/:nav&gt;",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&amp;&amp;n.attachEvent&amp;&amp;n.fireEvent&amp;&amp;(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&amp;&amp;f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&amp;&amp;(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&amp;&amp;(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="&lt;div&gt;&lt;/div&gt;",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&amp;&amp;!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&amp;&amp;h;if((!l||!k[l]||!e&amp;&amp;!k[l].data)&amp;&amp;i&amp;&amp;d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&amp;&amp;(f[p.camelCase(c)]=d),i?(g=f[c],g==null&amp;&amp;(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e&lt;f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&amp;&amp;p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&amp;&amp;a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&amp;&amp;!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j&lt;h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&amp;&amp;i&amp;&amp;(k=p.data(i,a),k=J(i,a,k)),k===b&amp;&amp;d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length&gt;1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&amp;&amp;(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&amp;&amp;(e=c.shift(),d--),e&amp;&amp;(b==="fx"&amp;&amp;c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&amp;&amp;f&amp;&amp;f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&amp;&amp;(c=a,a="fx",d--),arguments.length&lt;d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&amp;&amp;b[0]!=="inprogress"&amp;&amp;p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&amp;&amp;(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&amp;&amp;d.empty&amp;&amp;(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length&gt;1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length&gt;1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&amp;&amp;typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c&lt;d;c++){e=this[c];if(e.nodeType===1)if(!e.className&amp;&amp;b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g&lt;h;g++)f.indexOf(" "+b[g]+" ")&lt;0&amp;&amp;(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&amp;&amp;typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h&lt;i;h++){e=this[h];if(e.nodeType===1&amp;&amp;e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f&lt;g;f++)while(d.indexOf(" "+c[f]+" ")&gt;=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&amp;&amp;p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c&lt;d;c++)if(this[c].nodeType===1&amp;&amp;(" "+this[c].className+" ").replace(O," ").indexOf(b)&gt;=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&amp;&amp;"get"in c&amp;&amp;(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&amp;&amp;(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f&lt;0)return null;c=i?f:0,d=i?f+1:h.length;for(;c&lt;d;c++){e=h[c];if(e.selected&amp;&amp;(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&amp;&amp;(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&amp;&amp;!g.length&amp;&amp;h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)&gt;=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&amp;&amp;p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&amp;&amp;(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&amp;&amp;"set"in g&amp;&amp;h&amp;&amp;(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&amp;&amp;"get"in g&amp;&amp;h&amp;&amp;(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&amp;&amp;a.nodeType===1){d=b.split(s);for(;g&lt;d.length;g++)e=d[g],e&amp;&amp;(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&amp;&amp;c in a&amp;&amp;(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&amp;&amp;a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&amp;&amp;b==="radio"&amp;&amp;p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&amp;&amp;(a.value=c),b}}},value:{get:function(a,b){return L&amp;&amp;p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&amp;&amp;p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&amp;&amp;(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&amp;&amp;"set"in f&amp;&amp;(e=f.set(a,d,c))!==b?e:a[c]=d:f&amp;&amp;"get"in f&amp;&amp;(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&amp;&amp;c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&amp;&amp;a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&amp;&amp;(d=a.getAttributeNode(c))&amp;&amp;d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&amp;&amp;(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&amp;&amp;(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&amp;&amp;(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&amp;&amp;(b.selectedIndex,b.parentNode&amp;&amp;b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)&gt;=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&amp;&amp;(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&amp;&amp;(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j&lt;c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&amp;&amp;p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&amp;&amp;a.attachEvent("on"+l,h)}r.add&amp;&amp;(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&amp;&amp;p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f&lt;b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l&lt;o.length;l++)q=o[l],(e||i===q.origType)&amp;&amp;(!c||c.guid===q.guid)&amp;&amp;(!j||j.test(q.namespace))&amp;&amp;(!d||d===q.selector||d==="**"&amp;&amp;q.selector)&amp;&amp;(o.splice(l--,1),q.selector&amp;&amp;o.delegateCount--,n.remove&amp;&amp;n.remove.call(a,q));o.length===0&amp;&amp;k!==o.length&amp;&amp;((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&amp;&amp;p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&amp;&amp;(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&amp;&amp;f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")&gt;=0&amp;&amp;(s=s.slice(0,-1),i=!0),s.indexOf(".")&gt;=0&amp;&amp;(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&amp;&amp;!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")&lt;0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&amp;&amp;h[j].events[s]&amp;&amp;p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&amp;&amp;n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&amp;&amp;!n.noBubble&amp;&amp;!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&amp;&amp;q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j&lt;q.length&amp;&amp;!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&amp;&amp;p._data(k,"handle"),o&amp;&amp;o.apply(k,d),o=m&amp;&amp;k[m],o&amp;&amp;p.acceptData(k)&amp;&amp;o.apply&amp;&amp;o.apply(k,d)===!1&amp;&amp;c.preventDefault();return c.type=s,!g&amp;&amp;!c.isDefaultPrevented()&amp;&amp;(!n._default||n._default.apply(f.ownerDocument,d)===!1)&amp;&amp;(s!=="click"||!p.nodeName(f,"a"))&amp;&amp;p.acceptData(f)&amp;&amp;m&amp;&amp;f[s]&amp;&amp;(s!=="focus"&amp;&amp;s!=="blur"||c.target.offsetWidth!==0)&amp;&amp;!p.isWindow(f)&amp;&amp;(l=f[m],l&amp;&amp;(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&amp;&amp;(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&amp;&amp;!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&amp;&amp;t.preDispatch.call(this,c)===!1)return;if(q&amp;&amp;(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d&lt;q;d++)l=o[d],m=l.selector,h[m]===b&amp;&amp;(h[m]=l.needsContext?p(m,this).index(f)&gt;=0:p.find(m,this,null,[f]).length),h[m]&amp;&amp;j.push(l);j.length&amp;&amp;u.push({elem:f,matches:j})}o.length&gt;q&amp;&amp;u.push({elem:this,matches:o.slice(q)});for(d=0;d&lt;u.length&amp;&amp;!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e&lt;i.matches.length&amp;&amp;!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&amp;&amp;!l.namespace||c.namespace_re&amp;&amp;c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&amp;&amp;(c.result=g,g===!1&amp;&amp;(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&amp;&amp;t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&amp;&amp;(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&amp;&amp;c.clientX!=null&amp;&amp;(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&amp;&amp;f.scrollLeft||g&amp;&amp;g.scrollLeft||0)-(f&amp;&amp;f.clientLeft||g&amp;&amp;g.clientLeft||0),a.pageY=c.clientY+(f&amp;&amp;f.scrollTop||g&amp;&amp;g.scrollTop||0)-(f&amp;&amp;f.clientTop||g&amp;&amp;g.clientTop||0)),!a.relatedTarget&amp;&amp;i&amp;&amp;(a.relatedTarget=i===a.target?c.toElement:i),!a.which&amp;&amp;h!==b&amp;&amp;(a.which=h&amp;1?1:h&amp;2?3:h&amp;4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&amp;&amp;(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&amp;&amp;(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&amp;&amp;(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&amp;&amp;c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&amp;&amp;a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&amp;&amp;(typeof a[d]=="undefined"&amp;&amp;(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&amp;&amp;a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&amp;&amp;a.getPreventDefault()?bb:ba):this.type=a,b&amp;&amp;p.extend(this,b),this.timeStamp=a&amp;&amp;a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&amp;&amp;a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&amp;&amp;!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&amp;&amp;!p._data(d,"_submit_attached")&amp;&amp;(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&amp;&amp;(delete a._submit_bubble,this.parentNode&amp;&amp;!a.isTrigger&amp;&amp;p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&amp;&amp;(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&amp;&amp;!a.isTrigger&amp;&amp;(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&amp;&amp;!p._data(b,"_change_attached")&amp;&amp;(p.event.add(b,"change._change",function(a){this.parentNode&amp;&amp;!a.isSimulated&amp;&amp;!a.isTrigger&amp;&amp;p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&amp;&amp;b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&amp;&amp;e.addEventListener(a,d,!0)},teardown:function(){--c===0&amp;&amp;e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&amp;&amp;(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&amp;&amp;e==null?(e=c,d=c=b):e==null&amp;&amp;(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&amp;&amp;(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&amp;&amp;a.preventDefault&amp;&amp;a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&amp;&amp;(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d&lt;b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&amp;&amp;(c=a,a=null),arguments.length&gt;0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&amp;&amp;(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&amp;&amp;(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&amp;&amp;k!==9)return[];i=g(b);if(!i&amp;&amp;!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&amp;&amp;(f=b.ownerDocument.getElementById(j))&amp;&amp;h(b,f)&amp;&amp;f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&amp;&amp;_&amp;&amp;b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&amp;&amp;b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&amp;&amp;b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&amp;&amp;(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&amp;&amp;(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&amp;&amp;(!j[g]||(d=j[g](d,r,!0)))&amp;&amp;(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&amp;&amp;b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&amp;&amp;i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length&gt;1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h&lt;i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&amp;&amp;b.push(h);return g}function bl(a,b,c,d,e,f){return d&amp;&amp;!d[o]&amp;&amp;(d=bl(d)),e&amp;&amp;!e[o]&amp;&amp;(e=bl(e,f)),z(function(f,g,h,i){if(f&amp;&amp;e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&amp;&amp;(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&amp;&amp;c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&amp;&amp;r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)&gt;-1},h,!0),m=[function(a,c,d){return!g&amp;&amp;(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i&lt;f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d&lt;f;d++)if(e.relative[a[d].type])break;return bl(i&gt;1&amp;&amp;bj(m),i&gt;1&amp;&amp;a.slice(0,i-1).join("").replace(L,"$1"),c,i&lt;d&amp;&amp;bm(a.slice(i,d)),d&lt;f&amp;&amp;bm(a=a.slice(d)),d&lt;f&amp;&amp;a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length&gt;0,f=a.length&gt;0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&amp;&amp;[],y=m!=null,z=l,A=h||f&amp;&amp;e.find.TAG("*",m&amp;&amp;i.parentNode||i),B=t+=z==null?1:Math.E;y&amp;&amp;(l=i!==r&amp;&amp;i,c=g.el);for(;(n=A[u])!=null;u++){if(f&amp;&amp;n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&amp;&amp;(t=B,c=++g.el)}d&amp;&amp;((n=!p&amp;&amp;n)&amp;&amp;s--,h&amp;&amp;x.push(n))}s+=u;if(d&amp;&amp;u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s&gt;0)while(u--)!x[u]&amp;&amp;!q[u]&amp;&amp;(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&amp;&amp;!h&amp;&amp;q.length&gt;0&amp;&amp;s+b.length&gt;1&amp;&amp;bc.uniqueSort(k)}return y&amp;&amp;(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e&lt;f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&amp;&amp;m.length===1){h=m[0]=m[0].slice(0);if(h.length&gt;2&amp;&amp;(j=h[0]).type==="ID"&amp;&amp;b.nodeType===9&amp;&amp;!f&amp;&amp;e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g&gt;=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&amp;&amp;b.parentNode||b,f)){h.splice(g,1),a=d.length&amp;&amp;h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b&lt;c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)&gt;e.cacheLength&amp;&amp;delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f&gt;+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[&gt;+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="&lt;a href='#'&gt;&lt;/a&gt;",a.firstChild&amp;&amp;typeof a.firstChild.getAttribute!==n&amp;&amp;a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="&lt;select&gt;&lt;/select&gt;";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&amp;&amp;b!=="string"}),_=X(function(a){return a.innerHTML="&lt;div class='hidden e'&gt;&lt;/div&gt;&lt;div class='hidden'&gt;&lt;/div&gt;",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="&lt;a name='"+o+"'&gt;&lt;/a&gt;&lt;div name='"+o+"'&gt;&lt;/div&gt;",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&amp;&amp;r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length&gt;0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&amp;&amp;(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&amp;&amp;b.parentNode;return a===d||!!(d&amp;&amp;d.nodeType===1&amp;&amp;c.contains&amp;&amp;c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&amp;&amp;!!(a.compareDocumentPosition(b)&amp;16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&amp;&amp;!c){var d=b.getElementById(a);return d&amp;&amp;d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&amp;&amp;!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&amp;&amp;e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&amp;&amp;e.push(d);return e}return c},NAME:ba&amp;&amp;function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&amp;&amp;function(a,b,c){if(typeof b.getElementsByClassName!==n&amp;&amp;!c)return b.getElementsByClassName(a)}},relative:{"&gt;":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&amp;&amp;(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&amp;&amp;bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&amp;&amp;(c=bh(b,!0))&amp;&amp;(c=b.indexOf(")",b.length-c)-b.length)&amp;&amp;(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&amp;&amp;b.getAttributeNode("id");return c&amp;&amp;c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&amp;&amp;b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&amp;&amp;a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&amp;&amp;f.indexOf(c)===0:b==="*="?c&amp;&amp;f.indexOf(c)&gt;-1:b==="$="?c&amp;&amp;f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)&gt;-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&amp;&amp;d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&amp;&amp;e/c&gt;=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length&gt;1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length&gt;0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)&gt;-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&amp;&amp;!!a.checked||b==="option"&amp;&amp;!!a.selected},selected:function(a){return a.parentNode&amp;&amp;a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName&gt;"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&amp;&amp;(b=a.type)==="text"&amp;&amp;((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&amp;&amp;a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&amp;&amp;(!b.hasFocus||b.hasFocus())&amp;&amp;(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c&lt;0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d&lt;b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d&lt;b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c&lt;0?c+b:c;--d&gt;=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c&lt;0?c+b:c;++d&lt;b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&amp;4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&amp;&amp;b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j&lt;c&amp;&amp;j&lt;d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&amp;&amp;a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&amp;&amp;function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="&lt;select&gt;&lt;option selected=''&gt;&lt;/option&gt;&lt;/select&gt;",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="&lt;p test=''&gt;&lt;/p&gt;",a.querySelectorAll("[test^='']").length&amp;&amp;e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="&lt;input type='hidden'/&gt;",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&amp;&amp;!h&amp;&amp;(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&amp;&amp;a;if(d.nodeType===1&amp;&amp;d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&amp;"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&amp;&amp;d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&amp;&amp;(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&amp;&amp;!f.test(c)&amp;&amp;(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&amp;&amp;b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length&gt;0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b&lt;c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b&lt;c;b++){d=g.length,p.find(a,this[b],g);if(b&gt;0)for(e=d;e&lt;g.length;e++)for(f=0;f&lt;d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b&lt;d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&amp;&amp;(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])&gt;=0:p.filter(a,this).length&gt;0:this.filter(a).length&gt;0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d&lt;e;d++){c=this[d];while(c&amp;&amp;c.ownerDocument&amp;&amp;c!==b&amp;&amp;c.nodeType!==11){if(g?g.index(c)&gt;-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length&gt;1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&amp;&amp;this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&amp;&amp;a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&amp;&amp;b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&amp;&amp;typeof d=="string"&amp;&amp;(e=p.filter(d,e)),e=this.length&gt;1&amp;&amp;!bg[a]?p.unique(e):e,this.length&gt;1&amp;&amp;bd.test(a)&amp;&amp;(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&amp;&amp;(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&amp;&amp;f.nodeType!==9&amp;&amp;(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&amp;&amp;e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&amp;&amp;a!==b&amp;&amp;c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/gi,bp=/&lt;([\w:]+)/,bq=/&lt;tbody/i,br=/&lt;|&amp;#?\w+;/,bs=/&lt;(?:script|style|link)/i,bt=/&lt;(?:script|object|embed|option|style)/i,bu=new RegExp("&lt;(?:"+bl+")[\\s/&gt;]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*&lt;!(?:\[CDATA\[|\-\-)|[\]\-]{2}&gt;\s*$/g,bz={option:[1,"&lt;select multiple='multiple'&gt;","&lt;/select&gt;"],legend:[1,"&lt;fieldset&gt;","&lt;/fieldset&gt;"],thead:[1,"&lt;table&gt;","&lt;/table&gt;"],tr:[2,"&lt;table&gt;&lt;tbody&gt;","&lt;/tbody&gt;&lt;/table&gt;"],td:[3,"&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;","&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;"],col:[2,"&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;","&lt;/colgroup&gt;&lt;/table&gt;"],area:[1,"&lt;map&gt;","&lt;/map&gt;"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X&lt;div&gt;","&lt;/div&gt;"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&amp;&amp;this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&amp;&amp;b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&amp;&amp;a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&amp;&amp;this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&amp;&amp;this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&amp;&amp;c.nodeType===1&amp;&amp;(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&amp;&amp;c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&amp;&amp;p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&amp;&amp;!bs.test(a)&amp;&amp;(p.support.htmlSerialize||!bu.test(a))&amp;&amp;(p.support.leadingWhitespace||!bn.test(a))&amp;&amp;!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"&lt;$1&gt;&lt;/$2&gt;");try{for(;d&lt;e;d++)c=this[d]||{},c.nodeType===1&amp;&amp;(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&amp;&amp;this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&amp;&amp;(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&amp;&amp;l&gt;1&amp;&amp;typeof j=="string"&amp;&amp;bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&amp;&amp;(g=f);if(f){c=c&amp;&amp;p.nodeName(f,"tr");for(h=e.cacheable||l-1;i&lt;l;i++)d.call(c&amp;&amp;p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&amp;&amp;p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&amp;&amp;b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&amp;&amp;c[0]||c,c=c.ownerDocument||c,a.length===1&amp;&amp;typeof i=="string"&amp;&amp;i.length&lt;512&amp;&amp;c===e&amp;&amp;i.charAt(0)==="&lt;"&amp;&amp;!bt.test(i)&amp;&amp;(p.support.checkClone||!bw.test(i))&amp;&amp;(p.support.html5Clone||!bu.test(i))&amp;&amp;(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&amp;&amp;(p.fragments[i]=h&amp;&amp;f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&amp;&amp;this[0].parentNode;if((i==null||i&amp;&amp;i.nodeType===11&amp;&amp;i.childNodes.length===1)&amp;&amp;h===1)return g[b](this[0]),this;for(;e&lt;h;e++)d=(e&gt;0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("&lt;"+a.nodeName+"&gt;")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&amp;&amp;(a.nodeType===1||a.nodeType===11)&amp;&amp;!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&amp;&amp;bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&amp;&amp;bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&amp;&amp;(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"&lt;$1&gt;&lt;/$2&gt;"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&amp;&amp;!m?l.firstChild&amp;&amp;l.firstChild.childNodes:j[1]==="&lt;table&gt;"&amp;&amp;!m?l.childNodes:[];for(g=n.length-1;g&gt;=0;--g)p.nodeName(n[g],"tbody")&amp;&amp;!n[g].childNodes.length&amp;&amp;n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&amp;&amp;bn.test(h)&amp;&amp;l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&amp;&amp;(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&amp;&amp;p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&amp;&amp;(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&amp;&amp;i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&amp;&amp;(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")&lt;0&amp;&amp;/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&amp;&amp;(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&amp;&amp;(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&amp;&amp;d instanceof p&amp;&amp;!(d instanceof a)&amp;&amp;(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length&gt;1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&amp;&amp;p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&amp;&amp;"get"in h&amp;&amp;(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&amp;&amp;(f=bR.exec(d))&amp;&amp;(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&amp;&amp;isNaN(d))return;g==="number"&amp;&amp;!p.cssNumber[i]&amp;&amp;(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&amp;&amp;"get"in h&amp;&amp;(f=h.get(a,!0,e)),f===b&amp;&amp;(f=bH(a,c)),f==="normal"&amp;&amp;c in bU&amp;&amp;(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&amp;&amp;(d=h[c],d===""&amp;&amp;!p.contains(b.ownerDocument,b)&amp;&amp;(d=p.style(b,c)),bQ.test(d)&amp;&amp;bO.test(c)&amp;&amp;(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&amp;&amp;(bH=function(a,b){var c,d,e=a.currentStyle&amp;&amp;a.currentStyle[b],f=a.style;return e==null&amp;&amp;f&amp;&amp;f[b]&amp;&amp;(e=f[b]),bQ.test(e)&amp;&amp;!bM.test(b)&amp;&amp;(c=f.left,d=a.runtimeStyle&amp;&amp;a.runtimeStyle.left,d&amp;&amp;(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&amp;&amp;(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&amp;&amp;bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&amp;&amp;p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&amp;&amp;a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&amp;&amp;d.filter||c.filter||"";c.zoom=1;if(b&gt;=1&amp;&amp;p.trim(f.replace(bK,""))===""&amp;&amp;c.removeAttribute){c.removeAttribute("filter");if(d&amp;&amp;!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&amp;&amp;p.fn.position&amp;&amp;p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&amp;&amp;p.expr.filters&amp;&amp;(p.expr.filters.hidden=function(a){return a.offsetWidth===0&amp;&amp;a.offsetHeight===0||!p.support.reliableHiddenOffsets&amp;&amp;(a.style&amp;&amp;a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d&lt;4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&amp;&amp;!this.disabled&amp;&amp;(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&amp;&amp;(c=p.ajaxSettings&amp;&amp;p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&amp;&amp;!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&amp;").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi,cs=/([?&amp;])_=[^&amp;]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&amp;&amp;cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i&gt;=0&amp;&amp;(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&amp;&amp;typeof c=="object"&amp;&amp;(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&amp;&amp;h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("&lt;div&gt;").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&amp;&amp;(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&amp;&amp;clearTimeout(h),g=b,e=i||"",x.readyState=a&gt;0?4:0,f&amp;&amp;(u=cC(l,x,f));if(a&gt;=200&amp;&amp;a&lt;300||a===304)l.ifModified&amp;&amp;(w=x.getResponseHeader("Last-Modified"),w&amp;&amp;(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&amp;&amp;(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a&lt;0&amp;&amp;(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&amp;&amp;n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&amp;&amp;(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&amp;&amp;(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&amp;&amp;(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&amp;&amp;g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v&lt;2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&amp;&amp;(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&amp;&amp;i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&amp;&amp;l.processData&amp;&amp;typeof l.data!="string"&amp;&amp;(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&amp;&amp;p.active++===0&amp;&amp;p.event.trigger("ajaxStart");if(!l.hasContent){l.data&amp;&amp;(l.url+=(cq.test(l.url)?"&amp;":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&amp;":"?")+"_="+z:"")}}(l.data&amp;&amp;l.hasContent&amp;&amp;l.contentType!==!1||c.contentType)&amp;&amp;x.setRequestHeader("Content-Type",l.contentType),l.ifModified&amp;&amp;(d=d||l.url,p.lastModified[d]&amp;&amp;x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&amp;&amp;x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&amp;&amp;l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&amp;&amp;v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&amp;&amp;n.trigger("ajaxSend",[x,l]),l.async&amp;&amp;l.timeout&gt;0&amp;&amp;(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v&lt;2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&amp;|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&amp;&amp;cG.test(j),m=k&amp;&amp;!l&amp;&amp;typeof i=="string"&amp;&amp;!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&amp;&amp;cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&amp;&amp;(c.url+=(cF.test(j)?"&amp;":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&amp;&amp;(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&amp;&amp;p.isFunction(g)&amp;&amp;g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&amp;&amp;(a.cache=!1),a.crossDomain&amp;&amp;(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&amp;&amp;(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&amp;&amp;c.parentNode&amp;&amp;d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&amp;&amp;c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&amp;&amp;cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&amp;&amp;"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&amp;&amp;p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&amp;&amp;i.overrideMimeType&amp;&amp;i.overrideMimeType(c.mimeType),!c.crossDomain&amp;&amp;!e["X-Requested-With"]&amp;&amp;(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&amp;&amp;c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&amp;&amp;(e||i.readyState===4)){d=b,g&amp;&amp;(i.onreadystatechange=p.noop,cJ&amp;&amp;delete cI[g]);if(e)i.readyState!==4&amp;&amp;i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&amp;&amp;m.documentElement&amp;&amp;(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&amp;&amp;c.isLocal&amp;&amp;!c.crossDomain?h=l.text?200:404:h===1223&amp;&amp;(h=204)}}}catch(o){e||f(-1,o)}l&amp;&amp;f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&amp;&amp;(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&amp;&amp;d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&amp;&amp;h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&amp;&amp;i!==1&amp;&amp;--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d&lt;e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&amp;&amp;a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&amp;&amp;this.options.step.call(this.elem,this.now,this),c&amp;&amp;c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&amp;&amp;a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&amp;&amp;(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&amp;&amp;a.elem.parentNode&amp;&amp;(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&amp;&amp;p.isFunction(d)&amp;&amp;p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&amp;&amp;b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&amp;&amp;(d=c,c=a,a=b),c&amp;&amp;a!==!1&amp;&amp;this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&amp;&amp;a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&amp;&amp;g[c].stop&amp;&amp;e(g[c]);else for(c in g)g[c]&amp;&amp;g[c].stop&amp;&amp;cR.test(c)&amp;&amp;e(g[c]);for(c=f.length;c--;)f[c].elem===this&amp;&amp;(a==null||f[c].queue===a)&amp;&amp;(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&amp;&amp;p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&amp;&amp;typeof a=="object"?p.extend({},a):{complete:c||!c&amp;&amp;b||p.isFunction(a)&amp;&amp;a,duration:a,easing:c&amp;&amp;b||b&amp;&amp;!p.isFunction(b)&amp;&amp;b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&amp;&amp;d.old.call(this),d.queue&amp;&amp;p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c&lt;b.length;c++)a=b[c],!a()&amp;&amp;b[c]===a&amp;&amp;b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&amp;&amp;p.timers.push(a)&amp;&amp;!cO&amp;&amp;(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&amp;&amp;p.expr.filters&amp;&amp;(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&amp;&amp;k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&amp;&amp;(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&amp;&amp;(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&amp;&amp;(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&amp;&amp;p.inArray("auto",[g,h])&gt;-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&amp;&amp;(b=b.call(a,c,f)),b.top!=null&amp;&amp;(j.top=b.top-f.top+l),b.left!=null&amp;&amp;(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&amp;&amp;!c_.test(a.nodeName)&amp;&amp;p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&amp;&amp;(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&amp;&amp;define.amd&amp;&amp;define.amd.jQuery&amp;&amp;define("jquery",[],function(){return p})})(window);



Scripts/jquery-ui-1.8.24.js


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.effects.core.js, jquery.effects.blind.js, jquery.effects.bounce.js, jquery.effects.clip.js, jquery.effects.drop.js, jquery.effects.explode.js, jquery.effects.fade.js, jquery.effects.fold.js, jquery.effects.highlight.js, jquery.effects.pulsate.js, jquery.effects.scale.js, jquery.effects.shake.js, jquery.effects.slide.js, jquery.effects.transfer.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.position.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.tabs.js
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */

(function( $, undefined ) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
$.ui = $.ui || {};
if ( $.ui.version ) {
	return;
}

$.extend( $.ui, {
	version: "1.8.24",

	keyCode: {
		ALT: 18,
		BACKSPACE: 8,
		CAPS_LOCK: 20,
		COMMA: 188,
		COMMAND: 91,
		COMMAND_LEFT: 91, // COMMAND
		COMMAND_RIGHT: 93,
		CONTROL: 17,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		INSERT: 45,
		LEFT: 37,
		MENU: 93, // COMMAND_RIGHT
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SHIFT: 16,
		SPACE: 32,
		TAB: 9,
		UP: 38,
		WINDOWS: 91 // COMMAND
	}
});

// plugins
$.fn.extend({
	propAttr: $.fn.prop || $.fn.attr,

	_focus: $.fn.focus,
	focus: function( delay, fn ) {
		return typeof delay === "number" ?
			this.each(function() {
				var elem = this;
				setTimeout(function() {
					$( elem ).focus();
					if ( fn ) {
						fn.call( elem );
					}
				}, delay );
			}) :
			this._focus.apply( this, arguments );
	},

	scrollParent: function() {
		var scrollParent;
		if (($.browser.msie &amp;&amp; (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.curCSS(this,'position',1)) &amp;&amp; (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		}

		return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length &amp;&amp; elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// &lt;div style="z-index: -10;"&gt;&lt;div style="z-index: 0;"&gt;&lt;/div&gt;&lt;/div&gt;
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) &amp;&amp; value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

// support: jQuery &lt;1.8
if ( !$( "&lt;a&gt;" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.curCSS( elem, "padding" + this, true) ) || 0;
				if ( border ) {
					size -= parseFloat( $.curCSS( elem, "border" + this + "Width", true) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.curCSS( elem, "margin" + this, true) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		var map = element.parentNode,
			mapName = map.name,
			img;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img &amp;&amp; visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName )
		? !element.disabled
		: "a" == nodeName
			? element.href || isTabIndexNotNaN
			: isTabIndexNotNaN)
		// the element and all of its ancestors must be visible
		&amp;&amp; visible( element );
}

function visible( element ) {
	return !$( element ).parents().andSelf().filter(function() {
		return $.curCSS( this, "visibility" ) === "hidden" ||
			$.expr.filters.hidden( this );
	}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery &lt;1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex &gt;= 0 ) &amp;&amp; focusable( element, !isTabIndexNaN );
	}
});

// support
$(function() {
	var body = document.body,
		div = body.appendChild( div = document.createElement( "div" ) );

	// access offsetHeight before setting the style to prevent a layout bug
	// in IE 9 which causes the elemnt to continue to take up space even
	// after it is removed from the DOM (#8026)
	div.offsetHeight;

	$.extend( div.style, {
		minHeight: "100px",
		height: "auto",
		padding: 0,
		borderWidth: 0
	});

	$.support.minHeight = div.offsetHeight === 100;
	$.support.selectstart = "onselectstart" in div;

	// set display to none to avoid a layout bug in IE
	// http://dev.jquery.com/ticket/4014
	body.removeChild( div ).style.display = "none";
});

// jQuery &lt;1.4.3 uses curCSS, in 1.4.3 - 1.7.2 curCSS = css, 1.8+ only has css
if ( !$.curCSS ) {
	$.curCSS = $.css;
}





// deprecated
$.extend( $.ui, {
	// $.ui.plugin is deprecated.  Use the proxy pattern instead.
	plugin: {
		add: function( module, option, set ) {
			var proto = $.ui[ module ].prototype;
			for ( var i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode ) {
				return;
			}
	
			for ( var i = 0; i &lt; set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},
	
	// will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
	contains: function( a, b ) {
		return document.compareDocumentPosition ?
			a.compareDocumentPosition( b ) &amp; 16 :
			a !== b &amp;&amp; a.contains( b );
	},
	
	// only used by resizable
	hasScroll: function( el, a ) {
	
		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}
	
		var scroll = ( a &amp;&amp; a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;
	
		if ( el[ scroll ] &gt; 0 ) {
			return true;
		}
	
		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] &gt; 0 );
		el[ scroll ] = 0;
		return has;
	},
	
	// these are odd functions, fix the API or move into individual plugins
	isOverAxis: function( x, reference, size ) {
		//Determines when x coordinate is over "b" element axis
		return ( x &gt; reference ) &amp;&amp; ( x &lt; ( reference + size ) );
	},
	isOver: function( y, x, top, left, height, width ) {
		//Determines when x, y coordinates is over "b" element
		return $.ui.isOverAxis( y, top, height ) &amp;&amp; $.ui.isOverAxis( x, left, width );
	}
});

})( jQuery );

(function( $, undefined ) {

// jQuery 1.4+
if ( $.cleanData ) {
	var _cleanData = $.cleanData;
	$.cleanData = function( elems ) {
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			try {
				$( elem ).triggerHandler( "remove" );
			// http://bugs.jquery.com/ticket/8235
			} catch( e ) {}
		}
		_cleanData( elems );
	};
} else {
	var _remove = $.fn.remove;
	$.fn.remove = function( selector, keepData ) {
		return this.each(function() {
			if ( !keepData ) {
				if ( !selector || $.filter( selector, [ this ] ).length ) {
					$( "*", this ).add( [ this ] ).each(function() {
						try {
							$( this ).triggerHandler( "remove" );
						// http://bugs.jquery.com/ticket/8235
						} catch( e ) {}
					});
				}
			}
			return _remove.call( $(this), selector, keepData );
		});
	};
}

$.widget = function( name, base, prototype ) {
	var namespace = name.split( "." )[ 0 ],
		fullName;
	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName ] = function( elem ) {
		return !!$.data( elem, name );
	};

	$[ namespace ] = $[ namespace ] || {};
	$[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without initializing for simple inheritance
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	var basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
//	$.each( basePrototype, function( key, val ) {
//		if ( $.isPlainObject(val) ) {
//			basePrototype[ key ] = $.extend( {}, val );
//		}
//	});
	basePrototype.options = $.extend( true, {}, basePrototype.options );
	$[ namespace ][ name ].prototype = $.extend( true, basePrototype, {
		namespace: namespace,
		widgetName: name,
		widgetEventPrefix: $[ namespace ][ name ].prototype.widgetEventPrefix || name,
		widgetBaseClass: fullName
	}, prototype );

	$.widget.bridge( name, $[ namespace ][ name ] );
};

$.widget.bridge = function( name, object ) {
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = Array.prototype.slice.call( arguments, 1 ),
			returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall &amp;&amp; args.length ?
			$.extend.apply( null, [ true, options ].concat(args) ) :
			options;

		// prevent calls to internal methods
		if ( isMethodCall &amp;&amp; options.charAt( 0 ) === "_" ) {
			return returnValue;
		}

		if ( isMethodCall ) {
			this.each(function() {
				var instance = $.data( this, name ),
					methodValue = instance &amp;&amp; $.isFunction( instance[options] ) ?
						instance[ options ].apply( instance, args ) :
						instance;
				// TODO: add this back in 1.9 and use $.error() (see #5972)
//				if ( !instance ) {
//					throw "cannot call methods on " + name + " prior to initialization; " +
//						"attempted to call method '" + options + "'";
//				}
//				if ( !$.isFunction( instance[options] ) ) {
//					throw "no such method '" + options + "' for " + name + " widget instance";
//				}
//				var methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance &amp;&amp; methodValue !== undefined ) {
					returnValue = methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, name );
				if ( instance ) {
					instance.option( options || {} )._init();
				} else {
					$.data( this, name, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Widget = function( options, element ) {
	// allow instantiation without initializing for simple inheritance
	if ( arguments.length ) {
		this._createWidget( options, element );
	}
};

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	options: {
		disabled: false
	},
	_createWidget: function( options, element ) {
		// $.widget.bridge stores the plugin instance, but we do it anyway
		// so that it's stored even before the _create function runs
		$.data( element, this.widgetName, this );
		this.element = $( element );
		this.options = $.extend( true, {},
			this.options,
			this._getCreateOptions(),
			options );

		var self = this;
		this.element.bind( "remove." + this.widgetName, function() {
			self.destroy();
		});

		this._create();
		this._trigger( "create" );
		this._init();
	},
	_getCreateOptions: function() {
		return $.metadata &amp;&amp; $.metadata.get( this.element[0] )[ this.widgetName ];
	},
	_create: function() {},
	_init: function() {},

	destroy: function() {
		this.element
			.unbind( "." + this.widgetName )
			.removeData( this.widgetName );
		this.widget()
			.unbind( "." + this.widgetName )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetBaseClass + "-disabled " +
				"ui-state-disabled" );
	},

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.extend( {}, this.options );
		}

		if  (typeof key === "string" ) {
			if ( value === undefined ) {
				return this.options[ key ];
			}
			options = {};
			options[ key ] = value;
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var self = this;
		$.each( options, function( key, value ) {
			self._setOption( key, value );
		});

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				[ value ? "addClass" : "removeClass"](
					this.widgetBaseClass + "-disabled" + " " +
					"ui-state-disabled" )
				.attr( "aria-disabled", value );
		}

		return this;
	},

	enable: function() {
		return this._setOption( "disabled", false );
	},
	disable: function() {
		return this._setOption( "disabled", true );
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );

		return !( $.isFunction(callback) &amp;&amp;
			callback.call( this.element[0], event, data ) === false ||
			event.isDefaultPrevented() );
	}
};

})( jQuery );

(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function( e ) {
	mouseHandled = false;
});

$.widget("ui.mouse", {
	options: {
		cancel: ':input,option',
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var self = this;

		this.element
			.bind('mousedown.'+this.widgetName, function(event) {
				return self._mouseDown(event);
			})
			.bind('click.'+this.widgetName, function(event) {
				if (true === $.data(event.target, self.widgetName + '.preventClickEvent')) {
				    $.removeData(event.target, self.widgetName + '.preventClickEvent');
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind('.'+this.widgetName);
		if ( this._mouseMoveDelegate ) {
			$(document)
				.unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
				.unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one widget handle mouseStart
		if( mouseHandled ) { return };

		// we may have missed mouseup (out of window)
		(this._mouseStarted &amp;&amp; this._mouseUp(event));

		this._mouseDownEvent = event;

		var self = this,
			btnIsLeft = (event.which == 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel == "string" &amp;&amp; event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				self.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) &amp;&amp; this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko &amp; Opera)
		if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
			$.removeData(event.target, this.widgetName + '.preventClickEvent');
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return self._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return self._mouseUp(event);
		};
		$(document)
			.bind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
			.bind('mouseup.'+this.widgetName, this._mouseUpDelegate);

		event.preventDefault();
		
		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.browser.msie &amp;&amp; !(document.documentMode &gt;= 9) &amp;&amp; !event.button) {
			return this._mouseUp(event);
		}

		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) &amp;&amp; this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		$(document)
			.unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
			.unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target == this._mouseDownEvent.target) {
			    $.data(event.target, this.widgetName + '.preventClickEvent', true);
			}

			this._mouseStop(event);
		}

		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) &gt;= this.options.distance
		);
	},

	_mouseDelayMet: function(event) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(event) {},
	_mouseDrag: function(event) {},
	_mouseStop: function(event) {},
	_mouseCapture: function(event) { return true; }
});

})(jQuery);

(function( $, undefined ) {

$.widget("ui.draggable", $.ui.mouse, {
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false
	},
	_create: function() {

		if (this.options.helper == 'original' &amp;&amp; !(/^(?:r|a|f)/).test(this.element.css("position")))
			this.element[0].style.position = 'relative';

		(this.options.addClasses &amp;&amp; this.element.addClass("ui-draggable"));
		(this.options.disabled &amp;&amp; this.element.addClass("ui-draggable-disabled"));

		this._mouseInit();

	},

	destroy: function() {
		if(!this.element.data('draggable')) return;
		this.element
			.removeData("draggable")
			.unbind(".draggable")
			.removeClass("ui-draggable"
				+ " ui-draggable-dragging"
				+ " ui-draggable-disabled");
		this._mouseDestroy();

		return this;
	},

	_mouseCapture: function(event) {

		var o = this.options;

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
			return false;

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle)
			return false;
		
		if ( o.iframeFix ) {
			$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
				$('&lt;div class="ui-draggable-iframeFix" style="background: #fff;"&gt;&lt;/div&gt;')
				.css({
					width: this.offsetWidth+"px", height: this.offsetHeight+"px",
					position: "absolute", opacity: "0.001", zIndex: 1000
				})
				.css($(this).offset())
				.appendTo("body");
			});
		}

		return true;

	},

	_mouseStart: function(event) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("ui-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if($.ui.ddmanager)
			$.ui.ddmanager.current = this;

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css("position");
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.positionAbs = this.element.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
		(o.cursorAt &amp;&amp; this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		if(o.containment)
			this._setContainment();

		//Trigger event + callbacks
		if(this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.ui.ddmanager &amp;&amp; !o.dropBehaviour)
			$.ui.ddmanager.prepareOffsets(this, event);

		
		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		
		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.ui.ddmanager ) $.ui.ddmanager.dragStart(this, event);
		
		return true;
	},

	_mouseDrag: function(event, noPropagation) {

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if(this._trigger('drag', event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}

		if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';
		if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';
		if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var dropped = false;
		if ($.ui.ddmanager &amp;&amp; !this.options.dropBehaviour)
			dropped = $.ui.ddmanager.drop(this, event);

		//if a drop comes from outside (a sortable)
		if(this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}
		
		//if the original element is no longer in the DOM don't bother to continue (see #8269)
		var element = this.element[0], elementInDom = false;
		while ( element &amp;&amp; (element = element.parentNode) ) {
			if (element == document ) {
				elementInDom = true;
			}
		}
		if ( !elementInDom &amp;&amp; this.options.helper === "original" )
			return false;

		if((this.options.revert == "invalid" &amp;&amp; !dropped) || (this.options.revert == "valid" &amp;&amp; dropped) || this.options.revert === true || ($.isFunction(this.options.revert) &amp;&amp; this.options.revert.call(this.element, dropped))) {
			var self = this;
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if(self._trigger("stop", event) !== false) {
					self._clear();
				}
			});
		} else {
			if(this._trigger("stop", event) !== false) {
				this._clear();
			}
		}

		return false;
	},
	
	_mouseUp: function(event) {
		//Remove frame helpers
		$("div.ui-draggable-iframeFix").each(function() { 
			this.parentNode.removeChild(this); 
		});
		
		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if( $.ui.ddmanager ) $.ui.ddmanager.dragStop(this, event);
		
		return $.ui.mouse.prototype._mouseUp.call(this, event);
	},
	
	cancel: function() {
		
		if(this.helper.is(".ui-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}
		
		return this;
		
	},

	_getHandle: function(event) {

		var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
		$(this.options.handle, this.element)
			.find("*")
			.andSelf()
			.each(function() {
				if(this == event.target) handle = true;
			});

		return handle;

	},

	_createHelper: function(event) {

		var o = this.options;
		var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);

		if(!helper.parents('body').length)
			helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));

		if(helper[0] != this.element[0] &amp;&amp; !(/(fixed|absolute)/).test(helper.css("position")))
			helper.css("position", "absolute");

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj == 'string') {
			obj = obj.split(' ');
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ('left' in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ('right' in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ('top' in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ('bottom' in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition == 'absolute' &amp;&amp; this.scrollParent[0] != document &amp;&amp; $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
		|| (this.offsetParent[0].tagName &amp;&amp; this.offsetParent[0].tagName.toLowerCase() == 'html' &amp;&amp; $.browser.msie)) //Ugly IE fix
			po = { top: 0, left: 0 };

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition == "relative") {
			var p = this.element.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"),10) || 0),
			top: (parseInt(this.element.css("marginTop"),10) || 0),
			right: (parseInt(this.element.css("marginRight"),10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var o = this.options;
		if(o.containment == 'parent') o.containment = this.helper[0].parentNode;
		if(o.containment == 'document' || o.containment == 'window') this.containment = [
			o.containment == 'document' ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
			o.containment == 'document' ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
			(o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
			(o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
		];

		if(!(/^(document|window|parent)$/).test(o.containment) &amp;&amp; o.containment.constructor != Array) {
		        var c = $(o.containment);
			var ce = c[0]; if(!ce) return;
			var co = c.offset();
			var over = ($(ce).css("overflow") != 'hidden');

			this.containment = [
				(parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0),
				(parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0),
				(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
				(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top  - this.margins.bottom
			];
			this.relative_container = c;

		} else if(o.containment.constructor == Array) {
			this.containment = o.containment;
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) pos = this.position;
		var mod = d == "absolute" ? 1 : -1;
		var o = this.options, scroll = this.cssPosition == 'absolute' &amp;&amp; !(this.scrollParent[0] != document &amp;&amp; $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top																	// The absolute mouse position
				+ this.offset.relative.top * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.top * mod											// The offsetParent's offset without borders (offset + border)
				- ($.browser.safari &amp;&amp; $.browser.version &lt; 526 &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left																// The absolute mouse position
				+ this.offset.relative.left * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.left * mod											// The offsetParent's offset without borders (offset + border)
				- ($.browser.safari &amp;&amp; $.browser.version &lt; 526 &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var o = this.options, scroll = this.cssPosition == 'absolute' &amp;&amp; !(this.scrollParent[0] != document &amp;&amp; $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
		var pageX = event.pageX;
		var pageY = event.pageY;

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options
		         var containment;
		         if(this.containment) {
				 if (this.relative_container){
				     var co = this.relative_container.offset();
				     containment = [ this.containment[0] + co.left,
						     this.containment[1] + co.top,
						     this.containment[2] + co.left,
						     this.containment[3] + co.top ];
				 }
				 else {
				     containment = this.containment;
				 }

				if(event.pageX - this.offset.click.left &lt; containment[0]) pageX = containment[0] + this.offset.click.left;
				if(event.pageY - this.offset.click.top &lt; containment[1]) pageY = containment[1] + this.offset.click.top;
				if(event.pageX - this.offset.click.left &gt; containment[2]) pageX = containment[2] + this.offset.click.left;
				if(event.pageY - this.offset.click.top &gt; containment[3]) pageY = containment[3] + this.offset.click.top;
			}

			if(o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? (!(top - this.offset.click.top &lt; containment[1] || top - this.offset.click.top &gt; containment[3]) ? top : (!(top - this.offset.click.top &lt; containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? (!(left - this.offset.click.left &lt; containment[0] || left - this.offset.click.left &gt; containment[2]) ? left : (!(left - this.offset.click.left &lt; containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY																// The absolute mouse position
				- this.offset.click.top													// Click offset (relative to the element)
				- this.offset.relative.top												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.top												// The offsetParent's offset without borders (offset + border)
				+ ($.browser.safari &amp;&amp; $.browser.version &lt; 526 &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX																// The absolute mouse position
				- this.offset.click.left												// Click offset (relative to the element)
				- this.offset.relative.left												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.left												// The offsetParent's offset without borders (offset + border)
				+ ($.browser.safari &amp;&amp; $.browser.version &lt; 526 &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("ui-draggable-dragging");
		if(this.helper[0] != this.element[0] &amp;&amp; !this.cancelHelperRemoval) this.helper.remove();
		//if($.ui.ddmanager) $.ui.ddmanager.current = null;
		this.helper = null;
		this.cancelHelperRemoval = false;
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function(type, event, ui) {
		ui = ui || this._uiHash();
		$.ui.plugin.call(this, type, [event, ui]);
		if(type == "drag") this.positionAbs = this._convertPositionTo("absolute"); //The absolute position has to be recalculated after plugins
		return $.Widget.prototype._trigger.call(this, type, event, ui);
	},

	plugins: {},

	_uiHash: function(event) {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.extend($.ui.draggable, {
	version: "1.8.24"
});

$.ui.plugin.add("draggable", "connectToSortable", {
	start: function(event, ui) {

		var inst = $(this).data("draggable"), o = inst.options,
			uiSortable = $.extend({}, ui, { item: inst.element });
		inst.sortables = [];
		$(o.connectToSortable).each(function() {
			var sortable = $.data(this, 'sortable');
			if (sortable &amp;&amp; !sortable.options.disabled) {
				inst.sortables.push({
					instance: sortable,
					shouldRevert: sortable.options.revert
				});
				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
				sortable._trigger("activate", event, uiSortable);
			}
		});

	},
	stop: function(event, ui) {

		//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
		var inst = $(this).data("draggable"),
			uiSortable = $.extend({}, ui, { item: inst.element });

		$.each(inst.sortables, function() {
			if(this.instance.isOver) {

				this.instance.isOver = 0;

				inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
				this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

				//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: 'valid/invalid'
				if(this.shouldRevert) this.instance.options.revert = true;

				//Trigger the stop of the sortable
				this.instance._mouseStop(event);

				this.instance.options.helper = this.instance.options._helper;

				//If the helper has been the original item, restore properties in the sortable
				if(inst.options.helper == 'original')
					this.instance.currentItem.css({ top: 'auto', left: 'auto' });

			} else {
				this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
				this.instance._trigger("deactivate", event, uiSortable);
			}

		});

	},
	drag: function(event, ui) {

		var inst = $(this).data("draggable"), self = this;

		var checkPos = function(o) {
			var dyClick = this.offset.click.top, dxClick = this.offset.click.left;
			var helperTop = this.positionAbs.top, helperLeft = this.positionAbs.left;
			var itemHeight = o.height, itemWidth = o.width;
			var itemTop = o.top, itemLeft = o.left;

			return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
		};

		$.each(inst.sortables, function(i) {
			
			//Copy over some variables to allow calling the sortable's native _intersectsWith
			this.instance.positionAbs = inst.positionAbs;
			this.instance.helperProportions = inst.helperProportions;
			this.instance.offset.click = inst.offset.click;
			
			if(this.instance._intersectsWith(this.instance.containerCache)) {

				//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
				if(!this.instance.isOver) {

					this.instance.isOver = 1;
					//Now we fake the start of dragging for the sortable instance,
					//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
					//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
					this.instance.currentItem = $(self).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
					this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
					this.instance.options.helper = function() { return ui.helper[0]; };

					event.target = this.instance.currentItem[0];
					this.instance._mouseCapture(event, true);
					this.instance._mouseStart(event, true, true);

					//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
					this.instance.offset.click.top = inst.offset.click.top;
					this.instance.offset.click.left = inst.offset.click.left;
					this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
					this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

					inst._trigger("toSortable", event);
					inst.dropped = this.instance.element; //draggable revert needs that
					//hack so receive/update callbacks work (mostly)
					inst.currentItem = inst.element;
					this.instance.fromOutside = inst;

				}

				//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
				if(this.instance.currentItem) this.instance._mouseDrag(event);

			} else {

				//If it doesn't intersect with the sortable, and it intersected before,
				//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
				if(this.instance.isOver) {

					this.instance.isOver = 0;
					this.instance.cancelHelperRemoval = true;
					
					//Prevent reverting on this forced stop
					this.instance.options.revert = false;
					
					// The out event needs to be triggered independently
					this.instance._trigger('out', event, this.instance._uiHash(this.instance));
					
					this.instance._mouseStop(event, true);
					this.instance.options.helper = this.instance.options._helper;

					//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
					this.instance.currentItem.remove();
					if(this.instance.placeholder) this.instance.placeholder.remove();

					inst._trigger("fromSortable", event);
					inst.dropped = false; //draggable revert needs that
				}

			};

		});

	}
});

$.ui.plugin.add("draggable", "cursor", {
	start: function(event, ui) {
		var t = $('body'), o = $(this).data('draggable').options;
		if (t.css("cursor")) o._cursor = t.css("cursor");
		t.css("cursor", o.cursor);
	},
	stop: function(event, ui) {
		var o = $(this).data('draggable').options;
		if (o._cursor) $('body').css("cursor", o._cursor);
	}
});

$.ui.plugin.add("draggable", "opacity", {
	start: function(event, ui) {
		var t = $(ui.helper), o = $(this).data('draggable').options;
		if(t.css("opacity")) o._opacity = t.css("opacity");
		t.css('opacity', o.opacity);
	},
	stop: function(event, ui) {
		var o = $(this).data('draggable').options;
		if(o._opacity) $(ui.helper).css('opacity', o._opacity);
	}
});

$.ui.plugin.add("draggable", "scroll", {
	start: function(event, ui) {
		var i = $(this).data("draggable");
		if(i.scrollParent[0] != document &amp;&amp; i.scrollParent[0].tagName != 'HTML') i.overflowOffset = i.scrollParent.offset();
	},
	drag: function(event, ui) {

		var i = $(this).data("draggable"), o = i.options, scrolled = false;

		if(i.scrollParent[0] != document &amp;&amp; i.scrollParent[0].tagName != 'HTML') {

			if(!o.axis || o.axis != 'x') {
				if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY &lt; o.scrollSensitivity)
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
				else if(event.pageY - i.overflowOffset.top &lt; o.scrollSensitivity)
					i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
			}

			if(!o.axis || o.axis != 'y') {
				if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX &lt; o.scrollSensitivity)
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
				else if(event.pageX - i.overflowOffset.left &lt; o.scrollSensitivity)
					i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
			}

		} else {

			if(!o.axis || o.axis != 'x') {
				if(event.pageY - $(document).scrollTop() &lt; o.scrollSensitivity)
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				else if($(window).height() - (event.pageY - $(document).scrollTop()) &lt; o.scrollSensitivity)
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
			}

			if(!o.axis || o.axis != 'y') {
				if(event.pageX - $(document).scrollLeft() &lt; o.scrollSensitivity)
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				else if($(window).width() - (event.pageX - $(document).scrollLeft()) &lt; o.scrollSensitivity)
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
			}

		}

		if(scrolled !== false &amp;&amp; $.ui.ddmanager &amp;&amp; !o.dropBehaviour)
			$.ui.ddmanager.prepareOffsets(i, event);

	}
});

$.ui.plugin.add("draggable", "snap", {
	start: function(event, ui) {

		var i = $(this).data("draggable"), o = i.options;
		i.snapElements = [];

		$(o.snap.constructor != String ? ( o.snap.items || ':data(draggable)' ) : o.snap).each(function() {
			var $t = $(this); var $o = $t.offset();
			if(this != i.element[0]) i.snapElements.push({
				item: this,
				width: $t.outerWidth(), height: $t.outerHeight(),
				top: $o.top, left: $o.left
			});
		});

	},
	drag: function(event, ui) {

		var inst = $(this).data("draggable"), o = inst.options;
		var d = o.snapTolerance;

		var x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (var i = inst.snapElements.length - 1; i &gt;= 0; i--){

			var l = inst.snapElements[i].left, r = l + inst.snapElements[i].width,
				t = inst.snapElements[i].top, b = t + inst.snapElements[i].height;

			//Yes, I know, this is insane ;)
			if(!((l-d &lt; x1 &amp;&amp; x1 &lt; r+d &amp;&amp; t-d &lt; y1 &amp;&amp; y1 &lt; b+d) || (l-d &lt; x1 &amp;&amp; x1 &lt; r+d &amp;&amp; t-d &lt; y2 &amp;&amp; y2 &lt; b+d) || (l-d &lt; x2 &amp;&amp; x2 &lt; r+d &amp;&amp; t-d &lt; y1 &amp;&amp; y1 &lt; b+d) || (l-d &lt; x2 &amp;&amp; x2 &lt; r+d &amp;&amp; t-d &lt; y2 &amp;&amp; y2 &lt; b+d))) {
				if(inst.snapElements[i].snapping) (inst.options.snap.release &amp;&amp; inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				inst.snapElements[i].snapping = false;
				continue;
			}

			if(o.snapMode != 'inner') {
				var ts = Math.abs(t - y2) &lt;= d;
				var bs = Math.abs(b - y1) &lt;= d;
				var ls = Math.abs(l - x2) &lt;= d;
				var rs = Math.abs(r - x1) &lt;= d;
				if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
				if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
				if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
			}

			var first = (ts || bs || ls || rs);

			if(o.snapMode != 'outer') {
				var ts = Math.abs(t - y1) &lt;= d;
				var bs = Math.abs(b - y2) &lt;= d;
				var ls = Math.abs(l - x1) &lt;= d;
				var rs = Math.abs(r - x2) &lt;= d;
				if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
				if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
				if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
			}

			if(!inst.snapElements[i].snapping &amp;&amp; (ts || bs || ls || rs || first))
				(inst.options.snap.snap &amp;&amp; inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		};

	}
});

$.ui.plugin.add("draggable", "stack", {
	start: function(event, ui) {

		var o = $(this).data("draggable").options;

		var group = $.makeArray($(o.stack)).sort(function(a,b) {
			return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
		});
		if (!group.length) { return; }
		
		var min = parseInt(group[0].style.zIndex) || 0;
		$(group).each(function(i) {
			this.style.zIndex = min + i;
		});

		this[0].style.zIndex = min + group.length;

	}
});

$.ui.plugin.add("draggable", "zIndex", {
	start: function(event, ui) {
		var t = $(ui.helper), o = $(this).data("draggable").options;
		if(t.css("zIndex")) o._zIndex = t.css("zIndex");
		t.css('zIndex', o.zIndex);
	},
	stop: function(event, ui) {
		var o = $(this).data("draggable").options;
		if(o._zIndex) $(ui.helper).css('zIndex', o._zIndex);
	}
});

})(jQuery);

(function( $, undefined ) {

$.widget("ui.droppable", {
	widgetEventPrefix: "drop",
	options: {
		accept: '*',
		activeClass: false,
		addClasses: true,
		greedy: false,
		hoverClass: false,
		scope: 'default',
		tolerance: 'intersect'
	},
	_create: function() {

		var o = this.options, accept = o.accept;
		this.isover = 0; this.isout = 1;

		this.accept = $.isFunction(accept) ? accept : function(d) {
			return d.is(accept);
		};

		//Store the droppable's proportions
		this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
		$.ui.ddmanager.droppables[o.scope].push(this);

		(o.addClasses &amp;&amp; this.element.addClass("ui-droppable"));

	},

	destroy: function() {
		var drop = $.ui.ddmanager.droppables[this.options.scope];
		for ( var i = 0; i &lt; drop.length; i++ )
			if ( drop[i] == this )
				drop.splice(i, 1);

		this.element
			.removeClass("ui-droppable ui-droppable-disabled")
			.removeData("droppable")
			.unbind(".droppable");

		return this;
	},

	_setOption: function(key, value) {

		if(key == 'accept') {
			this.accept = $.isFunction(value) ? value : function(d) {
				return d.is(value);
			};
		}
		$.Widget.prototype._setOption.apply(this, arguments);
	},

	_activate: function(event) {
		var draggable = $.ui.ddmanager.current;
		if(this.options.activeClass) this.element.addClass(this.options.activeClass);
		(draggable &amp;&amp; this._trigger('activate', event, this.ui(draggable)));
	},

	_deactivate: function(event) {
		var draggable = $.ui.ddmanager.current;
		if(this.options.activeClass) this.element.removeClass(this.options.activeClass);
		(draggable &amp;&amp; this._trigger('deactivate', event, this.ui(draggable)));
	},

	_over: function(event) {

		var draggable = $.ui.ddmanager.current;
		if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) this.element.addClass(this.options.hoverClass);
			this._trigger('over', event, this.ui(draggable));
		}

	},

	_out: function(event) {

		var draggable = $.ui.ddmanager.current;
		if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
			this._trigger('out', event, this.ui(draggable));
		}

	},

	_drop: function(event,custom) {

		var draggable = custom || $.ui.ddmanager.current;
		if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return false; // Bail if draggable and droppable are same element

		var childrenIntersection = false;
		this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {
			var inst = $.data(this, 'droppable');
			if(
				inst.options.greedy
				&amp;&amp; !inst.options.disabled
				&amp;&amp; inst.options.scope == draggable.options.scope
				&amp;&amp; inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element))
				&amp;&amp; $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
			) { childrenIntersection = true; return false; }
		});
		if(childrenIntersection) return false;

		if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.activeClass) this.element.removeClass(this.options.activeClass);
			if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
			this._trigger('drop', event, this.ui(draggable));
			return this.element;
		}

		return false;

	},

	ui: function(c) {
		return {
			draggable: (c.currentItem || c.element),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	}

});

$.extend($.ui.droppable, {
	version: "1.8.24"
});

$.ui.intersect = function(draggable, droppable, toleranceMode) {

	if (!droppable.offset) return false;

	var x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
		y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height;
	var l = droppable.offset.left, r = l + droppable.proportions.width,
		t = droppable.offset.top, b = t + droppable.proportions.height;

	switch (toleranceMode) {
		case 'fit':
			return (l &lt;= x1 &amp;&amp; x2 &lt;= r
				&amp;&amp; t &lt;= y1 &amp;&amp; y2 &lt;= b);
			break;
		case 'intersect':
			return (l &lt; x1 + (draggable.helperProportions.width / 2) // Right Half
				&amp;&amp; x2 - (draggable.helperProportions.width / 2) &lt; r // Left Half
				&amp;&amp; t &lt; y1 + (draggable.helperProportions.height / 2) // Bottom Half
				&amp;&amp; y2 - (draggable.helperProportions.height / 2) &lt; b ); // Top Half
			break;
		case 'pointer':
			var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left),
				draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top),
				isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
			return isOver;
			break;
		case 'touch':
			return (
					(y1 &gt;= t &amp;&amp; y1 &lt;= b) ||	// Top edge touching
					(y2 &gt;= t &amp;&amp; y2 &lt;= b) ||	// Bottom edge touching
					(y1 &lt; t &amp;&amp; y2 &gt; b)		// Surrounded vertically
				) &amp;&amp; (
					(x1 &gt;= l &amp;&amp; x1 &lt;= r) ||	// Left edge touching
					(x2 &gt;= l &amp;&amp; x2 &lt;= r) ||	// Right edge touching
					(x1 &lt; l &amp;&amp; x2 &gt; r)		// Surrounded horizontally
				);
			break;
		default:
			return false;
			break;
		}

};

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { 'default': [] },
	prepareOffsets: function(t, event) {

		var m = $.ui.ddmanager.droppables[t.options.scope] || [];
		var type = event ? event.type : null; // workaround for #2317
		var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();

		droppablesLoop: for (var i = 0; i &lt; m.length; i++) {

			if(m[i].options.disabled || (t &amp;&amp; !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) continue;	//No disabled and non-accepted
			for (var j=0; j &lt; list.length; j++) { if(list[j] == m[i].element[0]) { m[i].proportions.height = 0; continue droppablesLoop; } }; //Filter out elements in the current dragged item
			m[i].visible = m[i].element.css("display") != "none"; if(!m[i].visible) continue; 									//If the element is not visible, continue

			if(type == "mousedown") m[i]._activate.call(m[i], event); //Activate the droppable if used directly from draggables

			m[i].offset = m[i].element.offset();
			m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

		}

	},
	drop: function(draggable, event) {

		var dropped = false;
		$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

			if(!this.options) return;
			if (!this.options.disabled &amp;&amp; this.visible &amp;&amp; $.ui.intersect(draggable, this, this.options.tolerance))
				dropped = this._drop.call(this, event) || dropped;

			if (!this.options.disabled &amp;&amp; this.visible &amp;&amp; this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				this.isout = 1; this.isover = 0;
				this._deactivate.call(this, event);
			}

		});
		return dropped;

	},
	dragStart: function( draggable, event ) {
		//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parents( ":not(body,html)" ).bind( "scroll.droppable", function() {
			if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );
		});
	},
	drag: function(draggable, event) {

		//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
		if(draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);

		//Run through all droppables and check their positions based on specific tolerance options
		$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

			if(this.options.disabled || this.greedyChild || !this.visible) return;
			var intersects = $.ui.intersect(draggable, this, this.options.tolerance);

			var c = !intersects &amp;&amp; this.isover == 1 ? 'isout' : (intersects &amp;&amp; this.isover == 0 ? 'isover' : null);
			if(!c) return;

			var parentInstance;
			if (this.options.greedy) {
				// find droppable parents with same scope
				var scope = this.options.scope;
				var parent = this.element.parents(':data(droppable)').filter(function () {
					return $.data(this, 'droppable').options.scope === scope;
				});

				if (parent.length) {
					parentInstance = $.data(parent[0], 'droppable');
					parentInstance.greedyChild = (c == 'isover' ? 1 : 0);
				}
			}

			// we just moved into a greedy child
			if (parentInstance &amp;&amp; c == 'isover') {
				parentInstance['isover'] = 0;
				parentInstance['isout'] = 1;
				parentInstance._out.call(parentInstance, event);
			}

			this[c] = 1; this[c == 'isout' ? 'isover' : 'isout'] = 0;
			this[c == "isover" ? "_over" : "_out"].call(this, event);

			// we just moved out of a greedy child
			if (parentInstance &amp;&amp; c == 'isout') {
				parentInstance['isout'] = 0;
				parentInstance['isover'] = 1;
				parentInstance._over.call(parentInstance, event);
			}
		});

	},
	dragStop: function( draggable, event ) {
		draggable.element.parents( ":not(body,html)" ).unbind( "scroll.droppable" );
		//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );
	}
};

})(jQuery);

(function( $, undefined ) {

$.widget("ui.resizable", $.ui.mouse, {
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		zIndex: 1000
	},
	_create: function() {

		var self = this, o = this.options;
		this.element.addClass("ui-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
		});

		//Wrap the element if it cannot hold child nodes
		if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

			//Create a wrapper element and set the wrapper to the new current internal element
			this.element.wrap(
				$('&lt;div class="ui-wrapper" style="overflow: hidden;"&gt;&lt;/div&gt;').css({
					position: this.element.css('position'),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css('top'),
					left: this.element.css('left')
				})
			);

			//Overwrite the original this.element
			this.element = this.element.parent().data(
				"resizable", this.element.data('resizable')
			);

			this.elementIsWrapper = true;

			//Move margins to the wrapper
			this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
			this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

			//Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css('resize');
			this.originalElement.css('resize', 'none');

			//Push the actual element to our proportionallyResize internal array
			this._proportionallyResizeElements.push(this.originalElement.css({ position: 'static', zoom: 1, display: 'block' }));

			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css('margin') });

			// fix handlers offset
			this._proportionallyResize();

		}

		this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : { n: '.ui-resizable-n', e: '.ui-resizable-e', s: '.ui-resizable-s', w: '.ui-resizable-w', se: '.ui-resizable-se', sw: '.ui-resizable-sw', ne: '.ui-resizable-ne', nw: '.ui-resizable-nw' });
		if(this.handles.constructor == String) {

			if(this.handles == 'all') this.handles = 'n,e,s,w,se,sw,ne,nw';
			var n = this.handles.split(","); this.handles = {};

			for(var i = 0; i &lt; n.length; i++) {

				var handle = $.trim(n[i]), hname = 'ui-resizable-'+handle;
				var axis = $('&lt;div class="ui-resizable-handle ' + hname + '"&gt;&lt;/div&gt;');

				// Apply zIndex to all handles - see #7960
				axis.css({ zIndex: o.zIndex });

				//TODO : What's going on here?
				if ('se' == handle) {
					axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
				};

				//Insert into internal handles object and append to element
				this.handles[handle] = '.ui-resizable-'+handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			target = target || this.element;

			for(var i in this.handles) {

				if(this.handles[i].constructor == String)
					this.handles[i] = $(this.handles[i], this.element).show();

				//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
				if (this.elementIsWrapper &amp;&amp; this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

					var axis = $(this.handles[i], this.element), padWrapper = 0;

					//Checking the correct pad and border
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					//The padding type i have to apply...
					var padPos = [ 'padding',
						/ne|nw|n/.test(i) ? 'Top' :
						/se|sw|s/.test(i) ? 'Bottom' :
						/^e$/.test(i) ? 'Right' : 'Left' ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();

				}

				//TODO: What's that good for? There's not anything to be executed left
				if(!$(this.handles[i]).length)
					continue;

			}
		};

		//TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = $('.ui-resizable-handle', this.element)
			.disableSelection();

		//Matching axis name
		this._handles.mouseover(function() {
			if (!self.resizing) {
				if (this.className)
					var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				//Axis, default = se
				self.axis = axis &amp;&amp; axis[1] ? axis[1] : 'se';
			}
		});

		//If we want to auto hide the elements
		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("ui-resizable-autohide")
				.hover(function() {
					if (o.disabled) return;
					$(this).removeClass("ui-resizable-autohide");
					self._handles.show();
				},
				function(){
					if (o.disabled) return;
					if (!self.resizing) {
						$(this).addClass("ui-resizable-autohide");
						self._handles.hide();
					}
				});
		}

		//Initialize the mouse interaction
		this._mouseInit();

	},

	destroy: function() {

		this._mouseDestroy();

		var _destroy = function(exp) {
			$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
				.removeData("resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
		};

		//TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			var wrapper = this.element;
			wrapper.after(
				this.originalElement.css({
					position: wrapper.css('position'),
					width: wrapper.outerWidth(),
					height: wrapper.outerHeight(),
					top: wrapper.css('top'),
					left: wrapper.css('left')
				})
			).remove();
		}

		this.originalElement.css('resize', this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var handle = false;
		for (var i in this.handles) {
			if ($(this.handles[i])[0] == event.target) {
				handle = true;
			}
		}

		return !this.options.disabled &amp;&amp; handle;
	},

	_mouseStart: function(event) {

		var o = this.options, iniPos = this.element.position(), el = this.element;

		this.resizing = true;
		this.documentScroll = { top: $(document).scrollTop(), left: $(document).scrollLeft() };

		// bugfix for http://dev.jquery.com/ticket/1749
		if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {
			el.css({ position: 'absolute', top: iniPos.top, left: iniPos.left });
		}

		this._renderProxy();

		var curleft = num(this.helper.css('left')), curtop = num(this.helper.css('top'));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		//Store needed variables
		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };
		this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalPosition = { left: curleft, top: curtop };
		this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		//Aspect Ratio
		this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

	    var cursor = $('.ui-resizable-' + this.axis).css('cursor');
	    $('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);

		el.addClass("ui-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		//Increase performance, avoid regex
		var el = this.helper, o = this.options, props = {},
			self = this, smp = this.originalMousePosition, a = this.axis;

		var dx = (event.pageX-smp.left)||0, dy = (event.pageY-smp.top)||0;
		var trigger = this._change[a];
		if (!trigger) return false;

		// Calculate the attrs that will be change
		var data = trigger.apply(this, [event, dx, dy]), ie6 = $.browser.msie &amp;&amp; $.browser.version &lt; 7, csdif = this.sizeDiff;

		// Put this in the mouseDrag handler since the user can start pressing shift while resizing
		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey)
			data = this._updateRatio(data, event);

		data = this._respectSize(data, event);

		// plugins callbacks need to be called first
		this._propagate("resize", event);

		el.css({
			top: this.position.top + "px", left: this.position.left + "px",
			width: this.size.width + "px", height: this.size.height + "px"
		});

		if (!this._helper &amp;&amp; this._proportionallyResizeElements.length)
			this._proportionallyResize();

		this._updateCache(data);

		// calling the user callback at the end
		this._trigger('resize', event, this.ui());

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var o = this.options, self = this;

		if(this._helper) {
			var pr = this._proportionallyResizeElements, ista = pr.length &amp;&amp; (/textarea/i).test(pr[0].nodeName),
				soffseth = ista &amp;&amp; $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : self.sizeDiff.height,
				soffsetw = ista ? 0 : self.sizeDiff.width;

			var s = { width: (self.helper.width()  - soffsetw), height: (self.helper.height() - soffseth) },
				left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
				top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;

			if (!o.animate)
				this.element.css($.extend(s, { top: top, left: left }));

			self.helper.height(self.size.height);
			self.helper.width(self.size.width);

			if (this._helper &amp;&amp; !o.animate) this._proportionallyResize();
		}

		$('body').css('cursor', 'auto');

		this.element.removeClass("ui-resizable-resizing");

		this._propagate("stop", event);

		if (this._helper) this.helper.remove();
		return false;

	},

    _updateVirtualBoundaries: function(forceAspectRatio) {
        var o = this.options, pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b;

        b = {
            minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
            maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
            minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
            maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
        };

        if(this._aspectRatio || forceAspectRatio) {
            // We want to create an enclosing box whose aspect ration is the requested one
            // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
            pMinWidth = b.minHeight * this.aspectRatio;
            pMinHeight = b.minWidth / this.aspectRatio;
            pMaxWidth = b.maxHeight * this.aspectRatio;
            pMaxHeight = b.maxWidth / this.aspectRatio;

            if(pMinWidth &gt; b.minWidth) b.minWidth = pMinWidth;
            if(pMinHeight &gt; b.minHeight) b.minHeight = pMinHeight;
            if(pMaxWidth &lt; b.maxWidth) b.maxWidth = pMaxWidth;
            if(pMaxHeight &lt; b.maxHeight) b.maxHeight = pMaxHeight;
        }
        this._vBoundaries = b;
    },

	_updateCache: function(data) {
		var o = this.options;
		this.offset = this.helper.offset();
		if (isNumber(data.left)) this.position.left = data.left;
		if (isNumber(data.top)) this.position.top = data.top;
		if (isNumber(data.height)) this.size.height = data.height;
		if (isNumber(data.width)) this.size.width = data.width;
	},

	_updateRatio: function(data, event) {

		var o = this.options, cpos = this.position, csize = this.size, a = this.axis;

		if (isNumber(data.height)) data.width = (data.height * this.aspectRatio);
		else if (isNumber(data.width)) data.height = (data.width / this.aspectRatio);

		if (a == 'sw') {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a == 'nw') {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function(data, event) {

		var el = this.helper, o = this._vBoundaries, pRatio = this._aspectRatio || event.shiftKey, a = this.axis,
				ismaxw = isNumber(data.width) &amp;&amp; o.maxWidth &amp;&amp; (o.maxWidth &lt; data.width), ismaxh = isNumber(data.height) &amp;&amp; o.maxHeight &amp;&amp; (o.maxHeight &lt; data.height),
					isminw = isNumber(data.width) &amp;&amp; o.minWidth &amp;&amp; (o.minWidth &gt; data.width), isminh = isNumber(data.height) &amp;&amp; o.minHeight &amp;&amp; (o.minHeight &gt; data.height);

		if (isminw) data.width = o.minWidth;
		if (isminh) data.height = o.minHeight;
		if (ismaxw) data.width = o.maxWidth;
		if (ismaxh) data.height = o.maxHeight;

		var dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height;
		var cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);

		if (isminw &amp;&amp; cw) data.left = dw - o.minWidth;
		if (ismaxw &amp;&amp; cw) data.left = dw - o.maxWidth;
		if (isminh &amp;&amp; ch)	data.top = dh - o.minHeight;
		if (ismaxh &amp;&amp; ch)	data.top = dh - o.maxHeight;

		// fixing jump error on top/left - bug #2330
		var isNotwh = !data.width &amp;&amp; !data.height;
		if (isNotwh &amp;&amp; !data.left &amp;&amp; data.top) data.top = null;
		else if (isNotwh &amp;&amp; !data.top &amp;&amp; data.left) data.left = null;

		return data;
	},

	_proportionallyResize: function() {

		var o = this.options;
		if (!this._proportionallyResizeElements.length) return;
		var element = this.helper || this.element;

		for (var i=0; i &lt; this._proportionallyResizeElements.length; i++) {

			var prel = this._proportionallyResizeElements[i];

			if (!this.borderDif) {
				var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
					p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];

				this.borderDif = $.map(b, function(v, i) {
					var border = parseInt(v,10)||0, padding = parseInt(p[i],10)||0;
					return border + padding;
				});
			}

			if ($.browser.msie &amp;&amp; !(!($(element).is(':hidden') || $(element).parents(':hidden').length)))
				continue;

			prel.css({
				height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
				width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
			});

		};

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if(this._helper) {

			this.helper = this.helper || $('&lt;div style="overflow:hidden;"&gt;&lt;/div&gt;');

			// fix ie6 offset TODO: This seems broken
			var ie6 = $.browser.msie &amp;&amp; $.browser.version &lt; 7, ie6offset = (ie6 ? 1 : 0),
			pxyoffset = ( ie6 ? 2 : -1 );

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() + pxyoffset,
				height: this.element.outerHeight() + pxyoffset,
				position: 'absolute',
				left: this.elementOffset.left - ie6offset +'px',
				top: this.elementOffset.top - ie6offset +'px',
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx, dy) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx, dy) {
			var o = this.options, cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var o = this.options, cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		}
	},

	_propagate: function(n, event) {
		$.ui.plugin.call(this, n, [event, this.ui()]);
		(n != "resize" &amp;&amp; this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

$.extend($.ui.resizable, {
	version: "1.8.24"
});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "alsoResize", {

	start: function (event, ui) {
		var self = $(this).data("resizable"), o = self.options;

		var _store = function (exp) {
			$(exp).each(function() {
				var el = $(this);
				el.data("resizable-alsoresize", {
					width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
					left: parseInt(el.css('left'), 10), top: parseInt(el.css('top'), 10)
				});
			});
		};

		if (typeof(o.alsoResize) == 'object' &amp;&amp; !o.alsoResize.parentNode) {
			if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
			else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
		}else{
			_store(o.alsoResize);
		}
	},

	resize: function (event, ui) {
		var self = $(this).data("resizable"), o = self.options, os = self.originalSize, op = self.originalPosition;

		var delta = {
			height: (self.size.height - os.height) || 0, width: (self.size.width - os.width) || 0,
			top: (self.position.top - op.top) || 0, left: (self.position.left - op.left) || 0
		},

		_alsoResize = function (exp, c) {
			$(exp).each(function() {
				var el = $(this), start = $(this).data("resizable-alsoresize"), style = {}, 
					css = c &amp;&amp; c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];

				$.each(css, function (i, prop) {
					var sum = (start[prop]||0) + (delta[prop]||0);
					if (sum &amp;&amp; sum &gt;= 0)
						style[prop] = sum || null;
				});

				el.css(style);
			});
		};

		if (typeof(o.alsoResize) == 'object' &amp;&amp; !o.alsoResize.nodeType) {
			$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
		}else{
			_alsoResize(o.alsoResize);
		}
	},

	stop: function (event, ui) {
		$(this).removeData("resizable-alsoresize");
	}
});

$.ui.plugin.add("resizable", "animate", {

	stop: function(event, ui) {
		var self = $(this).data("resizable"), o = self.options;

		var pr = self._proportionallyResizeElements, ista = pr.length &amp;&amp; (/textarea/i).test(pr[0].nodeName),
					soffseth = ista &amp;&amp; $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : self.sizeDiff.height,
						soffsetw = ista ? 0 : self.sizeDiff.width;

		var style = { width: (self.size.width - soffsetw), height: (self.size.height - soffseth) },
					left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
						top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;

		self.element.animate(
			$.extend(style, top &amp;&amp; left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(self.element.css('width'), 10),
						height: parseInt(self.element.css('height'), 10),
						top: parseInt(self.element.css('top'), 10),
						left: parseInt(self.element.css('left'), 10)
					};

					if (pr &amp;&amp; pr.length) $(pr[0]).css({ width: data.width, height: data.height });

					// propagating resize, and updating values for each animation step
					self._updateCache(data);
					self._propagate("resize", event);

				}
			}
		);
	}

});

$.ui.plugin.add("resizable", "containment", {

	start: function(event, ui) {
		var self = $(this).data("resizable"), o = self.options, el = self.element;
		var oc = o.containment,	ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
		if (!ce) return;

		self.containerElement = $(ce);

		if (/document/.test(oc) || oc == document) {
			self.containerOffset = { left: 0, top: 0 };
			self.containerPosition = { left: 0, top: 0 };

			self.parentData = {
				element: $(document), left: 0, top: 0,
				width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
			};
		}

		// i'm a node, so compute top, left, right, bottom
		else {
			var element = $(ce), p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

			self.containerOffset = element.offset();
			self.containerPosition = element.position();
			self.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

			var co = self.containerOffset, ch = self.containerSize.height,	cw = self.containerSize.width,
						width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw ), height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

			self.parentData = {
				element: ce, left: co.left, top: co.top, width: width, height: height
			};
		}
	},

	resize: function(event, ui) {
		var self = $(this).data("resizable"), o = self.options,
				ps = self.containerSize, co = self.containerOffset, cs = self.size, cp = self.position,
				pRatio = self._aspectRatio || event.shiftKey, cop = { top:0, left:0 }, ce = self.containerElement;

		if (ce[0] != document &amp;&amp; (/static/).test(ce.css('position'))) cop = co;

		if (cp.left &lt; (self._helper ? co.left : 0)) {
			self.size.width = self.size.width + (self._helper ? (self.position.left - co.left) : (self.position.left - cop.left));
			if (pRatio) self.size.height = self.size.width / self.aspectRatio;
			self.position.left = o.helper ? co.left : 0;
		}

		if (cp.top &lt; (self._helper ? co.top : 0)) {
			self.size.height = self.size.height + (self._helper ? (self.position.top - co.top) : self.position.top);
			if (pRatio) self.size.width = self.size.height * self.aspectRatio;
			self.position.top = self._helper ? co.top : 0;
		}

		self.offset.left = self.parentData.left+self.position.left;
		self.offset.top = self.parentData.top+self.position.top;

		var woset = Math.abs( (self._helper ? self.offset.left - cop.left : (self.offset.left - cop.left)) + self.sizeDiff.width ),
					hoset = Math.abs( (self._helper ? self.offset.top - cop.top : (self.offset.top - co.top)) + self.sizeDiff.height );

		var isParent = self.containerElement.get(0) == self.element.parent().get(0),
		    isOffsetRelative = /relative|absolute/.test(self.containerElement.css('position'));

		if(isParent &amp;&amp; isOffsetRelative) woset -= self.parentData.left;

		if (woset + self.size.width &gt;= self.parentData.width) {
			self.size.width = self.parentData.width - woset;
			if (pRatio) self.size.height = self.size.width / self.aspectRatio;
		}

		if (hoset + self.size.height &gt;= self.parentData.height) {
			self.size.height = self.parentData.height - hoset;
			if (pRatio) self.size.width = self.size.height * self.aspectRatio;
		}
	},

	stop: function(event, ui){
		var self = $(this).data("resizable"), o = self.options, cp = self.position,
				co = self.containerOffset, cop = self.containerPosition, ce = self.containerElement;

		var helper = $(self.helper), ho = helper.offset(), w = helper.outerWidth() - self.sizeDiff.width, h = helper.outerHeight() - self.sizeDiff.height;

		if (self._helper &amp;&amp; !o.animate &amp;&amp; (/relative/).test(ce.css('position')))
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });

		if (self._helper &amp;&amp; !o.animate &amp;&amp; (/static/).test(ce.css('position')))
			$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });

	}
});

$.ui.plugin.add("resizable", "ghost", {

	start: function(event, ui) {

		var self = $(this).data("resizable"), o = self.options, cs = self.size;

		self.ghost = self.originalElement.clone();
		self.ghost
			.css({ opacity: .25, display: 'block', position: 'relative', height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
			.addClass('ui-resizable-ghost')
			.addClass(typeof o.ghost == 'string' ? o.ghost : '');

		self.ghost.appendTo(self.helper);

	},

	resize: function(event, ui){
		var self = $(this).data("resizable"), o = self.options;
		if (self.ghost) self.ghost.css({ position: 'relative', height: self.size.height, width: self.size.width });
	},

	stop: function(event, ui){
		var self = $(this).data("resizable"), o = self.options;
		if (self.ghost &amp;&amp; self.helper) self.helper.get(0).removeChild(self.ghost.get(0));
	}

});

$.ui.plugin.add("resizable", "grid", {

	resize: function(event, ui) {
		var self = $(this).data("resizable"), o = self.options, cs = self.size, os = self.originalSize, op = self.originalPosition, a = self.axis, ratio = o._aspectRatio || event.shiftKey;
		o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
		var ox = Math.round((cs.width - os.width) / (o.grid[0]||1)) * (o.grid[0]||1), oy = Math.round((cs.height - os.height) / (o.grid[1]||1)) * (o.grid[1]||1);

		if (/^(se|s|e)$/.test(a)) {
			self.size.width = os.width + ox;
			self.size.height = os.height + oy;
		}
		else if (/^(ne)$/.test(a)) {
			self.size.width = os.width + ox;
			self.size.height = os.height + oy;
			self.position.top = op.top - oy;
		}
		else if (/^(sw)$/.test(a)) {
			self.size.width = os.width + ox;
			self.size.height = os.height + oy;
			self.position.left = op.left - ox;
		}
		else {
			self.size.width = os.width + ox;
			self.size.height = os.height + oy;
			self.position.top = op.top - oy;
			self.position.left = op.left - ox;
		}
	}

});

var num = function(v) {
	return parseInt(v, 10) || 0;
};

var isNumber = function(value) {
	return !isNaN(parseInt(value, 10));
};

})(jQuery);

(function( $, undefined ) {

$.widget("ui.selectable", $.ui.mouse, {
	options: {
		appendTo: 'body',
		autoRefresh: true,
		distance: 0,
		filter: '*',
		tolerance: 'touch'
	},
	_create: function() {
		var self = this;

		this.element.addClass("ui-selectable");

		this.dragged = false;

		// cache selectee children based on filter
		var selectees;
		this.refresh = function() {
			selectees = $(self.options.filter, self.element[0]);
			selectees.addClass("ui-selectee");
			selectees.each(function() {
				var $this = $(this);
				var pos = $this.offset();
				$.data(this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass('ui-selected'),
					selecting: $this.hasClass('ui-selecting'),
					unselecting: $this.hasClass('ui-unselecting')
				});
			});
		};
		this.refresh();

		this.selectees = selectees.addClass("ui-selectee");

		this._mouseInit();

		this.helper = $("&lt;div class='ui-selectable-helper'&gt;&lt;/div&gt;");
	},

	destroy: function() {
		this.selectees
			.removeClass("ui-selectee")
			.removeData("selectable-item");
		this.element
			.removeClass("ui-selectable ui-selectable-disabled")
			.removeData("selectable")
			.unbind(".selectable");
		this._mouseDestroy();

		return this;
	},

	_mouseStart: function(event) {
		var self = this;

		this.opos = [event.pageX, event.pageY];

		if (this.options.disabled)
			return;

		var options = this.options;

		this.selectees = $(options.filter, this.element[0]);

		this._trigger("start", event);

		$(options.appendTo).append(this.helper);
		// position helper (lasso)
		this.helper.css({
			"left": event.clientX,
			"top": event.clientY,
			"width": 0,
			"height": 0
		});

		if (options.autoRefresh) {
			this.refresh();
		}

		this.selectees.filter('.ui-selected').each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.startselected = true;
			if (!event.metaKey &amp;&amp; !event.ctrlKey) {
				selectee.$element.removeClass('ui-selected');
				selectee.selected = false;
				selectee.$element.addClass('ui-unselecting');
				selectee.unselecting = true;
				// selectable UNSELECTING callback
				self._trigger("unselecting", event, {
					unselecting: selectee.element
				});
			}
		});

		$(event.target).parents().andSelf().each(function() {
			var selectee = $.data(this, "selectable-item");
			if (selectee) {
				var doSelect = (!event.metaKey &amp;&amp; !event.ctrlKey) || !selectee.$element.hasClass('ui-selected');
				selectee.$element
					.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
					.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;
				// selectable (UN)SELECTING callback
				if (doSelect) {
					self._trigger("selecting", event, {
						selecting: selectee.element
					});
				} else {
					self._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
				return false;
			}
		});

	},

	_mouseDrag: function(event) {
		var self = this;
		this.dragged = true;

		if (this.options.disabled)
			return;

		var options = this.options;

		var x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
		if (x1 &gt; x2) { var tmp = x2; x2 = x1; x1 = tmp; }
		if (y1 &gt; y2) { var tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

		this.selectees.each(function() {
			var selectee = $.data(this, "selectable-item");
			//prevent helper from being selected if appendTo: selectable
			if (!selectee || selectee.element == self.element[0])
				return;
			var hit = false;
			if (options.tolerance == 'touch') {
				hit = ( !(selectee.left &gt; x2 || selectee.right &lt; x1 || selectee.top &gt; y2 || selectee.bottom &lt; y1) );
			} else if (options.tolerance == 'fit') {
				hit = (selectee.left &gt; x1 &amp;&amp; selectee.right &lt; x2 &amp;&amp; selectee.top &gt; y1 &amp;&amp; selectee.bottom &lt; y2);
			}

			if (hit) {
				// SELECT
				if (selectee.selected) {
					selectee.$element.removeClass('ui-selected');
					selectee.selected = false;
				}
				if (selectee.unselecting) {
					selectee.$element.removeClass('ui-unselecting');
					selectee.unselecting = false;
				}
				if (!selectee.selecting) {
					selectee.$element.addClass('ui-selecting');
					selectee.selecting = true;
					// selectable SELECTING callback
					self._trigger("selecting", event, {
						selecting: selectee.element
					});
				}
			} else {
				// UNSELECT
				if (selectee.selecting) {
					if ((event.metaKey || event.ctrlKey) &amp;&amp; selectee.startselected) {
						selectee.$element.removeClass('ui-selecting');
						selectee.selecting = false;
						selectee.$element.addClass('ui-selected');
						selectee.selected = true;
					} else {
						selectee.$element.removeClass('ui-selecting');
						selectee.selecting = false;
						if (selectee.startselected) {
							selectee.$element.addClass('ui-unselecting');
							selectee.unselecting = true;
						}
						// selectable UNSELECTING callback
						self._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
				if (selectee.selected) {
					if (!event.metaKey &amp;&amp; !event.ctrlKey &amp;&amp; !selectee.startselected) {
						selectee.$element.removeClass('ui-selected');
						selectee.selected = false;

						selectee.$element.addClass('ui-unselecting');
						selectee.unselecting = true;
						// selectable UNSELECTING callback
						self._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
			}
		});

		return false;
	},

	_mouseStop: function(event) {
		var self = this;

		this.dragged = false;

		var options = this.options;

		$('.ui-unselecting', this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass('ui-unselecting');
			selectee.unselecting = false;
			selectee.startselected = false;
			self._trigger("unselected", event, {
				unselected: selectee.element
			});
		});
		$('.ui-selecting', this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass('ui-selecting').addClass('ui-selected');
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			self._trigger("selected", event, {
				selected: selectee.element
			});
		});
		this._trigger("stop", event);

		this.helper.remove();

		return false;
	}

});

$.extend($.ui.selectable, {
	version: "1.8.24"
});

})(jQuery);

(function( $, undefined ) {

$.widget("ui.sortable", $.ui.mouse, {
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: 'auto',
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: '&gt; *',
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000
	},
	_create: function() {

		var o = this.options;
		this.containerCache = {};
		this.element.addClass("ui-sortable");

		//Get the items
		this.refresh();

		//Let's determine if the items are being displayed horizontally
		this.floating = this.items.length ? o.axis === 'x' || (/left|right/).test(this.items[0].item.css('float')) || (/inline|table-cell/).test(this.items[0].item.css('display')) : false;

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();
		
		//We're ready to go
		this.ready = true

	},

	destroy: function() {
		$.Widget.prototype.destroy.call( this );
		this.element
			.removeClass("ui-sortable ui-sortable-disabled");
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i &gt;= 0; i-- )
			this.items[i].item.removeData(this.widgetName + "-item");

		return this;
	},

	_setOption: function(key, value){
		if ( key === "disabled" ) {
			this.options[ key ] = value;
	
			this.widget()
				[ value ? "addClass" : "removeClass"]( "ui-sortable-disabled" );
		} else {
			// Don't call widget base _setOption for disable as it adds ui-state-disabled class
			$.Widget.prototype._setOption.apply(this, arguments);
		}
	},

	_mouseCapture: function(event, overrideHandle) {
		var that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type == 'static') return false;

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		var currentItem = null, self = this, nodes = $(event.target).parents().each(function() {
			if($.data(this, that.widgetName + '-item') == self) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.widgetName + '-item') == self) currentItem = $(event.target);

		if(!currentItem) return false;
		if(this.options.handle &amp;&amp; !overrideHandle) {
			var validHandle = false;

			$(this.options.handle, currentItem).find("*").andSelf().each(function() { if(this == event.target) validHandle = true; });
			if(!validHandle) return false;
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var o = this.options, self = this;
		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");
		
		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
		(o.cursorAt &amp;&amp; this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] != this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment)
			this._setContainment();

		if(o.cursor) { // cursor option
			if ($('body').css("cursor")) this._storedCursor = $('body').css("cursor");
			$('body').css("cursor", o.cursor);
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity");
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex");
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] != document &amp;&amp; this.scrollParent[0].tagName != 'HTML')
			this.overflowOffset = this.scrollParent.offset();

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions)
			this._cacheHelperProportions();


		//Post 'activate' events to possible containers
		if(!noActivation) {
			 for (var i = this.containers.length - 1; i &gt;= 0; i--) { this.containers[i]._trigger("activate", event, self._uiHash(this)); }
		}

		//Prepare possible droppables
		if($.ui.ddmanager)
			$.ui.ddmanager.current = this;

		if ($.ui.ddmanager &amp;&amp; !o.dropBehaviour)
			$.ui.ddmanager.prepareOffsets(this, event);

		this.dragging = true;

		this.helper.addClass("ui-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			var o = this.options, scrolled = false;
			if(this.scrollParent[0] != document &amp;&amp; this.scrollParent[0].tagName != 'HTML') {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY &lt; o.scrollSensitivity)
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				else if(event.pageY - this.overflowOffset.top &lt; o.scrollSensitivity)
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX &lt; o.scrollSensitivity)
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				else if(event.pageX - this.overflowOffset.left &lt; o.scrollSensitivity)
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;

			} else {

				if(event.pageY - $(document).scrollTop() &lt; o.scrollSensitivity)
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				else if($(window).height() - (event.pageY - $(document).scrollTop()) &lt; o.scrollSensitivity)
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);

				if(event.pageX - $(document).scrollLeft() &lt; o.scrollSensitivity)
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				else if($(window).width() - (event.pageX - $(document).scrollLeft()) &lt; o.scrollSensitivity)
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);

			}

			if(scrolled !== false &amp;&amp; $.ui.ddmanager &amp;&amp; !o.dropBehaviour)
				$.ui.ddmanager.prepareOffsets(this, event);
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';
		if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';

		//Rearrange
		for (var i = this.items.length - 1; i &gt;= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			var item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item);
			if (!intersection) continue;

			// Only put the placeholder inside the current Container, skip all
			// items form other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this moving items in "sub-sortables" can cause the placeholder to jitter
			// beetween the outer and inner container.
			if (item.instance !== this.currentContainer) continue;

			if (itemElement != this.currentItem[0] //cannot intersect with itself
				&amp;&amp;	this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement //no useless actions that have been done before
				&amp;&amp;	!$.ui.contains(this.placeholder[0], itemElement) //no action if the item moved is the parent of the item checked
				&amp;&amp; (this.options.type == 'semi-dynamic' ? !$.ui.contains(this.element[0], itemElement) : true)
				//&amp;&amp; itemElement.parentNode == this.placeholder[0].parentNode // only rearrange items within the same container
			) {

				this.direction = intersection == 1 ? "down" : "up";

				if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

		//Call callbacks
		this._trigger('sort', event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) return;

		//If we are using droppables, inform the manager about the drop
		if ($.ui.ddmanager &amp;&amp; !this.options.dropBehaviour)
			$.ui.ddmanager.drop(this, event);

		if(this.options.revert) {
			var self = this;
			var cur = self.placeholder.offset();

			self.reverting = true;

			$(this.helper).animate({
				left: cur.left - this.offset.parent.left - self.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
				top: cur.top - this.offset.parent.top - self.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
			}, parseInt(this.options.revert, 10) || 500, function() {
				self._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		var self = this;

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper == "original")
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			else
				this.currentItem.show();

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i &gt;= 0; i--){
				this.containers[i]._trigger("deactivate", null, self._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, self._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			if(this.options.helper != "original" &amp;&amp; this.helper &amp;&amp; this.helper[0].parentNode) this.helper.remove();

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o &amp;&amp; o.connected);
		var str = []; o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
			if(res) str.push((o.key || res[1]+'[]')+'='+(o.key &amp;&amp; o.expression ? res[1] : res[2]));
		});

		if(!str.length &amp;&amp; o.key) {
			str.push(o.key + '=');
		}

		return str.join('&amp;');

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o &amp;&amp; o.connected);
		var ret = []; o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || 'id') || ''); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height;

		var l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height;

		var dyClick = this.offset.click.top,
			dxClick = this.offset.click.left;

		var isOverElement = (y1 + dyClick) &gt; t &amp;&amp; (y1 + dyClick) &lt; b &amp;&amp; (x1 + dxClick) &gt; l &amp;&amp; (x1 + dxClick) &lt; r;

		if(	   this.options.tolerance == "pointer"
			|| this.options.forcePointerForContainers
			|| (this.options.tolerance != "pointer" &amp;&amp; this.helperProportions[this.floating ? 'width' : 'height'] &gt; item[this.floating ? 'width' : 'height'])
		) {
			return isOverElement;
		} else {

			return (l &lt; x1 + (this.helperProportions.width / 2) // Right Half
				&amp;&amp; x2 - (this.helperProportions.width / 2) &lt; r // Left Half
				&amp;&amp; t &lt; y1 + (this.helperProportions.height / 2) // Bottom Half
				&amp;&amp; y2 - (this.helperProportions.height / 2) &lt; b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === 'x') || $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === 'y') || $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight &amp;&amp; isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement)
			return false;

		return this.floating ?
			( ((horizontalDirection &amp;&amp; horizontalDirection == "right") || verticalDirection == "down") ? 2 : 1 )
			: ( verticalDirection &amp;&amp; (verticalDirection == "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating &amp;&amp; horizontalDirection) {
			return ((horizontalDirection == "right" &amp;&amp; isOverRightHalf) || (horizontalDirection == "left" &amp;&amp; !isOverRightHalf));
		} else {
			return verticalDirection &amp;&amp; ((verticalDirection == "down" &amp;&amp; isOverBottomHalf) || (verticalDirection == "up" &amp;&amp; !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta != 0 &amp;&amp; (delta &gt; 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta != 0 &amp;&amp; (delta &gt; 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor == String
			? [options.connectWith]
			: options.connectWith;
	},
	
	_getItemsAsjQuery: function(connected) {

		var self = this;
		var items = [];
		var queries = [];
		var connectWith = this._connectWith();

		if(connectWith &amp;&amp; connected) {
			for (var i = connectWith.length - 1; i &gt;= 0; i--){
				var cur = $(connectWith[i]);
				for (var j = cur.length - 1; j &gt;= 0; j--){
					var inst = $.data(cur[j], this.widgetName);
					if(inst &amp;&amp; inst != this &amp;&amp; !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), inst]);
					}
				};
			};
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), this]);

		for (var i = queries.length - 1; i &gt;= 0; i--){
			queries[i][0].each(function() {
				items.push(this);
			});
		};

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

		for (var i=0; i &lt; this.items.length; i++) {

			for (var j=0; j &lt; list.length; j++) {
				if(list[j] == this.items[i].item[0])
					this.items.splice(i,1);
			};

		};

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];
		var items = this.items;
		var self = this;
		var queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]];
		var connectWith = this._connectWith();

		if(connectWith &amp;&amp; this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (var i = connectWith.length - 1; i &gt;= 0; i--){
				var cur = $(connectWith[i]);
				for (var j = cur.length - 1; j &gt;= 0; j--){
					var inst = $.data(cur[j], this.widgetName);
					if(inst &amp;&amp; inst != this &amp;&amp; !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				};
			};
		}

		for (var i = queries.length - 1; i &gt;= 0; i--) {
			var targetData = queries[i][1];
			var _queries = queries[i][0];

			for (var j=0, queriesLength = _queries.length; j &lt; queriesLength; j++) {
				var item = $(_queries[j]);

				item.data(this.widgetName + '-item', targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			};
		};

	},

	refreshPositions: function(fast) {

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent &amp;&amp; this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		for (var i = this.items.length - 1; i &gt;= 0; i--){
			var item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance != this.currentContainer &amp;&amp; this.currentContainer &amp;&amp; item.item[0] != this.currentItem[0])
				continue;

			var t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			var p = t.offset();
			item.left = p.left;
			item.top = p.top;
		};

		if(this.options.custom &amp;&amp; this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (var i = this.containers.length - 1; i &gt;= 0; i--){
				var p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			};
		}

		return this;
	},

	_createPlaceholder: function(that) {

		var self = that || this, o = self.options;

		if(!o.placeholder || o.placeholder.constructor == String) {
			var className = o.placeholder;
			o.placeholder = {
				element: function() {

					var el = $(document.createElement(self.currentItem[0].nodeName))
						.addClass(className || self.currentItem[0].className+" ui-sortable-placeholder")
						.removeClass("ui-sortable-helper")[0];

					if(!className)
						el.style.visibility = "hidden";

					return el;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className &amp;&amp; !o.forcePlaceholderSize) return;

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop')||0, 10) - parseInt(self.currentItem.css('paddingBottom')||0, 10)); };
					if(!p.width()) { p.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft')||0, 10) - parseInt(self.currentItem.css('paddingRight')||0, 10)); };
				}
			};
		}

		//Create the placeholder
		self.placeholder = $(o.placeholder.element.call(self.element, self.currentItem));

		//Append it after the actual current item
		self.currentItem.after(self.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(self, self.placeholder);

	},

	_contactContainers: function(event) {
		
		// get innermost container that intersects with item 
		var innermostContainer = null, innermostIndex = null;		
		
		
		for (var i = this.containers.length - 1; i &gt;= 0; i--){

			// never consider a container that's located within the item itself 
			if($.ui.contains(this.currentItem[0], this.containers[i].element[0]))
				continue;

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue 
				if(innermostContainer &amp;&amp; $.ui.contains(this.containers[i].element[0], innermostContainer.element[0]))
					continue;

				innermostContainer = this.containers[i]; 
				innermostIndex = i;
					
			} else {
				// container doesn't intersect. trigger "out" event if necessary 
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}
		
		// if no intersecting containers found, return 
		if(!innermostContainer) return; 

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		} else if(this.currentContainer != this.containers[innermostIndex]) {

			//When entering a new container, we will find the item with the least distance and append our item near it
			var dist = 10000; var itemWithLeastDistance = null; var base = this.positionAbs[this.containers[innermostIndex].floating ? 'left' : 'top'];
			for (var j = this.items.length - 1; j &gt;= 0; j--) {
				if(!$.ui.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) continue;
				var cur = this.containers[innermostIndex].floating ? this.items[j].item.offset().left : this.items[j].item.offset().top;
				if(Math.abs(cur - base) &lt; dist) {
					dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
					this.direction = (cur - base &gt; 0) ? 'down' : 'up';
				}
			}

			if(!itemWithLeastDistance &amp;&amp; !this.options.dropOnEmpty) //Check if dropOnEmpty is enabled
				return;

			this.currentContainer = this.containers[innermostIndex];
			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		} 
	
		
	},

	_createHelper: function(event) {

		var o = this.options;
		var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper == 'clone' ? this.currentItem.clone() : this.currentItem);

		if(!helper.parents('body').length) //Add the helper to the DOM if that didn't happen already
			$(o.appendTo != 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);

		if(helper[0] == this.currentItem[0])
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };

		if(helper[0].style.width == '' || o.forceHelperSize) helper.width(this.currentItem.width());
		if(helper[0].style.height == '' || o.forceHelperSize) helper.height(this.currentItem.height());

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj == 'string') {
			obj = obj.split(' ');
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ('left' in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ('right' in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ('top' in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ('bottom' in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition == 'absolute' &amp;&amp; this.scrollParent[0] != document &amp;&amp; $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
		|| (this.offsetParent[0].tagName &amp;&amp; this.offsetParent[0].tagName.toLowerCase() == 'html' &amp;&amp; $.browser.msie)) //Ugly IE fix
			po = { top: 0, left: 0 };

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition == "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var o = this.options;
		if(o.containment == 'parent') o.containment = this.helper[0].parentNode;
		if(o.containment == 'document' || o.containment == 'window') this.containment = [
			0 - this.offset.relative.left - this.offset.parent.left,
			0 - this.offset.relative.top - this.offset.parent.top,
			$(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
			($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
		];

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			var ce = $(o.containment)[0];
			var co = $(o.containment).offset();
			var over = ($(ce).css("overflow") != 'hidden');

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) pos = this.position;
		var mod = d == "absolute" ? 1 : -1;
		var o = this.options, scroll = this.cssPosition == 'absolute' &amp;&amp; !(this.scrollParent[0] != document &amp;&amp; $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top																	// The absolute mouse position
				+ this.offset.relative.top * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.top * mod											// The offsetParent's offset without borders (offset + border)
				- ($.browser.safari &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left																// The absolute mouse position
				+ this.offset.relative.left * mod										// Only for relative positioned nodes: Relative offset from element to offset parent
				+ this.offset.parent.left * mod											// The offsetParent's offset without borders (offset + border)
				- ($.browser.safari &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var o = this.options, scroll = this.cssPosition == 'absolute' &amp;&amp; !(this.scrollParent[0] != document &amp;&amp; $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition == 'relative' &amp;&amp; !(this.scrollParent[0] != document &amp;&amp; this.scrollParent[0] != this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		var pageX = event.pageX;
		var pageY = event.pageY;

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left &lt; this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
				if(event.pageY - this.offset.click.top &lt; this.containment[1]) pageY = this.containment[1] + this.offset.click.top;
				if(event.pageX - this.offset.click.left &gt; this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
				if(event.pageY - this.offset.click.top &gt; this.containment[3]) pageY = this.containment[3] + this.offset.click.top;
			}

			if(o.grid) {
				var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? (!(top - this.offset.click.top &lt; this.containment[1] || top - this.offset.click.top &gt; this.containment[3]) ? top : (!(top - this.offset.click.top &lt; this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? (!(left - this.offset.click.left &lt; this.containment[0] || left - this.offset.click.left &gt; this.containment[2]) ? left : (!(left - this.offset.click.left &lt; this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY																// The absolute mouse position
				- this.offset.click.top													// Click offset (relative to the element)
				- this.offset.relative.top												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.top												// The offsetParent's offset without borders (offset + border)
				+ ($.browser.safari &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX																// The absolute mouse position
				- this.offset.click.left												// Click offset (relative to the element)
				- this.offset.relative.left												// Only for relative positioned nodes: Relative offset from element to offset parent
				- this.offset.parent.left												// The offsetParent's offset without borders (offset + border)
				+ ($.browser.safari &amp;&amp; this.cssPosition == 'fixed' ? 0 : ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == 'down' ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var self = this, counter = this.counter;

		window.setTimeout(function() {
			if(counter == self.counter) self.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
		},0);

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var delayedTriggers = [], self = this;

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort &amp;&amp; this.currentItem.parent().length) this.placeholder.before(this.currentItem);
		this._noFinalSort = null;

		if(this.helper[0] == this.currentItem[0]) {
			for(var i in this._storedCSS) {
				if(this._storedCSS[i] == 'auto' || this._storedCSS[i] == 'static') this._storedCSS[i] = '';
			}
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside &amp;&amp; !noPropagation) delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		if((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) &amp;&amp; !noPropagation) delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}

		//Post events to containers
		for (var i = this.containers.length - 1; i &gt;= 0; i--){
			if(!noPropagation) delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if(this._storedCursor) $('body').css("cursor", this._storedCursor); //Reset cursor
		if(this._storedOpacity) this.helper.css("opacity", this._storedOpacity); //Reset opacity
		if(this._storedZIndex) this.helper.css("zIndex", this._storedZIndex == 'auto' ? '' : this._storedZIndex); //Reset z-index

		this.dragging = false;
		if(this.cancelHelperRemoval) {
			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
				for (var i=0; i &lt; delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }; //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return false;
		}

		if(!noPropagation) this._trigger("beforeStop", event, this._uiHash());

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if(this.helper[0] != this.currentItem[0]) this.helper.remove(); this.helper = null;

		if(!noPropagation) {
			for (var i=0; i &lt; delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }; //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return true;

	},

	_trigger: function() {
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(inst) {
		var self = inst || this;
		return {
			helper: self.helper,
			placeholder: self.placeholder || $([]),
			position: self.position,
			originalPosition: self.originalPosition,
			offset: self.positionAbs,
			item: self.currentItem,
			sender: inst ? inst.element : null
		};
	}

});

$.extend($.ui.sortable, {
	version: "1.8.24"
});

})(jQuery);

;jQuery.effects || (function($, undefined) {

$.effects = {};



/******************************************************************************/
/****************************** COLOR ANIMATIONS ******************************/
/******************************************************************************/

// override the animation for color styles
$.each(['backgroundColor', 'borderBottomColor', 'borderLeftColor',
	'borderRightColor', 'borderTopColor', 'borderColor', 'color', 'outlineColor'],
function(i, attr) {
	$.fx.step[attr] = function(fx) {
		if (!fx.colorInit) {
			fx.start = getColor(fx.elem, attr);
			fx.end = getRGB(fx.end);
			fx.colorInit = true;
		}

		fx.elem.style[attr] = 'rgb(' +
			Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 255), 0) + ',' +
			Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 255), 0) + ',' +
			Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 255), 0) + ')';
	};
});

// Color Conversion functions from highlightFade
// By Blair Mitchelmore
// http://jquery.offput.ca/highlightFade/

// Parse strings looking for color tuples [255,255,255]
function getRGB(color) {
		var result;

		// Check if we're already dealing with an array of colors
		if ( color &amp;&amp; color.constructor == Array &amp;&amp; color.length == 3 )
				return color;

		// Look for rgb(num,num,num)
		if (result = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color))
				return [parseInt(result[1],10), parseInt(result[2],10), parseInt(result[3],10)];

		// Look for rgb(num%,num%,num%)
		if (result = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(color))
				return [parseFloat(result[1])*2.55, parseFloat(result[2])*2.55, parseFloat(result[3])*2.55];

		// Look for #a0b1c2
		if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color))
				return [parseInt(result[1],16), parseInt(result[2],16), parseInt(result[3],16)];

		// Look for #fff
		if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color))
				return [parseInt(result[1]+result[1],16), parseInt(result[2]+result[2],16), parseInt(result[3]+result[3],16)];

		// Look for rgba(0, 0, 0, 0) == transparent in Safari 3
		if (result = /rgba\(0, 0, 0, 0\)/.exec(color))
				return colors['transparent'];

		// Otherwise, we're most likely dealing with a named color
		return colors[$.trim(color).toLowerCase()];
}

function getColor(elem, attr) {
		var color;

		do {
				// jQuery &lt;1.4.3 uses curCSS, in 1.4.3 - 1.7.2 curCSS = css, 1.8+ only has css
				color = ($.curCSS || $.css)(elem, attr);

				// Keep going until we find an element that has color, or we hit the body
				if ( color != '' &amp;&amp; color != 'transparent' || $.nodeName(elem, "body") )
						break;

				attr = "backgroundColor";
		} while ( elem = elem.parentNode );

		return getRGB(color);
};

// Some named colors to work with
// From Interface by Stefan Petre
// http://interface.eyecon.ro/

var colors = {
	aqua:[0,255,255],
	azure:[240,255,255],
	beige:[245,245,220],
	black:[0,0,0],
	blue:[0,0,255],
	brown:[165,42,42],
	cyan:[0,255,255],
	darkblue:[0,0,139],
	darkcyan:[0,139,139],
	darkgrey:[169,169,169],
	darkgreen:[0,100,0],
	darkkhaki:[189,183,107],
	darkmagenta:[139,0,139],
	darkolivegreen:[85,107,47],
	darkorange:[255,140,0],
	darkorchid:[153,50,204],
	darkred:[139,0,0],
	darksalmon:[233,150,122],
	darkviolet:[148,0,211],
	fuchsia:[255,0,255],
	gold:[255,215,0],
	green:[0,128,0],
	indigo:[75,0,130],
	khaki:[240,230,140],
	lightblue:[173,216,230],
	lightcyan:[224,255,255],
	lightgreen:[144,238,144],
	lightgrey:[211,211,211],
	lightpink:[255,182,193],
	lightyellow:[255,255,224],
	lime:[0,255,0],
	magenta:[255,0,255],
	maroon:[128,0,0],
	navy:[0,0,128],
	olive:[128,128,0],
	orange:[255,165,0],
	pink:[255,192,203],
	purple:[128,0,128],
	violet:[128,0,128],
	red:[255,0,0],
	silver:[192,192,192],
	white:[255,255,255],
	yellow:[255,255,0],
	transparent: [255,255,255]
};



/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/

var classAnimationActions = ['add', 'remove', 'toggle'],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

function getElementStyles() {
	var style = document.defaultView
			? document.defaultView.getComputedStyle(this, null)
			: this.currentStyle,
		newStyle = {},
		key,
		camelCase;

	// webkit enumerates style porperties
	if (style &amp;&amp; style.length &amp;&amp; style[0] &amp;&amp; style[style[0]]) {
		var len = style.length;
		while (len--) {
			key = style[len];
			if (typeof style[key] == 'string') {
				camelCase = key.replace(/\-(\w)/g, function(all, letter){
					return letter.toUpperCase();
				});
				newStyle[camelCase] = style[key];
			}
		}
	} else {
		for (key in style) {
			if (typeof style[key] === 'string') {
				newStyle[key] = style[key];
			}
		}
	}
	
	return newStyle;
}

function filterStyles(styles) {
	var name, value;
	for (name in styles) {
		value = styles[name];
		if (
			// ignore null and undefined values
			value == null ||
			// ignore functions (when does this occur?)
			$.isFunction(value) ||
			// shorthand styles that need to be expanded
			name in shorthandStyles ||
			// ignore scrollbars (break in IE)
			(/scrollbar/).test(name) ||

			// only colors or values that can be converted to numbers
			(!(/color/i).test(name) &amp;&amp; isNaN(parseFloat(value)))
		) {
			delete styles[name];
		}
	}
	
	return styles;
}

function styleDifference(oldStyle, newStyle) {
	var diff = { _: 0 }, // http://dev.jquery.com/ticket/5459
		name;

	for (name in newStyle) {
		if (oldStyle[name] != newStyle[name]) {
			diff[name] = newStyle[name];
		}
	}

	return diff;
}

$.effects.animateClass = function(value, duration, easing, callback) {
	if ($.isFunction(easing)) {
		callback = easing;
		easing = null;
	}

	return this.queue(function() {
		var that = $(this),
			originalStyleAttr = that.attr('style') || ' ',
			originalStyle = filterStyles(getElementStyles.call(this)),
			newStyle,
			className = that.attr('class') || "";

		$.each(classAnimationActions, function(i, action) {
			if (value[action]) {
				that[action + 'Class'](value[action]);
			}
		});
		newStyle = filterStyles(getElementStyles.call(this));
		that.attr('class', className);

		that.animate(styleDifference(originalStyle, newStyle), {
			queue: false,
			duration: duration,
			easing: easing,
			complete: function() {
				$.each(classAnimationActions, function(i, action) {
					if (value[action]) { that[action + 'Class'](value[action]); }
				});
				// work around bug in IE by clearing the cssText before setting it
				if (typeof that.attr('style') == 'object') {
					that.attr('style').cssText = '';
					that.attr('style').cssText = originalStyleAttr;
				} else {
					that.attr('style', originalStyleAttr);
				}
				if (callback) { callback.apply(this, arguments); }
				$.dequeue( this );
			}
		});
	});
};

$.fn.extend({
	_addClass: $.fn.addClass,
	addClass: function(classNames, speed, easing, callback) {
		return speed ? $.effects.animateClass.apply(this, [{ add: classNames },speed,easing,callback]) : this._addClass(classNames);
	},

	_removeClass: $.fn.removeClass,
	removeClass: function(classNames,speed,easing,callback) {
		return speed ? $.effects.animateClass.apply(this, [{ remove: classNames },speed,easing,callback]) : this._removeClass(classNames);
	},

	_toggleClass: $.fn.toggleClass,
	toggleClass: function(classNames, force, speed, easing, callback) {
		if ( typeof force == "boolean" || force === undefined ) {
			if ( !speed ) {
				// without speed parameter;
				return this._toggleClass(classNames, force);
			} else {
				return $.effects.animateClass.apply(this, [(force?{add:classNames}:{remove:classNames}),speed,easing,callback]);
			}
		} else {
			// without switch parameter;
			return $.effects.animateClass.apply(this, [{ toggle: classNames },force,speed,easing]);
		}
	},

	switchClass: function(remove,add,speed,easing,callback) {
		return $.effects.animateClass.apply(this, [{ add: add, remove: remove },speed,easing,callback]);
	}
});



/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

$.extend($.effects, {
	version: "1.8.24",

	// Saves a set of properties in a data storage
	save: function(element, set) {
		for(var i=0; i &lt; set.length; i++) {
			if(set[i] !== null) element.data("ec.storage."+set[i], element[0].style[set[i]]);
		}
	},

	// Restores a set of previously saved properties from a data storage
	restore: function(element, set) {
		for(var i=0; i &lt; set.length; i++) {
			if(set[i] !== null) element.css(set[i], element.data("ec.storage."+set[i]));
		}
	},

	setMode: function(el, mode) {
		if (mode == 'toggle') mode = el.is(':hidden') ? 'show' : 'hide'; // Set for toggle
		return mode;
	},

	getBaseline: function(origin, original) { // Translates a [top,left] array into a baseline value
		// this should be a little more flexible in the future to handle a string &amp; hash
		var y, x;
		switch (origin[0]) {
			case 'top': y = 0; break;
			case 'middle': y = 0.5; break;
			case 'bottom': y = 1; break;
			default: y = origin[0] / original.height;
		};
		switch (origin[1]) {
			case 'left': x = 0; break;
			case 'center': x = 0.5; break;
			case 'right': x = 1; break;
			default: x = origin[1] / original.width;
		};
		return {x: x, y: y};
	},

	// Wraps the element around a wrapper that copies position properties
	createWrapper: function(element) {

		// if the element is already wrapped, return it
		if (element.parent().is('.ui-effects-wrapper')) {
			return element.parent();
		}

		// wrap the element
		var props = {
				width: element.outerWidth(true),
				height: element.outerHeight(true),
				'float': element.css('float')
			},
			wrapper = $('&lt;div&gt;&lt;/div&gt;')
				.addClass('ui-effects-wrapper')
				.css({
					fontSize: '100%',
					background: 'transparent',
					border: 'none',
					margin: 0,
					padding: 0
				}),
			active = document.activeElement;

		// support: Firefox
		// Firefox incorrectly exposes anonymous content
		// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
		try {
			active.id;
		} catch( e ) {
			active = document.body;
		}

		element.wrap( wrapper );

		// Fixes #7595 - Elements lose focus when wrapped.
		if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
			$( active ).focus();
		}
		
		wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually loose the reference to the wrapped element

		// transfer positioning properties to the wrapper
		if (element.css('position') == 'static') {
			wrapper.css({ position: 'relative' });
			element.css({ position: 'relative' });
		} else {
			$.extend(props, {
				position: element.css('position'),
				zIndex: element.css('z-index')
			});
			$.each(['top', 'left', 'bottom', 'right'], function(i, pos) {
				props[pos] = element.css(pos);
				if (isNaN(parseInt(props[pos], 10))) {
					props[pos] = 'auto';
				}
			});
			element.css({position: 'relative', top: 0, left: 0, right: 'auto', bottom: 'auto' });
		}

		return wrapper.css(props).show();
	},

	removeWrapper: function(element) {
		var parent,
			active = document.activeElement;
		
		if (element.parent().is('.ui-effects-wrapper')) {
			parent = element.parent().replaceWith(element);
			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}
			return parent;
		}
			
		return element;
	},

	setTransition: function(element, list, factor, value) {
		value = value || {};
		$.each(list, function(i, x){
			var unit = element.cssUnit(x);
			if (unit[0] &gt; 0) value[x] = unit[0] * factor + unit[1];
		});
		return value;
	}
});


function _normalizeArguments(effect, options, speed, callback) {
	// shift params for method overloading
	if (typeof effect == 'object') {
		callback = options;
		speed = null;
		options = effect;
		effect = options.effect;
	}
	if ($.isFunction(options)) {
		callback = options;
		speed = null;
		options = {};
	}
        if (typeof options == 'number' || $.fx.speeds[options]) {
		callback = speed;
		speed = options;
		options = {};
	}
	if ($.isFunction(speed)) {
		callback = speed;
		speed = null;
	}

	options = options || {};

	speed = speed || options.duration;
	speed = $.fx.off ? 0 : typeof speed == 'number'
		? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;

	callback = callback || options.complete;

	return [effect, options, speed, callback];
}

function standardSpeed( speed ) {
	// valid standard speeds
	if ( !speed || typeof speed === "number" || $.fx.speeds[ speed ] ) {
		return true;
	}
	
	// invalid strings - treat as "normal" speed
	if ( typeof speed === "string" &amp;&amp; !$.effects[ speed ] ) {
		return true;
	}
	
	return false;
}

$.fn.extend({
	effect: function(effect, options, speed, callback) {
		var args = _normalizeArguments.apply(this, arguments),
			// TODO: make effects take actual parameters instead of a hash
			args2 = {
				options: args[1],
				duration: args[2],
				callback: args[3]
			},
			mode = args2.options.mode,
			effectMethod = $.effects[effect];
		
		if ( $.fx.off || !effectMethod ) {
			// delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args2.duration, args2.callback );
			} else {
				return this.each(function() {
					if ( args2.callback ) {
						args2.callback.call( this );
					}
				});
			}
		}
		
		return effectMethod.call(this, args2);
	},

	_show: $.fn.show,
	show: function(speed) {
		if ( standardSpeed( speed ) ) {
			return this._show.apply(this, arguments);
		} else {
			var args = _normalizeArguments.apply(this, arguments);
			args[1].mode = 'show';
			return this.effect.apply(this, args);
		}
	},

	_hide: $.fn.hide,
	hide: function(speed) {
		if ( standardSpeed( speed ) ) {
			return this._hide.apply(this, arguments);
		} else {
			var args = _normalizeArguments.apply(this, arguments);
			args[1].mode = 'hide';
			return this.effect.apply(this, args);
		}
	},

	// jQuery core overloads toggle and creates _toggle
	__toggle: $.fn.toggle,
	toggle: function(speed) {
		if ( standardSpeed( speed ) || typeof speed === "boolean" || $.isFunction( speed ) ) {
			return this.__toggle.apply(this, arguments);
		} else {
			var args = _normalizeArguments.apply(this, arguments);
			args[1].mode = 'toggle';
			return this.effect.apply(this, args);
		}
	},

	// helper functions
	cssUnit: function(key) {
		var style = this.css(key), val = [];
		$.each( ['em','px','%','pt'], function(i, unit){
			if(style.indexOf(unit) &gt; 0)
				val = [parseFloat(style), unit];
		});
		return val;
	}
});



/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
});

$.extend( baseEasings, {
	Sine: function ( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function ( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function ( p ) {
		var pow2,
			bounce = 4;

		while ( p &lt; ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
});

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p &lt; .5 ?
			easeIn( p * 2 ) / 2 :
			easeIn( p * -2 + 2 ) / -2 + 1;
	};
});

})(jQuery);

(function( $, undefined ) {

$.effects.blind = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
		var direction = o.options.direction || 'vertical'; // Default direction

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		var wrapper = $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
		var ref = (direction == 'vertical') ? 'height' : 'width';
		var distance = (direction == 'vertical') ? wrapper.height() : wrapper.width();
		if(mode == 'show') wrapper.css(ref, 0); // Shift

		// Animation
		var animation = {};
		animation[ref] = mode == 'show' ? distance : 0;

		// Animate
		wrapper.animate(animation, o.duration, o.options.easing, function() {
			if(mode == 'hide') el.hide(); // Hide
			$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(el[0], arguments); // Callback
			el.dequeue();
		});

	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.bounce = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
		var direction = o.options.direction || 'up'; // Default direction
		var distance = o.options.distance || 20; // Default distance
		var times = o.options.times || 5; // Default # of times
		var speed = o.duration || 250; // Default speed per bounce
		if (/show|hide/.test(mode)) props.push('opacity'); // Avoid touching opacity to prevent clearType and PNG issues in IE

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		$.effects.createWrapper(el); // Create Wrapper
		var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
		var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';
		var distance = o.options.distance || (ref == 'top' ? el.outerHeight(true) / 3 : el.outerWidth(true) / 3);
		if (mode == 'show') el.css('opacity', 0).css(ref, motion == 'pos' ? -distance : distance); // Shift
		if (mode == 'hide') distance = distance / (times * 2);
		if (mode != 'hide') times--;

		// Animate
		if (mode == 'show') { // Show Bounce
			var animation = {opacity: 1};
			animation[ref] = (motion == 'pos' ? '+=' : '-=') + distance;
			el.animate(animation, speed / 2, o.options.easing);
			distance = distance / 2;
			times--;
		};
		for (var i = 0; i &lt; times; i++) { // Bounces
			var animation1 = {}, animation2 = {};
			animation1[ref] = (motion == 'pos' ? '-=' : '+=') + distance;
			animation2[ref] = (motion == 'pos' ? '+=' : '-=') + distance;
			el.animate(animation1, speed / 2, o.options.easing).animate(animation2, speed / 2, o.options.easing);
			distance = (mode == 'hide') ? distance * 2 : distance / 2;
		};
		if (mode == 'hide') { // Last Bounce
			var animation = {opacity: 0};
			animation[ref] = (motion == 'pos' ? '-=' : '+=')  + distance;
			el.animate(animation, speed / 2, o.options.easing, function(){
				el.hide(); // Hide
				$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
				if(o.callback) o.callback.apply(this, arguments); // Callback
			});
		} else {
			var animation1 = {}, animation2 = {};
			animation1[ref] = (motion == 'pos' ? '-=' : '+=') + distance;
			animation2[ref] = (motion == 'pos' ? '+=' : '-=') + distance;
			el.animate(animation1, speed / 2, o.options.easing).animate(animation2, speed / 2, o.options.easing, function(){
				$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
				if(o.callback) o.callback.apply(this, arguments); // Callback
			});
		};
		el.queue('fx', function() { el.dequeue(); });
		el.dequeue();
	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.clip = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right','height','width'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
		var direction = o.options.direction || 'vertical'; // Default direction

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		var wrapper = $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
		var animate = el[0].tagName == 'IMG' ? wrapper : el;
		var ref = {
			size: (direction == 'vertical') ? 'height' : 'width',
			position: (direction == 'vertical') ? 'top' : 'left'
		};
		var distance = (direction == 'vertical') ? animate.height() : animate.width();
		if(mode == 'show') { animate.css(ref.size, 0); animate.css(ref.position, distance / 2); } // Shift

		// Animation
		var animation = {};
		animation[ref.size] = mode == 'show' ? distance : 0;
		animation[ref.position] = mode == 'show' ? 0 : distance / 2;

		// Animate
		animate.animate(animation, { queue: false, duration: o.duration, easing: o.options.easing, complete: function() {
			if(mode == 'hide') el.hide(); // Hide
			$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(el[0], arguments); // Callback
			el.dequeue();
		}});

	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.drop = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right','opacity'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
		var direction = o.options.direction || 'left'; // Default Direction

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		$.effects.createWrapper(el); // Create Wrapper
		var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
		var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';
		var distance = o.options.distance || (ref == 'top' ? el.outerHeight( true ) / 2 : el.outerWidth( true ) / 2);
		if (mode == 'show') el.css('opacity', 0).css(ref, motion == 'pos' ? -distance : distance); // Shift

		// Animation
		var animation = {opacity: mode == 'show' ? 1 : 0};
		animation[ref] = (mode == 'show' ? (motion == 'pos' ? '+=' : '-=') : (motion == 'pos' ? '-=' : '+=')) + distance;

		// Animate
		el.animate(animation, { queue: false, duration: o.duration, easing: o.options.easing, complete: function() {
			if(mode == 'hide') el.hide(); // Hide
			$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(this, arguments); // Callback
			el.dequeue();
		}});

	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.explode = function(o) {

	return this.queue(function() {

	var rows = o.options.pieces ? Math.round(Math.sqrt(o.options.pieces)) : 3;
	var cells = o.options.pieces ? Math.round(Math.sqrt(o.options.pieces)) : 3;

	o.options.mode = o.options.mode == 'toggle' ? ($(this).is(':visible') ? 'hide' : 'show') : o.options.mode;
	var el = $(this).show().css('visibility', 'hidden');
	var offset = el.offset();

	//Substract the margins - not fixing the problem yet.
	offset.top -= parseInt(el.css("marginTop"),10) || 0;
	offset.left -= parseInt(el.css("marginLeft"),10) || 0;

	var width = el.outerWidth(true);
	var height = el.outerHeight(true);

	for(var i=0;i&lt;rows;i++) { // =
		for(var j=0;j&lt;cells;j++) { // ||
			el
				.clone()
				.appendTo('body')
				.wrap('&lt;div&gt;&lt;/div&gt;')
				.css({
					position: 'absolute',
					visibility: 'visible',
					left: -j*(width/cells),
					top: -i*(height/rows)
				})
				.parent()
				.addClass('ui-effects-explode')
				.css({
					position: 'absolute',
					overflow: 'hidden',
					width: width/cells,
					height: height/rows,
					left: offset.left + j*(width/cells) + (o.options.mode == 'show' ? (j-Math.floor(cells/2))*(width/cells) : 0),
					top: offset.top + i*(height/rows) + (o.options.mode == 'show' ? (i-Math.floor(rows/2))*(height/rows) : 0),
					opacity: o.options.mode == 'show' ? 0 : 1
				}).animate({
					left: offset.left + j*(width/cells) + (o.options.mode == 'show' ? 0 : (j-Math.floor(cells/2))*(width/cells)),
					top: offset.top + i*(height/rows) + (o.options.mode == 'show' ? 0 : (i-Math.floor(rows/2))*(height/rows)),
					opacity: o.options.mode == 'show' ? 1 : 0
				}, o.duration || 500);
		}
	}

	// Set a timeout, to call the callback approx. when the other animations have finished
	setTimeout(function() {

		o.options.mode == 'show' ? el.css({ visibility: 'visible' }) : el.css({ visibility: 'visible' }).hide();
				if(o.callback) o.callback.apply(el[0]); // Callback
				el.dequeue();

				$('div.ui-effects-explode').remove();

	}, o.duration || 500);


	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.fade = function(o) {
	return this.queue(function() {
		var elem = $(this),
			mode = $.effects.setMode(elem, o.options.mode || 'hide');

		elem.animate({ opacity: mode }, {
			queue: false,
			duration: o.duration,
			easing: o.options.easing,
			complete: function() {
				(o.callback &amp;&amp; o.callback.apply(this, arguments));
				elem.dequeue();
			}
		});
	});
};

})(jQuery);

(function( $, undefined ) {

$.effects.fold = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'hide'); // Set Mode
		var size = o.options.size || 15; // Default fold size
		var horizFirst = !(!o.options.horizFirst); // Ensure a boolean value
		var duration = o.duration ? o.duration / 2 : $.fx.speeds._default / 2;

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		var wrapper = $.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
		var widthFirst = ((mode == 'show') != horizFirst);
		var ref = widthFirst ? ['width', 'height'] : ['height', 'width'];
		var distance = widthFirst ? [wrapper.width(), wrapper.height()] : [wrapper.height(), wrapper.width()];
		var percent = /([0-9]+)%/.exec(size);
		if(percent) size = parseInt(percent[1],10) / 100 * distance[mode == 'hide' ? 0 : 1];
		if(mode == 'show') wrapper.css(horizFirst ? {height: 0, width: size} : {height: size, width: 0}); // Shift

		// Animation
		var animation1 = {}, animation2 = {};
		animation1[ref[0]] = mode == 'show' ? distance[0] : size;
		animation2[ref[1]] = mode == 'show' ? distance[1] : 0;

		// Animate
		wrapper.animate(animation1, duration, o.options.easing)
		.animate(animation2, duration, o.options.easing, function() {
			if(mode == 'hide') el.hide(); // Hide
			$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(el[0], arguments); // Callback
			el.dequeue();
		});

	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.highlight = function(o) {
	return this.queue(function() {
		var elem = $(this),
			props = ['backgroundImage', 'backgroundColor', 'opacity'],
			mode = $.effects.setMode(elem, o.options.mode || 'show'),
			animation = {
				backgroundColor: elem.css('backgroundColor')
			};

		if (mode == 'hide') {
			animation.opacity = 0;
		}

		$.effects.save(elem, props);
		elem
			.show()
			.css({
				backgroundImage: 'none',
				backgroundColor: o.options.color || '#ffff99'
			})
			.animate(animation, {
				queue: false,
				duration: o.duration,
				easing: o.options.easing,
				complete: function() {
					(mode == 'hide' &amp;&amp; elem.hide());
					$.effects.restore(elem, props);
					(mode == 'show' &amp;&amp; !$.support.opacity &amp;&amp; this.style.removeAttribute('filter'));
					(o.callback &amp;&amp; o.callback.apply(this, arguments));
					elem.dequeue();
				}
			});
	});
};

})(jQuery);

(function( $, undefined ) {

$.effects.pulsate = function(o) {
	return this.queue(function() {
		var elem = $(this),
			mode = $.effects.setMode(elem, o.options.mode || 'show'),
			times = ((o.options.times || 5) * 2) - 1,
			duration = o.duration ? o.duration / 2 : $.fx.speeds._default / 2,
			isVisible = elem.is(':visible'),
			animateTo = 0;

		if (!isVisible) {
			elem.css('opacity', 0).show();
			animateTo = 1;
		}

		if ((mode == 'hide' &amp;&amp; isVisible) || (mode == 'show' &amp;&amp; !isVisible)) {
			times--;
		}

		for (var i = 0; i &lt; times; i++) {
			elem.animate({ opacity: animateTo }, duration, o.options.easing);
			animateTo = (animateTo + 1) % 2;
		}

		elem.animate({ opacity: animateTo }, duration, o.options.easing, function() {
			if (animateTo == 0) {
				elem.hide();
			}
			(o.callback &amp;&amp; o.callback.apply(this, arguments));
		});

		elem
			.queue('fx', function() { elem.dequeue(); })
			.dequeue();
	});
};

})(jQuery);

(function( $, undefined ) {

$.effects.puff = function(o) {
	return this.queue(function() {
		var elem = $(this),
			mode = $.effects.setMode(elem, o.options.mode || 'hide'),
			percent = parseInt(o.options.percent, 10) || 150,
			factor = percent / 100,
			original = { height: elem.height(), width: elem.width() };

		$.extend(o.options, {
			fade: true,
			mode: mode,
			percent: mode == 'hide' ? percent : 100,
			from: mode == 'hide'
				? original
				: {
					height: original.height * factor,
					width: original.width * factor
				}
		});

		elem.effect('scale', o.options, o.duration, o.callback);
		elem.dequeue();
	});
};

$.effects.scale = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this);

		// Set options
		var options = $.extend(true, {}, o.options);
		var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
		var percent = parseInt(o.options.percent,10) || (parseInt(o.options.percent,10) == 0 ? 0 : (mode == 'hide' ? 0 : 100)); // Set default scaling percent
		var direction = o.options.direction || 'both'; // Set default axis
		var origin = o.options.origin; // The origin of the scaling
		if (mode != 'effect') { // Set default origin and restore for show/hide
			options.origin = origin || ['middle','center'];
			options.restore = true;
		}
		var original = {height: el.height(), width: el.width()}; // Save original
		el.from = o.options.from || (mode == 'show' ? {height: 0, width: 0} : original); // Default from state

		// Adjust
		var factor = { // Set scaling factor
			y: direction != 'horizontal' ? (percent / 100) : 1,
			x: direction != 'vertical' ? (percent / 100) : 1
		};
		el.to = {height: original.height * factor.y, width: original.width * factor.x}; // Set to state

		if (o.options.fade) { // Fade option to support puff
			if (mode == 'show') {el.from.opacity = 0; el.to.opacity = 1;};
			if (mode == 'hide') {el.from.opacity = 1; el.to.opacity = 0;};
		};

		// Animation
		options.from = el.from; options.to = el.to; options.mode = mode;

		// Animate
		el.effect('size', options, o.duration, o.callback);
		el.dequeue();
	});

};

$.effects.size = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right','width','height','overflow','opacity'];
		var props1 = ['position','top','bottom','left','right','overflow','opacity']; // Always restore
		var props2 = ['width','height','overflow']; // Copy for children
		var cProps = ['fontSize'];
		var vProps = ['borderTopWidth', 'borderBottomWidth', 'paddingTop', 'paddingBottom'];
		var hProps = ['borderLeftWidth', 'borderRightWidth', 'paddingLeft', 'paddingRight'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
		var restore = o.options.restore || false; // Default restore
		var scale = o.options.scale || 'both'; // Default scale mode
		var origin = o.options.origin; // The origin of the sizing
		var original = {height: el.height(), width: el.width()}; // Save original
		el.from = o.options.from || original; // Default from state
		el.to = o.options.to || original; // Default to state
		// Adjust
		if (origin) { // Calculate baseline shifts
			var baseline = $.effects.getBaseline(origin, original);
			el.from.top = (original.height - el.from.height) * baseline.y;
			el.from.left = (original.width - el.from.width) * baseline.x;
			el.to.top = (original.height - el.to.height) * baseline.y;
			el.to.left = (original.width - el.to.width) * baseline.x;
		};
		var factor = { // Set scaling factor
			from: {y: el.from.height / original.height, x: el.from.width / original.width},
			to: {y: el.to.height / original.height, x: el.to.width / original.width}
		};
		if (scale == 'box' || scale == 'both') { // Scale the css box
			if (factor.from.y != factor.to.y) { // Vertical props scaling
				props = props.concat(vProps);
				el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
				el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
			};
			if (factor.from.x != factor.to.x) { // Horizontal props scaling
				props = props.concat(hProps);
				el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
				el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
			};
		};
		if (scale == 'content' || scale == 'both') { // Scale the content
			if (factor.from.y != factor.to.y) { // Vertical props scaling
				props = props.concat(cProps);
				el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
				el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
			};
		};
		$.effects.save(el, restore ? props : props1); el.show(); // Save &amp; Show
		$.effects.createWrapper(el); // Create Wrapper
		el.css('overflow','hidden').css(el.from); // Shift

		// Animate
		if (scale == 'content' || scale == 'both') { // Scale the children
			vProps = vProps.concat(['marginTop','marginBottom']).concat(cProps); // Add margins/font-size
			hProps = hProps.concat(['marginLeft','marginRight']); // Add margins
			props2 = props.concat(vProps).concat(hProps); // Concat
			el.find("*[width]").each(function(){
				var child = $(this);
				if (restore) $.effects.save(child, props2);
				var c_original = {height: child.height(), width: child.width()}; // Save original
				child.from = {height: c_original.height * factor.from.y, width: c_original.width * factor.from.x};
				child.to = {height: c_original.height * factor.to.y, width: c_original.width * factor.to.x};
				if (factor.from.y != factor.to.y) { // Vertical props scaling
					child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
					child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
				};
				if (factor.from.x != factor.to.x) { // Horizontal props scaling
					child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
					child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
				};
				child.css(child.from); // Shift children
				child.animate(child.to, o.duration, o.options.easing, function(){
					if (restore) $.effects.restore(child, props2); // Restore children
				}); // Animate children
			});
		};

		// Animate
		el.animate(el.to, { queue: false, duration: o.duration, easing: o.options.easing, complete: function() {
			if (el.to.opacity === 0) {
				el.css('opacity', el.from.opacity);
			}
			if(mode == 'hide') el.hide(); // Hide
			$.effects.restore(el, restore ? props : props1); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(this, arguments); // Callback
			el.dequeue();
		}});

	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.shake = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'effect'); // Set Mode
		var direction = o.options.direction || 'left'; // Default direction
		var distance = o.options.distance || 20; // Default distance
		var times = o.options.times || 3; // Default # of times
		var speed = o.duration || o.options.duration || 140; // Default speed per shake

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		$.effects.createWrapper(el); // Create Wrapper
		var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
		var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';

		// Animation
		var animation = {}, animation1 = {}, animation2 = {};
		animation[ref] = (motion == 'pos' ? '-=' : '+=')  + distance;
		animation1[ref] = (motion == 'pos' ? '+=' : '-=')  + distance * 2;
		animation2[ref] = (motion == 'pos' ? '-=' : '+=')  + distance * 2;

		// Animate
		el.animate(animation, speed, o.options.easing);
		for (var i = 1; i &lt; times; i++) { // Shakes
			el.animate(animation1, speed, o.options.easing).animate(animation2, speed, o.options.easing);
		};
		el.animate(animation1, speed, o.options.easing).
		animate(animation, speed / 2, o.options.easing, function(){ // Last shake
			$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(this, arguments); // Callback
		});
		el.queue('fx', function() { el.dequeue(); });
		el.dequeue();
	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.slide = function(o) {

	return this.queue(function() {

		// Create element
		var el = $(this), props = ['position','top','bottom','left','right'];

		// Set options
		var mode = $.effects.setMode(el, o.options.mode || 'show'); // Set Mode
		var direction = o.options.direction || 'left'; // Default Direction

		// Adjust
		$.effects.save(el, props); el.show(); // Save &amp; Show
		$.effects.createWrapper(el).css({overflow:'hidden'}); // Create Wrapper
		var ref = (direction == 'up' || direction == 'down') ? 'top' : 'left';
		var motion = (direction == 'up' || direction == 'left') ? 'pos' : 'neg';
		var distance = o.options.distance || (ref == 'top' ? el.outerHeight( true ) : el.outerWidth( true ));
		if (mode == 'show') el.css(ref, motion == 'pos' ? (isNaN(distance) ? "-" + distance : -distance) : distance); // Shift

		// Animation
		var animation = {};
		animation[ref] = (mode == 'show' ? (motion == 'pos' ? '+=' : '-=') : (motion == 'pos' ? '-=' : '+=')) + distance;

		// Animate
		el.animate(animation, { queue: false, duration: o.duration, easing: o.options.easing, complete: function() {
			if(mode == 'hide') el.hide(); // Hide
			$.effects.restore(el, props); $.effects.removeWrapper(el); // Restore
			if(o.callback) o.callback.apply(this, arguments); // Callback
			el.dequeue();
		}});

	});

};

})(jQuery);

(function( $, undefined ) {

$.effects.transfer = function(o) {
	return this.queue(function() {
		var elem = $(this),
			target = $(o.options.to),
			endPosition = target.offset(),
			animation = {
				top: endPosition.top,
				left: endPosition.left,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = elem.offset(),
			transfer = $('&lt;div class="ui-effects-transfer"&gt;&lt;/div&gt;')
				.appendTo(document.body)
				.addClass(o.options.className)
				.css({
					top: startPosition.top,
					left: startPosition.left,
					height: elem.innerHeight(),
					width: elem.innerWidth(),
					position: 'absolute'
				})
				.animate(animation, o.duration, o.options.easing, function() {
					transfer.remove();
					(o.callback &amp;&amp; o.callback.apply(elem[0], arguments));
					elem.dequeue();
				});
	});
};

})(jQuery);

(function( $, undefined ) {

$.widget( "ui.accordion", {
	options: {
		active: 0,
		animated: "slide",
		autoHeight: true,
		clearStyle: false,
		collapsible: false,
		event: "click",
		fillSpace: false,
		header: "&gt; li &gt; :first-child,&gt; :not(li):even",
		icons: {
			header: "ui-icon-triangle-1-e",
			headerSelected: "ui-icon-triangle-1-s"
		},
		navigation: false,
		navigationFilter: function() {
			return this.href.toLowerCase() === location.href.toLowerCase();
		}
	},

	_create: function() {
		var self = this,
			options = self.options;

		self.running = 0;

		self.element
			.addClass( "ui-accordion ui-widget ui-helper-reset" )
			// in lack of child-selectors in CSS
			// we need to mark top-LIs in a UL-accordion for some IE-fix
			.children( "li" )
				.addClass( "ui-accordion-li-fix" );

		self.headers = self.element.find( options.header )
			.addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" )
			.bind( "mouseenter.accordion", function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).addClass( "ui-state-hover" );
			})
			.bind( "mouseleave.accordion", function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( "ui-state-hover" );
			})
			.bind( "focus.accordion", function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).addClass( "ui-state-focus" );
			})
			.bind( "blur.accordion", function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( "ui-state-focus" );
			});

		self.headers.next()
			.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" );

		if ( options.navigation ) {
			var current = self.element.find( "a" ).filter( options.navigationFilter ).eq( 0 );
			if ( current.length ) {
				var header = current.closest( ".ui-accordion-header" );
				if ( header.length ) {
					// anchor within header
					self.active = header;
				} else {
					// anchor within content
					self.active = current.closest( ".ui-accordion-content" ).prev();
				}
			}
		}

		self.active = self._findActive( self.active || options.active )
			.addClass( "ui-state-default ui-state-active" )
			.toggleClass( "ui-corner-all" )
			.toggleClass( "ui-corner-top" );
		self.active.next().addClass( "ui-accordion-content-active" );

		self._createIcons();
		self.resize();
		
		// ARIA
		self.element.attr( "role", "tablist" );

		self.headers
			.attr( "role", "tab" )
			.bind( "keydown.accordion", function( event ) {
				return self._keydown( event );
			})
			.next()
				.attr( "role", "tabpanel" );

		self.headers
			.not( self.active || "" )
			.attr({
				"aria-expanded": "false",
				"aria-selected": "false",
				tabIndex: -1
			})
			.next()
				.hide();

		// make sure at least one header is in the tab order
		if ( !self.active.length ) {
			self.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			self.active
				.attr({
					"aria-expanded": "true",
					"aria-selected": "true",
					tabIndex: 0
				});
		}

		// only need links in tab order for Safari
		if ( !$.browser.safari ) {
			self.headers.find( "a" ).attr( "tabIndex", -1 );
		}

		if ( options.event ) {
			self.headers.bind( options.event.split(" ").join(".accordion ") + ".accordion", function(event) {
				self._clickHandler.call( self, event, this );
				event.preventDefault();
			});
		}
	},

	_createIcons: function() {
		var options = this.options;
		if ( options.icons ) {
			$( "&lt;span&gt;&lt;/span&gt;" )
				.addClass( "ui-icon " + options.icons.header )
				.prependTo( this.headers );
			this.active.children( ".ui-icon" )
				.toggleClass(options.icons.header)
				.toggleClass(options.icons.headerSelected);
			this.element.addClass( "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this.headers.children( ".ui-icon" ).remove();
		this.element.removeClass( "ui-accordion-icons" );
	},

	destroy: function() {
		var options = this.options;

		this.element
			.removeClass( "ui-accordion ui-widget ui-helper-reset" )
			.removeAttr( "role" );

		this.headers
			.unbind( ".accordion" )
			.removeClass( "ui-accordion-header ui-accordion-disabled ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
			.removeAttr( "role" )
			.removeAttr( "aria-expanded" )
			.removeAttr( "aria-selected" )
			.removeAttr( "tabIndex" );

		this.headers.find( "a" ).removeAttr( "tabIndex" );
		this._destroyIcons();
		var contents = this.headers.next()
			.css( "display", "" )
			.removeAttr( "role" )
			.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled" );
		if ( options.autoHeight || options.fillHeight ) {
			contents.css( "height", "" );
		}

		return $.Widget.prototype.destroy.call( this );
	},

	_setOption: function( key, value ) {
		$.Widget.prototype._setOption.apply( this, arguments );
			
		if ( key == "active" ) {
			this.activate( value );
		}
		if ( key == "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}
		// #5332 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		if ( key == "disabled" ) {
			this.headers.add(this.headers.next())
				[ value ? "addClass" : "removeClass" ](
					"ui-accordion-disabled ui-state-disabled" );
		}
	},

	_keydown: function( event ) {
		if ( this.options.disabled || event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
			case keyCode.RIGHT:
			case keyCode.DOWN:
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];
				break;
			case keyCode.LEFT:
			case keyCode.UP:
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
				break;
			case keyCode.SPACE:
			case keyCode.ENTER:
				this._clickHandler( { target: event.target }, event.target );
				event.preventDefault();
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			toFocus.focus();
			return false;
		}

		return true;
	},

	resize: function() {
		var options = this.options,
			maxHeight;

		if ( options.fillSpace ) {
			if ( $.browser.msie ) {
				var defOverflow = this.element.parent().css( "overflow" );
				this.element.parent().css( "overflow", "hidden");
			}
			maxHeight = this.element.parent().height();
			if ($.browser.msie) {
				this.element.parent().css( "overflow", defOverflow );
			}

			this.headers.each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});

			this.headers.next()
				.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				.css( "overflow", "auto" );
		} else if ( options.autoHeight ) {
			maxHeight = 0;
			this.headers.next()
				.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
				})
				.height( maxHeight );
		}

		return this;
	},

	activate: function( index ) {
		// TODO this gets called on init, changing the option without an explicit call for that
		this.options.active = index;
		// call clickHandler with custom event
		var active = this._findActive( index )[ 0 ];
		this._clickHandler( { target: active }, active );

		return this;
	},

	_findActive: function( selector ) {
		return selector
			? typeof selector === "number"
				? this.headers.filter( ":eq(" + selector + ")" )
				: this.headers.not( this.headers.not( selector ) )
			: selector === false
				? $( [] )
				: this.headers.filter( ":eq(0)" );
	},

	// TODO isn't event.target enough? why the separate target argument?
	_clickHandler: function( event, target ) {
		var options = this.options;
		if ( options.disabled ) {
			return;
		}

		// called only when using activate(false) to close all parts programmatically
		if ( !event.target ) {
			if ( !options.collapsible ) {
				return;
			}
			this.active
				.removeClass( "ui-state-active ui-corner-top" )
				.addClass( "ui-state-default ui-corner-all" )
				.children( ".ui-icon" )
					.removeClass( options.icons.headerSelected )
					.addClass( options.icons.header );
			this.active.next().addClass( "ui-accordion-content-active" );
			var toHide = this.active.next(),
				data = {
					options: options,
					newHeader: $( [] ),
					oldHeader: options.active,
					newContent: $( [] ),
					oldContent: toHide
				},
				toShow = ( this.active = $( [] ) );
			this._toggle( toShow, toHide, data );
			return;
		}

		// get the click target
		var clicked = $( event.currentTarget || target ),
			clickedIsActive = clicked[0] === this.active[0];

		// TODO the option is changed, is that correct?
		// TODO if it is correct, shouldn't that happen after determining that the click is valid?
		options.active = options.collapsible &amp;&amp; clickedIsActive ?
			false :
			this.headers.index( clicked );

		// if animations are still active, or the active header is the target, ignore click
		if ( this.running || ( !options.collapsible &amp;&amp; clickedIsActive ) ) {
			return;
		}

		// find elements to show and hide
		var active = this.active,
			toShow = clicked.next(),
			toHide = this.active.next(),
			data = {
				options: options,
				newHeader: clickedIsActive &amp;&amp; options.collapsible ? $([]) : clicked,
				oldHeader: this.active,
				newContent: clickedIsActive &amp;&amp; options.collapsible ? $([]) : toShow,
				oldContent: toHide
			},
			down = this.headers.index( this.active[0] ) &gt; this.headers.index( clicked[0] );

		// when the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $([]) : clicked;
		this._toggle( toShow, toHide, data, clickedIsActive, down );

		// switch classes
		active
			.removeClass( "ui-state-active ui-corner-top" )
			.addClass( "ui-state-default ui-corner-all" )
			.children( ".ui-icon" )
				.removeClass( options.icons.headerSelected )
				.addClass( options.icons.header );
		if ( !clickedIsActive ) {
			clicked
				.removeClass( "ui-state-default ui-corner-all" )
				.addClass( "ui-state-active ui-corner-top" )
				.children( ".ui-icon" )
					.removeClass( options.icons.header )
					.addClass( options.icons.headerSelected );
			clicked
				.next()
				.addClass( "ui-accordion-content-active" );
		}

		return;
	},

	_toggle: function( toShow, toHide, data, clickedIsActive, down ) {
		var self = this,
			options = self.options;

		self.toShow = toShow;
		self.toHide = toHide;
		self.data = data;

		var complete = function() {
			if ( !self ) {
				return;
			}
			return self._completed.apply( self, arguments );
		};

		// trigger changestart event
		self._trigger( "changestart", null, self.data );

		// count elements to animate
		self.running = toHide.size() === 0 ? toShow.size() : toHide.size();

		if ( options.animated ) {
			var animOptions = {};

			if ( options.collapsible &amp;&amp; clickedIsActive ) {
				animOptions = {
					toShow: $( [] ),
					toHide: toHide,
					complete: complete,
					down: down,
					autoHeight: options.autoHeight || options.fillSpace
				};
			} else {
				animOptions = {
					toShow: toShow,
					toHide: toHide,
					complete: complete,
					down: down,
					autoHeight: options.autoHeight || options.fillSpace
				};
			}

			if ( !options.proxied ) {
				options.proxied = options.animated;
			}

			if ( !options.proxiedDuration ) {
				options.proxiedDuration = options.duration;
			}

			options.animated = $.isFunction( options.proxied ) ?
				options.proxied( animOptions ) :
				options.proxied;

			options.duration = $.isFunction( options.proxiedDuration ) ?
				options.proxiedDuration( animOptions ) :
				options.proxiedDuration;

			var animations = $.ui.accordion.animations,
				duration = options.duration,
				easing = options.animated;

			if ( easing &amp;&amp; !animations[ easing ] &amp;&amp; !$.easing[ easing ] ) {
				easing = "slide";
			}
			if ( !animations[ easing ] ) {
				animations[ easing ] = function( options ) {
					this.slide( options, {
						easing: easing,
						duration: duration || 700
					});
				};
			}

			animations[ easing ]( animOptions );
		} else {
			if ( options.collapsible &amp;&amp; clickedIsActive ) {
				toShow.toggle();
			} else {
				toHide.hide();
				toShow.show();
			}

			complete( true );
		}

		// TODO assert that the blur and focus triggers are really necessary, remove otherwise
		toHide.prev()
			.attr({
				"aria-expanded": "false",
				"aria-selected": "false",
				tabIndex: -1
			})
			.blur();
		toShow.prev()
			.attr({
				"aria-expanded": "true",
				"aria-selected": "true",
				tabIndex: 0
			})
			.focus();
	},

	_completed: function( cancel ) {
		this.running = cancel ? 0 : --this.running;
		if ( this.running ) {
			return;
		}

		if ( this.options.clearStyle ) {
			this.toShow.add( this.toHide ).css({
				height: "",
				overflow: ""
			});
		}

		// other classes are removed before the animation; this one needs to stay until completed
		this.toHide.removeClass( "ui-accordion-content-active" );
		// Work around for rendering bug in IE (#5421)
		if ( this.toHide.length ) {
			this.toHide.parent()[0].className = this.toHide.parent()[0].className;
		}

		this._trigger( "change", null, this.data );
	}
});

$.extend( $.ui.accordion, {
	version: "1.8.24",
	animations: {
		slide: function( options, additions ) {
			options = $.extend({
				easing: "swing",
				duration: 300
			}, options, additions );
			if ( !options.toHide.size() ) {
				options.toShow.animate({
					height: "show",
					paddingTop: "show",
					paddingBottom: "show"
				}, options );
				return;
			}
			if ( !options.toShow.size() ) {
				options.toHide.animate({
					height: "hide",
					paddingTop: "hide",
					paddingBottom: "hide"
				}, options );
				return;
			}
			var overflow = options.toShow.css( "overflow" ),
				percentDone = 0,
				showProps = {},
				hideProps = {},
				fxAttrs = [ "height", "paddingTop", "paddingBottom" ],
				originalWidth;
			// fix width before calculating height of hidden element
			var s = options.toShow;
			originalWidth = s[0].style.width;
			s.width( s.parent().width()
				- parseFloat( s.css( "paddingLeft" ) )
				- parseFloat( s.css( "paddingRight" ) )
				- ( parseFloat( s.css( "borderLeftWidth" ) ) || 0 )
				- ( parseFloat( s.css( "borderRightWidth" ) ) || 0 ) );

			$.each( fxAttrs, function( i, prop ) {
				hideProps[ prop ] = "hide";

				var parts = ( "" + $.css( options.toShow[0], prop ) ).match( /^([\d+-.]+)(.*)$/ );
				showProps[ prop ] = {
					value: parts[ 1 ],
					unit: parts[ 2 ] || "px"
				};
			});
			options.toShow.css({ height: 0, overflow: "hidden" }).show();
			options.toHide
				.filter( ":hidden" )
					.each( options.complete )
				.end()
				.filter( ":visible" )
				.animate( hideProps, {
				step: function( now, settings ) {
					// only calculate the percent when animating height
					// IE gets very inconsistent results when animating elements
					// with small values, which is common for padding
					if ( settings.prop == "height" ) {
						percentDone = ( settings.end - settings.start === 0 ) ? 0 :
							( settings.now - settings.start ) / ( settings.end - settings.start );
					}

					options.toShow[ 0 ].style[ settings.prop ] =
						( percentDone * showProps[ settings.prop ].value )
						+ showProps[ settings.prop ].unit;
				},
				duration: options.duration,
				easing: options.easing,
				complete: function() {
					if ( !options.autoHeight ) {
						options.toShow.css( "height", "" );
					}
					options.toShow.css({
						width: originalWidth,
						overflow: overflow
					});
					options.complete();
				}
			});
		},
		bounceslide: function( options ) {
			this.slide( options, {
				easing: options.down ? "easeOutBounce" : "swing",
				duration: options.down ? 1000 : 200
			});
		}
	}
});

})( jQuery );

(function( $, undefined ) {

// used to prevent race conditions with remote data sources
var requestIndex = 0;

$.widget( "ui.autocomplete", {
	options: {
		appendTo: "body",
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null
	},

	pending: 0,

	_create: function() {
		var self = this,
			doc = this.element[ 0 ].ownerDocument,
			suppressKeyPress;
		this.isMultiLine = this.element.is( "textarea" );

		this.element
			.addClass( "ui-autocomplete-input" )
			.attr( "autocomplete", "off" )
			// TODO verify these actually work as intended
			.attr({
				role: "textbox",
				"aria-autocomplete": "list",
				"aria-haspopup": "true"
			})
			.bind( "keydown.autocomplete", function( event ) {
				if ( self.options.disabled || self.element.propAttr( "readOnly" ) ) {
					return;
				}

				suppressKeyPress = false;
				var keyCode = $.ui.keyCode;
				switch( event.keyCode ) {
				case keyCode.PAGE_UP:
					self._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					self._move( "nextPage", event );
					break;
				case keyCode.UP:
					self._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					self._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
				case keyCode.NUMPAD_ENTER:
					// when menu is open and has focus
					if ( self.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
					}
					//passthrough - ENTER and TAB both select the current element
				case keyCode.TAB:
					if ( !self.menu.active ) {
						return;
					}
					self.menu.select( event );
					break;
				case keyCode.ESCAPE:
					self.element.val( self.term );
					self.close( event );
					break;
				default:
					// keypress is triggered before the input value is changed
					clearTimeout( self.searching );
					self.searching = setTimeout(function() {
						// only search if the value has changed
						if ( self.term != self.element.val() ) {
							self.selectedItem = null;
							self.search( null, event );
						}
					}, self.options.delay );
					break;
				}
			})
			.bind( "keypress.autocomplete", function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					event.preventDefault();
				}
			})
			.bind( "focus.autocomplete", function() {
				if ( self.options.disabled ) {
					return;
				}

				self.selectedItem = null;
				self.previous = self.element.val();
			})
			.bind( "blur.autocomplete", function( event ) {
				if ( self.options.disabled ) {
					return;
				}

				clearTimeout( self.searching );
				// clicks on the menu (or a button to trigger a search) will cause a blur event
				self.closing = setTimeout(function() {
					self.close( event );
					self._change( event );
				}, 150 );
			});
		this._initSource();
		this.menu = $( "&lt;ul&gt;&lt;/ul&gt;" )
			.addClass( "ui-autocomplete" )
			.appendTo( $( this.options.appendTo || "body", doc )[0] )
			// prevent the close-on-blur in case of a "slow" click on the menu (long mousedown)
			.mousedown(function( event ) {
				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = self.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
					setTimeout(function() {
						$( document ).one( 'mousedown', function( event ) {
							if ( event.target !== self.element[ 0 ] &amp;&amp;
								event.target !== menuElement &amp;&amp;
								!$.ui.contains( menuElement, event.target ) ) {
								self.close();
							}
						});
					}, 1 );
				}

				// use another timeout to make sure the blur-event-handler on the input was already triggered
				setTimeout(function() {
					clearTimeout( self.closing );
				}, 13);
			})
			.menu({
				focus: function( event, ui ) {
					var item = ui.item.data( "item.autocomplete" );
					if ( false !== self._trigger( "focus", event, { item: item } ) ) {
						// use value to match what will end up in the input, if it was a key event
						if ( /^key/.test(event.originalEvent.type) ) {
							self.element.val( item.value );
						}
					}
				},
				selected: function( event, ui ) {
					var item = ui.item.data( "item.autocomplete" ),
						previous = self.previous;

					// only trigger when focus was lost (click on menu)
					if ( self.element[0] !== doc.activeElement ) {
						self.element.focus();
						self.previous = previous;
						// #6109 - IE triggers two focus events and the second
						// is asynchronous, so we need to reset the previous
						// term synchronously and asynchronously :-(
						setTimeout(function() {
							self.previous = previous;
							self.selectedItem = item;
						}, 1);
					}

					if ( false !== self._trigger( "select", event, { item: item } ) ) {
						self.element.val( item.value );
					}
					// reset the term after the select event
					// this allows custom select handling to work properly
					self.term = self.element.val();

					self.close( event );
					self.selectedItem = item;
				},
				blur: function( event, ui ) {
					// don't set the value of the text field if it's already correct
					// this prevents moving the cursor unnecessarily
					if ( self.menu.element.is(":visible") &amp;&amp;
						( self.element.val() !== self.term ) ) {
						self.element.val( self.term );
					}
				}
			})
			.zIndex( this.element.zIndex() + 1 )
			// workaround for jQuery bug #5781 http://dev.jquery.com/ticket/5781
			.css({ top: 0, left: 0 })
			.hide()
			.data( "menu" );
		if ( $.fn.bgiframe ) {
			 this.menu.element.bgiframe();
		}
		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		self.beforeunloadHandler = function() {
			self.element.removeAttr( "autocomplete" );
		};
		$( window ).bind( "beforeunload", self.beforeunloadHandler );
	},

	destroy: function() {
		this.element
			.removeClass( "ui-autocomplete-input" )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-autocomplete" )
			.removeAttr( "aria-haspopup" );
		this.menu.element.remove();
		$( window ).unbind( "beforeunload", this.beforeunloadHandler );
		$.Widget.prototype.destroy.call( this );
	},

	_setOption: function( key, value ) {
		$.Widget.prototype._setOption.apply( this, arguments );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( $( value || "body", this.element[0].ownerDocument )[0] )
		}
		if ( key === "disabled" &amp;&amp; value &amp;&amp; this.xhr ) {
			this.xhr.abort();
		}
	},

	_initSource: function() {
		var self = this,
			array,
			url;
		if ( $.isArray(this.options.source) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter(array, request.term) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( self.xhr ) {
					self.xhr.abort();
				}
				self.xhr = $.ajax({
					url: url,
					data: request,
					dataType: "json",
					success: function( data, status ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	search: function( value, event ) {
		value = value != null ? value : this.element.val();

		// always save the actual value, not the one passed as an argument
		this.term = this.element.val();

		if ( value.length &lt; this.options.minLength ) {
			return this.close( event );
		}

		clearTimeout( this.closing );
		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this.element.addClass( "ui-autocomplete-loading" );

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var that = this,
			index = ++requestIndex;

		return function( content ) {
			if ( index === requestIndex ) {
				that.__response( content );
			}

			that.pending--;
			if ( !that.pending ) {
				that.element.removeClass( "ui-autocomplete-loading" );
			}
		};
	},

	__response: function( content ) {
		if ( !this.options.disabled &amp;&amp; content &amp;&amp; content.length ) {
			content = this._normalize( content );
			this._suggest( content );
			this._trigger( "open" );
		} else {
			this.close();
		}
	},

	close: function( event ) {
		clearTimeout( this.closing );
		if ( this.menu.element.is(":visible") ) {
			this.menu.element.hide();
			this.menu.deactivate();
			this._trigger( "close", event );
		}
	},
	
	_change: function( event ) {
		if ( this.previous !== this.element.val() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {
		// assume all items have the right format when the first item is complete
		if ( items.length &amp;&amp; items[0].label &amp;&amp; items[0].value ) {
			return items;
		}
		return $.map( items, function(item) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend({
				label: item.label || item.value,
				value: item.value || item.label
			}, item );
		});
	},

	_suggest: function( items ) {
		var ul = this.menu.element
			.empty()
			.zIndex( this.element.zIndex() + 1 );
		this._renderMenu( ul, items );
		// TODO refresh should check if the active item is still in the dom, removing the need for a manual deactivate
		this.menu.deactivate();
		this.menu.refresh();

		// size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend({
			of: this.element
		}, this.options.position ));

		if ( this.options.autoFocus ) {
			this.menu.next( new $.Event("mouseover") );
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var self = this;
		$.each( items, function( index, item ) {
			self._renderItem( ul, item );
		});
	},

	_renderItem: function( ul, item) {
		return $( "&lt;li&gt;&lt;/li&gt;" )
			.data( "item.autocomplete", item )
			.append( $( "&lt;a&gt;&lt;/a&gt;" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is(":visible") ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.first() &amp;&amp; /^previous/.test(direction) ||
				this.menu.last() &amp;&amp; /^next/.test(direction) ) {
			this.element.val( this.term );
			this.menu.deactivate();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},
	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	}
});

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&amp;");
	},
	filter: function(array, term) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
		return $.grep( array, function(value) {
			return matcher.test( value.label || value.value || value );
		});
	}
});

}( jQuery ));

/*
 * jQuery UI Menu (not officially released)
 * 
 * This widget isn't yet finished and the API is subject to change. We plan to finish
 * it for the next release. You're welcome to give it a try anyway and give us feedback,
 * as long as you're okay with migrating your code later on. We can help with that, too.
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Licensed under the MIT license.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Menu
 *
 * Depends:
 *	jquery.ui.core.js
 *  jquery.ui.widget.js
 */
(function($) {

$.widget("ui.menu", {
	_create: function() {
		var self = this;
		this.element
			.addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
			.attr({
				role: "listbox",
				"aria-activedescendant": "ui-active-menuitem"
			})
			.click(function( event ) {
				if ( !$( event.target ).closest( ".ui-menu-item a" ).length ) {
					return;
				}
				// temporary
				event.preventDefault();
				self.select( event );
			});
		this.refresh();
	},
	
	refresh: function() {
		var self = this;

		// don't refresh list items that are already adapted
		var items = this.element.children("li:not(.ui-menu-item):has(a)")
			.addClass("ui-menu-item")
			.attr("role", "menuitem");
		
		items.children("a")
			.addClass("ui-corner-all")
			.attr("tabindex", -1)
			// mouseenter doesn't work with event delegation
			.mouseenter(function( event ) {
				self.activate( event, $(this).parent() );
			})
			.mouseleave(function() {
				self.deactivate();
			});
	},

	activate: function( event, item ) {
		this.deactivate();
		if (this.hasScroll()) {
			var offset = item.offset().top - this.element.offset().top,
				scroll = this.element.scrollTop(),
				elementHeight = this.element.height();
			if (offset &lt; 0) {
				this.element.scrollTop( scroll + offset);
			} else if (offset &gt;= elementHeight) {
				this.element.scrollTop( scroll + offset - elementHeight + item.height());
			}
		}
		this.active = item.eq(0)
			.children("a")
				.addClass("ui-state-hover")
				.attr("id", "ui-active-menuitem")
			.end();
		this._trigger("focus", event, { item: item });
	},

	deactivate: function() {
		if (!this.active) { return; }

		this.active.children("a")
			.removeClass("ui-state-hover")
			.removeAttr("id");
		this._trigger("blur");
		this.active = null;
	},

	next: function(event) {
		this.move("next", ".ui-menu-item:first", event);
	},

	previous: function(event) {
		this.move("prev", ".ui-menu-item:last", event);
	},

	first: function() {
		return this.active &amp;&amp; !this.active.prevAll(".ui-menu-item").length;
	},

	last: function() {
		return this.active &amp;&amp; !this.active.nextAll(".ui-menu-item").length;
	},

	move: function(direction, edge, event) {
		if (!this.active) {
			this.activate(event, this.element.children(edge));
			return;
		}
		var next = this.active[direction + "All"](".ui-menu-item").eq(0);
		if (next.length) {
			this.activate(event, next);
		} else {
			this.activate(event, this.element.children(edge));
		}
	},

	// TODO merge with previousPage
	nextPage: function(event) {
		if (this.hasScroll()) {
			// TODO merge with no-scroll-else
			if (!this.active || this.last()) {
				this.activate(event, this.element.children(".ui-menu-item:first"));
				return;
			}
			var base = this.active.offset().top,
				height = this.element.height(),
				result = this.element.children(".ui-menu-item").filter(function() {
					var close = $(this).offset().top - base - height + $(this).height();
					// TODO improve approximation
					return close &lt; 10 &amp;&amp; close &gt; -10;
				});

			// TODO try to catch this earlier when scrollTop indicates the last page anyway
			if (!result.length) {
				result = this.element.children(".ui-menu-item:last");
			}
			this.activate(event, result);
		} else {
			this.activate(event, this.element.children(".ui-menu-item")
				.filter(!this.active || this.last() ? ":first" : ":last"));
		}
	},

	// TODO merge with nextPage
	previousPage: function(event) {
		if (this.hasScroll()) {
			// TODO merge with no-scroll-else
			if (!this.active || this.first()) {
				this.activate(event, this.element.children(".ui-menu-item:last"));
				return;
			}

			var base = this.active.offset().top,
				height = this.element.height(),
				result = this.element.children(".ui-menu-item").filter(function() {
					var close = $(this).offset().top - base + height - $(this).height();
					// TODO improve approximation
					return close &lt; 10 &amp;&amp; close &gt; -10;
				});

			// TODO try to catch this earlier when scrollTop indicates the last page anyway
			if (!result.length) {
				result = this.element.children(".ui-menu-item:first");
			}
			this.activate(event, result);
		} else {
			this.activate(event, this.element.children(".ui-menu-item")
				.filter(!this.active || this.first() ? ":last" : ":first"));
		}
	},

	hasScroll: function() {
		return this.element.height() &lt; this.element[ $.fn.prop ? "prop" : "attr" ]("scrollHeight");
	},

	select: function( event ) {
		this._trigger("selected", event, { item: this.active });
	}
});

}(jQuery));

(function( $, undefined ) {

var lastActive, startXPos, startYPos, clickDragged,
	baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
	stateClasses = "ui-state-hover ui-state-active ",
	typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
	formResetHandler = function() {
		var buttons = $( this ).find( ":ui-button" );
		setTimeout(function() {
			buttons.button( "refresh" );
		}, 1 );
	},
	radioGroup = function( radio ) {
		var name = radio.name,
			form = radio.form,
			radios = $( [] );
		if ( name ) {
			if ( form ) {
				radios = $( form ).find( "[name='" + name + "']" );
			} else {
				radios = $( "[name='" + name + "']", radio.ownerDocument )
					.filter(function() {
						return !this.form;
					});
			}
		}
		return radios;
	};

$.widget( "ui.button", {
	options: {
		disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		}
	},
	_create: function() {
		this.element.closest( "form" )
			.unbind( "reset.button" )
			.bind( "reset.button", formResetHandler );

		if ( typeof this.options.disabled !== "boolean" ) {
			this.options.disabled = !!this.element.propAttr( "disabled" );
		} else {
			this.element.propAttr( "disabled", this.options.disabled );
		}

		this._determineButtonType();
		this.hasTitle = !!this.buttonElement.attr( "title" );

		var self = this,
			options = this.options,
			toggleButton = this.type === "checkbox" || this.type === "radio",
			hoverClass = "ui-state-hover" + ( !toggleButton ? " ui-state-active" : "" ),
			focusClass = "ui-state-focus";

		if ( options.label === null ) {
			options.label = this.buttonElement.html();
		}

		this.buttonElement
			.addClass( baseClasses )
			.attr( "role", "button" )
			.bind( "mouseenter.button", function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).addClass( "ui-state-hover" );
				if ( this === lastActive ) {
					$( this ).addClass( "ui-state-active" );
				}
			})
			.bind( "mouseleave.button", function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( hoverClass );
			})
			.bind( "click.button", function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				}
			});

		this.element
			.bind( "focus.button", function() {
				// no need to check disabled, focus won't be triggered anyway
				self.buttonElement.addClass( focusClass );
			})
			.bind( "blur.button", function() {
				self.buttonElement.removeClass( focusClass );
			});

		if ( toggleButton ) {
			this.element.bind( "change.button", function() {
				if ( clickDragged ) {
					return;
				}
				self.refresh();
			});
			// if mouse moves between mousedown and mouseup (drag) set clickDragged flag
			// prevents issue where button state changes but checkbox/radio checked state
			// does not in Firefox (see ticket #6970)
			this.buttonElement
				.bind( "mousedown.button", function( event ) {
					if ( options.disabled ) {
						return;
					}
					clickDragged = false;
					startXPos = event.pageX;
					startYPos = event.pageY;
				})
				.bind( "mouseup.button", function( event ) {
					if ( options.disabled ) {
						return;
					}
					if ( startXPos !== event.pageX || startYPos !== event.pageY ) {
						clickDragged = true;
					}
			});
		}

		if ( this.type === "checkbox" ) {
			this.buttonElement.bind( "click.button", function() {
				if ( options.disabled || clickDragged ) {
					return false;
				}
				$( this ).toggleClass( "ui-state-active" );
				self.buttonElement.attr( "aria-pressed", self.element[0].checked );
			});
		} else if ( this.type === "radio" ) {
			this.buttonElement.bind( "click.button", function() {
				if ( options.disabled || clickDragged ) {
					return false;
				}
				$( this ).addClass( "ui-state-active" );
				self.buttonElement.attr( "aria-pressed", "true" );

				var radio = self.element[ 0 ];
				radioGroup( radio )
					.not( radio )
					.map(function() {
						return $( this ).button( "widget" )[ 0 ];
					})
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			});
		} else {
			this.buttonElement
				.bind( "mousedown.button", function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					lastActive = this;
					$( document ).one( "mouseup", function() {
						lastActive = null;
					});
				})
				.bind( "mouseup.button", function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).removeClass( "ui-state-active" );
				})
				.bind( "keydown.button", function(event) {
					if ( options.disabled ) {
						return false;
					}
					if ( event.keyCode == $.ui.keyCode.SPACE || event.keyCode == $.ui.keyCode.ENTER ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				.bind( "keyup.button", function() {
					$( this ).removeClass( "ui-state-active" );
				});

			if ( this.buttonElement.is("a") ) {
				this.buttonElement.keyup(function(event) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						// TODO pass through original event correctly (just as 2nd argument doesn't work)
						$( this ).click();
					}
				});
			}
		}

		// TODO: pull out $.Widget's handling for the disabled option into
		// $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
		// be overridden by individual plugins
		this._setOption( "disabled", options.disabled );
		this._resetButton();
	},

	_determineButtonType: function() {

		if ( this.element.is(":checkbox") ) {
			this.type = "checkbox";
		} else if ( this.element.is(":radio") ) {
			this.type = "radio";
		} else if ( this.element.is("input") ) {
			this.type = "input";
		} else {
			this.type = "button";
		}

		if ( this.type === "checkbox" || this.type === "radio" ) {
			// we don't search against the document in case the element
			// is disconnected from the DOM
			var ancestor = this.element.parents().filter(":last"),
				labelSelector = "label[for='" + this.element.attr("id") + "']";
			this.buttonElement = ancestor.find( labelSelector );
			if ( !this.buttonElement.length ) {
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
				this.buttonElement = ancestor.filter( labelSelector );
				if ( !this.buttonElement.length ) {
					this.buttonElement = ancestor.find( labelSelector );
				}
			}
			this.element.addClass( "ui-helper-hidden-accessible" );

			var checked = this.element.is( ":checked" );
			if ( checked ) {
				this.buttonElement.addClass( "ui-state-active" );
			}
			this.buttonElement.attr( "aria-pressed", checked );
		} else {
			this.buttonElement = this.element;
		}
	},

	widget: function() {
		return this.buttonElement;
	},

	destroy: function() {
		this.element
			.removeClass( "ui-helper-hidden-accessible" );
		this.buttonElement
			.removeClass( baseClasses + " " + stateClasses + " " + typeClasses )
			.removeAttr( "role" )
			.removeAttr( "aria-pressed" )
			.html( this.buttonElement.find(".ui-button-text").html() );

		if ( !this.hasTitle ) {
			this.buttonElement.removeAttr( "title" );
		}

		$.Widget.prototype.destroy.call( this );
	},

	_setOption: function( key, value ) {
		$.Widget.prototype._setOption.apply( this, arguments );
		if ( key === "disabled" ) {
			if ( value ) {
				this.element.propAttr( "disabled", true );
			} else {
				this.element.propAttr( "disabled", false );
			}
			return;
		}
		this._resetButton();
	},

	refresh: function() {
		var isDisabled = this.element.is( ":disabled" );
		if ( isDisabled !== this.options.disabled ) {
			this._setOption( "disabled", isDisabled );
		}
		if ( this.type === "radio" ) {
			radioGroup( this.element[0] ).each(function() {
				if ( $( this ).is( ":checked" ) ) {
					$( this ).button( "widget" )
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					$( this ).button( "widget" )
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			});
		} else if ( this.type === "checkbox" ) {
			if ( this.element.is( ":checked" ) ) {
				this.buttonElement
					.addClass( "ui-state-active" )
					.attr( "aria-pressed", "true" );
			} else {
				this.buttonElement
					.removeClass( "ui-state-active" )
					.attr( "aria-pressed", "false" );
			}
		}
	},

	_resetButton: function() {
		if ( this.type === "input" ) {
			if ( this.options.label ) {
				this.element.val( this.options.label );
			}
			return;
		}
		var buttonElement = this.buttonElement.removeClass( typeClasses ),
			buttonText = $( "&lt;span&gt;&lt;/span&gt;", this.element[0].ownerDocument )
				.addClass( "ui-button-text" )
				.html( this.options.label )
				.appendTo( buttonElement.empty() )
				.text(),
			icons = this.options.icons,
			multipleIcons = icons.primary &amp;&amp; icons.secondary,
			buttonClasses = [];  

		if ( icons.primary || icons.secondary ) {
			if ( this.options.text ) {
				buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}

			if ( icons.primary ) {
				buttonElement.prepend( "&lt;span class='ui-button-icon-primary ui-icon " + icons.primary + "'&gt;&lt;/span&gt;" );
			}

			if ( icons.secondary ) {
				buttonElement.append( "&lt;span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'&gt;&lt;/span&gt;" );
			}

			if ( !this.options.text ) {
				buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

				if ( !this.hasTitle ) {
					buttonElement.attr( "title", buttonText );
				}
			}
		} else {
			buttonClasses.push( "ui-button-text-only" );
		}
		buttonElement.addClass( buttonClasses.join( " " ) );
	}
});

$.widget( "ui.buttonset", {
	options: {
		items: ":button, :submit, :reset, :checkbox, :radio, a, :data(button)"
	},

	_create: function() {
		this.element.addClass( "ui-buttonset" );
	},
	
	_init: function() {
		this.refresh();
	},

	_setOption: function( key, value ) {
		if ( key === "disabled" ) {
			this.buttons.button( "option", key, value );
		}

		$.Widget.prototype._setOption.apply( this, arguments );
	},
	
	refresh: function() {
		var rtl = this.element.css( "direction" ) === "rtl";
		
		this.buttons = this.element.find( this.options.items )
			.filter( ":ui-button" )
				.button( "refresh" )
			.end()
			.not( ":ui-button" )
				.button()
			.end()
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
				.filter( ":first" )
					.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
				.end()
				.filter( ":last" )
					.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
				.end()
			.end();
	},

	destroy: function() {
		this.element.removeClass( "ui-buttonset" );
		this.buttons
			.map(function() {
				return $( this ).button( "widget" )[ 0 ];
			})
				.removeClass( "ui-corner-left ui-corner-right" )
			.end()
			.button( "destroy" );

		$.Widget.prototype.destroy.call( this );
	}
});

}( jQuery ) );

(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.8.24" } });

var PROP_NAME = 'datepicker';
var dpuuid = new Date().getTime();
var instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this.debug = false; // Change this to true to start debugging
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
	this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
	this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
	this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
	this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
	this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
	this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
	this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
	this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[''] = { // Default regional settings
		closeText: 'Done', // Display text for close link
		prevText: 'Prev', // Display text for previous month link
		nextText: 'Next', // Display text for next month link
		currentText: 'Today', // Display text for current month link
		monthNames: ['January','February','March','April','May','June',
			'July','August','September','October','November','December'], // Names of months for drop-down and formatting
		monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
		dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
		dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
		dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
		weekHeader: 'Wk', // Column header for week of the year
		dateFormat: 'mm/dd/yy', // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: '' // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: 'focus', // 'focus' for popup on focus,
			// 'button' for trigger button, or 'both' for either
		showAnim: 'fadeIn', // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: '', // Display text following the input box, e.g. showing the format
		buttonText: '...', // Text for trigger button
		buttonImage: '', // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: 'c-10:c+10', // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: '+10', // Short year values &lt; this are in the current century,
			// &gt; this are in the previous century,
			// string value starting with '+' for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: 'fast', // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: '', // Selector for an alternate field to store selected dates into
		altFormat: '', // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional['']);
	this.dpDiv = bindHover($('&lt;div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"&gt;&lt;/div&gt;'));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: 'hasDatepicker',
	
	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	/* Debug logging (if enabled). */
	log: function () {
		if (this.debug)
			console.log.apply('', arguments);
	},
	
	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	   @param  settings  object - the new settings to use as defaults (anonymous object)
	   @return the manager object */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span
	   @param  settings  object - the new settings to use for this date picker instance (anonymous) */
	_attachDatepicker: function(target, settings) {
		// check for settings on the control itself - in namespace 'date:'
		var inlineSettings = null;
		for (var attrName in this._defaults) {
			var attrValue = target.getAttribute('date:' + attrName);
			if (attrValue) {
				inlineSettings = inlineSettings || {};
				try {
					inlineSettings[attrName] = eval(attrValue);
				} catch (err) {
					inlineSettings[attrName] = attrValue;
				}
			}
		}
		var nodeName = target.nodeName.toLowerCase();
		var inline = (nodeName == 'div' || nodeName == 'span');
		if (!target.id) {
			this.uuid += 1;
			target.id = 'dp' + this.uuid;
		}
		var inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {}, inlineSettings || {});
		if (nodeName == 'input') {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($('&lt;div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"&gt;&lt;/div&gt;')))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName))
			return;
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp).
			bind("setData.datepicker", function(event, key, value) {
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key) {
				return this._get(inst, key);
			});
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var appendText = this._get(inst, 'appendText');
		var isRTL = this._get(inst, 'isRTL');
		if (inst.append)
			inst.append.remove();
		if (appendText) {
			inst.append = $('&lt;span class="' + this._appendClass + '"&gt;' + appendText + '&lt;/span&gt;');
			input[isRTL ? 'before' : 'after'](inst.append);
		}
		input.unbind('focus', this._showDatepicker);
		if (inst.trigger)
			inst.trigger.remove();
		var showOn = this._get(inst, 'showOn');
		if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
			var buttonText = this._get(inst, 'buttonText');
			var buttonImage = this._get(inst, 'buttonImage');
			inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
				$('&lt;img/&gt;').addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$('&lt;button type="button"&gt;&lt;/button&gt;').addClass(this._triggerClass).
					html(buttonImage == '' ? buttonText : $('&lt;img/&gt;').attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? 'before' : 'after'](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing &amp;&amp; $.datepicker._lastInput == input[0])
					$.datepicker._hideDatepicker();
				else if ($.datepicker._datepickerShowing &amp;&amp; $.datepicker._lastInput != input[0]) {
					$.datepicker._hideDatepicker(); 
					$.datepicker._showDatepicker(input[0]);
				} else
					$.datepicker._showDatepicker(input[0]);
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, 'autoSize') &amp;&amp; !inst.inline) {
			var date = new Date(2009, 12 - 1, 20); // Ensure double digits
			var dateFormat = this._get(inst, 'dateFormat');
			if (dateFormat.match(/[DM]/)) {
				var findMax = function(names) {
					var max = 0;
					var maxI = 0;
					for (var i = 0; i &lt; names.length; i++) {
						if (names[i].length &gt; max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					'monthNames' : 'monthNamesShort'))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
			}
			inst.input.attr('size', this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName))
			return;
		divSpan.addClass(this.markerClassName).append(inst.dpDiv).
			bind("setData.datepicker", function(event, key, value){
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key){
				return this._get(inst, key);
			});
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	   @param  input     element - ignored
	   @param  date      string or Date - the initial date to display
	   @param  onSelect  function - the function to call when a date is selected
	   @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	   @param  pos       int[2] - coordinates for the dialog's position within the screen or
	                     event - with x/y coordinates or
	                     leave empty for default (screen centre)
	   @return the manager object */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var inst = this._dialogInst; // internal instance
		if (!inst) {
			this.uuid += 1;
			var id = 'dp' + this.uuid;
			this._dialogInput = $('&lt;input type="text" id="' + id +
				'" style="position: absolute; top: -100px; width: 0px;"/&gt;');
			this._dialogInput.keydown(this._doKeyDown);
			$('body').append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date &amp;&amp; date.constructor == Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			var browserWidth = document.documentElement.clientWidth;
			var browserHeight = document.documentElement.clientHeight;
			var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI)
			$.blockUI(this.dpDiv);
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	   @param  target    element - the target input field or division or span */
	_destroyDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName == 'input') {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind('focus', this._showDatepicker).
				unbind('keydown', this._doKeyDown).
				unbind('keypress', this._doKeyPress).
				unbind('keyup', this._doKeyUp);
		} else if (nodeName == 'div' || nodeName == 'span')
			$target.removeClass(this.markerClassName).empty();
	},

	/* Enable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_enableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = false;
			inst.trigger.filter('button').
				each(function() { this.disabled = false; }).end().
				filter('img').css({opacity: '1.0', cursor: ''});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().removeClass('ui-state-disabled');
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				removeAttr("disabled");
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_disableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = true;
			inst.trigger.filter('button').
				each(function() { this.disabled = true; }).end().
				filter('img').css({opacity: '0.5', cursor: 'default'});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().addClass('ui-state-disabled');
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				attr("disabled", "disabled");
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	   @param  target    element - the target input field or division or span
	   @return boolean - true if disabled, false if enabled */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i &lt; this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] == target)
				return true;
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	   @param  target  element - the target input field or division or span
	   @return  object - the associated instance data
	   @throws  error if a jQuery problem getting data */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw 'Missing instance data for this datepicker';
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span
	   @param  name    object - the new settings to update or
	                   string - the name of the setting to change or retrieve,
	                   when retrieving also 'all' for all instance settings or
	                   'defaults' for all global defaults
	   @param  value   any - the new value for the setting
	                   (omit if above is an object or to retrieve a value) */
	_optionDatepicker: function(target, name, value) {
		var inst = this._getInst(target);
		if (arguments.length == 2 &amp;&amp; typeof name == 'string') {
			return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name == 'all' ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}
		var settings = name || {};
		if (typeof name == 'string') {
			settings = {};
			settings[name] = value;
		}
		if (inst) {
			if (this._curInst == inst) {
				this._hideDatepicker();
			}
			var date = this._getDateDatepicker(target, true);
			var minDate = this._getMinMaxDate(inst, 'min');
			var maxDate = this._getMinMaxDate(inst, 'max');
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null &amp;&amp; settings['dateFormat'] !== undefined &amp;&amp; settings['minDate'] === undefined)
				inst.settings.minDate = this._formatDate(inst, minDate);
			if (maxDate !== null &amp;&amp; settings['dateFormat'] !== undefined &amp;&amp; settings['maxDate'] === undefined)
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	   @param  target   element - the target input field or division or span
	   @param  date     Date - the new date */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	   @param  target     element - the target input field or division or span
	   @param  noDefault  boolean - true if no default date is to be used
	   @return Date - the current date */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst &amp;&amp; !inst.inline)
			this._setDateFromField(inst, noDefault);
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var inst = $.datepicker._getInst(event.target);
		var handled = true;
		var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing)
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + 
									$.datepicker._currentClass + ')', inst.dpDiv);
						if (sel[0])
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
							var onSelect = $.datepicker._get(inst, 'onSelect');
							if (onSelect) {
								var dateStr = $.datepicker._formatDate(inst);

								// trigger custom callback
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
							}
						else
							$.datepicker._hideDatepicker();
						return false; // don't submit the form
						break; // select the value on enter
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, 'stepBigMonths') :
							-$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, 'stepBigMonths') :
							+$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, 'stepBigMonths') :
									-$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, 'stepBigMonths') :
									+$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		else if (event.keyCode == 36 &amp;&amp; event.ctrlKey) // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		else {
			handled = false;
		}
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if ($.datepicker._get(inst, 'constrainInput')) {
			var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
			var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr &lt; ' ' || !chars || chars.indexOf(chr) &gt; -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if (inst.input.val() != inst.lastVal) {
			try {
				var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));
				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
				$.datepicker.log(err);
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
       If false returned from beforeShow event handler do not show. 
	   @param  input  element - the input field attached to the date picker or
	                  event - if triggered by focus */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
			input = $('input', input.parentNode)[0];
		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
			return;
		var inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst &amp;&amp; $.datepicker._curInst != inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst &amp;&amp; $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}
		var beforeShow = $.datepicker._get(inst, 'beforeShow');
		var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
            //false
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);
		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);
		if ($.datepicker._inDialog) // hide cursor
			input.value = '';
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}
		var isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css('position') == 'fixed';
			return !isFixed;
		});
		if (isFixed &amp;&amp; $.browser.opera) { // correction for Opera when fixed and scrolled
			$.datepicker._pos[0] -= document.documentElement.scrollLeft;
			$.datepicker._pos[1] -= document.documentElement.scrollTop;
		}
		var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog &amp;&amp; $.blockUI ?
			'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',
			left: offset.left + 'px', top: offset.top + 'px'});
		if (!inst.inline) {
			var showAnim = $.datepicker._get(inst, 'showAnim');
			var duration = $.datepicker._get(inst, 'duration');
			var postProcess = function() {
				var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
				if( !! cover.length ){
					var borders = $.datepicker._getBorders(inst.dpDiv);
					cover.css({left: -borders[0], top: -borders[1],
						width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
				}
			};
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;
			if ($.effects &amp;&amp; $.effects[showAnim])
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
			if (!showAnim || !duration)
				postProcess();
			if (inst.input.is(':visible') &amp;&amp; !inst.input.is(':disabled'))
				inst.input.focus();
			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		var self = this;
		self.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		var borders = $.datepicker._getBorders(inst.dpDiv);
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);
		var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
		if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
			cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})
		}
		inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
		var numMonths = this._getNumberOfMonths(inst);
		var cols = numMonths[1];
		var width = 17;
		inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
		if (cols &gt; 1)
			inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
		inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
			'Class']('ui-datepicker-multi');
		inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
			'Class']('ui-datepicker-rtl');
		if (inst == $.datepicker._curInst &amp;&amp; $.datepicker._datepickerShowing &amp;&amp; inst.input &amp;&amp;
				// #6694 - don't focus the input if it's already focused
				// this breaks the change event in IE
				inst.input.is(':visible') &amp;&amp; !inst.input.is(':disabled') &amp;&amp; inst.input[0] != document.activeElement)
			inst.input.focus();
		// deffered render of the years select (to avoid flashes on Firefox) 
		if( inst.yearshtml ){
			var origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml &amp;&amp; inst.yearshtml ){
					inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	/* Retrieve the size of left and top borders for an element.
	   @param  elem  (jQuery object) the element of interest
	   @return  (number[2]) the left and top borders */
	_getBorders: function(elem) {
		var convert = function(value) {
			return {thin: 1, medium: 2, thick: 3}[value] || value;
		};
		return [parseFloat(convert(elem.css('border-left-width'))),
			parseFloat(convert(elem.css('border-top-width')))];
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth();
		var dpHeight = inst.dpDiv.outerHeight();
		var inputWidth = inst.input ? inst.input.outerWidth() : 0;
		var inputHeight = inst.input ? inst.input.outerHeight() : 0;
		var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());
		var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed &amp;&amp; offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed &amp;&amp; offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth &gt; viewWidth &amp;&amp; viewWidth &gt; dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight &gt; viewHeight &amp;&amp; viewHeight &gt; dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var inst = this._getInst(obj);
		var isRTL = this._get(inst, 'isRTL');
        while (obj &amp;&amp; (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
            obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
        }
        var position = $(obj).offset();
	    return [position.left, position.top];
	},

	/* Hide the date picker from view.
	   @param  input  element - the input field attached to the date picker */
	_hideDatepicker: function(input) {
		var inst = this._curInst;
		if (!inst || (input &amp;&amp; inst != $.data(input, PROP_NAME)))
			return;
		if (this._datepickerShowing) {
			var showAnim = this._get(inst, 'showAnim');
			var duration = this._get(inst, 'duration');
			var postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};
			if ($.effects &amp;&amp; $.effects[showAnim])
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
					(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
			if (!showAnim)
				postProcess();
			this._datepickerShowing = false;
			var onClose = this._get(inst, 'onClose');
			if (onClose)
				onClose.apply((inst.input ? inst.input[0] : null),
					[(inst.input ? inst.input.val() : ''), inst]);
			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });
				if ($.blockUI) {
					$.unblockUI();
					$('body').append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst)
			return;

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id != $.datepicker._mainDivId &amp;&amp;
				$target.parents('#' + $.datepicker._mainDivId).length == 0 &amp;&amp;
				!$target.hasClass($.datepicker.markerClassName) &amp;&amp;
				!$target.closest("." + $.datepicker._triggerClass).length &amp;&amp;
				$.datepicker._datepickerShowing &amp;&amp; !($.datepicker._inDialog &amp;&amp; $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) &amp;&amp; $.datepicker._curInst != inst ) )
			$.datepicker._hideDatepicker();
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._get(inst, 'gotoCurrent') &amp;&amp; inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		}
		else {
			var date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
		inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
			parseInt(select.options[select.selectedIndex].value,10);
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var target = $(id);
		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}
		var inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $('a', td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		this._selectDate(target, '');
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input)
			inst.input.val(dateStr);
		this._updateAlternate(inst);
		var onSelect = this._get(inst, 'onSelect');
		if (onSelect)
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		else if (inst.input)
			inst.input.trigger('change'); // fire the change event
		if (inst.inline)
			this._updateDatepicker(inst);
		else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) != 'object')
				inst.input.focus(); // restore focus
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altField = this._get(inst, 'altField');
		if (altField) { // update alternate field too
			var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
			var date = this._getDate(inst);
			var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	   @param  date  Date - the date to customise
	   @return [boolean, string] - is this date selectable?, what is its CSS class? */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day &gt; 0 &amp;&amp; day &lt; 6), ''];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	   @param  date  Date - the date to get the week for
	   @return  number - the number of the week within the year that contains this date */
	iso8601Week: function(date) {
		var checkDate = new Date(date.getTime());
		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
		var time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	   See formatDate below for the possible formats.

	   @param  format    string - the expected format of the date
	   @param  value     string - the date in the above format
	   @param  settings  Object - attributes include:
	                     shortYearCutoff  number - the cutoff year for determining the century (optional)
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  Date - the extracted date value or null if value is blank */
	parseDate: function (format, value, settings) {
		if (format == null || value == null)
			throw 'Invalid arguments';
		value = (typeof value == 'object' ? value.toString() : value + '');
		if (value == '')
			return null;
		var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		var year = -1;
		var month = -1;
		var day = -1;
		var doy = -1;
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 &lt; format.length &amp;&amp; format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Extract a number from the string value
		var getNumber = function(match) {
			var isDoubled = lookAhead(match);
			var size = (match == '@' ? 14 : (match == '!' ? 20 :
				(match == 'y' &amp;&amp; isDoubled ? 4 : (match == 'o' ? 3 : 2))));
			var digits = new RegExp('^\\d{1,' + size + '}');
			var num = value.substring(iValue).match(digits);
			if (!num)
				throw 'Missing number at position ' + iValue;
			iValue += num[0].length;
			return parseInt(num[0], 10);
		};
		// Extract a name from the string value and convert to an index
		var getName = function(match, shortNames, longNames) {
			var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
				return [ [k, v] ];
			}).sort(function (a, b) {
				return -(a[1].length - b[1].length);
			});
			var index = -1;
			$.each(names, function (i, pair) {
				var name = pair[1];
				if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
					index = pair[0];
					iValue += name.length;
					return false;
				}
			});
			if (index != -1)
				return index + 1;
			else
				throw 'Unknown name at position ' + iValue;
		};
		// Confirm that a literal character matches the string value
		var checkLiteral = function() {
			if (value.charAt(iValue) != format.charAt(iFormat))
				throw 'Unexpected literal at position ' + iValue;
			iValue++;
		};
		var iValue = 0;
		for (var iFormat = 0; iFormat &lt; format.length; iFormat++) {
			if (literal)
				if (format.charAt(iFormat) == "'" &amp;&amp; !lookAhead("'"))
					literal = false;
				else
					checkLiteral();
			else
				switch (format.charAt(iFormat)) {
					case 'd':
						day = getNumber('d');
						break;
					case 'D':
						getName('D', dayNamesShort, dayNames);
						break;
					case 'o':
						doy = getNumber('o');
						break;
					case 'm':
						month = getNumber('m');
						break;
					case 'M':
						month = getName('M', monthNamesShort, monthNames);
						break;
					case 'y':
						year = getNumber('y');
						break;
					case '@':
						var date = new Date(getNumber('@'));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case '!':
						var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'"))
							checkLiteral();
						else
							literal = true;
						break;
					default:
						checkLiteral();
				}
		}
		if (iValue &lt; value.length){
			throw "Extra/unparsed characters found in date: " + value.substring(iValue);
		}
		if (year == -1)
			year = new Date().getFullYear();
		else if (year &lt; 100)
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year &lt;= shortYearCutoff ? 0 : -100);
		if (doy &gt; -1) {
			month = 1;
			day = doy;
			do {
				var dim = this._getDaysInMonth(year, month - 1);
				if (day &lt;= dim)
					break;
				month++;
				day -= dim;
			} while (true);
		}
		var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
			throw 'Invalid date'; // E.g. 31/02/00
		return date;
	},

	/* Standard date formats. */
	ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
	COOKIE: 'D, dd M yy',
	ISO_8601: 'yy-mm-dd',
	RFC_822: 'D, d M y',
	RFC_850: 'DD, dd-M-y',
	RFC_1036: 'D, d M y',
	RFC_1123: 'D, d M yy',
	RFC_2822: 'D, d M yy',
	RSS: 'D, d M y', // RFC 822
	TICKS: '!',
	TIMESTAMP: '@',
	W3C: 'yy-mm-dd', // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	   The format can be combinations of the following:
	   d  - day of month (no leading zero)
	   dd - day of month (two digit)
	   o  - day of year (no leading zeros)
	   oo - day of year (three digit)
	   D  - day name short
	   DD - day name long
	   m  - month of year (no leading zero)
	   mm - month of year (two digit)
	   M  - month name short
	   MM - month name long
	   y  - year (two digit)
	   yy - year (four digit)
	   @ - Unix timestamp (ms since 01/01/1970)
	   ! - Windows ticks (100ns since 01/01/0001)
	   '...' - literal text
	   '' - single quote

	   @param  format    string - the desired format of the date
	   @param  date      Date - the date value to format
	   @param  settings  Object - attributes include:
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  string - the date in the above format */
	formatDate: function (format, date, settings) {
		if (!date)
			return '';
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 &lt; format.length &amp;&amp; format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Format a number, with leading zero if necessary
		var formatNumber = function(match, value, len) {
			var num = '' + value;
			if (lookAhead(match))
				while (num.length &lt; len)
					num = '0' + num;
			return num;
		};
		// Format a name, short or long as requested
		var formatName = function(match, value, shortNames, longNames) {
			return (lookAhead(match) ? longNames[value] : shortNames[value]);
		};
		var output = '';
		var literal = false;
		if (date)
			for (var iFormat = 0; iFormat &lt; format.length; iFormat++) {
				if (literal)
					if (format.charAt(iFormat) == "'" &amp;&amp; !lookAhead("'"))
						literal = false;
					else
						output += format.charAt(iFormat);
				else
					switch (format.charAt(iFormat)) {
						case 'd':
							output += formatNumber('d', date.getDate(), 2);
							break;
						case 'D':
							output += formatName('D', date.getDay(), dayNamesShort, dayNames);
							break;
						case 'o':
							output += formatNumber('o',
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case 'm':
							output += formatNumber('m', date.getMonth() + 1, 2);
							break;
						case 'M':
							output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
							break;
						case 'y':
							output += (lookAhead('y') ? date.getFullYear() :
								(date.getYear() % 100 &lt; 10 ? '0' : '') + date.getYear() % 100);
							break;
						case '@':
							output += date.getTime();
							break;
						case '!':
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'"))
								output += "'";
							else
								literal = true;
							break;
						default:
							output += format.charAt(iFormat);
					}
			}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var chars = '';
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 &lt; format.length &amp;&amp; format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		for (var iFormat = 0; iFormat &lt; format.length; iFormat++)
			if (literal)
				if (format.charAt(iFormat) == "'" &amp;&amp; !lookAhead("'"))
					literal = false;
				else
					chars += format.charAt(iFormat);
			else
				switch (format.charAt(iFormat)) {
					case 'd': case 'm': case 'y': case '@':
						chars += '0123456789';
						break;
					case 'D': case 'M':
						return null; // Accept anything
					case "'":
						if (lookAhead("'"))
							chars += "'";
						else
							literal = true;
						break;
					default:
						chars += format.charAt(iFormat);
				}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() == inst.lastVal) {
			return;
		}
		var dateFormat = this._get(inst, 'dateFormat');
		var dates = inst.lastVal = inst.input ? inst.input.val() : null;
		var date, defaultDate;
		date = defaultDate = this._getDefaultDate(inst);
		var settings = this._getFormatConfig(inst);
		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			this.log(event);
			dates = (noDefault ? '' : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
			var date = new Date();
			date.setDate(date.getDate() + offset);
			return date;
		};
		var offsetString = function(offset) {
			try {
				return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					offset, $.datepicker._getFormatConfig(inst));
			}
			catch (e) {
				// Ignore
			}
			var date = (offset.toLowerCase().match(/^c/) ?
				$.datepicker._getDate(inst) : null) || new Date();
			var year = date.getFullYear();
			var month = date.getMonth();
			var day = date.getDate();
			var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
			var matches = pattern.exec(offset);
			while (matches) {
				switch (matches[2] || 'd') {
					case 'd' : case 'D' :
						day += parseInt(matches[1],10); break;
					case 'w' : case 'W' :
						day += parseInt(matches[1],10) * 7; break;
					case 'm' : case 'M' :
						month += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
					case 'y': case 'Y' :
						year += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
				}
				matches = pattern.exec(offset);
			}
			return new Date(year, month, day);
		};
		var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
			(typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
		newDate = (newDate &amp;&amp; newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	   Hours may be non-zero on daylight saving cut-over:
	   &gt; 12 when midnight changeover, but then cannot generate
	   midnight datetime, so jump to 1AM, otherwise reset.
	   @param  date  (Date) the date to check
	   @return  (Date) the corrected date */
	_daylightSavingAdjust: function(date) {
		if (!date) return null;
		date.setHours(date.getHours() &gt; 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date;
		var origMonth = inst.selectedMonth;
		var origYear = inst.selectedYear;
		var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) &amp;&amp; !noChange)
			this._notifyChange(inst);
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? '' : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input &amp;&amp; inst.input.val() == '') ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, 'stepMonths');
		var id = '#' + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find('[data-handler]').map(function () {
			var handler = {
				prev: function () {
					window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, -stepMonths, 'M');
				},
				next: function () {
					window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, +stepMonths, 'M');
				},
				hide: function () {
					window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();
				},
				today: function () {
					window['DP_jQuery_' + dpuuid].datepicker._gotoToday(id);
				},
				selectDay: function () {
					window['DP_jQuery_' + dpuuid].datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
					return false;
				},
				selectMonth: function () {
					window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'M');
					return false;
				},
				selectYear: function () {
					window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'Y');
					return false;
				}
			};
			$(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);
		});
	},
	
	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var today = new Date();
		today = this._daylightSavingAdjust(
			new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
		var isRTL = this._get(inst, 'isRTL');
		var showButtonPanel = this._get(inst, 'showButtonPanel');
		var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
		var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
		var numMonths = this._getNumberOfMonths(inst);
		var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
		var stepMonths = this._get(inst, 'stepMonths');
		var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
		var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
			new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var drawMonth = inst.drawMonth - showCurrentAtPos;
		var drawYear = inst.drawYear;
		if (drawMonth &lt; 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate &amp;&amp; maxDraw &lt; minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) &gt; maxDraw) {
				drawMonth--;
				if (drawMonth &lt; 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;
		var prevText = this._get(inst, 'prevText');
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));
		var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			'&lt;a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click"' +
			' title="' + prevText + '"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '"&gt;' + prevText + '&lt;/span&gt;&lt;/a&gt;' :
			(hideIfNoPrevNext ? '' : '&lt;a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '"&gt;' + prevText + '&lt;/span&gt;&lt;/a&gt;'));
		var nextText = this._get(inst, 'nextText');
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));
		var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			'&lt;a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click"' +
			' title="' + nextText + '"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '"&gt;' + nextText + '&lt;/span&gt;&lt;/a&gt;' :
			(hideIfNoPrevNext ? '' : '&lt;a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '"&gt;' + nextText + '&lt;/span&gt;&lt;/a&gt;'));
		var currentText = this._get(inst, 'currentText');
		var gotoDate = (this._get(inst, 'gotoCurrent') &amp;&amp; inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
		var controls = (!inst.inline ? '&lt;button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click"&gt;' +
			this._get(inst, 'closeText') + '&lt;/button&gt;' : '');
		var buttonPanel = (showButtonPanel) ? '&lt;div class="ui-datepicker-buttonpane ui-widget-content"&gt;' + (isRTL ? controls : '') +
			(this._isInRange(inst, gotoDate) ? '&lt;button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"' +
			'&gt;' + currentText + '&lt;/button&gt;' : '') + (isRTL ? '' : controls) + '&lt;/div&gt;' : '';
		var firstDay = parseInt(this._get(inst, 'firstDay'),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);
		var showWeek = this._get(inst, 'showWeek');
		var dayNames = this._get(inst, 'dayNames');
		var dayNamesShort = this._get(inst, 'dayNamesShort');
		var dayNamesMin = this._get(inst, 'dayNamesMin');
		var monthNames = this._get(inst, 'monthNames');
		var monthNamesShort = this._get(inst, 'monthNamesShort');
		var beforeShowDay = this._get(inst, 'beforeShowDay');
		var showOtherMonths = this._get(inst, 'showOtherMonths');
		var selectOtherMonths = this._get(inst, 'selectOtherMonths');
		var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
		var defaultDate = this._getDefaultDate(inst);
		var html = '';
		for (var row = 0; row &lt; numMonths[0]; row++) {
			var group = '';
			this.maxRows = 4;
			for (var col = 0; col &lt; numMonths[1]; col++) {
				var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				var cornerClass = ' ui-corner-all';
				var calender = '';
				if (isMultiMonth) {
					calender += '&lt;div class="ui-datepicker-group';
					if (numMonths[1] &gt; 1)
						switch (col) {
							case 0: calender += ' ui-datepicker-group-first';
								cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;
							case numMonths[1]-1: calender += ' ui-datepicker-group-last';
								cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;
							default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;
						}
					calender += '"&gt;';
				}
				calender += '&lt;div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '"&gt;' +
					(/all|left/.test(cornerClass) &amp;&amp; row == 0 ? (isRTL ? next : prev) : '') +
					(/all|right/.test(cornerClass) &amp;&amp; row == 0 ? (isRTL ? prev : next) : '') +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row &gt; 0 || col &gt; 0, monthNames, monthNamesShort) + // draw month headers
					'&lt;/div&gt;&lt;table class="ui-datepicker-calendar"&gt;&lt;thead&gt;' +
					'&lt;tr&gt;';
				var thead = (showWeek ? '&lt;th class="ui-datepicker-week-col"&gt;' + this._get(inst, 'weekHeader') + '&lt;/th&gt;' : '');
				for (var dow = 0; dow &lt; 7; dow++) { // days of the week
					var day = (dow + firstDay) % 7;
					thead += '&lt;th' + ((dow + firstDay + 6) % 7 &gt;= 5 ? ' class="ui-datepicker-week-end"' : '') + '&gt;' +
						'&lt;span title="' + dayNames[day] + '"&gt;' + dayNamesMin[day] + '&lt;/span&gt;&lt;/th&gt;';
				}
				calender += thead + '&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;';
				var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear == inst.selectedYear &amp;&amp; drawMonth == inst.selectedMonth)
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				var numRows = (isMultiMonth ? this.maxRows &gt; curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (var dRow = 0; dRow &lt; numRows; dRow++) { // create date picker rows
					calender += '&lt;tr&gt;';
					var tbody = (!showWeek ? '' : '&lt;td class="ui-datepicker-week-col"&gt;' +
						this._get(inst, 'calculateWeek')(printDate) + '&lt;/td&gt;');
					for (var dow = 0; dow &lt; 7; dow++) { // create date picker days
						var daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
						var otherMonth = (printDate.getMonth() != drawMonth);
						var unselectable = (otherMonth &amp;&amp; !selectOtherMonths) || !daySettings[0] ||
							(minDate &amp;&amp; printDate &lt; minDate) || (maxDate &amp;&amp; printDate &gt; maxDate);
						tbody += '&lt;td class="' +
							((dow + firstDay + 6) % 7 &gt;= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
							(otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
							((printDate.getTime() == selectedDate.getTime() &amp;&amp; drawMonth == inst.selectedMonth &amp;&amp; inst._keyEvent) || // user pressed key
							(defaultDate.getTime() == printDate.getTime() &amp;&amp; defaultDate.getTime() == selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							' ' + this._dayOverClass : '') + // highlight selected day
							(unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days
							(otherMonth &amp;&amp; !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
							(printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
							(printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
							((!otherMonth || showOtherMonths) &amp;&amp; daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
							(unselectable ? '' : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + '&gt;' + // actions
							(otherMonth &amp;&amp; !showOtherMonths ? '&amp;#xa0;' : // display for other months
							(unselectable ? '&lt;span class="ui-state-default"&gt;' + printDate.getDate() + '&lt;/span&gt;' : '&lt;a class="ui-state-default' +
							(printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
							(printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
							(otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
							'" href="#"&gt;' + printDate.getDate() + '&lt;/a&gt;')) + '&lt;/td&gt;'; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + '&lt;/tr&gt;';
				}
				drawMonth++;
				if (drawMonth &gt; 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += '&lt;/tbody&gt;&lt;/table&gt;' + (isMultiMonth ? '&lt;/div&gt;' + 
							((numMonths[0] &gt; 0 &amp;&amp; col == numMonths[1]-1) ? '&lt;div class="ui-datepicker-row-break"&gt;&lt;/div&gt;' : '') : '');
				group += calender;
			}
			html += group;
		}
		html += buttonPanel + ($.browser.msie &amp;&amp; parseInt($.browser.version,10) &lt; 7 &amp;&amp; !inst.inline ?
			'&lt;iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"&gt;&lt;/iframe&gt;' : '');
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {
		var changeMonth = this._get(inst, 'changeMonth');
		var changeYear = this._get(inst, 'changeYear');
		var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
		var html = '&lt;div class="ui-datepicker-title"&gt;';
		var monthHtml = '';
		// month selection
		if (secondary || !changeMonth)
			monthHtml += '&lt;span class="ui-datepicker-month"&gt;' + monthNames[drawMonth] + '&lt;/span&gt;';
		else {
			var inMinYear = (minDate &amp;&amp; minDate.getFullYear() == drawYear);
			var inMaxYear = (maxDate &amp;&amp; maxDate.getFullYear() == drawYear);
			monthHtml += '&lt;select class="ui-datepicker-month" data-handler="selectMonth" data-event="change"&gt;';
			for (var month = 0; month &lt; 12; month++) {
				if ((!inMinYear || month &gt;= minDate.getMonth()) &amp;&amp;
						(!inMaxYear || month &lt;= maxDate.getMonth()))
					monthHtml += '&lt;option value="' + month + '"' +
						(month == drawMonth ? ' selected="selected"' : '') +
						'&gt;' + monthNamesShort[month] + '&lt;/option&gt;';
			}
			monthHtml += '&lt;/select&gt;';
		}
		if (!showMonthAfterYear)
			html += monthHtml + (secondary || !(changeMonth &amp;&amp; changeYear) ? '&amp;#xa0;' : '');
		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = '';
			if (secondary || !changeYear)
				html += '&lt;span class="ui-datepicker-year"&gt;' + drawYear + '&lt;/span&gt;';
			else {
				// determine range of years to display
				var years = this._get(inst, 'yearRange').split(':');
				var thisYear = new Date().getFullYear();
				var determineYear = function(value) {
					var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				var year = determineYear(years[0]);
				var endYear = Math.max(year, determineYear(years[1] || ''));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += '&lt;select class="ui-datepicker-year" data-handler="selectYear" data-event="change"&gt;';
				for (; year &lt;= endYear; year++) {
					inst.yearshtml += '&lt;option value="' + year + '"' +
						(year == drawYear ? ' selected="selected"' : '') +
						'&gt;' + year + '&lt;/option&gt;';
				}
				inst.yearshtml += '&lt;/select&gt;';
				
				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}
		html += this._get(inst, 'yearSuffix');
		if (showMonthAfterYear)
			html += (secondary || !(changeMonth &amp;&amp; changeYear) ? '&amp;#xa0;' : '') + monthHtml;
		html += '&lt;/div&gt;'; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period == 'Y' ? offset : 0);
		var month = inst.drawMonth + (period == 'M' ? offset : 0);
		var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
			(period == 'D' ? offset : 0);
		var date = this._restrictMinMax(inst,
			this._daylightSavingAdjust(new Date(year, month, day)));
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period == 'M' || period == 'Y')
			this._notifyChange(inst);
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var newDate = (minDate &amp;&amp; date &lt; minDate ? minDate : date);
		newDate = (maxDate &amp;&amp; newDate &gt; maxDate ? maxDate : newDate);
		return newDate;
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, 'onChangeMonthYear');
		if (onChange)
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, 'numberOfMonths');
		return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst);
		var date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset &lt; 0 ? offset : numMonths[0] * numMonths[1]), 1));
		if (offset &lt; 0)
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		return ((!minDate || date.getTime() &gt;= minDate.getTime()) &amp;&amp;
			(!maxDate || date.getTime() &lt;= maxDate.getTime()));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, 'shortYearCutoff');
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
			monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day == 'object' ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */ 
function bindHover(dpDiv) {
	var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
	return dpDiv.bind('mouseout', function(event) {
			var elem = $( event.target ).closest( selector );
			if ( !elem.length ) {
				return;
			}
			elem.removeClass( "ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover" );
		})
		.bind('mouseover', function(event) {
			var elem = $( event.target ).closest( selector );
			if ($.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0]) ||
					!elem.length ) {
				return;
			}
			elem.parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
			elem.addClass('ui-state-hover');
			if (elem.hasClass('ui-datepicker-prev')) elem.addClass('ui-datepicker-prev-hover');
			if (elem.hasClass('ui-datepicker-next')) elem.addClass('ui-datepicker-next-hover');
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props)
		if (props[name] == null || props[name] == undefined)
			target[name] = props[name];
	return target;
};

/* Determine whether an object is an array. */
function isArray(a) {
	return (a &amp;&amp; (($.browser.safari &amp;&amp; typeof a == 'object' &amp;&amp; a.length) ||
		(a.constructor &amp;&amp; a.constructor.toString().match(/\Array\(\)/))));
};

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){
	
	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}
	
	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick).
			find('body').append($.datepicker.dpDiv);
		$.datepicker.initialized = true;
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options == 'string' &amp;&amp; (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	if (options == 'option' &amp;&amp; arguments.length == 2 &amp;&amp; typeof arguments[1] == 'string')
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	return this.each(function() {
		typeof options == 'string' ?
			$.datepicker['_' + options + 'Datepicker'].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.8.24";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
window['DP_jQuery_' + dpuuid] = $;

})(jQuery);

(function( $, undefined ) {

var uiDialogClasses =
		'ui-dialog ' +
		'ui-widget ' +
		'ui-widget-content ' +
		'ui-corner-all ',
	sizeRelatedOptions = {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},
	resizableRelatedOptions = {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	};

$.widget("ui.dialog", {
	options: {
		autoOpen: true,
		buttons: {},
		closeOnEscape: true,
		closeText: 'close',
		dialogClass: '',
		draggable: true,
		hide: null,
		height: 'auto',
		maxHeight: false,
		maxWidth: false,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: 'center',
			at: 'center',
			collision: 'fit',
			// ensure that the titlebar is never outside the document
			using: function(pos) {
				var topOffset = $(this).css(pos).offset().top;
				if (topOffset &lt; 0) {
					$(this).css('top', pos.top - topOffset);
				}
			}
		},
		resizable: true,
		show: null,
		stack: true,
		title: '',
		width: 300,
		zIndex: 1000
	},

	_create: function() {
		this.originalTitle = this.element.attr('title');
		// #5742 - .attr() might return a DOMElement
		if ( typeof this.originalTitle !== "string" ) {
			this.originalTitle = "";
		}

		this.options.title = this.options.title || this.originalTitle;
		var self = this,
			options = self.options,

			title = options.title || '&amp;#160;',
			titleId = $.ui.dialog.getTitleId(self.element),

			uiDialog = (self.uiDialog = $('&lt;div&gt;&lt;/div&gt;'))
				.appendTo(document.body)
				.hide()
				.addClass(uiDialogClasses + options.dialogClass)
				.css({
					zIndex: options.zIndex
				})
				// setting tabIndex makes the div focusable
				// setting outline to 0 prevents a border on focus in Mozilla
				.attr('tabIndex', -1).css('outline', 0).keydown(function(event) {
					if (options.closeOnEscape &amp;&amp; !event.isDefaultPrevented() &amp;&amp; event.keyCode &amp;&amp;
						event.keyCode === $.ui.keyCode.ESCAPE) {
						
						self.close(event);
						event.preventDefault();
					}
				})
				.attr({
					role: 'dialog',
					'aria-labelledby': titleId
				})
				.mousedown(function(event) {
					self.moveToTop(false, event);
				}),

			uiDialogContent = self.element
				.show()
				.removeAttr('title')
				.addClass(
					'ui-dialog-content ' +
					'ui-widget-content')
				.appendTo(uiDialog),

			uiDialogTitlebar = (self.uiDialogTitlebar = $('&lt;div&gt;&lt;/div&gt;'))
				.addClass(
					'ui-dialog-titlebar ' +
					'ui-widget-header ' +
					'ui-corner-all ' +
					'ui-helper-clearfix'
				)
				.prependTo(uiDialog),

			uiDialogTitlebarClose = $('&lt;a href="#"&gt;&lt;/a&gt;')
				.addClass(
					'ui-dialog-titlebar-close ' +
					'ui-corner-all'
				)
				.attr('role', 'button')
				.hover(
					function() {
						uiDialogTitlebarClose.addClass('ui-state-hover');
					},
					function() {
						uiDialogTitlebarClose.removeClass('ui-state-hover');
					}
				)
				.focus(function() {
					uiDialogTitlebarClose.addClass('ui-state-focus');
				})
				.blur(function() {
					uiDialogTitlebarClose.removeClass('ui-state-focus');
				})
				.click(function(event) {
					self.close(event);
					return false;
				})
				.appendTo(uiDialogTitlebar),

			uiDialogTitlebarCloseText = (self.uiDialogTitlebarCloseText = $('&lt;span&gt;&lt;/span&gt;'))
				.addClass(
					'ui-icon ' +
					'ui-icon-closethick'
				)
				.text(options.closeText)
				.appendTo(uiDialogTitlebarClose),

			uiDialogTitle = $('&lt;span&gt;&lt;/span&gt;')
				.addClass('ui-dialog-title')
				.attr('id', titleId)
				.html(title)
				.prependTo(uiDialogTitlebar);

		//handling of deprecated beforeclose (vs beforeClose) option
		//Ticket #4669 http://dev.jqueryui.com/ticket/4669
		//TODO: remove in 1.9pre
		if ($.isFunction(options.beforeclose) &amp;&amp; !$.isFunction(options.beforeClose)) {
			options.beforeClose = options.beforeclose;
		}

		uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();

		if (options.draggable &amp;&amp; $.fn.draggable) {
			self._makeDraggable();
		}
		if (options.resizable &amp;&amp; $.fn.resizable) {
			self._makeResizable();
		}

		self._createButtons(options.buttons);
		self._isOpen = false;

		if ($.fn.bgiframe) {
			uiDialog.bgiframe();
		}
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	destroy: function() {
		var self = this;
		
		if (self.overlay) {
			self.overlay.destroy();
		}
		self.uiDialog.hide();
		self.element
			.unbind('.dialog')
			.removeData('dialog')
			.removeClass('ui-dialog-content ui-widget-content')
			.hide().appendTo('body');
		self.uiDialog.remove();

		if (self.originalTitle) {
			self.element.attr('title', self.originalTitle);
		}

		return self;
	},

	widget: function() {
		return this.uiDialog;
	},

	close: function(event) {
		var self = this,
			maxZ, thisZ;
		
		if (false === self._trigger('beforeClose', event)) {
			return;
		}

		if (self.overlay) {
			self.overlay.destroy();
		}
		self.uiDialog.unbind('keypress.ui-dialog');

		self._isOpen = false;

		if (self.options.hide) {
			self.uiDialog.hide(self.options.hide, function() {
				self._trigger('close', event);
			});
		} else {
			self.uiDialog.hide();
			self._trigger('close', event);
		}

		$.ui.dialog.overlay.resize();

		// adjust the maxZ to allow other modal dialogs to continue to work (see #4309)
		if (self.options.modal) {
			maxZ = 0;
			$('.ui-dialog').each(function() {
				if (this !== self.uiDialog[0]) {
					thisZ = $(this).css('z-index');
					if(!isNaN(thisZ)) {
						maxZ = Math.max(maxZ, thisZ);
					}
				}
			});
			$.ui.dialog.maxZ = maxZ;
		}

		return self;
	},

	isOpen: function() {
		return this._isOpen;
	},

	// the force parameter allows us to move modal dialogs to their correct
	// position on open
	moveToTop: function(force, event) {
		var self = this,
			options = self.options,
			saveScroll;

		if ((options.modal &amp;&amp; !force) ||
			(!options.stack &amp;&amp; !options.modal)) {
			return self._trigger('focus', event);
		}

		if (options.zIndex &gt; $.ui.dialog.maxZ) {
			$.ui.dialog.maxZ = options.zIndex;
		}
		if (self.overlay) {
			$.ui.dialog.maxZ += 1;
			self.overlay.$el.css('z-index', $.ui.dialog.overlay.maxZ = $.ui.dialog.maxZ);
		}

		//Save and then restore scroll since Opera 9.5+ resets when parent z-Index is changed.
		//  http://ui.jquery.com/bugs/ticket/3193
		saveScroll = { scrollTop: self.element.scrollTop(), scrollLeft: self.element.scrollLeft() };
		$.ui.dialog.maxZ += 1;
		self.uiDialog.css('z-index', $.ui.dialog.maxZ);
		self.element.attr(saveScroll);
		self._trigger('focus', event);

		return self;
	},

	open: function() {
		if (this._isOpen) { return; }

		var self = this,
			options = self.options,
			uiDialog = self.uiDialog;

		self.overlay = options.modal ? new $.ui.dialog.overlay(self) : null;
		self._size();
		self._position(options.position);
		uiDialog.show(options.show);
		self.moveToTop(true);

		// prevent tabbing out of modal dialogs
		if ( options.modal ) {
			uiDialog.bind( "keydown.ui-dialog", function( event ) {
				if ( event.keyCode !== $.ui.keyCode.TAB ) {
					return;
				}

				var tabbables = $(':tabbable', this),
					first = tabbables.filter(':first'),
					last  = tabbables.filter(':last');

				if (event.target === last[0] &amp;&amp; !event.shiftKey) {
					first.focus(1);
					return false;
				} else if (event.target === first[0] &amp;&amp; event.shiftKey) {
					last.focus(1);
					return false;
				}
			});
		}

		// set focus to the first tabbable element in the content area or the first button
		// if there are no tabbable elements, set focus on the dialog itself
		$(self.element.find(':tabbable').get().concat(
			uiDialog.find('.ui-dialog-buttonpane :tabbable').get().concat(
				uiDialog.get()))).eq(0).focus();

		self._isOpen = true;
		self._trigger('open');

		return self;
	},

	_createButtons: function(buttons) {
		var self = this,
			hasButtons = false,
			uiDialogButtonPane = $('&lt;div&gt;&lt;/div&gt;')
				.addClass(
					'ui-dialog-buttonpane ' +
					'ui-widget-content ' +
					'ui-helper-clearfix'
				),
			uiButtonSet = $( "&lt;div&gt;&lt;/div&gt;" )
				.addClass( "ui-dialog-buttonset" )
				.appendTo( uiDialogButtonPane );

		// if we already have a button pane, remove it
		self.uiDialog.find('.ui-dialog-buttonpane').remove();

		if (typeof buttons === 'object' &amp;&amp; buttons !== null) {
			$.each(buttons, function() {
				return !(hasButtons = true);
			});
		}
		if (hasButtons) {
			$.each(buttons, function(name, props) {
				props = $.isFunction( props ) ?
					{ click: props, text: name } :
					props;
				var button = $('&lt;button type="button"&gt;&lt;/button&gt;')
					.click(function() {
						props.click.apply(self.element[0], arguments);
					})
					.appendTo(uiButtonSet);
				// can't use .attr( props, true ) with jQuery 1.3.2.
				$.each( props, function( key, value ) {
					if ( key === "click" ) {
						return;
					}
					if ( key in button ) {
						button[ key ]( value );
					} else {
						button.attr( key, value );
					}
				});
				if ($.fn.button) {
					button.button();
				}
			});
			uiDialogButtonPane.appendTo(self.uiDialog);
		}
	},

	_makeDraggable: function() {
		var self = this,
			options = self.options,
			doc = $(document),
			heightBeforeDrag;

		function filteredUi(ui) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		self.uiDialog.draggable({
			cancel: '.ui-dialog-content, .ui-dialog-titlebar-close',
			handle: '.ui-dialog-titlebar',
			containment: 'document',
			start: function(event, ui) {
				heightBeforeDrag = options.height === "auto" ? "auto" : $(this).height();
				$(this).height($(this).height()).addClass("ui-dialog-dragging");
				self._trigger('dragStart', event, filteredUi(ui));
			},
			drag: function(event, ui) {
				self._trigger('drag', event, filteredUi(ui));
			},
			stop: function(event, ui) {
				options.position = [ui.position.left - doc.scrollLeft(),
					ui.position.top - doc.scrollTop()];
				$(this).removeClass("ui-dialog-dragging").height(heightBeforeDrag);
				self._trigger('dragStop', event, filteredUi(ui));
				$.ui.dialog.overlay.resize();
			}
		});
	},

	_makeResizable: function(handles) {
		handles = (handles === undefined ? this.options.resizable : handles);
		var self = this,
			options = self.options,
			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = self.uiDialog.css('position'),
			resizeHandles = (typeof handles === 'string' ?
				handles	:
				'n,e,s,w,se,sw,ne,nw'
			);

		function filteredUi(ui) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		self.uiDialog.resizable({
			cancel: '.ui-dialog-content',
			containment: 'document',
			alsoResize: self.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: self._minHeight(),
			handles: resizeHandles,
			start: function(event, ui) {
				$(this).addClass("ui-dialog-resizing");
				self._trigger('resizeStart', event, filteredUi(ui));
			},
			resize: function(event, ui) {
				self._trigger('resize', event, filteredUi(ui));
			},
			stop: function(event, ui) {
				$(this).removeClass("ui-dialog-resizing");
				options.height = $(this).height();
				options.width = $(this).width();
				self._trigger('resizeStop', event, filteredUi(ui));
				$.ui.dialog.overlay.resize();
			}
		})
		.css('position', position)
		.find('.ui-resizable-se').addClass('ui-icon ui-icon-grip-diagonal-se');
	},

	_minHeight: function() {
		var options = this.options;

		if (options.height === 'auto') {
			return options.minHeight;
		} else {
			return Math.min(options.minHeight, options.height);
		}
	},

	_position: function(position) {
		var myAt = [],
			offset = [0, 0],
			isVisible;

		if (position) {
			// deep extending converts arrays to objects in jQuery &lt;= 1.3.2 :-(
	//		if (typeof position == 'string' || $.isArray(position)) {
	//			myAt = $.isArray(position) ? position : position.split(' ');

			if (typeof position === 'string' || (typeof position === 'object' &amp;&amp; '0' in position)) {
				myAt = position.split ? position.split(' ') : [position[0], position[1]];
				if (myAt.length === 1) {
					myAt[1] = myAt[0];
				}

				$.each(['left', 'top'], function(i, offsetPosition) {
					if (+myAt[i] === myAt[i]) {
						offset[i] = myAt[i];
						myAt[i] = offsetPosition;
					}
				});

				position = {
					my: myAt.join(" "),
					at: myAt.join(" "),
					offset: offset.join(" ")
				};
			} 

			position = $.extend({}, $.ui.dialog.prototype.options.position, position);
		} else {
			position = $.ui.dialog.prototype.options.position;
		}

		// need to show the dialog to get the actual offset in the position plugin
		isVisible = this.uiDialog.is(':visible');
		if (!isVisible) {
			this.uiDialog.show();
		}
		this.uiDialog
			// workaround for jQuery bug #5781 http://dev.jquery.com/ticket/5781
			.css({ top: 0, left: 0 })
			.position($.extend({ of: window }, position));
		if (!isVisible) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var self = this,
			resizableOptions = {},
			resize = false;

		$.each( options, function( key, value ) {
			self._setOption( key, value );
			
			if ( key in sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		});

		if ( resize ) {
			this._size();
		}
		if ( this.uiDialog.is( ":data(resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function(key, value){
		var self = this,
			uiDialog = self.uiDialog;

		switch (key) {
			//handling of deprecated beforeclose (vs beforeClose) option
			//Ticket #4669 http://dev.jqueryui.com/ticket/4669
			//TODO: remove in 1.9pre
			case "beforeclose":
				key = "beforeClose";
				break;
			case "buttons":
				self._createButtons(value);
				break;
			case "closeText":
				// ensure that we always pass a string
				self.uiDialogTitlebarCloseText.text("" + value);
				break;
			case "dialogClass":
				uiDialog
					.removeClass(self.options.dialogClass)
					.addClass(uiDialogClasses + value);
				break;
			case "disabled":
				if (value) {
					uiDialog.addClass('ui-dialog-disabled');
				} else {
					uiDialog.removeClass('ui-dialog-disabled');
				}
				break;
			case "draggable":
				var isDraggable = uiDialog.is( ":data(draggable)" );
				if ( isDraggable &amp;&amp; !value ) {
					uiDialog.draggable( "destroy" );
				}
				
				if ( !isDraggable &amp;&amp; value ) {
					self._makeDraggable();
				}
				break;
			case "position":
				self._position(value);
				break;
			case "resizable":
				// currently resizable, becoming non-resizable
				var isResizable = uiDialog.is( ":data(resizable)" );
				if (isResizable &amp;&amp; !value) {
					uiDialog.resizable('destroy');
				}

				// currently resizable, changing handles
				if (isResizable &amp;&amp; typeof value === 'string') {
					uiDialog.resizable('option', 'handles', value);
				}

				// currently non-resizable, becoming resizable
				if (!isResizable &amp;&amp; value !== false) {
					self._makeResizable(value);
				}
				break;
			case "title":
				// convert whatever was passed in o a string, for html() to not throw up
				$(".ui-dialog-title", self.uiDialogTitlebar).html("" + (value || '&amp;#160;'));
				break;
		}

		$.Widget.prototype._setOption.apply(self, arguments);
	},

	_size: function() {
		/* If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		 * divs will both have width and height set, so we need to reset them
		 */
		var options = this.options,
			nonContentHeight,
			minContentHeight,
			isVisible = this.uiDialog.is( ":visible" );

		// reset content sizing
		this.element.show().css({
			width: 'auto',
			minHeight: 0,
			height: 0
		});

		if (options.minWidth &gt; options.width) {
			options.width = options.minWidth;
		}

		// reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css({
				height: 'auto',
				width: options.width
			})
			.height();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		
		if ( options.height === "auto" ) {
			// only needed for IE6 support
			if ( $.support.minHeight ) {
				this.element.css({
					minHeight: minContentHeight,
					height: "auto"
				});
			} else {
				this.uiDialog.show();
				var autoHeight = this.element.css( "height", "auto" ).height();
				if ( !isVisible ) {
					this.uiDialog.hide();
				}
				this.element.height( Math.max( autoHeight, minContentHeight ) );
			}
		} else {
			this.element.height( Math.max( options.height - nonContentHeight, 0 ) );
		}

		if (this.uiDialog.is(':data(resizable)')) {
			this.uiDialog.resizable('option', 'minHeight', this._minHeight());
		}
	}
});

$.extend($.ui.dialog, {
	version: "1.8.24",

	uuid: 0,
	maxZ: 0,

	getTitleId: function($el) {
		var id = $el.attr('id');
		if (!id) {
			this.uuid += 1;
			id = this.uuid;
		}
		return 'ui-dialog-title-' + id;
	},

	overlay: function(dialog) {
		this.$el = $.ui.dialog.overlay.create(dialog);
	}
});

$.extend($.ui.dialog.overlay, {
	instances: [],
	// reuse old instances due to IE memory leak with alpha transparency (see #5185)
	oldInstances: [],
	maxZ: 0,
	events: $.map('focus,mousedown,mouseup,keydown,keypress,click'.split(','),
		function(event) { return event + '.dialog-overlay'; }).join(' '),
	create: function(dialog) {
		if (this.instances.length === 0) {
			// prevent use of anchors and inputs
			// we use a setTimeout in case the overlay is created from an
			// event that we're going to be cancelling (see #2804)
			setTimeout(function() {
				// handle $(el).dialog().dialog('close') (see #4065)
				if ($.ui.dialog.overlay.instances.length) {
					$(document).bind($.ui.dialog.overlay.events, function(event) {
						// stop events if the z-index of the target is &lt; the z-index of the overlay
						// we cannot return true when we don't want to cancel the event (#3523)
						if ($(event.target).zIndex() &lt; $.ui.dialog.overlay.maxZ) {
							return false;
						}
					});
				}
			}, 1);

			// allow closing by pressing the escape key
			$(document).bind('keydown.dialog-overlay', function(event) {
				if (dialog.options.closeOnEscape &amp;&amp; !event.isDefaultPrevented() &amp;&amp; event.keyCode &amp;&amp;
					event.keyCode === $.ui.keyCode.ESCAPE) {
					
					dialog.close(event);
					event.preventDefault();
				}
			});

			// handle window resize
			$(window).bind('resize.dialog-overlay', $.ui.dialog.overlay.resize);
		}

		var $el = (this.oldInstances.pop() || $('&lt;div&gt;&lt;/div&gt;').addClass('ui-widget-overlay'))
			.appendTo(document.body)
			.css({
				width: this.width(),
				height: this.height()
			});

		if ($.fn.bgiframe) {
			$el.bgiframe();
		}

		this.instances.push($el);
		return $el;
	},

	destroy: function($el) {
		var indexOf = $.inArray($el, this.instances);
		if (indexOf != -1){
			this.oldInstances.push(this.instances.splice(indexOf, 1)[0]);
		}

		if (this.instances.length === 0) {
			$([document, window]).unbind('.dialog-overlay');
		}

		$el.remove();
		
		// adjust the maxZ to allow other modal dialogs to continue to work (see #4309)
		var maxZ = 0;
		$.each(this.instances, function() {
			maxZ = Math.max(maxZ, this.css('z-index'));
		});
		this.maxZ = maxZ;
	},

	height: function() {
		var scrollHeight,
			offsetHeight;
		// handle IE 6
		if ($.browser.msie &amp;&amp; $.browser.version &lt; 7) {
			scrollHeight = Math.max(
				document.documentElement.scrollHeight,
				document.body.scrollHeight
			);
			offsetHeight = Math.max(
				document.documentElement.offsetHeight,
				document.body.offsetHeight
			);

			if (scrollHeight &lt; offsetHeight) {
				return $(window).height() + 'px';
			} else {
				return scrollHeight + 'px';
			}
		// handle "good" browsers
		} else {
			return $(document).height() + 'px';
		}
	},

	width: function() {
		var scrollWidth,
			offsetWidth;
		// handle IE
		if ( $.browser.msie ) {
			scrollWidth = Math.max(
				document.documentElement.scrollWidth,
				document.body.scrollWidth
			);
			offsetWidth = Math.max(
				document.documentElement.offsetWidth,
				document.body.offsetWidth
			);

			if (scrollWidth &lt; offsetWidth) {
				return $(window).width() + 'px';
			} else {
				return scrollWidth + 'px';
			}
		// handle "good" browsers
		} else {
			return $(document).width() + 'px';
		}
	},

	resize: function() {
		/* If the dialog is draggable and the user drags it past the
		 * right edge of the window, the document becomes wider so we
		 * need to stretch the overlay. If the user then drags the
		 * dialog back to the left, the document will become narrower,
		 * so we need to shrink the overlay to the appropriate size.
		 * This is handled by shrinking the overlay before setting it
		 * to the full document size.
		 */
		var $overlays = $([]);
		$.each($.ui.dialog.overlay.instances, function() {
			$overlays = $overlays.add(this);
		});

		$overlays.css({
			width: 0,
			height: 0
		}).css({
			width: $.ui.dialog.overlay.width(),
			height: $.ui.dialog.overlay.height()
		});
	}
});

$.extend($.ui.dialog.overlay.prototype, {
	destroy: function() {
		$.ui.dialog.overlay.destroy(this.$el);
	}
});

}(jQuery));

(function( $, undefined ) {

$.ui = $.ui || {};

var horizontalPositions = /left|center|right/,
	verticalPositions = /top|center|bottom/,
	center = "center",
	support = {},
	_position = $.fn.position,
	_offset = $.fn.offset;

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var target = $( options.of ),
		targetElem = target[0],
		collision = ( options.collision || "flip" ).split( " " ),
		offset = options.offset ? options.offset.split( " " ) : [ 0, 0 ],
		targetWidth,
		targetHeight,
		basePosition;

	if ( targetElem.nodeType === 9 ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: 0, left: 0 };
	// TODO: use $.isWindow() in 1.9
	} else if ( targetElem.setTimeout ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: target.scrollTop(), left: target.scrollLeft() };
	} else if ( targetElem.preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
		targetWidth = targetHeight = 0;
		basePosition = { top: options.of.pageY, left: options.of.pageX };
	} else {
		targetWidth = target.outerWidth();
		targetHeight = target.outerHeight();
		basePosition = target.offset();
	}

	// force my and at to have valid horizontal and veritcal positions
	// if a value is missing or invalid, it will be converted to center 
	$.each( [ "my", "at" ], function() {
		var pos = ( options[this] || "" ).split( " " );
		if ( pos.length === 1) {
			pos = horizontalPositions.test( pos[0] ) ?
				pos.concat( [center] ) :
				verticalPositions.test( pos[0] ) ?
					[ center ].concat( pos ) :
					[ center, center ];
		}
		pos[ 0 ] = horizontalPositions.test( pos[0] ) ? pos[ 0 ] : center;
		pos[ 1 ] = verticalPositions.test( pos[1] ) ? pos[ 1 ] : center;
		options[ this ] = pos;
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	// normalize offset option
	offset[ 0 ] = parseInt( offset[0], 10 ) || 0;
	if ( offset.length === 1 ) {
		offset[ 1 ] = offset[ 0 ];
	}
	offset[ 1 ] = parseInt( offset[1], 10 ) || 0;

	if ( options.at[0] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[0] === center ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[1] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[1] === center ) {
		basePosition.top += targetHeight / 2;
	}

	basePosition.left += offset[ 0 ];
	basePosition.top += offset[ 1 ];

	return this.each(function() {
		var elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseInt( $.curCSS( this, "marginLeft", true ) ) || 0,
			marginTop = parseInt( $.curCSS( this, "marginTop", true ) ) || 0,
			collisionWidth = elemWidth + marginLeft +
				( parseInt( $.curCSS( this, "marginRight", true ) ) || 0 ),
			collisionHeight = elemHeight + marginTop +
				( parseInt( $.curCSS( this, "marginBottom", true ) ) || 0 ),
			position = $.extend( {}, basePosition ),
			collisionPosition;

		if ( options.my[0] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[0] === center ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[1] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[1] === center ) {
			position.top -= elemHeight / 2;
		}

		// prevent fractions if jQuery version doesn't support them (see #5280)
		if ( !support.fractions ) {
			position.left = Math.round( position.left );
			position.top = Math.round( position.top );
		}

		collisionPosition = {
			left: position.left - marginLeft,
			top: position.top - marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[i] ] ) {
				$.ui.position[ collision[i] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: offset,
					my: options.my,
					at: options.at
				});
			}
		});

		if ( $.fn.bgiframe ) {
			elem.bgiframe();
		}
		elem.offset( $.extend( position, { using: options.using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
			position.left = over &gt; 0 ? position.left - over : Math.max( position.left - data.collisionPosition.left, position.left );
		},
		top: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
			position.top = over &gt; 0 ? position.top - over : Math.max( position.top - data.collisionPosition.top, position.top );
		}
	},

	flip: {
		left: function( position, data ) {
			if ( data.at[0] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(),
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					-data.targetWidth,
				offset = -2 * data.offset[ 0 ];
			position.left += data.collisionPosition.left &lt; 0 ?
				myOffset + atOffset + offset :
				over &gt; 0 ?
					myOffset + atOffset + offset :
					0;
		},
		top: function( position, data ) {
			if ( data.at[1] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(),
				myOffset = data.my[ 1 ] === "top" ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					-data.targetHeight,
				offset = -2 * data.offset[ 1 ];
			position.top += data.collisionPosition.top &lt; 0 ?
				myOffset + atOffset + offset :
				over &gt; 0 ?
					myOffset + atOffset + offset :
					0;
		}
	}
};

// offset setter from jQuery 1.4
if ( !$.offset.setOffset ) {
	$.offset.setOffset = function( elem, options ) {
		// set position first, in-case top/left are set even on static elem
		if ( /static/.test( $.curCSS( elem, "position" ) ) ) {
			elem.style.position = "relative";
		}
		var curElem   = $( elem ),
			curOffset = curElem.offset(),
			curTop    = parseInt( $.curCSS( elem, "top",  true ), 10 ) || 0,
			curLeft   = parseInt( $.curCSS( elem, "left", true ), 10)  || 0,
			props     = {
				top:  (options.top  - curOffset.top)  + curTop,
				left: (options.left - curOffset.left) + curLeft
			};
		
		if ( 'using' in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	};

	$.fn.offset = function( options ) {
		var elem = this[ 0 ];
		if ( !elem || !elem.ownerDocument ) { return null; }
		if ( options ) {
			if ( $.isFunction( options ) ) {
				return this.each(function( i ) {
					$( this ).offset( options.call( this, i, $( this ).offset() ) );
				});
			}
			return this.each(function() {
				$.offset.setOffset( this, options );
			});
		}
		return _offset.call( this );
	};
}

// jQuery &lt;1.4.3 uses curCSS, in 1.4.3 - 1.7.2 curCSS = css, 1.8+ only has css
if ( !$.curCSS ) {
	$.curCSS = $.css;
}

// fraction support test (older versions of jQuery don't support fractions)
(function () {
	var body = document.getElementsByTagName( "body" )[ 0 ], 
		div = document.createElement( "div" ),
		testElement, testElementParent, testElementStyle, offset, offsetTotal;

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( var i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;";

	offset = $( div ).offset( function( _, offset ) {
		return offset;
	}).offset();

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );

	offsetTotal = offset.top + offset.left + ( body ? 2000 : 0 );
	support.fractions = offsetTotal &gt; 21 &amp;&amp; offsetTotal &lt; 22;
})();

}( jQuery ));

(function( $, undefined ) {

$.widget( "ui.progressbar", {
	options: {
		value: 0,
		max: 100
	},

	min: 0,

	_create: function() {
		this.element
			.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
			.attr({
				role: "progressbar",
				"aria-valuemin": this.min,
				"aria-valuemax": this.options.max,
				"aria-valuenow": this._value()
			});

		this.valueDiv = $( "&lt;div class='ui-progressbar-value ui-widget-header ui-corner-left'&gt;&lt;/div&gt;" )
			.appendTo( this.element );

		this.oldValue = this._value();
		this._refreshValue();
	},

	destroy: function() {
		this.element
			.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );

		this.valueDiv.remove();

		$.Widget.prototype.destroy.apply( this, arguments );
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this._value();
		}

		this._setOption( "value", newValue );
		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "value" ) {
			this.options.value = value;
			this._refreshValue();
			if ( this._value() === this.options.max ) {
				this._trigger( "complete" );
			}
		}

		$.Widget.prototype._setOption.apply( this, arguments );
	},

	_value: function() {
		var val = this.options.value;
		// normalize invalid value
		if ( typeof val !== "number" ) {
			val = 0;
		}
		return Math.min( this.options.max, Math.max( this.min, val ) );
	},

	_percentage: function() {
		return 100 * this._value() / this.options.max;
	},

	_refreshValue: function() {
		var value = this.value();
		var percentage = this._percentage();

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}

		this.valueDiv
			.toggle( value &gt; this.min )
			.toggleClass( "ui-corner-right", value === this.options.max )
			.width( percentage.toFixed(0) + "%" );
		this.element.attr( "aria-valuenow", value );
	}
});

$.extend( $.ui.progressbar, {
	version: "1.8.24"
});

})( jQuery );

(function( $, undefined ) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
var numPages = 5;

$.widget( "ui.slider", $.ui.mouse, {

	widgetEventPrefix: "slide",

	options: {
		animate: false,
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null
	},

	_create: function() {
		var self = this,
			o = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
			handle = "&lt;a class='ui-slider-handle ui-state-default ui-corner-all' href='#'&gt;&lt;/a&gt;",
			handleCount = ( o.values &amp;&amp; o.values.length ) || 1,
			handles = [];

		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();

		this.element
			.addClass( "ui-slider" +
				" ui-slider-" + this.orientation +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all" +
				( o.disabled ? " ui-slider-disabled ui-disabled" : "" ) );

		this.range = $([]);

		if ( o.range ) {
			if ( o.range === true ) {
				if ( !o.values ) {
					o.values = [ this._valueMin(), this._valueMin() ];
				}
				if ( o.values.length &amp;&amp; o.values.length !== 2 ) {
					o.values = [ o.values[0], o.values[0] ];
				}
			}

			this.range = $( "&lt;div&gt;&lt;/div&gt;" )
				.appendTo( this.element )
				.addClass( "ui-slider-range" +
				// note: this isn't the most fittingly semantic framework class for this element,
				// but worked best visually with a variety of themes
				" ui-widget-header" + 
				( ( o.range === "min" || o.range === "max" ) ? " ui-slider-range-" + o.range : "" ) );
		}

		for ( var i = existingHandles.length; i &lt; handleCount; i += 1 ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( self.element ) );

		this.handle = this.handles.eq( 0 );

		this.handles.add( this.range ).filter( "a" )
			.click(function( event ) {
				event.preventDefault();
			})
			.hover(function() {
				if ( !o.disabled ) {
					$( this ).addClass( "ui-state-hover" );
				}
			}, function() {
				$( this ).removeClass( "ui-state-hover" );
			})
			.focus(function() {
				if ( !o.disabled ) {
					$( ".ui-slider .ui-state-focus" ).removeClass( "ui-state-focus" );
					$( this ).addClass( "ui-state-focus" );
				} else {
					$( this ).blur();
				}
			})
			.blur(function() {
				$( this ).removeClass( "ui-state-focus" );
			});

		this.handles.each(function( i ) {
			$( this ).data( "index.ui-slider-handle", i );
		});

		this.handles
			.keydown(function( event ) {
				var index = $( this ).data( "index.ui-slider-handle" ),
					allowed,
					curVal,
					newVal,
					step;
	
				if ( self.options.disabled ) {
					return;
				}
	
				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
					case $.ui.keyCode.END:
					case $.ui.keyCode.PAGE_UP:
					case $.ui.keyCode.PAGE_DOWN:
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						event.preventDefault();
						if ( !self._keySliding ) {
							self._keySliding = true;
							$( this ).addClass( "ui-state-active" );
							allowed = self._start( event, index );
							if ( allowed === false ) {
								return;
							}
						}
						break;
				}
	
				step = self.options.step;
				if ( self.options.values &amp;&amp; self.options.values.length ) {
					curVal = newVal = self.values( index );
				} else {
					curVal = newVal = self.value();
				}
	
				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
						newVal = self._valueMin();
						break;
					case $.ui.keyCode.END:
						newVal = self._valueMax();
						break;
					case $.ui.keyCode.PAGE_UP:
						newVal = self._trimAlignValue( curVal + ( (self._valueMax() - self._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.PAGE_DOWN:
						newVal = self._trimAlignValue( curVal - ( (self._valueMax() - self._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
						if ( curVal === self._valueMax() ) {
							return;
						}
						newVal = self._trimAlignValue( curVal + step );
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						if ( curVal === self._valueMin() ) {
							return;
						}
						newVal = self._trimAlignValue( curVal - step );
						break;
				}
	
				self._slide( event, index, newVal );
			})
			.keyup(function( event ) {
				var index = $( this ).data( "index.ui-slider-handle" );
	
				if ( self._keySliding ) {
					self._keySliding = false;
					self._stop( event, index );
					self._change( event, index );
					$( this ).removeClass( "ui-state-active" );
				}
	
			});

		this._refreshValue();

		this._animateOff = false;
	},

	destroy: function() {
		this.handles.remove();
		this.range.remove();

		this.element
			.removeClass( "ui-slider" +
				" ui-slider-horizontal" +
				" ui-slider-vertical" +
				" ui-slider-disabled" +
				" ui-widget" +
				" ui-widget-content" +
				" ui-corner-all" )
			.removeData( "slider" )
			.unbind( ".slider" );

		this._mouseDestroy();

		return this;
	},

	_mouseCapture: function( event ) {
		var o = this.options,
			position,
			normValue,
			distance,
			closestHandle,
			self,
			index,
			allowed,
			offset,
			mouseOverHandle;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		self = this;
		this.handles.each(function( i ) {
			var thisDistance = Math.abs( normValue - self.values(i) );
			if ( distance &gt; thisDistance ) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		});

		// workaround for bug #3736 (if both handles of a range are at 0,
		// the first is always used as the one with least distance,
		// and moving it is obviously prevented by preventing negative ranges)
		if( o.range === true &amp;&amp; this.values(1) === o.min ) {
			index += 1;
			closestHandle = $( this.handles[index] );
		}

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		self._handleIndex = index;

		closestHandle
			.addClass( "ui-state-active" )
			.focus();
		
		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().andSelf().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function( event ) {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );
		
		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this.handles.removeClass( "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},
	
	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse &gt; 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse &lt; 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_start: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values &amp;&amp; this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}
		return this._trigger( "start", event, uiHash );
	},

	_slide: function( event, index, newVal ) {
		var otherVal,
			newValues,
			allowed;

		if ( this.options.values &amp;&amp; this.options.values.length ) {
			otherVal = this.values( index ? 0 : 1 );

			if ( ( this.options.values.length === 2 &amp;&amp; this.options.range === true ) &amp;&amp; 
					( ( index === 0 &amp;&amp; newVal &gt; otherVal) || ( index === 1 &amp;&amp; newVal &lt; otherVal ) )
				) {
				newVal = otherVal;
			}

			if ( newVal !== this.values( index ) ) {
				newValues = this.values();
				newValues[ index ] = newVal;
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal,
					values: newValues
				} );
				otherVal = this.values( index ? 0 : 1 );
				if ( allowed !== false ) {
					this.values( index, newVal, true );
				}
			}
		} else {
			if ( newVal !== this.value() ) {
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal
				} );
				if ( allowed !== false ) {
					this.value( newVal );
				}
			}
		}
	},

	_stop: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values &amp;&amp; this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}

		this._trigger( "stop", event, uiHash );
	},

	_change: function( event, index ) {
		if ( !this._keySliding &amp;&amp; !this._mouseSliding ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values &amp;&amp; this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			this._trigger( "change", event, uiHash );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length &gt; 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i &lt; vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this.options.values &amp;&amp; this.options.values.length ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		$.Widget.prototype._setOption.apply( this, arguments );

		switch ( key ) {
			case "disabled":
				if ( value ) {
					this.handles.filter( ".ui-state-focus" ).blur();
					this.handles.removeClass( "ui-state-hover" );
					this.handles.propAttr( "disabled", true );
					this.element.addClass( "ui-disabled" );
				} else {
					this.handles.propAttr( "disabled", false );
					this.element.removeClass( "ui-disabled" );
				}
				break;
			case "orientation":
				this._detectOrientation();
				this.element
					.removeClass( "ui-slider-horizontal ui-slider-vertical" )
					.addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for ( i = 0; i &lt; valsLength; i += 1 ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
		}
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else {
			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i &lt; vals.length; i+= 1) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		}
	},
	
	// returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val &lt;= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val &gt;= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step &gt; 0 ) ? this.options.step : 1,
			valModStep = (val - this._valueMin()) % step,
			alignValue = val - valModStep;

		if ( Math.abs(valModStep) * 2 &gt;= step ) {
			alignValue += ( valModStep &gt; 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed(5) );
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.options.max;
	},
	
	_refreshValue: function() {
		var oRange = this.options.range,
			o = this.options,
			self = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			valPercent,
			_set = {},
			lastValPercent,
			value,
			valueMin,
			valueMax;

		if ( this.options.values &amp;&amp; this.options.values.length ) {
			this.handles.each(function( i, j ) {
				valPercent = ( self.values(i) - self._valueMin() ) / ( self._valueMax() - self._valueMin() ) * 100;
				_set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( self.options.range === true ) {
					if ( self.orientation === "horizontal" ) {
						if ( i === 0 ) {
							self.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
						}
						if ( i === 1 ) {
							self.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					} else {
						if ( i === 0 ) {
							self.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
						}
						if ( i === 1 ) {
							self.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					}
				}
				lastValPercent = valPercent;
			});
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ self.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" &amp;&amp; this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" &amp;&amp; this.orientation === "horizontal" ) {
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
			if ( oRange === "min" &amp;&amp; this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" &amp;&amp; this.orientation === "vertical" ) {
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
		}
	}

});

$.extend( $.ui.slider, {
	version: "1.8.24"
});

}(jQuery));

(function( $, undefined ) {

var tabId = 0,
	listId = 0;

function getNextTabId() {
	return ++tabId;
}

function getNextListId() {
	return ++listId;
}

$.widget( "ui.tabs", {
	options: {
		add: null,
		ajaxOptions: null,
		cache: false,
		cookie: null, // e.g. { expires: 7, path: '/', domain: 'jquery.com', secure: true }
		collapsible: false,
		disable: null,
		disabled: [],
		enable: null,
		event: "click",
		fx: null, // e.g. { height: 'toggle', opacity: 'toggle', duration: 200 }
		idPrefix: "ui-tabs-",
		load: null,
		panelTemplate: "&lt;div&gt;&lt;/div&gt;",
		remove: null,
		select: null,
		show: null,
		spinner: "&lt;em&gt;Loading&amp;#8230;&lt;/em&gt;",
		tabTemplate: "&lt;li&gt;&lt;a href='#{href}'&gt;&lt;span&gt;#{label}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;"
	},

	_create: function() {
		this._tabify( true );
	},

	_setOption: function( key, value ) {
		if ( key == "selected" ) {
			if (this.options.collapsible &amp;&amp; value == this.options.selected ) {
				return;
			}
			this.select( value );
		} else {
			this.options[ key ] = value;
			this._tabify();
		}
	},

	_tabId: function( a ) {
		return a.title &amp;&amp; a.title.replace( /\s/g, "_" ).replace( /[^\w\u00c0-\uFFFF-]/g, "" ) ||
			this.options.idPrefix + getNextTabId();
	},

	_sanitizeSelector: function( hash ) {
		// we need this because an id may contain a ":"
		return hash.replace( /:/g, "\\:" );
	},

	_cookie: function() {
		var cookie = this.cookie ||
			( this.cookie = this.options.cookie.name || "ui-tabs-" + getNextListId() );
		return $.cookie.apply( null, [ cookie ].concat( $.makeArray( arguments ) ) );
	},

	_ui: function( tab, panel ) {
		return {
			tab: tab,
			panel: panel,
			index: this.anchors.index( tab )
		};
	},

	_cleanup: function() {
		// restore all former loading tabs labels
		this.lis.filter( ".ui-state-processing" )
			.removeClass( "ui-state-processing" )
			.find( "span:data(label.tabs)" )
				.each(function() {
					var el = $( this );
					el.html( el.data( "label.tabs" ) ).removeData( "label.tabs" );
				});
	},

	_tabify: function( init ) {
		var self = this,
			o = this.options,
			fragmentId = /^#.+/; // Safari 2 reports '#' for an empty hash

		this.list = this.element.find( "ol,ul" ).eq( 0 );
		this.lis = $( " &gt; li:has(a[href])", this.list );
		this.anchors = this.lis.map(function() {
			return $( "a", this )[ 0 ];
		});
		this.panels = $( [] );

		this.anchors.each(function( i, a ) {
			var href = $( a ).attr( "href" );
			// For dynamically created HTML that contains a hash as href IE &lt; 8 expands
			// such href to the full page url with hash and then misinterprets tab as ajax.
			// Same consideration applies for an added tab with a fragment identifier
			// since a[href=#fragment-identifier] does unexpectedly not match.
			// Thus normalize href attribute...
			var hrefBase = href.split( "#" )[ 0 ],
				baseEl;
			if ( hrefBase &amp;&amp; ( hrefBase === location.toString().split( "#" )[ 0 ] ||
					( baseEl = $( "base" )[ 0 ]) &amp;&amp; hrefBase === baseEl.href ) ) {
				href = a.hash;
				a.href = href;
			}

			// inline tab
			if ( fragmentId.test( href ) ) {
				self.panels = self.panels.add( self.element.find( self._sanitizeSelector( href ) ) );
			// remote tab
			// prevent loading the page itself if href is just "#"
			} else if ( href &amp;&amp; href !== "#" ) {
				// required for restore on destroy
				$.data( a, "href.tabs", href );

				// TODO until #3808 is fixed strip fragment identifier from url
				// (IE fails to load from such url)
				$.data( a, "load.tabs", href.replace( /#.*$/, "" ) );

				var id = self._tabId( a );
				a.href = "#" + id;
				var $panel = self.element.find( "#" + id );
				if ( !$panel.length ) {
					$panel = $( o.panelTemplate )
						.attr( "id", id )
						.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
						.insertAfter( self.panels[ i - 1 ] || self.list );
					$panel.data( "destroy.tabs", true );
				}
				self.panels = self.panels.add( $panel );
			// invalid tab href
			} else {
				o.disabled.push( i );
			}
		});

		// initialization from scratch
		if ( init ) {
			// attach necessary classes for styling
			this.element.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" );
			this.list.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" );
			this.lis.addClass( "ui-state-default ui-corner-top" );
			this.panels.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" );

			// Selected tab
			// use "selected" option or try to retrieve:
			// 1. from fragment identifier in url
			// 2. from cookie
			// 3. from selected class attribute on &lt;li&gt;
			if ( o.selected === undefined ) {
				if ( location.hash ) {
					this.anchors.each(function( i, a ) {
						if ( a.hash == location.hash ) {
							o.selected = i;
							return false;
						}
					});
				}
				if ( typeof o.selected !== "number" &amp;&amp; o.cookie ) {
					o.selected = parseInt( self._cookie(), 10 );
				}
				if ( typeof o.selected !== "number" &amp;&amp; this.lis.filter( ".ui-tabs-selected" ).length ) {
					o.selected = this.lis.index( this.lis.filter( ".ui-tabs-selected" ) );
				}
				o.selected = o.selected || ( this.lis.length ? 0 : -1 );
			} else if ( o.selected === null ) { // usage of null is deprecated, TODO remove in next release
				o.selected = -1;
			}

			// sanity check - default to first tab...
			o.selected = ( ( o.selected &gt;= 0 &amp;&amp; this.anchors[ o.selected ] ) || o.selected &lt; 0 )
				? o.selected
				: 0;

			// Take disabling tabs via class attribute from HTML
			// into account and update option properly.
			// A selected tab cannot become disabled.
			o.disabled = $.unique( o.disabled.concat(
				$.map( this.lis.filter( ".ui-state-disabled" ), function( n, i ) {
					return self.lis.index( n );
				})
			) ).sort();

			if ( $.inArray( o.selected, o.disabled ) != -1 ) {
				o.disabled.splice( $.inArray( o.selected, o.disabled ), 1 );
			}

			// highlight selected tab
			this.panels.addClass( "ui-tabs-hide" );
			this.lis.removeClass( "ui-tabs-selected ui-state-active" );
			// check for length avoids error when initializing empty list
			if ( o.selected &gt;= 0 &amp;&amp; this.anchors.length ) {
				self.element.find( self._sanitizeSelector( self.anchors[ o.selected ].hash ) ).removeClass( "ui-tabs-hide" );
				this.lis.eq( o.selected ).addClass( "ui-tabs-selected ui-state-active" );

				// seems to be expected behavior that the show callback is fired
				self.element.queue( "tabs", function() {
					self._trigger( "show", null,
						self._ui( self.anchors[ o.selected ], self.element.find( self._sanitizeSelector( self.anchors[ o.selected ].hash ) )[ 0 ] ) );
				});

				this.load( o.selected );
			}

			// clean up to avoid memory leaks in certain versions of IE 6
			// TODO: namespace this event
			$( window ).bind( "unload", function() {
				self.lis.add( self.anchors ).unbind( ".tabs" );
				self.lis = self.anchors = self.panels = null;
			});
		// update selected after add/remove
		} else {
			o.selected = this.lis.index( this.lis.filter( ".ui-tabs-selected" ) );
		}

		// update collapsible
		// TODO: use .toggleClass()
		this.element[ o.collapsible ? "addClass" : "removeClass" ]( "ui-tabs-collapsible" );

		// set or update cookie after init and add/remove respectively
		if ( o.cookie ) {
			this._cookie( o.selected, o.cookie );
		}

		// disable tabs
		for ( var i = 0, li; ( li = this.lis[ i ] ); i++ ) {
			$( li )[ $.inArray( i, o.disabled ) != -1 &amp;&amp;
				// TODO: use .toggleClass()
				!$( li ).hasClass( "ui-tabs-selected" ) ? "addClass" : "removeClass" ]( "ui-state-disabled" );
		}

		// reset cache if switching from cached to not cached
		if ( o.cache === false ) {
			this.anchors.removeData( "cache.tabs" );
		}

		// remove all handlers before, tabify may run on existing tabs after add or option change
		this.lis.add( this.anchors ).unbind( ".tabs" );

		if ( o.event !== "mouseover" ) {
			var addState = function( state, el ) {
				if ( el.is( ":not(.ui-state-disabled)" ) ) {
					el.addClass( "ui-state-" + state );
				}
			};
			var removeState = function( state, el ) {
				el.removeClass( "ui-state-" + state );
			};
			this.lis.bind( "mouseover.tabs" , function() {
				addState( "hover", $( this ) );
			});
			this.lis.bind( "mouseout.tabs", function() {
				removeState( "hover", $( this ) );
			});
			this.anchors.bind( "focus.tabs", function() {
				addState( "focus", $( this ).closest( "li" ) );
			});
			this.anchors.bind( "blur.tabs", function() {
				removeState( "focus", $( this ).closest( "li" ) );
			});
		}

		// set up animations
		var hideFx, showFx;
		if ( o.fx ) {
			if ( $.isArray( o.fx ) ) {
				hideFx = o.fx[ 0 ];
				showFx = o.fx[ 1 ];
			} else {
				hideFx = showFx = o.fx;
			}
		}

		// Reset certain styles left over from animation
		// and prevent IE's ClearType bug...
		function resetStyle( $el, fx ) {
			$el.css( "display", "" );
			if ( !$.support.opacity &amp;&amp; fx.opacity ) {
				$el[ 0 ].style.removeAttribute( "filter" );
			}
		}

		// Show a tab...
		var showTab = showFx
			? function( clicked, $show ) {
				$( clicked ).closest( "li" ).addClass( "ui-tabs-selected ui-state-active" );
				$show.hide().removeClass( "ui-tabs-hide" ) // avoid flicker that way
					.animate( showFx, showFx.duration || "normal", function() {
						resetStyle( $show, showFx );
						self._trigger( "show", null, self._ui( clicked, $show[ 0 ] ) );
					});
			}
			: function( clicked, $show ) {
				$( clicked ).closest( "li" ).addClass( "ui-tabs-selected ui-state-active" );
				$show.removeClass( "ui-tabs-hide" );
				self._trigger( "show", null, self._ui( clicked, $show[ 0 ] ) );
			};

		// Hide a tab, $show is optional...
		var hideTab = hideFx
			? function( clicked, $hide ) {
				$hide.animate( hideFx, hideFx.duration || "normal", function() {
					self.lis.removeClass( "ui-tabs-selected ui-state-active" );
					$hide.addClass( "ui-tabs-hide" );
					resetStyle( $hide, hideFx );
					self.element.dequeue( "tabs" );
				});
			}
			: function( clicked, $hide, $show ) {
				self.lis.removeClass( "ui-tabs-selected ui-state-active" );
				$hide.addClass( "ui-tabs-hide" );
				self.element.dequeue( "tabs" );
			};

		// attach tab event handler, unbind to avoid duplicates from former tabifying...
		this.anchors.bind( o.event + ".tabs", function() {
			var el = this,
				$li = $(el).closest( "li" ),
				$hide = self.panels.filter( ":not(.ui-tabs-hide)" ),
				$show = self.element.find( self._sanitizeSelector( el.hash ) );

			// If tab is already selected and not collapsible or tab disabled or
			// or is already loading or click callback returns false stop here.
			// Check if click handler returns false last so that it is not executed
			// for a disabled or loading tab!
			if ( ( $li.hasClass( "ui-tabs-selected" ) &amp;&amp; !o.collapsible) ||
				$li.hasClass( "ui-state-disabled" ) ||
				$li.hasClass( "ui-state-processing" ) ||
				self.panels.filter( ":animated" ).length ||
				self._trigger( "select", null, self._ui( this, $show[ 0 ] ) ) === false ) {
				this.blur();
				return false;
			}

			o.selected = self.anchors.index( this );

			self.abort();

			// if tab may be closed
			if ( o.collapsible ) {
				if ( $li.hasClass( "ui-tabs-selected" ) ) {
					o.selected = -1;

					if ( o.cookie ) {
						self._cookie( o.selected, o.cookie );
					}

					self.element.queue( "tabs", function() {
						hideTab( el, $hide );
					}).dequeue( "tabs" );

					this.blur();
					return false;
				} else if ( !$hide.length ) {
					if ( o.cookie ) {
						self._cookie( o.selected, o.cookie );
					}

					self.element.queue( "tabs", function() {
						showTab( el, $show );
					});

					// TODO make passing in node possible, see also http://dev.jqueryui.com/ticket/3171
					self.load( self.anchors.index( this ) );

					this.blur();
					return false;
				}
			}

			if ( o.cookie ) {
				self._cookie( o.selected, o.cookie );
			}

			// show new tab
			if ( $show.length ) {
				if ( $hide.length ) {
					self.element.queue( "tabs", function() {
						hideTab( el, $hide );
					});
				}
				self.element.queue( "tabs", function() {
					showTab( el, $show );
				});

				self.load( self.anchors.index( this ) );
			} else {
				throw "jQuery UI Tabs: Mismatching fragment identifier.";
			}

			// Prevent IE from keeping other link focussed when using the back button
			// and remove dotted border from clicked link. This is controlled via CSS
			// in modern browsers; blur() removes focus from address bar in Firefox
			// which can become a usability and annoying problem with tabs('rotate').
			if ( $.browser.msie ) {
				this.blur();
			}
		});

		// disable click in any case
		this.anchors.bind( "click.tabs", function(){
			return false;
		});
	},

    _getIndex: function( index ) {
		// meta-function to give users option to provide a href string instead of a numerical index.
		// also sanitizes numerical indexes to valid values.
		if ( typeof index == "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
		}

		return index;
	},

	destroy: function() {
		var o = this.options;

		this.abort();

		this.element
			.unbind( ".tabs" )
			.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" )
			.removeData( "tabs" );

		this.list.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" );

		this.anchors.each(function() {
			var href = $.data( this, "href.tabs" );
			if ( href ) {
				this.href = href;
			}
			var $this = $( this ).unbind( ".tabs" );
			$.each( [ "href", "load", "cache" ], function( i, prefix ) {
				$this.removeData( prefix + ".tabs" );
			});
		});

		this.lis.unbind( ".tabs" ).add( this.panels ).each(function() {
			if ( $.data( this, "destroy.tabs" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeClass([
					"ui-state-default",
					"ui-corner-top",
					"ui-tabs-selected",
					"ui-state-active",
					"ui-state-hover",
					"ui-state-focus",
					"ui-state-disabled",
					"ui-tabs-panel",
					"ui-widget-content",
					"ui-corner-bottom",
					"ui-tabs-hide"
				].join( " " ) );
			}
		});

		if ( o.cookie ) {
			this._cookie( null, o.cookie );
		}

		return this;
	},

	add: function( url, label, index ) {
		if ( index === undefined ) {
			index = this.anchors.length;
		}

		var self = this,
			o = this.options,
			$li = $( o.tabTemplate.replace( /#\{href\}/g, url ).replace( /#\{label\}/g, label ) ),
			id = !url.indexOf( "#" ) ? url.replace( "#", "" ) : this._tabId( $( "a", $li )[ 0 ] );

		$li.addClass( "ui-state-default ui-corner-top" ).data( "destroy.tabs", true );

		// try to find an existing element before creating a new one
		var $panel = self.element.find( "#" + id );
		if ( !$panel.length ) {
			$panel = $( o.panelTemplate )
				.attr( "id", id )
				.data( "destroy.tabs", true );
		}
		$panel.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide" );

		if ( index &gt;= this.lis.length ) {
			$li.appendTo( this.list );
			$panel.appendTo( this.list[ 0 ].parentNode );
		} else {
			$li.insertBefore( this.lis[ index ] );
			$panel.insertBefore( this.panels[ index ] );
		}

		o.disabled = $.map( o.disabled, function( n, i ) {
			return n &gt;= index ? ++n : n;
		});

		this._tabify();

		if ( this.anchors.length == 1 ) {
			o.selected = 0;
			$li.addClass( "ui-tabs-selected ui-state-active" );
			$panel.removeClass( "ui-tabs-hide" );
			this.element.queue( "tabs", function() {
				self._trigger( "show", null, self._ui( self.anchors[ 0 ], self.panels[ 0 ] ) );
			});

			this.load( 0 );
		}

		this._trigger( "add", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
		return this;
	},

	remove: function( index ) {
		index = this._getIndex( index );
		var o = this.options,
			$li = this.lis.eq( index ).remove(),
			$panel = this.panels.eq( index ).remove();

		// If selected tab was removed focus tab to the right or
		// in case the last tab was removed the tab to the left.
		if ( $li.hasClass( "ui-tabs-selected" ) &amp;&amp; this.anchors.length &gt; 1) {
			this.select( index + ( index + 1 &lt; this.anchors.length ? 1 : -1 ) );
		}

		o.disabled = $.map(
			$.grep( o.disabled, function(n, i) {
				return n != index;
			}),
			function( n, i ) {
				return n &gt;= index ? --n : n;
			});

		this._tabify();

		this._trigger( "remove", null, this._ui( $li.find( "a" )[ 0 ], $panel[ 0 ] ) );
		return this;
	},

	enable: function( index ) {
		index = this._getIndex( index );
		var o = this.options;
		if ( $.inArray( index, o.disabled ) == -1 ) {
			return;
		}

		this.lis.eq( index ).removeClass( "ui-state-disabled" );
		o.disabled = $.grep( o.disabled, function( n, i ) {
			return n != index;
		});

		this._trigger( "enable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
		return this;
	},

	disable: function( index ) {
		index = this._getIndex( index );
		var self = this, o = this.options;
		// cannot disable already selected tab
		if ( index != o.selected ) {
			this.lis.eq( index ).addClass( "ui-state-disabled" );

			o.disabled.push( index );
			o.disabled.sort();

			this._trigger( "disable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
		}

		return this;
	},

	select: function( index ) {
		index = this._getIndex( index );
		if ( index == -1 ) {
			if ( this.options.collapsible &amp;&amp; this.options.selected != -1 ) {
				index = this.options.selected;
			} else {
				return this;
			}
		}
		this.anchors.eq( index ).trigger( this.options.event + ".tabs" );
		return this;
	},

	load: function( index ) {
		index = this._getIndex( index );
		var self = this,
			o = this.options,
			a = this.anchors.eq( index )[ 0 ],
			url = $.data( a, "load.tabs" );

		this.abort();

		// not remote or from cache
		if ( !url || this.element.queue( "tabs" ).length !== 0 &amp;&amp; $.data( a, "cache.tabs" ) ) {
			this.element.dequeue( "tabs" );
			return;
		}

		// load remote from here on
		this.lis.eq( index ).addClass( "ui-state-processing" );

		if ( o.spinner ) {
			var span = $( "span", a );
			span.data( "label.tabs", span.html() ).html( o.spinner );
		}

		this.xhr = $.ajax( $.extend( {}, o.ajaxOptions, {
			url: url,
			success: function( r, s ) {
				self.element.find( self._sanitizeSelector( a.hash ) ).html( r );

				// take care of tab labels
				self._cleanup();

				if ( o.cache ) {
					$.data( a, "cache.tabs", true );
				}

				self._trigger( "load", null, self._ui( self.anchors[ index ], self.panels[ index ] ) );
				try {
					o.ajaxOptions.success( r, s );
				}
				catch ( e ) {}
			},
			error: function( xhr, s, e ) {
				// take care of tab labels
				self._cleanup();

				self._trigger( "load", null, self._ui( self.anchors[ index ], self.panels[ index ] ) );
				try {
					// Passing index avoid a race condition when this method is
					// called after the user has selected another tab.
					// Pass the anchor that initiated this request allows
					// loadError to manipulate the tab content panel via $(a.hash)
					o.ajaxOptions.error( xhr, s, index, a );
				}
				catch ( e ) {}
			}
		} ) );

		// last, so that load event is fired before show...
		self.element.dequeue( "tabs" );

		return this;
	},

	abort: function() {
		// stop possibly running animations
		this.element.queue( [] );
		this.panels.stop( false, true );

		// "tabs" queue must not contain more than two elements,
		// which are the callbacks for the latest clicked tab...
		this.element.queue( "tabs", this.element.queue( "tabs" ).splice( -2, 2 ) );

		// terminate pending requests from other tabs
		if ( this.xhr ) {
			this.xhr.abort();
			delete this.xhr;
		}

		// take care of tab labels
		this._cleanup();
		return this;
	},

	url: function( index, url ) {
		this.anchors.eq( index ).removeData( "cache.tabs" ).data( "load.tabs", url );
		return this;
	},

	length: function() {
		return this.anchors.length;
	}
});

$.extend( $.ui.tabs, {
	version: "1.8.24"
});

/*
 * Tabs Extensions
 */

/*
 * Rotate
 */
$.extend( $.ui.tabs.prototype, {
	rotation: null,
	rotate: function( ms, continuing ) {
		var self = this,
			o = this.options;

		var rotate = self._rotate || ( self._rotate = function( e ) {
			clearTimeout( self.rotation );
			self.rotation = setTimeout(function() {
				var t = o.selected;
				self.select( ++t &lt; self.anchors.length ? t : 0 );
			}, ms );
			
			if ( e ) {
				e.stopPropagation();
			}
		});

		var stop = self._unrotate || ( self._unrotate = !continuing
			? function(e) {
				if (e.clientX) { // in case of a true click
					self.rotate(null);
				}
			}
			: function( e ) {
				rotate();
			});

		// start rotation
		if ( ms ) {
			this.element.bind( "tabsshow", rotate );
			this.anchors.bind( o.event + ".tabs", stop );
			rotate();
		// stop rotation
		} else {
			clearTimeout( self.rotation );
			this.element.unbind( "tabsshow", rotate );
			this.anchors.unbind( o.event + ".tabs", stop );
			delete this._rotate;
			delete this._unrotate;
		}

		return this;
	}
});

})( jQuery );




Scripts/jquery-ui-1.8.24.min.js


/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.effects.core.js, jquery.effects.blind.js, jquery.effects.bounce.js, jquery.effects.clip.js, jquery.effects.drop.js, jquery.effects.explode.js, jquery.effects.fade.js, jquery.effects.fold.js, jquery.effects.highlight.js, jquery.effects.pulsate.js, jquery.effects.scale.js, jquery.effects.shake.js, jquery.effects.slide.js, jquery.effects.transfer.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.position.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.tabs.js
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT */
(function(a,b){function c(b,c){var e=b.nodeName.toLowerCase();if("area"===e){var f=b.parentNode,g=f.name,h;return!b.href||!g||f.nodeName.toLowerCase()!=="map"?!1:(h=a("img[usemap=#"+g+"]")[0],!!h&amp;&amp;d(h))}return(/input|select|textarea|button|object/.test(e)?!b.disabled:"a"==e?b.href||c:c)&amp;&amp;d(b)}function d(b){return!a(b).parents().andSelf().filter(function(){return a.curCSS(this,"visibility")==="hidden"||a.expr.filters.hidden(this)}).length}a.ui=a.ui||{};if(a.ui.version)return;a.extend(a.ui,{version:"1.8.24",keyCode:{ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91}}),a.fn.extend({propAttr:a.fn.prop||a.fn.attr,_focus:a.fn.focus,focus:function(b,c){return typeof b=="number"?this.each(function(){var d=this;setTimeout(function(){a(d).focus(),c&amp;&amp;c.call(d)},b)}):this._focus.apply(this,arguments)},scrollParent:function(){var b;return a.browser.msie&amp;&amp;/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?b=this.parents().filter(function(){return/(relative|absolute|fixed)/.test(a.curCSS(this,"position",1))&amp;&amp;/(auto|scroll)/.test(a.curCSS(this,"overflow",1)+a.curCSS(this,"overflow-y",1)+a.curCSS(this,"overflow-x",1))}).eq(0):b=this.parents().filter(function(){return/(auto|scroll)/.test(a.curCSS(this,"overflow",1)+a.curCSS(this,"overflow-y",1)+a.curCSS(this,"overflow-x",1))}).eq(0),/fixed/.test(this.css("position"))||!b.length?a(document):b},zIndex:function(c){if(c!==b)return this.css("zIndex",c);if(this.length){var d=a(this[0]),e,f;while(d.length&amp;&amp;d[0]!==document){e=d.css("position");if(e==="absolute"||e==="relative"||e==="fixed"){f=parseInt(d.css("zIndex"),10);if(!isNaN(f)&amp;&amp;f!==0)return f}d=d.parent()}}return 0},disableSelection:function(){return this.bind((a.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(a){a.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),a("&lt;a&gt;").outerWidth(1).jquery||a.each(["Width","Height"],function(c,d){function h(b,c,d,f){return a.each(e,function(){c-=parseFloat(a.curCSS(b,"padding"+this,!0))||0,d&amp;&amp;(c-=parseFloat(a.curCSS(b,"border"+this+"Width",!0))||0),f&amp;&amp;(c-=parseFloat(a.curCSS(b,"margin"+this,!0))||0)}),c}var e=d==="Width"?["Left","Right"]:["Top","Bottom"],f=d.toLowerCase(),g={innerWidth:a.fn.innerWidth,innerHeight:a.fn.innerHeight,outerWidth:a.fn.outerWidth,outerHeight:a.fn.outerHeight};a.fn["inner"+d]=function(c){return c===b?g["inner"+d].call(this):this.each(function(){a(this).css(f,h(this,c)+"px")})},a.fn["outer"+d]=function(b,c){return typeof b!="number"?g["outer"+d].call(this,b):this.each(function(){a(this).css(f,h(this,b,!0,c)+"px")})}}),a.extend(a.expr[":"],{data:a.expr.createPseudo?a.expr.createPseudo(function(b){return function(c){return!!a.data(c,b)}}):function(b,c,d){return!!a.data(b,d[3])},focusable:function(b){return c(b,!isNaN(a.attr(b,"tabindex")))},tabbable:function(b){var d=a.attr(b,"tabindex"),e=isNaN(d);return(e||d&gt;=0)&amp;&amp;c(b,!e)}}),a(function(){var b=document.body,c=b.appendChild(c=document.createElement("div"));c.offsetHeight,a.extend(c.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0}),a.support.minHeight=c.offsetHeight===100,a.support.selectstart="onselectstart"in c,b.removeChild(c).style.display="none"}),a.curCSS||(a.curCSS=a.css),a.extend(a.ui,{plugin:{add:function(b,c,d){var e=a.ui[b].prototype;for(var f in d)e.plugins[f]=e.plugins[f]||[],e.plugins[f].push([c,d[f]])},call:function(a,b,c){var d=a.plugins[b];if(!d||!a.element[0].parentNode)return;for(var e=0;e&lt;d.length;e++)a.options[d[e][0]]&amp;&amp;d[e][1].apply(a.element,c)}},contains:function(a,b){return document.compareDocumentPosition?a.compareDocumentPosition(b)&amp;16:a!==b&amp;&amp;a.contains(b)},hasScroll:function(b,c){if(a(b).css("overflow")==="hidden")return!1;var d=c&amp;&amp;c==="left"?"scrollLeft":"scrollTop",e=!1;return b[d]&gt;0?!0:(b[d]=1,e=b[d]&gt;0,b[d]=0,e)},isOverAxis:function(a,b,c){return a&gt;b&amp;&amp;a&lt;b+c},isOver:function(b,c,d,e,f,g){return a.ui.isOverAxis(b,d,f)&amp;&amp;a.ui.isOverAxis(c,e,g)}})})(jQuery),function(a,b){if(a.cleanData){var c=a.cleanData;a.cleanData=function(b){for(var d=0,e;(e=b[d])!=null;d++)try{a(e).triggerHandler("remove")}catch(f){}c(b)}}else{var d=a.fn.remove;a.fn.remove=function(b,c){return this.each(function(){return c||(!b||a.filter(b,[this]).length)&amp;&amp;a("*",this).add([this]).each(function(){try{a(this).triggerHandler("remove")}catch(b){}}),d.call(a(this),b,c)})}}a.widget=function(b,c,d){var e=b.split(".")[0],f;b=b.split(".")[1],f=e+"-"+b,d||(d=c,c=a.Widget),a.expr[":"][f]=function(c){return!!a.data(c,b)},a[e]=a[e]||{},a[e][b]=function(a,b){arguments.length&amp;&amp;this._createWidget(a,b)};var g=new c;g.options=a.extend(!0,{},g.options),a[e][b].prototype=a.extend(!0,g,{namespace:e,widgetName:b,widgetEventPrefix:a[e][b].prototype.widgetEventPrefix||b,widgetBaseClass:f},d),a.widget.bridge(b,a[e][b])},a.widget.bridge=function(c,d){a.fn[c]=function(e){var f=typeof e=="string",g=Array.prototype.slice.call(arguments,1),h=this;return e=!f&amp;&amp;g.length?a.extend.apply(null,[!0,e].concat(g)):e,f&amp;&amp;e.charAt(0)==="_"?h:(f?this.each(function(){var d=a.data(this,c),f=d&amp;&amp;a.isFunction(d[e])?d[e].apply(d,g):d;if(f!==d&amp;&amp;f!==b)return h=f,!1}):this.each(function(){var b=a.data(this,c);b?b.option(e||{})._init():a.data(this,c,new d(e,this))}),h)}},a.Widget=function(a,b){arguments.length&amp;&amp;this._createWidget(a,b)},a.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",options:{disabled:!1},_createWidget:function(b,c){a.data(c,this.widgetName,this),this.element=a(c),this.options=a.extend(!0,{},this.options,this._getCreateOptions(),b);var d=this;this.element.bind("remove."+this.widgetName,function(){d.destroy()}),this._create(),this._trigger("create"),this._init()},_getCreateOptions:function(){return a.metadata&amp;&amp;a.metadata.get(this.element[0])[this.widgetName]},_create:function(){},_init:function(){},destroy:function(){this.element.unbind("."+this.widgetName).removeData(this.widgetName),this.widget().unbind("."+this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass+"-disabled "+"ui-state-disabled")},widget:function(){return this.element},option:function(c,d){var e=c;if(arguments.length===0)return a.extend({},this.options);if(typeof c=="string"){if(d===b)return this.options[c];e={},e[c]=d}return this._setOptions(e),this},_setOptions:function(b){var c=this;return a.each(b,function(a,b){c._setOption(a,b)}),this},_setOption:function(a,b){return this.options[a]=b,a==="disabled"&amp;&amp;this.widget()[b?"addClass":"removeClass"](this.widgetBaseClass+"-disabled"+" "+"ui-state-disabled").attr("aria-disabled",b),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_trigger:function(b,c,d){var e,f,g=this.options[b];d=d||{},c=a.Event(c),c.type=(b===this.widgetEventPrefix?b:this.widgetEventPrefix+b).toLowerCase(),c.target=this.element[0],f=c.originalEvent;if(f)for(e in f)e in c||(c[e]=f[e]);return this.element.trigger(c,d),!(a.isFunction(g)&amp;&amp;g.call(this.element[0],c,d)===!1||c.isDefaultPrevented())}}}(jQuery),function(a,b){var c=!1;a(document).mouseup(function(a){c=!1}),a.widget("ui.mouse",{options:{cancel:":input,option",distance:1,delay:0},_mouseInit:function(){var b=this;this.element.bind("mousedown."+this.widgetName,function(a){return b._mouseDown(a)}).bind("click."+this.widgetName,function(c){if(!0===a.data(c.target,b.widgetName+".preventClickEvent"))return a.removeData(c.target,b.widgetName+".preventClickEvent"),c.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&amp;&amp;a(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(b){if(c)return;this._mouseStarted&amp;&amp;this._mouseUp(b),this._mouseDownEvent=b;var d=this,e=b.which==1,f=typeof this.options.cancel=="string"&amp;&amp;b.target.nodeName?a(b.target).closest(this.options.cancel).length:!1;if(!e||f||!this._mouseCapture(b))return!0;this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){d.mouseDelayMet=!0},this.options.delay));if(this._mouseDistanceMet(b)&amp;&amp;this._mouseDelayMet(b)){this._mouseStarted=this._mouseStart(b)!==!1;if(!this._mouseStarted)return b.preventDefault(),!0}return!0===a.data(b.target,this.widgetName+".preventClickEvent")&amp;&amp;a.removeData(b.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(a){return d._mouseMove(a)},this._mouseUpDelegate=function(a){return d._mouseUp(a)},a(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),b.preventDefault(),c=!0,!0},_mouseMove:function(b){return!a.browser.msie||document.documentMode&gt;=9||!!b.button?this._mouseStarted?(this._mouseDrag(b),b.preventDefault()):(this._mouseDistanceMet(b)&amp;&amp;this._mouseDelayMet(b)&amp;&amp;(this._mouseStarted=this._mouseStart(this._mouseDownEvent,b)!==!1,this._mouseStarted?this._mouseDrag(b):this._mouseUp(b)),!this._mouseStarted):this._mouseUp(b)},_mouseUp:function(b){return a(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&amp;&amp;(this._mouseStarted=!1,b.target==this._mouseDownEvent.target&amp;&amp;a.data(b.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(b)),!1},_mouseDistanceMet:function(a){return Math.max(Math.abs(this._mouseDownEvent.pageX-a.pageX),Math.abs(this._mouseDownEvent.pageY-a.pageY))&gt;=this.options.distance},_mouseDelayMet:function(a){return this.mouseDelayMet},_mouseStart:function(a){},_mouseDrag:function(a){},_mouseStop:function(a){},_mouseCapture:function(a){return!0}})}(jQuery),function(a,b){a.widget("ui.draggable",a.ui.mouse,{widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1},_create:function(){this.options.helper=="original"&amp;&amp;!/^(?:r|a|f)/.test(this.element.css("position"))&amp;&amp;(this.element[0].style.position="relative"),this.options.addClasses&amp;&amp;this.element.addClass("ui-draggable"),this.options.disabled&amp;&amp;this.element.addClass("ui-draggable-disabled"),this._mouseInit()},destroy:function(){if(!this.element.data("draggable"))return;return this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy(),this},_mouseCapture:function(b){var c=this.options;return this.helper||c.disabled||a(b.target).is(".ui-resizable-handle")?!1:(this.handle=this._getHandle(b),this.handle?(c.iframeFix&amp;&amp;a(c.iframeFix===!0?"iframe":c.iframeFix).each(function(){a('&lt;div class="ui-draggable-iframeFix" style="background: #fff;"&gt;&lt;/div&gt;').css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(a(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(b){var c=this.options;return this.helper=this._createHelper(b),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),a.ui.ddmanager&amp;&amp;(a.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},a.extend(this.offset,{click:{left:b.pageX-this.offset.left,top:b.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(b),this.originalPageX=b.pageX,this.originalPageY=b.pageY,c.cursorAt&amp;&amp;this._adjustOffsetFromHelper(c.cursorAt),c.containment&amp;&amp;this._setContainment(),this._trigger("start",b)===!1?(this._clear(),!1):(this._cacheHelperProportions(),a.ui.ddmanager&amp;&amp;!c.dropBehaviour&amp;&amp;a.ui.ddmanager.prepareOffsets(this,b),this._mouseDrag(b,!0),a.ui.ddmanager&amp;&amp;a.ui.ddmanager.dragStart(this,b),!0)},_mouseDrag:function(b,c){this.position=this._generatePosition(b),this.positionAbs=this._convertPositionTo("absolute");if(!c){var d=this._uiHash();if(this._trigger("drag",b,d)===!1)return this._mouseUp({}),!1;this.position=d.position}if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";return a.ui.ddmanager&amp;&amp;a.ui.ddmanager.drag(this,b),!1},_mouseStop:function(b){var c=!1;a.ui.ddmanager&amp;&amp;!this.options.dropBehaviour&amp;&amp;(c=a.ui.ddmanager.drop(this,b)),this.dropped&amp;&amp;(c=this.dropped,this.dropped=!1);var d=this.element[0],e=!1;while(d&amp;&amp;(d=d.parentNode))d==document&amp;&amp;(e=!0);if(!e&amp;&amp;this.options.helper==="original")return!1;if(this.options.revert=="invalid"&amp;&amp;!c||this.options.revert=="valid"&amp;&amp;c||this.options.revert===!0||a.isFunction(this.options.revert)&amp;&amp;this.options.revert.call(this.element,c)){var f=this;a(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){f._trigger("stop",b)!==!1&amp;&amp;f._clear()})}else this._trigger("stop",b)!==!1&amp;&amp;this._clear();return!1},_mouseUp:function(b){return a("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),a.ui.ddmanager&amp;&amp;a.ui.ddmanager.dragStop(this,b),a.ui.mouse.prototype._mouseUp.call(this,b)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(b){var c=!this.options.handle||!a(this.options.handle,this.element).length?!0:!1;return a(this.options.handle,this.element).find("*").andSelf().each(function(){this==b.target&amp;&amp;(c=!0)}),c},_createHelper:function(b){var c=this.options,d=a.isFunction(c.helper)?a(c.helper.apply(this.element[0],[b])):c.helper=="clone"?this.element.clone().removeAttr("id"):this.element;return d.parents("body").length||d.appendTo(c.appendTo=="parent"?this.element[0].parentNode:c.appendTo),d[0]!=this.element[0]&amp;&amp;!/(fixed|absolute)/.test(d.css("position"))&amp;&amp;d.css("position","absolute"),d},_adjustOffsetFromHelper:function(b){typeof b=="string"&amp;&amp;(b=b.split(" ")),a.isArray(b)&amp;&amp;(b={left:+b[0],top:+b[1]||0}),"left"in b&amp;&amp;(this.offset.click.left=b.left+this.margins.left),"right"in b&amp;&amp;(this.offset.click.left=this.helperProportions.width-b.right+this.margins.left),"top"in b&amp;&amp;(this.offset.click.top=b.top+this.margins.top),"bottom"in b&amp;&amp;(this.offset.click.top=this.helperProportions.height-b.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var b=this.offsetParent.offset();this.cssPosition=="absolute"&amp;&amp;this.scrollParent[0]!=document&amp;&amp;a.ui.contains(this.scrollParent[0],this.offsetParent[0])&amp;&amp;(b.left+=this.scrollParent.scrollLeft(),b.top+=this.scrollParent.scrollTop());if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&amp;&amp;this.offsetParent[0].tagName.toLowerCase()=="html"&amp;&amp;a.browser.msie)b={top:0,left:0};return{top:b.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:b.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var a=this.element.position();return{top:a.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var b=this.options;b.containment=="parent"&amp;&amp;(b.containment=this.helper[0].parentNode);if(b.containment=="document"||b.containment=="window")this.containment=[b.containment=="document"?0:a(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,b.containment=="document"?0:a(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,(b.containment=="document"?0:a(window).scrollLeft())+a(b.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(b.containment=="document"?0:a(window).scrollTop())+(a(b.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(b.containment)&amp;&amp;b.containment.constructor!=Array){var c=a(b.containment),d=c[0];if(!d)return;var e=c.offset(),f=a(d).css("overflow")!="hidden";this.containment=[(parseInt(a(d).css("borderLeftWidth"),10)||0)+(parseInt(a(d).css("paddingLeft"),10)||0),(parseInt(a(d).css("borderTopWidth"),10)||0)+(parseInt(a(d).css("paddingTop"),10)||0),(f?Math.max(d.scrollWidth,d.offsetWidth):d.offsetWidth)-(parseInt(a(d).css("borderLeftWidth"),10)||0)-(parseInt(a(d).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(f?Math.max(d.scrollHeight,d.offsetHeight):d.offsetHeight)-(parseInt(a(d).css("borderTopWidth"),10)||0)-(parseInt(a(d).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=c}else b.containment.constructor==Array&amp;&amp;(this.containment=b.containment)},_convertPositionTo:function(b,c){c||(c=this.position);var d=b=="absolute"?1:-1,e=this.options,f=this.cssPosition=="absolute"&amp;&amp;(this.scrollParent[0]==document||!a.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,g=/(html|body)/i.test(f[0].tagName);return{top:c.top+this.offset.relative.top*d+this.offset.parent.top*d-(a.browser.safari&amp;&amp;a.browser.version&lt;526&amp;&amp;this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():g?0:f.scrollTop())*d),left:c.left+this.offset.relative.left*d+this.offset.parent.left*d-(a.browser.safari&amp;&amp;a.browser.version&lt;526&amp;&amp;this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():g?0:f.scrollLeft())*d)}},_generatePosition:function(b){var c=this.options,d=this.cssPosition=="absolute"&amp;&amp;(this.scrollParent[0]==document||!a.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,e=/(html|body)/i.test(d[0].tagName),f=b.pageX,g=b.pageY;if(this.originalPosition){var h;if(this.containment){if(this.relative_container){var i=this.relative_container.offset();h=[this.containment[0]+i.left,this.containment[1]+i.top,this.containment[2]+i.left,this.containment[3]+i.top]}else h=this.containment;b.pageX-this.offset.click.left&lt;h[0]&amp;&amp;(f=h[0]+this.offset.click.left),b.pageY-this.offset.click.top&lt;h[1]&amp;&amp;(g=h[1]+this.offset.click.top),b.pageX-this.offset.click.left&gt;h[2]&amp;&amp;(f=h[2]+this.offset.click.left),b.pageY-this.offset.click.top&gt;h[3]&amp;&amp;(g=h[3]+this.offset.click.top)}if(c.grid){var j=c.grid[1]?this.originalPageY+Math.round((g-this.originalPageY)/c.grid[1])*c.grid[1]:this.originalPageY;g=h?j-this.offset.click.top&lt;h[1]||j-this.offset.click.top&gt;h[3]?j-this.offset.click.top&lt;h[1]?j+c.grid[1]:j-c.grid[1]:j:j;var k=c.grid[0]?this.originalPageX+Math.round((f-this.originalPageX)/c.grid[0])*c.grid[0]:this.originalPageX;f=h?k-this.offset.click.left&lt;h[0]||k-this.offset.click.left&gt;h[2]?k-this.offset.click.left&lt;h[0]?k+c.grid[0]:k-c.grid[0]:k:k}}return{top:g-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(a.browser.safari&amp;&amp;a.browser.version&lt;526&amp;&amp;this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollTop():e?0:d.scrollTop()),left:f-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(a.browser.safari&amp;&amp;a.browser.version&lt;526&amp;&amp;this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():e?0:d.scrollLeft())}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]!=this.element[0]&amp;&amp;!this.cancelHelperRemoval&amp;&amp;this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(b,c,d){return d=d||this._uiHash(),a.ui.plugin.call(this,b,[c,d]),b=="drag"&amp;&amp;(this.positionAbs=this._convertPositionTo("absolute")),a.Widget.prototype._trigger.call(this,b,c,d)},plugins:{},_uiHash:function(a){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),a.extend(a.ui.draggable,{version:"1.8.24"}),a.ui.plugin.add("draggable","connectToSortable",{start:function(b,c){var d=a(this).data("draggable"),e=d.options,f=a.extend({},c,{item:d.element});d.sortables=[],a(e.connectToSortable).each(function(){var c=a.data(this,"sortable");c&amp;&amp;!c.options.disabled&amp;&amp;(d.sortables.push({instance:c,shouldRevert:c.options.revert}),c.refreshPositions(),c._trigger("activate",b,f))})},stop:function(b,c){var d=a(this).data("draggable"),e=a.extend({},c,{item:d.element});a.each(d.sortables,function(){this.instance.isOver?(this.instance.isOver=0,d.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&amp;&amp;(this.instance.options.revert=!0),this.instance._mouseStop(b),this.instance.options.helper=this.instance.options._helper,d.options.helper=="original"&amp;&amp;this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",b,e))})},drag:function(b,c){var d=a(this).data("draggable"),e=this,f=function(b){var c=this.offset.click.top,d=this.offset.click.left,e=this.positionAbs.top,f=this.positionAbs.left,g=b.height,h=b.width,i=b.top,j=b.left;return a.ui.isOver(e+c,f+d,i,j,g,h)};a.each(d.sortables,function(f){this.instance.positionAbs=d.positionAbs,this.instance.helperProportions=d.helperProportions,this.instance.offset.click=d.offset.click,this.instance._intersectsWith(this.instance.containerCache)?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=a(e).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return c.helper[0]},b.target=this.instance.currentItem[0],this.instance._mouseCapture(b,!0),this.instance._mouseStart(b,!0,!0),this.instance.offset.click.top=d.offset.click.top,this.instance.offset.click.left=d.offset.click.left,this.instance.offset.parent.left-=d.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=d.offset.parent.top-this.instance.offset.parent.top,d._trigger("toSortable",b),d.dropped=this.instance.element,d.currentItem=d.element,this.instance.fromOutside=d),this.instance.currentItem&amp;&amp;this.instance._mouseDrag(b)):this.instance.isOver&amp;&amp;(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",b,this.instance._uiHash(this.instance)),this.instance._mouseStop(b,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&amp;&amp;this.instance.placeholder.remove(),d._trigger("fromSortable",b),d.dropped=!1)})}}),a.ui.plugin.add("draggable","cursor",{start:function(b,c){var d=a("body"),e=a(this).data("draggable").options;d.css("cursor")&amp;&amp;(e._cursor=d.css("cursor")),d.css("cursor",e.cursor)},stop:function(b,c){var d=a(this).data("draggable").options;d._cursor&amp;&amp;a("body").css("cursor",d._cursor)}}),a.ui.plugin.add("draggable","opacity",{start:function(b,c){var d=a(c.helper),e=a(this).data("draggable").options;d.css("opacity")&amp;&amp;(e._opacity=d.css("opacity")),d.css("opacity",e.opacity)},stop:function(b,c){var d=a(this).data("draggable").options;d._opacity&amp;&amp;a(c.helper).css("opacity",d._opacity)}}),a.ui.plugin.add("draggable","scroll",{start:function(b,c){var d=a(this).data("draggable");d.scrollParent[0]!=document&amp;&amp;d.scrollParent[0].tagName!="HTML"&amp;&amp;(d.overflowOffset=d.scrollParent.offset())},drag:function(b,c){var d=a(this).data("draggable"),e=d.options,f=!1;if(d.scrollParent[0]!=document&amp;&amp;d.scrollParent[0].tagName!="HTML"){if(!e.axis||e.axis!="x")d.overflowOffset.top+d.scrollParent[0].offsetHeight-b.pageY&lt;e.scrollSensitivity?d.scrollParent[0].scrollTop=f=d.scrollParent[0].scrollTop+e.scrollSpeed:b.pageY-d.overflowOffset.top&lt;e.scrollSensitivity&amp;&amp;(d.scrollParent[0].scrollTop=f=d.scrollParent[0].scrollTop-e.scrollSpeed);if(!e.axis||e.axis!="y")d.overflowOffset.left+d.scrollParent[0].offsetWidth-b.pageX&lt;e.scrollSensitivity?d.scrollParent[0].scrollLeft=f=d.scrollParent[0].scrollLeft+e.scrollSpeed:b.pageX-d.overflowOffset.left&lt;e.scrollSensitivity&amp;&amp;(d.scrollParent[0].scrollLeft=f=d.scrollParent[0].scrollLeft-e.scrollSpeed)}else{if(!e.axis||e.axis!="x")b.pageY-a(document).scrollTop()&lt;e.scrollSensitivity?f=a(document).scrollTop(a(document).scrollTop()-e.scrollSpeed):a(window).height()-(b.pageY-a(document).scrollTop())&lt;e.scrollSensitivity&amp;&amp;(f=a(document).scrollTop(a(document).scrollTop()+e.scrollSpeed));if(!e.axis||e.axis!="y")b.pageX-a(document).scrollLeft()&lt;e.scrollSensitivity?f=a(document).scrollLeft(a(document).scrollLeft()-e.scrollSpeed):a(window).width()-(b.pageX-a(document).scrollLeft())&lt;e.scrollSensitivity&amp;&amp;(f=a(document).scrollLeft(a(document).scrollLeft()+e.scrollSpeed))}f!==!1&amp;&amp;a.ui.ddmanager&amp;&amp;!e.dropBehaviour&amp;&amp;a.ui.ddmanager.prepareOffsets(d,b)}}),a.ui.plugin.add("draggable","snap",{start:function(b,c){var d=a(this).data("draggable"),e=d.options;d.snapElements=[],a(e.snap.constructor!=String?e.snap.items||":data(draggable)":e.snap).each(function(){var b=a(this),c=b.offset();this!=d.element[0]&amp;&amp;d.snapElements.push({item:this,width:b.outerWidth(),height:b.outerHeight(),top:c.top,left:c.left})})},drag:function(b,c){var d=a(this).data("draggable"),e=d.options,f=e.snapTolerance,g=c.offset.left,h=g+d.helperProportions.width,i=c.offset.top,j=i+d.helperProportions.height;for(var k=d.snapElements.length-1;k&gt;=0;k--){var l=d.snapElements[k].left,m=l+d.snapElements[k].width,n=d.snapElements[k].top,o=n+d.snapElements[k].height;if(!(l-f&lt;g&amp;&amp;g&lt;m+f&amp;&amp;n-f&lt;i&amp;&amp;i&lt;o+f||l-f&lt;g&amp;&amp;g&lt;m+f&amp;&amp;n-f&lt;j&amp;&amp;j&lt;o+f||l-f&lt;h&amp;&amp;h&lt;m+f&amp;&amp;n-f&lt;i&amp;&amp;i&lt;o+f||l-f&lt;h&amp;&amp;h&lt;m+f&amp;&amp;n-f&lt;j&amp;&amp;j&lt;o+f)){d.snapElements[k].snapping&amp;&amp;d.options.snap.release&amp;&amp;d.options.snap.release.call(d.element,b,a.extend(d._uiHash(),{snapItem:d.snapElements[k].item})),d.snapElements[k].snapping=!1;continue}if(e.snapMode!="inner"){var p=Math.abs(n-j)&lt;=f,q=Math.abs(o-i)&lt;=f,r=Math.abs(l-h)&lt;=f,s=Math.abs(m-g)&lt;=f;p&amp;&amp;(c.position.top=d._convertPositionTo("relative",{top:n-d.helperProportions.height,left:0}).top-d.margins.top),q&amp;&amp;(c.position.top=d._convertPositionTo("relative",{top:o,left:0}).top-d.margins.top),r&amp;&amp;(c.position.left=d._convertPositionTo("relative",{top:0,left:l-d.helperProportions.width}).left-d.margins.left),s&amp;&amp;(c.position.left=d._convertPositionTo("relative",{top:0,left:m}).left-d.margins.left)}var t=p||q||r||s;if(e.snapMode!="outer"){var p=Math.abs(n-i)&lt;=f,q=Math.abs(o-j)&lt;=f,r=Math.abs(l-g)&lt;=f,s=Math.abs(m-h)&lt;=f;p&amp;&amp;(c.position.top=d._convertPositionTo("relative",{top:n,left:0}).top-d.margins.top),q&amp;&amp;(c.position.top=d._convertPositionTo("relative",{top:o-d.helperProportions.height,left:0}).top-d.margins.top),r&amp;&amp;(c.position.left=d._convertPositionTo("relative",{top:0,left:l}).left-d.margins.left),s&amp;&amp;(c.position.left=d._convertPositionTo("relative",{top:0,left:m-d.helperProportions.width}).left-d.margins.left)}!d.snapElements[k].snapping&amp;&amp;(p||q||r||s||t)&amp;&amp;d.options.snap.snap&amp;&amp;d.options.snap.snap.call(d.element,b,a.extend(d._uiHash(),{snapItem:d.snapElements[k].item})),d.snapElements[k].snapping=p||q||r||s||t}}}),a.ui.plugin.add("draggable","stack",{start:function(b,c){var d=a(this).data("draggable").options,e=a.makeArray(a(d.stack)).sort(function(b,c){return(parseInt(a(b).css("zIndex"),10)||0)-(parseInt(a(c).css("zIndex"),10)||0)});if(!e.length)return;var f=parseInt(e[0].style.zIndex)||0;a(e).each(function(a){this.style.zIndex=f+a}),this[0].style.zIndex=f+e.length}}),a.ui.plugin.add("draggable","zIndex",{start:function(b,c){var d=a(c.helper),e=a(this).data("draggable").options;d.css("zIndex")&amp;&amp;(e._zIndex=d.css("zIndex")),d.css("zIndex",e.zIndex)},stop:function(b,c){var d=a(this).data("draggable").options;d._zIndex&amp;&amp;a(c.helper).css("zIndex",d._zIndex)}})}(jQuery),function(a,b){a.widget("ui.droppable",{widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect"},_create:function(){var b=this.options,c=b.accept;this.isover=0,this.isout=1,this.accept=a.isFunction(c)?c:function(a){return a.is(c)},this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight},a.ui.ddmanager.droppables[b.scope]=a.ui.ddmanager.droppables[b.scope]||[],a.ui.ddmanager.droppables[b.scope].push(this),b.addClasses&amp;&amp;this.element.addClass("ui-droppable")},destroy:function(){var b=a.ui.ddmanager.droppables[this.options.scope];for(var c=0;c&lt;b.length;c++)b[c]==this&amp;&amp;b.splice(c,1);return this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable"),this},_setOption:function(b,c){b=="accept"&amp;&amp;(this.accept=a.isFunction(c)?c:function(a){return a.is(c)}),a.Widget.prototype._setOption.apply(this,arguments)},_activate:function(b){var c=a.ui.ddmanager.current;this.options.activeClass&amp;&amp;this.element.addClass(this.options.activeClass),c&amp;&amp;this._trigger("activate",b,this.ui(c))},_deactivate:function(b){var c=a.ui.ddmanager.current;this.options.activeClass&amp;&amp;this.element.removeClass(this.options.activeClass),c&amp;&amp;this._trigger("deactivate",b,this.ui(c))},_over:function(b){var c=a.ui.ddmanager.current;if(!c||(c.currentItem||c.element)[0]==this.element[0])return;this.accept.call(this.element[0],c.currentItem||c.element)&amp;&amp;(this.options.hoverClass&amp;&amp;this.element.addClass(this.options.hoverClass),this._trigger("over",b,this.ui(c)))},_out:function(b){var c=a.ui.ddmanager.current;if(!c||(c.currentItem||c.element)[0]==this.element[0])return;this.accept.call(this.element[0],c.currentItem||c.element)&amp;&amp;(this.options.hoverClass&amp;&amp;this.element.removeClass(this.options.hoverClass),this._trigger("out",b,this.ui(c)))},_drop:function(b,c){var d=c||a.ui.ddmanager.current;if(!d||(d.currentItem||d.element)[0]==this.element[0])return!1;var e=!1;return this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function(){var b=a.data(this,"droppable");if(b.options.greedy&amp;&amp;!b.options.disabled&amp;&amp;b.options.scope==d.options.scope&amp;&amp;b.accept.call(b.element[0],d.currentItem||d.element)&amp;&amp;a.ui.intersect(d,a.extend(b,{offset:b.element.offset()}),b.options.tolerance))return e=!0,!1}),e?!1:this.accept.call(this.element[0],d.currentItem||d.element)?(this.options.activeClass&amp;&amp;this.element.removeClass(this.options.activeClass),this.options.hoverClass&amp;&amp;this.element.removeClass(this.options.hoverClass),this._trigger("drop",b,this.ui(d)),this.element):!1},ui:function(a){return{draggable:a.currentItem||a.element,helper:a.helper,position:a.position,offset:a.positionAbs}}}),a.extend(a.ui.droppable,{version:"1.8.24"}),a.ui.intersect=function(b,c,d){if(!c.offset)return!1;var e=(b.positionAbs||b.position.absolute).left,f=e+b.helperProportions.width,g=(b.positionAbs||b.position.absolute).top,h=g+b.helperProportions.height,i=c.offset.left,j=i+c.proportions.width,k=c.offset.top,l=k+c.proportions.height;switch(d){case"fit":return i&lt;=e&amp;&amp;f&lt;=j&amp;&amp;k&lt;=g&amp;&amp;h&lt;=l;case"intersect":return i&lt;e+b.helperProportions.width/2&amp;&amp;f-b.helperProportions.width/2&lt;j&amp;&amp;k&lt;g+b.helperProportions.height/2&amp;&amp;h-b.helperProportions.height/2&lt;l;case"pointer":var m=(b.positionAbs||b.position.absolute).left+(b.clickOffset||b.offset.click).left,n=(b.positionAbs||b.position.absolute).top+(b.clickOffset||b.offset.click).top,o=a.ui.isOver(n,m,k,i,c.proportions.height,c.proportions.width);return o;case"touch":return(g&gt;=k&amp;&amp;g&lt;=l||h&gt;=k&amp;&amp;h&lt;=l||g&lt;k&amp;&amp;h&gt;l)&amp;&amp;(e&gt;=i&amp;&amp;e&lt;=j||f&gt;=i&amp;&amp;f&lt;=j||e&lt;i&amp;&amp;f&gt;j);default:return!1}},a.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(b,c){var d=a.ui.ddmanager.droppables[b.options.scope]||[],e=c?c.type:null,f=(b.currentItem||b.element).find(":data(droppable)").andSelf();g:for(var h=0;h&lt;d.length;h++){if(d[h].options.disabled||b&amp;&amp;!d[h].accept.call(d[h].element[0],b.currentItem||b.element))continue;for(var i=0;i&lt;f.length;i++)if(f[i]==d[h].element[0]){d[h].proportions.height=0;continue g}d[h].visible=d[h].element.css("display")!="none";if(!d[h].visible)continue;e=="mousedown"&amp;&amp;d[h]._activate.call(d[h],c),d[h].offset=d[h].element.offset(),d[h].proportions={width:d[h].element[0].offsetWidth,height:d[h].element[0].offsetHeight}}},drop:function(b,c){var d=!1;return a.each(a.ui.ddmanager.droppables[b.options.scope]||[],function(){if(!this.options)return;!this.options.disabled&amp;&amp;this.visible&amp;&amp;a.ui.intersect(b,this,this.options.tolerance)&amp;&amp;(d=this._drop.call(this,c)||d),!this.options.disabled&amp;&amp;this.visible&amp;&amp;this.accept.call(this.element[0],b.currentItem||b.element)&amp;&amp;(this.isout=1,this.isover=0,this._deactivate.call(this,c))}),d},dragStart:function(b,c){b.element.parents(":not(body,html)").bind("scroll.droppable",function(){b.options.refreshPositions||a.ui.ddmanager.prepareOffsets(b,c)})},drag:function(b,c){b.options.refreshPositions&amp;&amp;a.ui.ddmanager.prepareOffsets(b,c),a.each(a.ui.ddmanager.droppables[b.options.scope]||[],function(){if(this.options.disabled||this.greedyChild||!this.visible)return;var d=a.ui.intersect(b,this,this.options.tolerance),e=!d&amp;&amp;this.isover==1?"isout":d&amp;&amp;this.isover==0?"isover":null;if(!e)return;var f;if(this.options.greedy){var g=this.options.scope,h=this.element.parents(":data(droppable)").filter(function(){return a.data(this,"droppable").options.scope===g});h.length&amp;&amp;(f=a.data(h[0],"droppable"),f.greedyChild=e=="isover"?1:0)}f&amp;&amp;e=="isover"&amp;&amp;(f.isover=0,f.isout=1,f._out.call(f,c)),this[e]=1,this[e=="isout"?"isover":"isout"]=0,this[e=="isover"?"_over":"_out"].call(this,c),f&amp;&amp;e=="isout"&amp;&amp;(f.isout=0,f.isover=1,f._over.call(f,c))})},dragStop:function(b,c){b.element.parents(":not(body,html)").unbind("scroll.droppable"),b.options.refreshPositions||a.ui.ddmanager.prepareOffsets(b,c)}}}(jQuery),function(a,b){a.widget("ui.resizable",a.ui.mouse,{widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:1e3},_create:function(){var b=this,c=this.options;this.element.addClass("ui-resizable"),a.extend(this,{_aspectRatio:!!c.aspectRatio,aspectRatio:c.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:c.helper||c.ghost||c.animate?c.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&amp;&amp;(this.element.wrap(a('&lt;div class="ui-wrapper" style="overflow: hidden;"&gt;&lt;/div&gt;').css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("resizable",this.element.data("resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=c.handles||(a(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se");if(this.handles.constructor==String){this.handles=="all"&amp;&amp;(this.handles="n,e,s,w,se,sw,ne,nw");var d=this.handles.split(",");this.handles={};for(var e=0;e&lt;d.length;e++){var f=a.trim(d[e]),g="ui-resizable-"+f,h=a('&lt;div class="ui-resizable-handle '+g+'"&gt;&lt;/div&gt;');h.css({zIndex:c.zIndex}),"se"==f&amp;&amp;h.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[f]=".ui-resizable-"+f,this.element.append(h)}}this._renderAxis=function(b){b=b||this.element;for(var c in this.handles){this.handles[c].constructor==String&amp;&amp;(this.handles[c]=a(this.handles[c],this.element).show());if(this.elementIsWrapper&amp;&amp;this.originalElement[0].nodeName.match(/textarea|input|select|button/i)){var d=a(this.handles[c],this.element),e=0;e=/sw|ne|nw|se|n|s/.test(c)?d.outerHeight():d.outerWidth();var f=["padding",/ne|nw|n/.test(c)?"Top":/se|sw|s/.test(c)?"Bottom":/^e$/.test(c)?"Right":"Left"].join("");b.css(f,e),this._proportionallyResize()}if(!a(this.handles[c]).length)continue}},this._renderAxis(this.element),this._handles=a(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){if(!b.resizing){if(this.className)var a=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);b.axis=a&amp;&amp;a[1]?a[1]:"se"}}),c.autoHide&amp;&amp;(this._handles.hide(),a(this.element).addClass("ui-resizable-autohide").hover(function(){if(c.disabled)return;a(this).removeClass("ui-resizable-autohide"),b._handles.show()},function(){if(c.disabled)return;b.resizing||(a(this).addClass("ui-resizable-autohide"),b._handles.hide())})),this._mouseInit()},destroy:function(){this._mouseDestroy();var b=function(b){a(b).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};if(this.elementIsWrapper){b(this.element);var c=this.element;c.after(this.originalElement.css({position:c.css("position"),width:c.outerWidth(),height:c.outerHeight(),top:c.css("top"),left:c.css("left")})).remove()}return this.originalElement.css("resize",this.originalResizeStyle),b(this.originalElement),this},_mouseCapture:function(b){var c=!1;for(var d in this.handles)a(this.handles[d])[0]==b.target&amp;&amp;(c=!0);return!this.options.disabled&amp;&amp;c},_mouseStart:function(b){var d=this.options,e=this.element.position(),f=this.element;this.resizing=!0,this.documentScroll={top:a(document).scrollTop(),left:a(document).scrollLeft()},(f.is(".ui-draggable")||/absolute/.test(f.css("position")))&amp;&amp;f.css({position:"absolute",top:e.top,left:e.left}),this._renderProxy();var g=c(this.helper.css("left")),h=c(this.helper.css("top"));d.containment&amp;&amp;(g+=a(d.containment).scrollLeft()||0,h+=a(d.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:g,top:h},this.size=this._helper?{width:f.outerWidth(),height:f.outerHeight()}:{width:f.width(),height:f.height()},this.originalSize=this._helper?{width:f.outerWidth(),height:f.outerHeight()}:{width:f.width(),height:f.height()},this.originalPosition={left:g,top:h},this.sizeDiff={width:f.outerWidth()-f.width(),height:f.outerHeight()-f.height()},this.originalMousePosition={left:b.pageX,top:b.pageY},this.aspectRatio=typeof d.aspectRatio=="number"?d.aspectRatio:this.originalSize.width/this.originalSize.height||1;var i=a(".ui-resizable-"+this.axis).css("cursor");return a("body").css("cursor",i=="auto"?this.axis+"-resize":i),f.addClass("ui-resizable-resizing"),this._propagate("start",b),!0},_mouseDrag:function(b){var c=this.helper,d=this.options,e={},f=this,g=this.originalMousePosition,h=this.axis,i=b.pageX-g.left||0,j=b.pageY-g.top||0,k=this._change[h];if(!k)return!1;var l=k.apply(this,[b,i,j]),m=a.browser.msie&amp;&amp;a.browser.version&lt;7,n=this.sizeDiff;this._updateVirtualBoundaries(b.shiftKey);if(this._aspectRatio||b.shiftKey)l=this._updateRatio(l,b);return l=this._respectSize(l,b),this._propagate("resize",b),c.css({top:this.position.top+"px",left:this.position.left+"px",width:this.size.width+"px",height:this.size.height+"px"}),!this._helper&amp;&amp;this._proportionallyResizeElements.length&amp;&amp;this._proportionallyResize(),this._updateCache(l),this._trigger("resize",b,this.ui()),!1},_mouseStop:function(b){this.resizing=!1;var c=this.options,d=this;if(this._helper){var e=this._proportionallyResizeElements,f=e.length&amp;&amp;/textarea/i.test(e[0].nodeName),g=f&amp;&amp;a.ui.hasScroll(e[0],"left")?0:d.sizeDiff.height,h=f?0:d.sizeDiff.width,i={width:d.helper.width()-h,height:d.helper.height()-g},j=parseInt(d.element.css("left"),10)+(d.position.left-d.originalPosition.left)||null,k=parseInt(d.element.css("top"),10)+(d.position.top-d.originalPosition.top)||null;c.animate||this.element.css(a.extend(i,{top:k,left:j})),d.helper.height(d.size.height),d.helper.width(d.size.width),this._helper&amp;&amp;!c.animate&amp;&amp;this._proportionallyResize()}return a("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",b),this._helper&amp;&amp;this.helper.remove(),!1},_updateVirtualBoundaries:function(a){var b=this.options,c,e,f,g,h;h={minWidth:d(b.minWidth)?b.minWidth:0,maxWidth:d(b.maxWidth)?b.maxWidth:Infinity,minHeight:d(b.minHeight)?b.minHeight:0,maxHeight:d(b.maxHeight)?b.maxHeight:Infinity};if(this._aspectRatio||a)c=h.minHeight*this.aspectRatio,f=h.minWidth/this.aspectRatio,e=h.maxHeight*this.aspectRatio,g=h.maxWidth/this.aspectRatio,c&gt;h.minWidth&amp;&amp;(h.minWidth=c),f&gt;h.minHeight&amp;&amp;(h.minHeight=f),e&lt;h.maxWidth&amp;&amp;(h.maxWidth=e),g&lt;h.maxHeight&amp;&amp;(h.maxHeight=g);this._vBoundaries=h},_updateCache:function(a){var b=this.options;this.offset=this.helper.offset(),d(a.left)&amp;&amp;(this.position.left=a.left),d(a.top)&amp;&amp;(this.position.top=a.top),d(a.height)&amp;&amp;(this.size.height=a.height),d(a.width)&amp;&amp;(this.size.width=a.width)},_updateRatio:function(a,b){var c=this.options,e=this.position,f=this.size,g=this.axis;return d(a.height)?a.width=a.height*this.aspectRatio:d(a.width)&amp;&amp;(a.height=a.width/this.aspectRatio),g=="sw"&amp;&amp;(a.left=e.left+(f.width-a.width),a.top=null),g=="nw"&amp;&amp;(a.top=e.top+(f.height-a.height),a.left=e.left+(f.width-a.width)),a},_respectSize:function(a,b){var c=this.helper,e=this._vBoundaries,f=this._aspectRatio||b.shiftKey,g=this.axis,h=d(a.width)&amp;&amp;e.maxWidth&amp;&amp;e.maxWidth&lt;a.width,i=d(a.height)&amp;&amp;e.maxHeight&amp;&amp;e.maxHeight&lt;a.height,j=d(a.width)&amp;&amp;e.minWidth&amp;&amp;e.minWidth&gt;a.width,k=d(a.height)&amp;&amp;e.minHeight&amp;&amp;e.minHeight&gt;a.height;j&amp;&amp;(a.width=e.minWidth),k&amp;&amp;(a.height=e.minHeight),h&amp;&amp;(a.width=e.maxWidth),i&amp;&amp;(a.height=e.maxHeight);var l=this.originalPosition.left+this.originalSize.width,m=this.position.top+this.size.height,n=/sw|nw|w/.test(g),o=/nw|ne|n/.test(g);j&amp;&amp;n&amp;&amp;(a.left=l-e.minWidth),h&amp;&amp;n&amp;&amp;(a.left=l-e.maxWidth),k&amp;&amp;o&amp;&amp;(a.top=m-e.minHeight),i&amp;&amp;o&amp;&amp;(a.top=m-e.maxHeight);var p=!a.width&amp;&amp;!a.height;return p&amp;&amp;!a.left&amp;&amp;a.top?a.top=null:p&amp;&amp;!a.top&amp;&amp;a.left&amp;&amp;(a.left=null),a},_proportionallyResize:function(){var b=this.options;if(!this._proportionallyResizeElements.length)return;var c=this.helper||this.element;for(var d=0;d&lt;this._proportionallyResizeElements.length;d++){var e=this._proportionallyResizeElements[d];if(!this.borderDif){var f=[e.css("borderTopWidth"),e.css("borderRightWidth"),e.css("borderBottomWidth"),e.css("borderLeftWidth")],g=[e.css("paddingTop"),e.css("paddingRight"),e.css("paddingBottom"),e.css("paddingLeft")];this.borderDif=a.map(f,function(a,b){var c=parseInt(a,10)||0,d=parseInt(g[b],10)||0;return c+d})}if(!a.browser.msie||!a(c).is(":hidden")&amp;&amp;!a(c).parents(":hidden").length)e.css({height:c.height()-this.borderDif[0]-this.borderDif[2]||0,width:c.width()-this.borderDif[1]-this.borderDif[3]||0});else continue}},_renderProxy:function(){var b=this.element,c=this.options;this.elementOffset=b.offset();if(this._helper){this.helper=this.helper||a('&lt;div style="overflow:hidden;"&gt;&lt;/div&gt;');var d=a.browser.msie&amp;&amp;a.browser.version&lt;7,e=d?1:0,f=d?2:-1;this.helper.addClass(this._helper).css({width:this.element.outerWidth()+f,height:this.element.outerHeight()+f,position:"absolute",left:this.elementOffset.left-e+"px",top:this.elementOffset.top-e+"px",zIndex:++c.zIndex}),this.helper.appendTo("body").disableSelection()}else this.helper=this.element},_change:{e:function(a,b,c){return{width:this.originalSize.width+b}},w:function(a,b,c){var d=this.options,e=this.originalSize,f=this.originalPosition;return{left:f.left+b,width:e.width-b}},n:function(a,b,c){var d=this.options,e=this.originalSize,f=this.originalPosition;return{top:f.top+c,height:e.height-c}},s:function(a,b,c){return{height:this.originalSize.height+c}},se:function(b,c,d){return a.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[b,c,d]))},sw:function(b,c,d){return a.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[b,c,d]))},ne:function(b,c,d){return a.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[b,c,d]))},nw:function(b,c,d){return a.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[b,c,d]))}},_propagate:function(b,c){a.ui.plugin.call(this,b,[c,this.ui()]),b!="resize"&amp;&amp;this._trigger(b,c,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),a.extend(a.ui.resizable,{version:"1.8.24"}),a.ui.plugin.add("resizable","alsoResize",{start:function(b,c){var d=a(this).data("resizable"),e=d.options,f=function(b){a(b).each(function(){var b=a(this);b.data("resizable-alsoresize",{width:parseInt(b.width(),10),height:parseInt(b.height(),10),left:parseInt(b.css("left"),10),top:parseInt(b.css("top"),10)})})};typeof e.alsoResize=="object"&amp;&amp;!e.alsoResize.parentNode?e.alsoResize.length?(e.alsoResize=e.alsoResize[0],f(e.alsoResize)):a.each(e.alsoResize,function(a){f(a)}):f(e.alsoResize)},resize:function(b,c){var d=a(this).data("resizable"),e=d.options,f=d.originalSize,g=d.originalPosition,h={height:d.size.height-f.height||0,width:d.size.width-f.width||0,top:d.position.top-g.top||0,left:d.position.left-g.left||0},i=function(b,d){a(b).each(function(){var b=a(this),e=a(this).data("resizable-alsoresize"),f={},g=d&amp;&amp;d.length?d:b.parents(c.originalElement[0]).length?["width","height"]:["width","height","top","left"];a.each(g,function(a,b){var c=(e[b]||0)+(h[b]||0);c&amp;&amp;c&gt;=0&amp;&amp;(f[b]=c||null)}),b.css(f)})};typeof e.alsoResize=="object"&amp;&amp;!e.alsoResize.nodeType?a.each(e.alsoResize,function(a,b){i(a,b)}):i(e.alsoResize)},stop:function(b,c){a(this).removeData("resizable-alsoresize")}}),a.ui.plugin.add("resizable","animate",{stop:function(b,c){var d=a(this).data("resizable"),e=d.options,f=d._proportionallyResizeElements,g=f.length&amp;&amp;/textarea/i.test(f[0].nodeName),h=g&amp;&amp;a.ui.hasScroll(f[0],"left")?0:d.sizeDiff.height,i=g?0:d.sizeDiff.width,j={width:d.size.width-i,height:d.size.height-h},k=parseInt(d.element.css("left"),10)+(d.position.left-d.originalPosition.left)||null,l=parseInt(d.element.css("top"),10)+(d.position.top-d.originalPosition.top)||null;d.element.animate(a.extend(j,l&amp;&amp;k?{top:l,left:k}:{}),{duration:e.animateDuration,easing:e.animateEasing,step:function(){var c={width:parseInt(d.element.css("width"),10),height:parseInt(d.element.css("height"),10),top:parseInt(d.element.css("top"),10),left:parseInt(d.element.css("left"),10)};f&amp;&amp;f.length&amp;&amp;a(f[0]).css({width:c.width,height:c.height}),d._updateCache(c),d._propagate("resize",b)}})}}),a.ui.plugin.add("resizable","containment",{start:function(b,d){var e=a(this).data("resizable"),f=e.options,g=e.element,h=f.containment,i=h instanceof a?h.get(0):/parent/.test(h)?g.parent().get(0):h;if(!i)return;e.containerElement=a(i);if(/document/.test(h)||h==document)e.containerOffset={left:0,top:0},e.containerPosition={left:0,top:0},e.parentData={element:a(document),left:0,top:0,width:a(document).width(),height:a(document).height()||document.body.parentNode.scrollHeight};else{var j=a(i),k=[];a(["Top","Right","Left","Bottom"]).each(function(a,b){k[a]=c(j.css("padding"+b))}),e.containerOffset=j.offset(),e.containerPosition=j.position(),e.containerSize={height:j.innerHeight()-k[3],width:j.innerWidth()-k[1]};var l=e.containerOffset,m=e.containerSize.height,n=e.containerSize.width,o=a.ui.hasScroll(i,"left")?i.scrollWidth:n,p=a.ui.hasScroll(i)?i.scrollHeight:m;e.parentData={element:i,left:l.left,top:l.top,width:o,height:p}}},resize:function(b,c){var d=a(this).data("resizable"),e=d.options,f=d.containerSize,g=d.containerOffset,h=d.size,i=d.position,j=d._aspectRatio||b.shiftKey,k={top:0,left:0},l=d.containerElement;l[0]!=document&amp;&amp;/static/.test(l.css("position"))&amp;&amp;(k=g),i.left&lt;(d._helper?g.left:0)&amp;&amp;(d.size.width=d.size.width+(d._helper?d.position.left-g.left:d.position.left-k.left),j&amp;&amp;(d.size.height=d.size.width/d.aspectRatio),d.position.left=e.helper?g.left:0),i.top&lt;(d._helper?g.top:0)&amp;&amp;(d.size.height=d.size.height+(d._helper?d.position.top-g.top:d.position.top),j&amp;&amp;(d.size.width=d.size.height*d.aspectRatio),d.position.top=d._helper?g.top:0),d.offset.left=d.parentData.left+d.position.left,d.offset.top=d.parentData.top+d.position.top;var m=Math.abs((d._helper?d.offset.left-k.left:d.offset.left-k.left)+d.sizeDiff.width),n=Math.abs((d._helper?d.offset.top-k.top:d.offset.top-g.top)+d.sizeDiff.height),o=d.containerElement.get(0)==d.element.parent().get(0),p=/relative|absolute/.test(d.containerElement.css("position"));o&amp;&amp;p&amp;&amp;(m-=d.parentData.left),m+d.size.width&gt;=d.parentData.width&amp;&amp;(d.size.width=d.parentData.width-m,j&amp;&amp;(d.size.height=d.size.width/d.aspectRatio)),n+d.size.height&gt;=d.parentData.height&amp;&amp;(d.size.height=d.parentData.height-n,j&amp;&amp;(d.size.width=d.size.height*d.aspectRatio))},stop:function(b,c){var d=a(this).data("resizable"),e=d.options,f=d.position,g=d.containerOffset,h=d.containerPosition,i=d.containerElement,j=a(d.helper),k=j.offset(),l=j.outerWidth()-d.sizeDiff.width,m=j.outerHeight()-d.sizeDiff.height;d._helper&amp;&amp;!e.animate&amp;&amp;/relative/.test(i.css("position"))&amp;&amp;a(this).css({left:k.left-h.left-g.left,width:l,height:m}),d._helper&amp;&amp;!e.animate&amp;&amp;/static/.test(i.css("position"))&amp;&amp;a(this).css({left:k.left-h.left-g.left,width:l,height:m})}}),a.ui.plugin.add("resizable","ghost",{start:function(b,c){var d=a(this).data("resizable"),e=d.options,f=d.size;d.ghost=d.originalElement.clone(),d.ghost.css({opacity:.25,display:"block",position:"relative",height:f.height,width:f.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass(typeof e.ghost=="string"?e.ghost:""),d.ghost.appendTo(d.helper)},resize:function(b,c){var d=a(this).data("resizable"),e=d.options;d.ghost&amp;&amp;d.ghost.css({position:"relative",height:d.size.height,width:d.size.width})},stop:function(b,c){var d=a(this).data("resizable"),e=d.options;d.ghost&amp;&amp;d.helper&amp;&amp;d.helper.get(0).removeChild(d.ghost.get(0))}}),a.ui.plugin.add("resizable","grid",{resize:function(b,c){var d=a(this).data("resizable"),e=d.options,f=d.size,g=d.originalSize,h=d.originalPosition,i=d.axis,j=e._aspectRatio||b.shiftKey;e.grid=typeof e.grid=="number"?[e.grid,e.grid]:e.grid;var k=Math.round((f.width-g.width)/(e.grid[0]||1))*(e.grid[0]||1),l=Math.round((f.height-g.height)/(e.grid[1]||1))*(e.grid[1]||1);/^(se|s|e)$/.test(i)?(d.size.width=g.width+k,d.size.height=g.height+l):/^(ne)$/.test(i)?(d.size.width=g.width+k,d.size.height=g.height+l,d.position.top=h.top-l):/^(sw)$/.test(i)?(d.size.width=g.width+k,d.size.height=g.height+l,d.position.left=h.left-k):(d.size.width=g.width+k,d.size.height=g.height+l,d.position.top=h.top-l,d.position.left=h.left-k)}});var c=function(a){return parseInt(a,10)||0},d=function(a){return!isNaN(parseInt(a,10))}}(jQuery),function(a,b){a.widget("ui.selectable",a.ui.mouse,{options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch"},_create:function(){var b=this;this.element.addClass("ui-selectable"),this.dragged=!1;var c;this.refresh=function(){c=a(b.options.filter,b.element[0]),c.addClass("ui-selectee"),c.each(function(){var b=a(this),c=b.offset();a.data(this,"selectable-item",{element:this,$element:b,left:c.left,top:c.top,right:c.left+b.outerWidth(),bottom:c.top+b.outerHeight(),startselected:!1,selected:b.hasClass("ui-selected"),selecting:b.hasClass("ui-selecting"),unselecting:b.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=c.addClass("ui-selectee"),this._mouseInit(),this.helper=a("&lt;div class='ui-selectable-helper'&gt;&lt;/div&gt;")},destroy:function(){return this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled").removeData("selectable").unbind(".selectable"),this._mouseDestroy(),this},_mouseStart:function(b){var c=this;this.opos=[b.pageX,b.pageY];if(this.options.disabled)return;var d=this.options;this.selectees=a(d.filter,this.element[0]),this._trigger("start",b),a(d.appendTo).append(this.helper),this.helper.css({left:b.clientX,top:b.clientY,width:0,height:0}),d.autoRefresh&amp;&amp;this.refresh(),this.selectees.filter(".ui-selected").each(function(){var d=a.data(this,"selectable-item");d.startselected=!0,!b.metaKey&amp;&amp;!b.ctrlKey&amp;&amp;(d.$element.removeClass("ui-selected"),d.selected=!1,d.$element.addClass("ui-unselecting"),d.unselecting=!0,c._trigger("unselecting",b,{unselecting:d.element}))}),a(b.target).parents().andSelf().each(function(){var d=a.data(this,"selectable-item");if(d){var e=!b.metaKey&amp;&amp;!b.ctrlKey||!d.$element.hasClass("ui-selected");return d.$element.removeClass(e?"ui-unselecting":"ui-selected").addClass(e?"ui-selecting":"ui-unselecting"),d.unselecting=!e,d.selecting=e,d.selected=e,e?c._trigger("selecting",b,{selecting:d.element}):c._trigger("unselecting",b,{unselecting:d.element}),!1}})},_mouseDrag:function(b){var c=this;this.dragged=!0;if(this.options.disabled)return;var d=this.options,e=this.opos[0],f=this.opos[1],g=b.pageX,h=b.pageY;if(e&gt;g){var i=g;g=e,e=i}if(f&gt;h){var i=h;h=f,f=i}return this.helper.css({left:e,top:f,width:g-e,height:h-f}),this.selectees.each(function(){var i=a.data(this,"selectable-item");if(!i||i.element==c.element[0])return;var j=!1;d.tolerance=="touch"?j=!(i.left&gt;g||i.right&lt;e||i.top&gt;h||i.bottom&lt;f):d.tolerance=="fit"&amp;&amp;(j=i.left&gt;e&amp;&amp;i.right&lt;g&amp;&amp;i.top&gt;f&amp;&amp;i.bottom&lt;h),j?(i.selected&amp;&amp;(i.$element.removeClass("ui-selected"),i.selected=!1),i.unselecting&amp;&amp;(i.$element.removeClass("ui-unselecting"),i.unselecting=!1),i.selecting||(i.$element.addClass("ui-selecting"),i.selecting=!0,c._trigger("selecting",b,{selecting:i.element}))):(i.selecting&amp;&amp;((b.metaKey||b.ctrlKey)&amp;&amp;i.startselected?(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.$element.addClass("ui-selected"),i.selected=!0):(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.startselected&amp;&amp;(i.$element.addClass("ui-unselecting"),i.unselecting=!0),c._trigger("unselecting",b,{unselecting:i.element}))),i.selected&amp;&amp;!b.metaKey&amp;&amp;!b.ctrlKey&amp;&amp;!i.startselected&amp;&amp;(i.$element.removeClass("ui-selected"),i.selected=!1,i.$element.addClass("ui-unselecting"),i.unselecting=!0,c._trigger("unselecting",b,{unselecting:i.element})))}),!1},_mouseStop:function(b){var c=this;this.dragged=!1;var d=this.options;return a(".ui-unselecting",this.element[0]).each(function(){var d=a.data(this,"selectable-item");d.$element.removeClass("ui-unselecting"),d.unselecting=!1,d.startselected=!1,c._trigger("unselected",b,{unselected:d.element})}),a(".ui-selecting",this.element[0]).each(function(){var d=a.data(this,"selectable-item");d.$element.removeClass("ui-selecting").addClass("ui-selected"),d.selecting=!1,d.selected=!0,d.startselected=!0,c._trigger("selected",b,{selected:d.element})}),this._trigger("stop",b),this.helper.remove(),!1}}),a.extend(a.ui.selectable,{version:"1.8.24"})}(jQuery),function(a,b){a.widget("ui.sortable",a.ui.mouse,{widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"&gt; *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3},_create:function(){var a=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?a.axis==="x"||/left|right/.test(this.items[0].item.css("float"))||/inline|table-cell/.test(this.items[0].item.css("display")):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},destroy:function(){a.Widget.prototype.destroy.call(this),this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var b=this.items.length-1;b&gt;=0;b--)this.items[b].item.removeData(this.widgetName+"-item");return this},_setOption:function(b,c){b==="disabled"?(this.options[b]=c,this.widget()[c?"addClass":"removeClass"]("ui-sortable-disabled")):a.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(b,c){var d=this;if(this.reverting)return!1;if(this.options.disabled||this.options.type=="static")return!1;this._refreshItems(b);var e=null,f=this,g=a(b.target).parents().each(function(){if(a.data(this,d.widgetName+"-item")==f)return e=a(this),!1});a.data(b.target,d.widgetName+"-item")==f&amp;&amp;(e=a(b.target));if(!e)return!1;if(this.options.handle&amp;&amp;!c){var h=!1;a(this.options.handle,e).find("*").andSelf().each(function(){this==b.target&amp;&amp;(h=!0)});if(!h)return!1}return this.currentItem=e,this._removeCurrentsFromItems(),!0},_mouseStart:function(b,c,d){var e=this.options,f=this;this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(b),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},a.extend(this.offset,{click:{left:b.pageX-this.offset.left,top:b.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(b),this.originalPageX=b.pageX,this.originalPageY=b.pageY,e.cursorAt&amp;&amp;this._adjustOffsetFromHelper(e.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!=this.currentItem[0]&amp;&amp;this.currentItem.hide(),this._createPlaceholder(),e.containment&amp;&amp;this._setContainment(),e.cursor&amp;&amp;(a("body").css("cursor")&amp;&amp;(this._storedCursor=a("body").css("cursor")),a("body").css("cursor",e.cursor)),e.opacity&amp;&amp;(this.helper.css("opacity")&amp;&amp;(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",e.opacity)),e.zIndex&amp;&amp;(this.helper.css("zIndex")&amp;&amp;(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",e.zIndex)),this.scrollParent[0]!=document&amp;&amp;this.scrollParent[0].tagName!="HTML"&amp;&amp;(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",b,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions();if(!d)for(var g=this.containers.length-1;g&gt;=0;g--)this.containers[g]._trigger("activate",b,f._uiHash(this));return a.ui.ddmanager&amp;&amp;(a.ui.ddmanager.current=this),a.ui.ddmanager&amp;&amp;!e.dropBehaviour&amp;&amp;a.ui.ddmanager.prepareOffsets(this,b),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(b),!0},_mouseDrag:function(b){this.position=this._generatePosition(b),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs);if(this.options.scroll){var c=this.options,d=!1;this.scrollParent[0]!=document&amp;&amp;this.scrollParent[0].tagName!="HTML"?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-b.pageY&lt;c.scrollSensitivity?this.scrollParent[0].scrollTop=d=this.scrollParent[0].scrollTop+c.scrollSpeed:b.pageY-this.overflowOffset.top&lt;c.scrollSensitivity&amp;&amp;(this.scrollParent[0].scrollTop=d=this.scrollParent[0].scrollTop-c.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-b.pageX&lt;c.scrollSensitivity?this.scrollParent[0].scrollLeft=d=this.scrollParent[0].scrollLeft+c.scrollSpeed:b.pageX-this.overflowOffset.left&lt;c.scrollSensitivity&amp;&amp;(this.scrollParent[0].scrollLeft=d=this.scrollParent[0].scrollLeft-c.scrollSpeed)):(b.pageY-a(document).scrollTop()&lt;c.scrollSensitivity?d=a(document).scrollTop(a(document).scrollTop()-c.scrollSpeed):a(window).height()-(b.pageY-a(document).scrollTop())&lt;c.scrollSensitivity&amp;&amp;(d=a(document).scrollTop(a(document).scrollTop()+c.scrollSpeed)),b.pageX-a(document).scrollLeft()&lt;c.scrollSensitivity?d=a(document).scrollLeft(a(document).scrollLeft()-c.scrollSpeed):a(window).width()-(b.pageX-a(document).scrollLeft())&lt;c.scrollSensitivity&amp;&amp;(d=a(document).scrollLeft(a(document).scrollLeft()+c.scrollSpeed))),d!==!1&amp;&amp;a.ui.ddmanager&amp;&amp;!c.dropBehaviour&amp;&amp;a.ui.ddmanager.prepareOffsets(this,b)}this.positionAbs=this._convertPositionTo("absolute");if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";for(var e=this.items.length-1;e&gt;=0;e--){var f=this.items[e],g=f.item[0],h=this._intersectsWithPointer(f);if(!h)continue;if(f.instance!==this.currentContainer)continue;if(g!=this.currentItem[0]&amp;&amp;this.placeholder[h==1?"next":"prev"]()[0]!=g&amp;&amp;!a.ui.contains(this.placeholder[0],g)&amp;&amp;(this.options.type=="semi-dynamic"?!a.ui.contains(this.element[0],g):!0)){this.direction=h==1?"down":"up";if(this.options.tolerance=="pointer"||this._intersectsWithSides(f))this._rearrange(b,f);else break;this._trigger("change",b,this._uiHash());break}}return this._contactContainers(b),a.ui.ddmanager&amp;&amp;a.ui.ddmanager.drag(this,b),this._trigger("sort",b,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(b,c){if(!b)return;a.ui.ddmanager&amp;&amp;!this.options.dropBehaviour&amp;&amp;a.ui.ddmanager.drop(this,b);if(this.options.revert){var d=this,e=d.placeholder.offset();d.reverting=!0,a(this.helper).animate({left:e.left-this.offset.parent.left-d.margins.left+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollLeft),top:e.top-this.offset.parent.top-d.margins.top+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollTop)},parseInt(this.options.revert,10)||500,function(){d._clear(b)})}else this._clear(b,c);return!1},cancel:function(){var b=this;if(this.dragging){this._mouseUp({target:null}),this.options.helper=="original"?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var c=this.containers.length-1;c&gt;=0;c--)this.containers[c]._trigger("deactivate",null,b._uiHash(this)),this.containers[c].containerCache.over&amp;&amp;(this.containers[c]._trigger("out",null,b._uiHash(this)),this.containers[c].containerCache.over=0)}return this.placeholder&amp;&amp;(this.placeholder[0].parentNode&amp;&amp;this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.options.helper!="original"&amp;&amp;this.helper&amp;&amp;this.helper[0].parentNode&amp;&amp;this.helper.remove(),a.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?a(this.domPosition.prev).after(this.currentItem):a(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(b){var c=this._getItemsAsjQuery(b&amp;&amp;b.connected),d=[];return b=b||{},a(c).each(function(){var c=(a(b.item||this).attr(b.attribute||"id")||"").match(b.expression||/(.+)[-=_](.+)/);c&amp;&amp;d.push((b.key||c[1]+"[]")+"="+(b.key&amp;&amp;b.expression?c[1]:c[2]))}),!d.length&amp;&amp;b.key&amp;&amp;d.push(b.key+"="),d.join("&amp;")},toArray:function(b){var c=this._getItemsAsjQuery(b&amp;&amp;b.connected),d=[];return b=b||{},c.each(function(){d.push(a(b.item||this).attr(b.attribute||"id")||"")}),d},_intersectsWith:function(a){var b=this.positionAbs.left,c=b+this.helperProportions.width,d=this.positionAbs.top,e=d+this.helperProportions.height,f=a.left,g=f+a.width,h=a.top,i=h+a.height,j=this.offset.click.top,k=this.offset.click.left,l=d+j&gt;h&amp;&amp;d+j&lt;i&amp;&amp;b+k&gt;f&amp;&amp;b+k&lt;g;return this.options.tolerance=="pointer"||this.options.forcePointerForContainers||this.options.tolerance!="pointer"&amp;&amp;this.helperProportions[this.floating?"width":"height"]&gt;a[this.floating?"width":"height"]?l:f&lt;b+this.helperProportions.width/2&amp;&amp;c-this.helperProportions.width/2&lt;g&amp;&amp;h&lt;d+this.helperProportions.height/2&amp;&amp;e-this.helperProportions.height/2&lt;i},_intersectsWithPointer:function(b){var c=this.options.axis==="x"||a.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,b.top,b.height),d=this.options.axis==="y"||a.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,b.left,b.width),e=c&amp;&amp;d,f=this._getDragVerticalDirection(),g=this._getDragHorizontalDirection();return e?this.floating?g&amp;&amp;g=="right"||f=="down"?2:1:f&amp;&amp;(f=="down"?2:1):!1},_intersectsWithSides:function(b){var c=a.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,b.top+b.height/2,b.height),d=a.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,b.left+b.width/2,b.width),e=this._getDragVerticalDirection(),f=this._getDragHorizontalDirection();return this.floating&amp;&amp;f?f=="right"&amp;&amp;d||f=="left"&amp;&amp;!d:e&amp;&amp;(e=="down"&amp;&amp;c||e=="up"&amp;&amp;!c)},_getDragVerticalDirection:function(){var a=this.positionAbs.top-this.lastPositionAbs.top;return a!=0&amp;&amp;(a&gt;0?"down":"up")},_getDragHorizontalDirection:function(){var a=this.positionAbs.left-this.lastPositionAbs.left;return a!=0&amp;&amp;(a&gt;0?"right":"left")},refresh:function(a){return this._refreshItems(a),this.refreshPositions(),this},_connectWith:function(){var a=this.options;return a.connectWith.constructor==String?[a.connectWith]:a.connectWith},_getItemsAsjQuery:function(b){var c=this,d=[],e=[],f=this._connectWith();if(f&amp;&amp;b)for(var g=f.length-1;g&gt;=0;g--){var h=a(f[g]);for(var i=h.length-1;i&gt;=0;i--){var j=a.data(h[i],this.widgetName);j&amp;&amp;j!=this&amp;&amp;!j.options.disabled&amp;&amp;e.push([a.isFunction(j.options.items)?j.options.items.call(j.element):a(j.options.items,j.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),j])}}e.push([a.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):a(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]);for(var g=e.length-1;g&gt;=0;g--)e[g][0].each(function(){d.push(this)});return a(d)},_removeCurrentsFromItems:function(){var a=this.currentItem.find(":data("+this.widgetName+"-item)");for(var b=0;b&lt;this.items.length;b++)for(var c=0;c&lt;a.length;c++)a[c]==this.items[b].item[0]&amp;&amp;this.items.splice(b,1)},_refreshItems:function(b){this.items=[],this.containers=[this];var c=this.items,d=this,e=[[a.isFunction(this.options.items)?this.options.items.call(this.element[0],b,{item:this.currentItem}):a(this.options.items,this.element),this]],f=this._connectWith();if(f&amp;&amp;this.ready)for(var g=f.length-1;g&gt;=0;g--){var h=a(f[g]);for(var i=h.length-1;i&gt;=0;i--){var j=a.data(h[i],this.widgetName);j&amp;&amp;j!=this&amp;&amp;!j.options.disabled&amp;&amp;(e.push([a.isFunction(j.options.items)?j.options.items.call(j.element[0],b,{item:this.currentItem}):a(j.options.items,j.element),j]),this.containers.push(j))}}for(var g=e.length-1;g&gt;=0;g--){var k=e[g][1],l=e[g][0];for(var i=0,m=l.length;i&lt;m;i++){var n=a(l[i]);n.data(this.widgetName+"-item",k),c.push({item:n,instance:k,width:0,height:0,left:0,top:0})}}},refreshPositions:function(b){this.offsetParent&amp;&amp;this.helper&amp;&amp;(this.offset.parent=this._getParentOffset());for(var c=this.items.length-1;c&gt;=0;c--){var d=this.items[c];if(d.instance!=this.currentContainer&amp;&amp;this.currentContainer&amp;&amp;d.item[0]!=this.currentItem[0])continue;var e=this.options.toleranceElement?a(this.options.toleranceElement,d.item):d.item;b||(d.width=e.outerWidth(),d.height=e.outerHeight());var f=e.offset();d.left=f.left,d.top=f.top}if(this.options.custom&amp;&amp;this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(var c=this.containers.length-1;c&gt;=0;c--){var f=this.containers[c].element.offset();this.containers[c].containerCache.left=f.left,this.containers[c].containerCache.top=f.top,this.containers[c].containerCache.width=this.containers[c].element.outerWidth(),this.containers[c].containerCache.height=this.containers[c].element.outerHeight()}return this},_createPlaceholder:function(b){var c=b||this,d=c.options;if(!d.placeholder||d.placeholder.constructor==String){var e=d.placeholder;d.placeholder={element:function(){var b=a(document.createElement(c.currentItem[0].nodeName)).addClass(e||c.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];return e||(b.style.visibility="hidden"),b},update:function(a,b){if(e&amp;&amp;!d.forcePlaceholderSize)return;b.height()||b.height(c.currentItem.innerHeight()-parseInt(c.currentItem.css("paddingTop")||0,10)-parseInt(c.currentItem.css("paddingBottom")||0,10)),b.width()||b.width(c.currentItem.innerWidth()-parseInt(c.currentItem.css("paddingLeft")||0,10)-parseInt(c.currentItem.css("paddingRight")||0,10))}}}c.placeholder=a(d.placeholder.element.call(c.element,c.currentItem)),c.currentItem.after(c.placeholder),d.placeholder.update(c,c.placeholder)},_contactContainers:function(b){var c=null,d=null;for(var e=this.containers.length-1;e&gt;=0;e--){if(a.ui.contains(this.currentItem[0],this.containers[e].element[0]))continue;if(this._intersectsWith(this.containers[e].containerCache)){if(c&amp;&amp;a.ui.contains(this.containers[e].element[0],c.element[0]))continue;c=this.containers[e],d=e}else this.containers[e].containerCache.over&amp;&amp;(this.containers[e]._trigger("out",b,this._uiHash(this)),this.containers[e].containerCache.over=0)}if(!c)return;if(this.containers.length===1)this.containers[d]._trigger("over",b,this._uiHash(this)),this.containers[d].containerCache.over=1;else if(this.currentContainer!=this.containers[d]){var f=1e4,g=null,h=this.positionAbs[this.containers[d].floating?"left":"top"];for(var i=this.items.length-1;i&gt;=0;i--){if(!a.ui.contains(this.containers[d].element[0],this.items[i].item[0]))continue;var j=this.containers[d].floating?this.items[i].item.offset().left:this.items[i].item.offset().top;Math.abs(j-h)&lt;f&amp;&amp;(f=Math.abs(j-h),g=this.items[i],this.direction=j-h&gt;0?"down":"up")}if(!g&amp;&amp;!this.options.dropOnEmpty)return;this.currentContainer=this.containers[d],g?this._rearrange(b,g,null,!0):this._rearrange(b,null,this.containers[d].element,!0),this._trigger("change",b,this._uiHash()),this.containers[d]._trigger("change",b,this._uiHash(this)),this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[d]._trigger("over",b,this._uiHash(this)),this.containers[d].containerCache.over=1}},_createHelper:function(b){var c=this.options,d=a.isFunction(c.helper)?a(c.helper.apply(this.element[0],[b,this.currentItem])):c.helper=="clone"?this.currentItem.clone():this.currentItem;return d.parents("body").length||a(c.appendTo!="parent"?c.appendTo:this.currentItem[0].parentNode)[0].appendChild(d[0]),d[0]==this.currentItem[0]&amp;&amp;(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(d[0].style.width==""||c.forceHelperSize)&amp;&amp;d.width(this.currentItem.width()),(d[0].style.height==""||c.forceHelperSize)&amp;&amp;d.height(this.currentItem.height()),d},_adjustOffsetFromHelper:function(b){typeof b=="string"&amp;&amp;(b=b.split(" ")),a.isArray(b)&amp;&amp;(b={left:+b[0],top:+b[1]||0}),"left"in b&amp;&amp;(this.offset.click.left=b.left+this.margins.left),"right"in b&amp;&amp;(this.offset.click.left=this.helperProportions.width-b.right+this.margins.left),"top"in b&amp;&amp;(this.offset.click.top=b.top+this.margins.top),"bottom"in b&amp;&amp;(this.offset.click.top=this.helperProportions.height-b.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var b=this.offsetParent.offset();this.cssPosition=="absolute"&amp;&amp;this.scrollParent[0]!=document&amp;&amp;a.ui.contains(this.scrollParent[0],this.offsetParent[0])&amp;&amp;(b.left+=this.scrollParent.scrollLeft(),b.top+=this.scrollParent.scrollTop());if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&amp;&amp;this.offsetParent[0].tagName.toLowerCase()=="html"&amp;&amp;a.browser.msie)b={top:0,left:0};return{top:b.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:b.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var a=this.currentItem.position();return{top:a.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var b=this.options;b.containment=="parent"&amp;&amp;(b.containment=this.helper[0].parentNode);if(b.containment=="document"||b.containment=="window")this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,a(b.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(a(b.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(b.containment)){var c=a(b.containment)[0],d=a(b.containment).offset(),e=a(c).css("overflow")!="hidden";this.containment=[d.left+(parseInt(a(c).css("borderLeftWidth"),10)||0)+(parseInt(a(c).css("paddingLeft"),10)||0)-this.margins.left,d.top+(parseInt(a(c).css("borderTopWidth"),10)||0)+(parseInt(a(c).css("paddingTop"),10)||0)-this.margins.top,d.left+(e?Math.max(c.scrollWidth,c.offsetWidth):c.offsetWidth)-(parseInt(a(c).css("borderLeftWidth"),10)||0)-(parseInt(a(c).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,d.top+(e?Math.max(c.scrollHeight,c.offsetHeight):c.offsetHeight)-(parseInt(a(c).css("borderTopWidth"),10)||0)-(parseInt(a(c).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top]}},_convertPositionTo:function(b,c){c||(c=this.position);var d=b=="absolute"?1:-1,e=this.options,f=this.cssPosition=="absolute"&amp;&amp;(this.scrollParent[0]==document||!a.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,g=/(html|body)/i.test(f[0].tagName);return{top:c.top+this.offset.relative.top*d+this.offset.parent.top*d-(a.browser.safari&amp;&amp;this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():g?0:f.scrollTop())*d),left:c.left+this.offset.relative.left*d+this.offset.parent.left*d-(a.browser.safari&amp;&amp;this.cssPosition=="fixed"?0:(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():g?0:f.scrollLeft())*d)}},_generatePosition:function(b){var c=this.options,d=this.cssPosition=="absolute"&amp;&amp;(this.scrollParent[0]==document||!a.ui.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,e=/(html|body)/i.test(d[0].tagName);this.cssPosition=="relative"&amp;&amp;(this.scrollParent[0]==document||this.scrollParent[0]==this.offsetParent[0])&amp;&amp;(this.offset.relative=this._getRelativeOffset());var f=b.pageX,g=b.pageY;if(this.originalPosition){this.containment&amp;&amp;(b.pageX-this.offset.click.left&lt;this.containment[0]&amp;&amp;(f=this.containment[0]+this.offset.click.left),b.pageY-this.offset.click.top&lt;this.containment[1]&amp;&amp;(g=this.containment[1]+this.offset.click.top),b.pageX-this.offset.click.left&gt;this.containment[2]&amp;&amp;(f=this.containment[2]+this.offset.click.left),b.pageY-this.offset.click.top&gt;this.containment[3]&amp;&amp;(g=this.containment[3]+this.offset.click.top));if(c.grid){var h=this.originalPageY+Math.round((g-this.originalPageY)/c.grid[1])*c.grid[1];g=this.containment?h-this.offset.click.top&lt;this.containment[1]||h-this.offset.click.top&gt;this.containment[3]?h-this.offset.click.top&lt;this.containment[1]?h+c.grid[1]:h-c.grid[1]:h:h;var i=this.originalPageX+Math.round((f-this.originalPageX)/c.grid[0])*c.grid[0];f=this.containment?i-this.offset.click.left&lt;this.containment[0]||i-this.offset.click.left&gt;this.containment[2]?i-this.offset.click.left&lt;this.containment[0]?i+c.grid[0]:i-c.grid[0]:i:i}}return{top:g-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(a.browser.safari&amp;&amp;this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollTop():e?0:d.scrollTop()),left:f-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(a.browser.safari&amp;&amp;this.cssPosition=="fixed"?0:this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():e?0:d.scrollLeft())}},_rearrange:function(a,b,c,d){c?c[0].appendChild(this.placeholder[0]):b.item[0].parentNode.insertBefore(this.placeholder[0],this.direction=="down"?b.item[0]:b.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var e=this,f=this.counter;window.setTimeout(function(){f==e.counter&amp;&amp;e.refreshPositions(!d)},0)},_clear:function(b,c){this.reverting=!1;var d=[],e=this;!this._noFinalSort&amp;&amp;this.currentItem.parent().length&amp;&amp;this.placeholder.before(this.currentItem),this._noFinalSort=null;if(this.helper[0]==this.currentItem[0]){for(var f in this._storedCSS)if(this._storedCSS[f]=="auto"||this._storedCSS[f]=="static")this._storedCSS[f]="";this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();this.fromOutside&amp;&amp;!c&amp;&amp;d.push(function(a){this._trigger("receive",a,this._uiHash(this.fromOutside))}),(this.fromOutside||this.domPosition.prev!=this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!=this.currentItem.parent()[0])&amp;&amp;!c&amp;&amp;d.push(function(a){this._trigger("update",a,this._uiHash())}),this!==this.currentContainer&amp;&amp;(c||(d.push(function(a){this._trigger("remove",a,this._uiHash())}),d.push(function(a){return function(b){a._trigger("receive",b,this._uiHash(this))}}.call(this,this.currentContainer)),d.push(function(a){return function(b){a._trigger("update",b,this._uiHash(this))}}.call(this,this.currentContainer))));for(var f=this.containers.length-1;f&gt;=0;f--)c||d.push(function(a){return function(b){a._trigger("deactivate",b,this._uiHash(this))}}.call(this,this.containers[f])),this.containers[f].containerCache.over&amp;&amp;(d.push(function(a){return function(b){a._trigger("out",b,this._uiHash(this))}}.call(this,this.containers[f])),this.containers[f].containerCache.over=0);this._storedCursor&amp;&amp;a("body").css("cursor",this._storedCursor),this._storedOpacity&amp;&amp;this.helper.css("opacity",this._storedOpacity),this._storedZIndex&amp;&amp;this.helper.css("zIndex",this._storedZIndex=="auto"?"":this._storedZIndex),this.dragging=!1;if(this.cancelHelperRemoval){if(!c){this._trigger("beforeStop",b,this._uiHash());for(var f=0;f&lt;d.length;f++)d[f].call(this,b);this._trigger("stop",b,this._uiHash())}return this.fromOutside=!1,!1}c||this._trigger("beforeStop",b,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!=this.currentItem[0]&amp;&amp;this.helper.remove(),this.helper=null;if(!c){for(var f=0;f&lt;d.length;f++)d[f].call(this,b);this._trigger("stop",b,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){a.Widget.prototype._trigger.apply(this,arguments)===!1&amp;&amp;this.cancel()},_uiHash:function(b){var c=b||this;return{helper:c.helper,placeholder:c.placeholder||a([]),position:c.position,originalPosition:c.originalPosition,offset:c.positionAbs,item:c.currentItem,sender:b?b.element:null}}}),a.extend(a.ui.sortable,{version:"1.8.24"})}(jQuery),jQuery.effects||function(a,b){function c(b){var c;return b&amp;&amp;b.constructor==Array&amp;&amp;b.length==3?b:(c=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(b))?[parseInt(c[1],10),parseInt(c[2],10),parseInt(c[3],10)]:(c=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(b))?[parseFloat(c[1])*2.55,parseFloat(c[2])*2.55,parseFloat(c[3])*2.55]:(c=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(b))?[parseInt(c[1],16),parseInt(c[2],16),parseInt(c[3],16)]:(c=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(b))?[parseInt(c[1]+c[1],16),parseInt(c[2]+c[2],16),parseInt(c[3]+c[3],16)]:(c=/rgba\(0, 0, 0, 0\)/.exec(b))?e.transparent:e[a.trim(b).toLowerCase()]}function d(b,d){var e;do{e=(a.curCSS||a.css)(b,d);if(e!=""&amp;&amp;e!="transparent"||a.nodeName(b,"body"))break;d="backgroundColor"}while(b=b.parentNode);return c(e)}function h(){var a=document.defaultView?document.defaultView.getComputedStyle(this,null):this.currentStyle,b={},c,d;if(a&amp;&amp;a.length&amp;&amp;a[0]&amp;&amp;a[a[0]]){var e=a.length;while(e--)c=a[e],typeof a[c]=="string"&amp;&amp;(d=c.replace(/\-(\w)/g,function(a,b){return b.toUpperCase()}),b[d]=a[c])}else for(c in a)typeof a[c]=="string"&amp;&amp;(b[c]=a[c]);return b}function i(b){var c,d;for(c in b)d=b[c],(d==null||a.isFunction(d)||c in g||/scrollbar/.test(c)||!/color/i.test(c)&amp;&amp;isNaN(parseFloat(d)))&amp;&amp;delete b[c];return b}function j(a,b){var c={_:0},d;for(d in b)a[d]!=b[d]&amp;&amp;(c[d]=b[d]);return c}function k(b,c,d,e){typeof b=="object"&amp;&amp;(e=c,d=null,c=b,b=c.effect),a.isFunction(c)&amp;&amp;(e=c,d=null,c={});if(typeof c=="number"||a.fx.speeds[c])e=d,d=c,c={};return a.isFunction(d)&amp;&amp;(e=d,d=null),c=c||{},d=d||c.duration,d=a.fx.off?0:typeof d=="number"?d:d in a.fx.speeds?a.fx.speeds[d]:a.fx.speeds._default,e=e||c.complete,[b,c,d,e]}function l(b){return!b||typeof b=="number"||a.fx.speeds[b]?!0:typeof b=="string"&amp;&amp;!a.effects[b]?!0:!1}a.effects={},a.each(["backgroundColor","borderBottomColor","borderLeftColor","borderRightColor","borderTopColor","borderColor","color","outlineColor"],function(b,e){a.fx.step[e]=function(a){a.colorInit||(a.start=d(a.elem,e),a.end=c(a.end),a.colorInit=!0),a.elem.style[e]="rgb("+Math.max(Math.min(parseInt(a.pos*(a.end[0]-a.start[0])+a.start[0],10),255),0)+","+Math.max(Math.min(parseInt(a.pos*(a.end[1]-a.start[1])+a.start[1],10),255),0)+","+Math.max(Math.min(parseInt(a.pos*(a.end[2]-a.start[2])+a.start[2],10),255),0)+")"}});var e={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0],transparent:[255,255,255]},f=["add","remove","toggle"],g={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};a.effects.animateClass=function(b,c,d,e){return a.isFunction(d)&amp;&amp;(e=d,d=null),this.queue(function(){var g=a(this),k=g.attr("style")||" ",l=i(h.call(this)),m,n=g.attr("class")||"";a.each(f,function(a,c){b[c]&amp;&amp;g[c+"Class"](b[c])}),m=i(h.call(this)),g.attr("class",n),g.animate(j(l,m),{queue:!1,duration:c,easing:d,complete:function(){a.each(f,function(a,c){b[c]&amp;&amp;g[c+"Class"](b[c])}),typeof g.attr("style")=="object"?(g.attr("style").cssText="",g.attr("style").cssText=k):g.attr("style",k),e&amp;&amp;e.apply(this,arguments),a.dequeue(this)}})})},a.fn.extend({_addClass:a.fn.addClass,addClass:function(b,c,d,e){return c?a.effects.animateClass.apply(this,[{add:b},c,d,e]):this._addClass(b)},_removeClass:a.fn.removeClass,removeClass:function(b,c,d,e){return c?a.effects.animateClass.apply(this,[{remove:b},c,d,e]):this._removeClass(b)},_toggleClass:a.fn.toggleClass,toggleClass:function(c,d,e,f,g){return typeof d=="boolean"||d===b?e?a.effects.animateClass.apply(this,[d?{add:c}:{remove:c},e,f,g]):this._toggleClass(c,d):a.effects.animateClass.apply(this,[{toggle:c},d,e,f])},switchClass:function(b,c,d,e,f){return a.effects.animateClass.apply(this,[{add:c,remove:b},d,e,f])}}),a.extend(a.effects,{version:"1.8.24",save:function(a,b){for(var c=0;c&lt;b.length;c++)b[c]!==null&amp;&amp;a.data("ec.storage."+b[c],a[0].style[b[c]])},restore:function(a,b){for(var c=0;c&lt;b.length;c++)b[c]!==null&amp;&amp;a.css(b[c],a.data("ec.storage."+b[c]))},setMode:function(a,b){return b=="toggle"&amp;&amp;(b=a.is(":hidden")?"show":"hide"),b},getBaseline:function(a,b){var c,d;switch(a[0]){case"top":c=0;break;case"middle":c=.5;break;case"bottom":c=1;break;default:c=a[0]/b.height}switch(a[1]){case"left":d=0;break;case"center":d=.5;break;case"right":d=1;break;default:d=a[1]/b.width}return{x:d,y:c}},createWrapper:function(b){if(b.parent().is(".ui-effects-wrapper"))return b.parent();var c={width:b.outerWidth(!0),height:b.outerHeight(!0),"float":b.css("float")},d=a("&lt;div&gt;&lt;/div&gt;").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),e=document.activeElement;try{e.id}catch(f){e=document.body}return b.wrap(d),(b[0]===e||a.contains(b[0],e))&amp;&amp;a(e).focus(),d=b.parent(),b.css("position")=="static"?(d.css({position:"relative"}),b.css({position:"relative"})):(a.extend(c,{position:b.css("position"),zIndex:b.css("z-index")}),a.each(["top","left","bottom","right"],function(a,d){c[d]=b.css(d),isNaN(parseInt(c[d],10))&amp;&amp;(c[d]="auto")}),b.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),d.css(c).show()},removeWrapper:function(b){var c,d=document.activeElement;return b.parent().is(".ui-effects-wrapper")?(c=b.parent().replaceWith(b),(b[0]===d||a.contains(b[0],d))&amp;&amp;a(d).focus(),c):b},setTransition:function(b,c,d,e){return e=e||{},a.each(c,function(a,c){var f=b.cssUnit(c);f[0]&gt;0&amp;&amp;(e[c]=f[0]*d+f[1])}),e}}),a.fn.extend({effect:function(b,c,d,e){var f=k.apply(this,arguments),g={options:f[1],duration:f[2],callback:f[3]},h=g.options.mode,i=a.effects[b];return a.fx.off||!i?h?this[h](g.duration,g.callback):this.each(function(){g.callback&amp;&amp;g.callback.call(this)}):i.call(this,g)},_show:a.fn.show,show:function(a){if(l(a))return this._show.apply(this,arguments);var b=k.apply(this,arguments);return b[1].mode="show",this.effect.apply(this,b)},_hide:a.fn.hide,hide:function(a){if(l(a))return this._hide.apply(this,arguments);var b=k.apply(this,arguments);return b[1].mode="hide",this.effect.apply(this,b)},__toggle:a.fn.toggle,toggle:function(b){if(l(b)||typeof b=="boolean"||a.isFunction(b))return this.__toggle.apply(this,arguments);var c=k.apply(this,arguments);return c[1].mode="toggle",this.effect.apply(this,c)},cssUnit:function(b){var c=this.css(b),d=[];return a.each(["em","px","%","pt"],function(a,b){c.indexOf(b)&gt;0&amp;&amp;(d=[parseFloat(c),b])}),d}});var m={};a.each(["Quad","Cubic","Quart","Quint","Expo"],function(a,b){m[b]=function(b){return Math.pow(b,a+2)}}),a.extend(m,{Sine:function(a){return 1-Math.cos(a*Math.PI/2)},Circ:function(a){return 1-Math.sqrt(1-a*a)},Elastic:function(a){return a===0||a===1?a:-Math.pow(2,8*(a-1))*Math.sin(((a-1)*80-7.5)*Math.PI/15)},Back:function(a){return a*a*(3*a-2)},Bounce:function(a){var b,c=4;while(a&lt;((b=Math.pow(2,--c))-1)/11);return 1/Math.pow(4,3-c)-7.5625*Math.pow((b*3-2)/22-a,2)}}),a.each(m,function(b,c){a.easing["easeIn"+b]=c,a.easing["easeOut"+b]=function(a){return 1-c(1-a)},a.easing["easeInOut"+b]=function(a){return a&lt;.5?c(a*2)/2:c(a*-2+2)/-2+1}})}(jQuery),function(a,b){a.effects.blind=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right"],e=a.effects.setMode(c,b.options.mode||"hide"),f=b.options.direction||"vertical";a.effects.save(c,d),c.show();var g=a.effects.createWrapper(c).css({overflow:"hidden"}),h=f=="vertical"?"height":"width",i=f=="vertical"?g.height():g.width();e=="show"&amp;&amp;g.css(h,0);var j={};j[h]=e=="show"?i:0,g.animate(j,b.duration,b.options.easing,function(){e=="hide"&amp;&amp;c.hide(),a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(c[0],arguments),c.dequeue()})})}}(jQuery),function(a,b){a.effects.bounce=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right"],e=a.effects.setMode(c,b.options.mode||"effect"),f=b.options.direction||"up",g=b.options.distance||20,h=b.options.times||5,i=b.duration||250;/show|hide/.test(e)&amp;&amp;d.push("opacity"),a.effects.save(c,d),c.show(),a.effects.createWrapper(c);var j=f=="up"||f=="down"?"top":"left",k=f=="up"||f=="left"?"pos":"neg",g=b.options.distance||(j=="top"?c.outerHeight(!0)/3:c.outerWidth(!0)/3);e=="show"&amp;&amp;c.css("opacity",0).css(j,k=="pos"?-g:g),e=="hide"&amp;&amp;(g=g/(h*2)),e!="hide"&amp;&amp;h--;if(e=="show"){var l={opacity:1};l[j]=(k=="pos"?"+=":"-=")+g,c.animate(l,i/2,b.options.easing),g=g/2,h--}for(var m=0;m&lt;h;m++){var n={},p={};n[j]=(k=="pos"?"-=":"+=")+g,p[j]=(k=="pos"?"+=":"-=")+g,c.animate(n,i/2,b.options.easing).animate(p,i/2,b.options.easing),g=e=="hide"?g*2:g/2}if(e=="hide"){var l={opacity:0};l[j]=(k=="pos"?"-=":"+=")+g,c.animate(l,i/2,b.options.easing,function(){c.hide(),a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(this,arguments)})}else{var n={},p={};n[j]=(k=="pos"?"-=":"+=")+g,p[j]=(k=="pos"?"+=":"-=")+g,c.animate(n,i/2,b.options.easing).animate(p,i/2,b.options.easing,function(){a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(this,arguments)})}c.queue("fx",function(){c.dequeue()}),c.dequeue()})}}(jQuery),function(a,b){a.effects.clip=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right","height","width"],e=a.effects.setMode(c,b.options.mode||"hide"),f=b.options.direction||"vertical";a.effects.save(c,d),c.show();var g=a.effects.createWrapper(c).css({overflow:"hidden"}),h=c[0].tagName=="IMG"?g:c,i={size:f=="vertical"?"height":"width",position:f=="vertical"?"top":"left"},j=f=="vertical"?h.height():h.width();e=="show"&amp;&amp;(h.css(i.size,0),h.css(i.position,j/2));var k={};k[i.size]=e=="show"?j:0,k[i.position]=e=="show"?0:j/2,h.animate(k,{queue:!1,duration:b.duration,easing:b.options.easing,complete:function(){e=="hide"&amp;&amp;c.hide(),a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(c[0],arguments),c.dequeue()}})})}}(jQuery),function(a,b){a.effects.drop=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right","opacity"],e=a.effects.setMode(c,b.options.mode||"hide"),f=b.options.direction||"left";a.effects.save(c,d),c.show(),a.effects.createWrapper(c);var g=f=="up"||f=="down"?"top":"left",h=f=="up"||f=="left"?"pos":"neg",i=b.options.distance||(g=="top"?c.outerHeight(!0)/2:c.outerWidth(!0)/2);e=="show"&amp;&amp;c.css("opacity",0).css(g,h=="pos"?-i:i);var j={opacity:e=="show"?1:0};j[g]=(e=="show"?h=="pos"?"+=":"-=":h=="pos"?"-=":"+=")+i,c.animate(j,{queue:!1,duration:b.duration,easing:b.options.easing,complete:function(){e=="hide"&amp;&amp;c.hide(),a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(this,arguments),c.dequeue()}})})}}(jQuery),function(a,b){a.effects.explode=function(b){return this.queue(function(){var c=b.options.pieces?Math.round(Math.sqrt(b.options.pieces)):3,d=b.options.pieces?Math.round(Math.sqrt(b.options.pieces)):3;b.options.mode=b.options.mode=="toggle"?a(this).is(":visible")?"hide":"show":b.options.mode;var e=a(this).show().css("visibility","hidden"),f=e.offset();f.top-=parseInt(e.css("marginTop"),10)||0,f.left-=parseInt(e.css("marginLeft"),10)||0;var g=e.outerWidth(!0),h=e.outerHeight(!0);for(var i=0;i&lt;c;i++)for(var j=0;j&lt;d;j++)e.clone().appendTo("body").wrap("&lt;div&gt;&lt;/div&gt;").css({position:"absolute",visibility:"visible",left:-j*(g/d),top:-i*(h/c)}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:g/d,height:h/c,left:f.left+j*(g/d)+(b.options.mode=="show"?(j-Math.floor(d/2))*(g/d):0),top:f.top+i*(h/c)+(b.options.mode=="show"?(i-Math.floor(c/2))*(h/c):0),opacity:b.options.mode=="show"?0:1}).animate({left:f.left+j*(g/d)+(b.options.mode=="show"?0:(j-Math.floor(d/2))*(g/d)),top:f.top+i*(h/c)+(b.options.mode=="show"?0:(i-Math.floor(c/2))*(h/c)),opacity:b.options.mode=="show"?1:0},b.duration||500);setTimeout(function(){b.options.mode=="show"?e.css({visibility:"visible"}):e.css({visibility:"visible"}).hide(),b.callback&amp;&amp;b.callback.apply(e[0]),e.dequeue(),a("div.ui-effects-explode").remove()},b.duration||500)})}}(jQuery),function(a,b){a.effects.fade=function(b){return this.queue(function(){var c=a(this),d=a.effects.setMode(c,b.options.mode||"hide");c.animate({opacity:d},{queue:!1,duration:b.duration,easing:b.options.easing,complete:function(){b.callback&amp;&amp;b.callback.apply(this,arguments),c.dequeue()}})})}}(jQuery),function(a,b){a.effects.fold=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right"],e=a.effects.setMode(c,b.options.mode||"hide"),f=b.options.size||15,g=!!b.options.horizFirst,h=b.duration?b.duration/2:a.fx.speeds._default/2;a.effects.save(c,d),c.show();var i=a.effects.createWrapper(c).css({overflow:"hidden"}),j=e=="show"!=g,k=j?["width","height"]:["height","width"],l=j?[i.width(),i.height()]:[i.height(),i.width()],m=/([0-9]+)%/.exec(f);m&amp;&amp;(f=parseInt(m[1],10)/100*l[e=="hide"?0:1]),e=="show"&amp;&amp;i.css(g?{height:0,width:f}:{height:f,width:0});var n={},p={};n[k[0]]=e=="show"?l[0]:f,p[k[1]]=e=="show"?l[1]:0,i.animate(n,h,b.options.easing).animate(p,h,b.options.easing,function(){e=="hide"&amp;&amp;c.hide(),a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(c[0],arguments),c.dequeue()})})}}(jQuery),function(a,b){a.effects.highlight=function(b){return this.queue(function(){var c=a(this),d=["backgroundImage","backgroundColor","opacity"],e=a.effects.setMode(c,b.options.mode||"show"),f={backgroundColor:c.css("backgroundColor")};e=="hide"&amp;&amp;(f.opacity=0),a.effects.save(c,d),c.show().css({backgroundImage:"none",backgroundColor:b.options.color||"#ffff99"}).animate(f,{queue:!1,duration:b.duration,easing:b.options.easing,complete:function(){e=="hide"&amp;&amp;c.hide(),a.effects.restore(c,d),e=="show"&amp;&amp;!a.support.opacity&amp;&amp;this.style.removeAttribute("filter"),b.callback&amp;&amp;b.callback.apply(this,arguments),c.dequeue()}})})}}(jQuery),function(a,b){a.effects.pulsate=function(b){return this.queue(function(){var c=a(this),d=a.effects.setMode(c,b.options.mode||"show"),e=(b.options.times||5)*2-1,f=b.duration?b.duration/2:a.fx.speeds._default/2,g=c.is(":visible"),h=0;g||(c.css("opacity",0).show(),h=1),(d=="hide"&amp;&amp;g||d=="show"&amp;&amp;!g)&amp;&amp;e--;for(var i=0;i&lt;e;i++)c.animate({opacity:h},f,b.options.easing),h=(h+1)%2;c.animate({opacity:h},f,b.options.easing,function(){h==0&amp;&amp;c.hide(),b.callback&amp;&amp;b.callback.apply(this,arguments)}),c.queue("fx",function(){c.dequeue()}).dequeue()})}}(jQuery),function(a,b){a.effects.puff=function(b){return this.queue(function(){var c=a(this),d=a.effects.setMode(c,b.options.mode||"hide"),e=parseInt(b.options.percent,10)||150,f=e/100,g={height:c.height(),width:c.width()};a.extend(b.options,{fade:!0,mode:d,percent:d=="hide"?e:100,from:d=="hide"?g:{height:g.height*f,width:g.width*f}}),c.effect("scale",b.options,b.duration,b.callback),c.dequeue()})},a.effects.scale=function(b){return this.queue(function(){var c=a(this),d=a.extend(!0,{},b.options),e=a.effects.setMode(c,b.options.mode||"effect"),f=parseInt(b.options.percent,10)||(parseInt(b.options.percent,10)==0?0:e=="hide"?0:100),g=b.options.direction||"both",h=b.options.origin;e!="effect"&amp;&amp;(d.origin=h||["middle","center"],d.restore=!0);var i={height:c.height(),width:c.width()};c.from=b.options.from||(e=="show"?{height:0,width:0}:i);var j={y:g!="horizontal"?f/100:1,x:g!="vertical"?f/100:1};c.to={height:i.height*j.y,width:i.width*j.x},b.options.fade&amp;&amp;(e=="show"&amp;&amp;(c.from.opacity=0,c.to.opacity=1),e=="hide"&amp;&amp;(c.from.opacity=1,c.to.opacity=0)),d.from=c.from,d.to=c.to,d.mode=e,c.effect("size",d,b.duration,b.callback),c.dequeue()})},a.effects.size=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right","width","height","overflow","opacity"],e=["position","top","bottom","left","right","overflow","opacity"],f=["width","height","overflow"],g=["fontSize"],h=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],i=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],j=a.effects.setMode(c,b.options.mode||"effect"),k=b.options.restore||!1,l=b.options.scale||"both",m=b.options.origin,n={height:c.height(),width:c.width()};c.from=b.options.from||n,c.to=b.options.to||n;if(m){var p=a.effects.getBaseline(m,n);c.from.top=(n.height-c.from.height)*p.y,c.from.left=(n.width-c.from.width)*p.x,c.to.top=(n.height-c.to.height)*p.y,c.to.left=(n.width-c.to.width)*p.x}var q={from:{y:c.from.height/n.height,x:c.from.width/n.width},to:{y:c.to.height/n.height,x:c.to.width/n.width}};if(l=="box"||l=="both")q.from.y!=q.to.y&amp;&amp;(d=d.concat(h),c.from=a.effects.setTransition(c,h,q.from.y,c.from),c.to=a.effects.setTransition(c,h,q.to.y,c.to)),q.from.x!=q.to.x&amp;&amp;(d=d.concat(i),c.from=a.effects.setTransition(c,i,q.from.x,c.from),c.to=a.effects.setTransition(c,i,q.to.x,c.to));(l=="content"||l=="both")&amp;&amp;q.from.y!=q.to.y&amp;&amp;(d=d.concat(g),c.from=a.effects.setTransition(c,g,q.from.y,c.from),c.to=a.effects.setTransition(c,g,q.to.y,c.to)),a.effects.save(c,k?d:e),c.show(),a.effects.createWrapper(c),c.css("overflow","hidden").css(c.from);if(l=="content"||l=="both")h=h.concat(["marginTop","marginBottom"]).concat(g),i=i.concat(["marginLeft","marginRight"]),f=d.concat(h).concat(i),c.find("*[width]").each(function(){var c=a(this);k&amp;&amp;a.effects.save(c,f);var d={height:c.height(),width:c.width()};c.from={height:d.height*q.from.y,width:d.width*q.from.x},c.to={height:d.height*q.to.y,width:d.width*q.to.x},q.from.y!=q.to.y&amp;&amp;(c.from=a.effects.setTransition(c,h,q.from.y,c.from),c.to=a.effects.setTransition(c,h,q.to.y,c.to)),q.from.x!=q.to.x&amp;&amp;(c.from=a.effects.setTransition(c,i,q.from.x,c.from),c.to=a.effects.setTransition(c,i,q.to.x,c.to)),c.css(c.from),c.animate(c.to,b.duration,b.options.easing,function(){k&amp;&amp;a.effects.restore(c,f)})});c.animate(c.to,{queue:!1,duration:b.duration,easing:b.options.easing,complete:function(){c.to.opacity===0&amp;&amp;c.css("opacity",c.from.opacity),j=="hide"&amp;&amp;c.hide(),a.effects.restore(c,k?d:e),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(this,arguments),c.dequeue()}})})}}(jQuery),function(a,b){a.effects.shake=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right"],e=a.effects.setMode(c,b.options.mode||"effect"),f=b.options.direction||"left",g=b.options.distance||20,h=b.options.times||3,i=b.duration||b.options.duration||140;a.effects.save(c,d),c.show(),a.effects.createWrapper(c);var j=f=="up"||f=="down"?"top":"left",k=f=="up"||f=="left"?"pos":"neg",l={},m={},n={};l[j]=(k=="pos"?"-=":"+=")+g,m[j]=(k=="pos"?"+=":"-=")+g*2,n[j]=(k=="pos"?"-=":"+=")+g*2,c.animate(l,i,b.options.easing);for(var p=1;p&lt;h;p++)c.animate(m,i,b.options.easing).animate(n,i,b.options.easing);c.animate(m,i,b.options.easing).animate(l,i/2,b.options.easing,function(){a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(this,arguments)}),c.queue("fx",function(){c.dequeue()}),c.dequeue()})}}(jQuery),function(a,b){a.effects.slide=function(b){return this.queue(function(){var c=a(this),d=["position","top","bottom","left","right"],e=a.effects.setMode(c,b.options.mode||"show"),f=b.options.direction||"left";a.effects.save(c,d),c.show(),a.effects.createWrapper(c).css({overflow:"hidden"});var g=f=="up"||f=="down"?"top":"left",h=f=="up"||f=="left"?"pos":"neg",i=b.options.distance||(g=="top"?c.outerHeight(!0):c.outerWidth(!0));e=="show"&amp;&amp;c.css(g,h=="pos"?isNaN(i)?"-"+i:-i:i);var j={};j[g]=(e=="show"?h=="pos"?"+=":"-=":h=="pos"?"-=":"+=")+i,c.animate(j,{queue:!1,duration:b.duration,easing:b.options.easing,complete:function(){e=="hide"&amp;&amp;c.hide(),a.effects.restore(c,d),a.effects.removeWrapper(c),b.callback&amp;&amp;b.callback.apply(this,arguments),c.dequeue()}})})}}(jQuery),function(a,b){a.effects.transfer=function(b){return this.queue(function(){var c=a(this),d=a(b.options.to),e=d.offset(),f={top:e.top,left:e.left,height:d.innerHeight(),width:d.innerWidth()},g=c.offset(),h=a('&lt;div class="ui-effects-transfer"&gt;&lt;/div&gt;').appendTo(document.body).addClass(b.options.className).css({top:g.top,left:g.left,height:c.innerHeight(),width:c.innerWidth(),position:"absolute"}).animate(f,b.duration,b.options.easing,function(){h.remove(),b.callback&amp;&amp;b.callback.apply(c[0],arguments),c.dequeue()})})}}(jQuery),function(a,b){a.widget("ui.accordion",{options:{active:0,animated:"slide",autoHeight:!0,clearStyle:!1,collapsible:!1,event:"click",fillSpace:!1,header:"&gt; li &gt; :first-child,&gt; :not(li):even",icons:{header:"ui-icon-triangle-1-e",headerSelected:"ui-icon-triangle-1-s"},navigation:!1,navigationFilter:function(){return this.href.toLowerCase()===location.href.toLowerCase()}},_create:function(){var b=this,c=b.options;b.running=0,b.element.addClass("ui-accordion ui-widget ui-helper-reset").children("li").addClass("ui-accordion-li-fix"),b.headers=b.element.find(c.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind("mouseenter.accordion",function(){if(c.disabled)return;a(this).addClass("ui-state-hover")}).bind("mouseleave.accordion",function(){if(c.disabled)return;a(this).removeClass("ui-state-hover")}).bind("focus.accordion",function(){if(c.disabled)return;a(this).addClass("ui-state-focus")}).bind("blur.accordion",function(){if(c.disabled)return;a(this).removeClass("ui-state-focus")}),b.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");if(c.navigation){var d=b.element.find("a").filter(c.navigationFilter).eq(0);if(d.length){var e=d.closest(".ui-accordion-header");e.length?b.active=e:b.active=d.closest(".ui-accordion-content").prev()}}b.active=b._findActive(b.active||c.active).addClass("ui-state-default ui-state-active").toggleClass("ui-corner-all").toggleClass("ui-corner-top"),b.active.next().addClass("ui-accordion-content-active"),b._createIcons(),b.resize(),b.element.attr("role","tablist"),b.headers.attr("role","tab").bind("keydown.accordion",function(a){return b._keydown(a)}).next().attr("role","tabpanel"),b.headers.not(b.active||"").attr({"aria-expanded":"false","aria-selected":"false",tabIndex:-1}).next().hide(),b.active.length?b.active.attr({"aria-expanded":"true","aria-selected":"true",tabIndex:0}):b.headers.eq(0).attr("tabIndex",0),a.browser.safari||b.headers.find("a").attr("tabIndex",-1),c.event&amp;&amp;b.headers.bind(c.event.split(" ").join(".accordion ")+".accordion",function(a){b._clickHandler.call(b,a,this),a.preventDefault()})},_createIcons:function(){var b=this.options;b.icons&amp;&amp;(a("&lt;span&gt;&lt;/span&gt;").addClass("ui-icon "+b.icons.header).prependTo(this.headers),this.active.children(".ui-icon").toggleClass(b.icons.header).toggleClass(b.icons.headerSelected),this.element.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.children(".ui-icon").remove(),this.element.removeClass("ui-accordion-icons")},destroy:function(){var b=this.options;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.unbind(".accordion").removeClass("ui-accordion-header ui-accordion-disabled ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("tabIndex"),this.headers.find("a").removeAttr("tabIndex"),this._destroyIcons();var c=this.headers.next().css("display","").removeAttr("role").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled");return(b.autoHeight||b.fillHeight)&amp;&amp;c.css("height",""),a.Widget.prototype.destroy.call(this)},_setOption:function(b,c){a.Widget.prototype._setOption.apply(this,arguments),b=="active"&amp;&amp;this.activate(c),b=="icons"&amp;&amp;(this._destroyIcons(),c&amp;&amp;this._createIcons()),b=="disabled"&amp;&amp;this.headers.add(this.headers.next())[c?"addClass":"removeClass"]("ui-accordion-disabled ui-state-disabled")},_keydown:function(b){if(this.options.disabled||b.altKey||b.ctrlKey)return;var c=a.ui.keyCode,d=this.headers.length,e=this.headers.index(b.target),f=!1;switch(b.keyCode){case c.RIGHT:case c.DOWN:f=this.headers[(e+1)%d];break;case c.LEFT:case c.UP:f=this.headers[(e-1+d)%d];break;case c.SPACE:case c.ENTER:this._clickHandler({target:b.target},b.target),b.preventDefault()}return f?(a(b.target).attr("tabIndex",-1),a(f).attr("tabIndex",0),f.focus(),!1):!0},resize:function(){var b=this.options,c;if(b.fillSpace){if(a.browser.msie){var d=this.element.parent().css("overflow");this.element.parent().css("overflow","hidden")}c=this.element.parent().height(),a.browser.msie&amp;&amp;this.element.parent().css("overflow",d),this.headers.each(function(){c-=a(this).outerHeight(!0)}),this.headers.next().each(function(){a(this).height(Math.max(0,c-a(this).innerHeight()+a(this).height()))}).css("overflow","auto")}else b.autoHeight&amp;&amp;(c=0,this.headers.next().each(function(){c=Math.max(c,a(this).height("").height())}).height(c));return this},activate:function(a){this.options.active=a;var b=this._findActive(a)[0];return this._clickHandler({target:b},b),this},_findActive:function(b){return b?typeof b=="number"?this.headers.filter(":eq("+b+")"):this.headers.not(this.headers.not(b)):b===!1?a([]):this.headers.filter(":eq(0)")},_clickHandler:function(b,c){var d=this.options;if(d.disabled)return;if(!b.target){if(!d.collapsible)return;this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").children(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header),this.active.next().addClass("ui-accordion-content-active");var e=this.active.next(),f={options:d,newHeader:a([]),oldHeader:d.active,newContent:a([]),oldContent:e},g=this.active=a([]);this._toggle(g,e,f);return}var h=a(b.currentTarget||c),i=h[0]===this.active[0];d.active=d.collapsible&amp;&amp;i?!1:this.headers.index(h);if(this.running||!d.collapsible&amp;&amp;i)return;var j=this.active,g=h.next(),e=this.active.next(),f={options:d,newHeader:i&amp;&amp;d.collapsible?a([]):h,oldHeader:this.active,newContent:i&amp;&amp;d.collapsible?a([]):g,oldContent:e},k=this.headers.index(this.active[0])&gt;this.headers.index(h[0]);this.active=i?a([]):h,this._toggle(g,e,f,i,k),j.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").children(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header),i||(h.removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top").children(".ui-icon").removeClass(d.icons.header).addClass(d.icons.headerSelected),h.next().addClass("ui-accordion-content-active"));return},_toggle:function(b,c,d,e,f){var g=this,h=g.options;g.toShow=b,g.toHide=c,g.data=d;var i=function(){if(!g)return;return g._completed.apply(g,arguments)};g._trigger("changestart",null,g.data),g.running=c.size()===0?b.size():c.size();if(h.animated){var j={};h.collapsible&amp;&amp;e?j={toShow:a([]),toHide:c,complete:i,down:f,autoHeight:h.autoHeight||h.fillSpace}:j={toShow:b,toHide:c,complete:i,down:f,autoHeight:h.autoHeight||h.fillSpace},h.proxied||(h.proxied=h.animated),h.proxiedDuration||(h.proxiedDuration=h.duration),h.animated=a.isFunction(h.proxied)?h.proxied(j):h.proxied,h.duration=a.isFunction(h.proxiedDuration)?h.proxiedDuration(j):h.proxiedDuration;var k=a.ui.accordion.animations,l=h.duration,m=h.animated;m&amp;&amp;!k[m]&amp;&amp;!a.easing[m]&amp;&amp;(m="slide"),k[m]||(k[m]=function(a){this.slide(a,{easing:m,duration:l||700})}),k[m](j)}else h.collapsible&amp;&amp;e?b.toggle():(c.hide(),b.show()),i(!0);c.prev().attr({"aria-expanded":"false","aria-selected":"false",tabIndex:-1}).blur(),b.prev().attr({"aria-expanded":"true","aria-selected":"true",tabIndex:0}).focus()},_completed:function(a){this.running=a?0:--this.running;if(this.running)return;this.options.clearStyle&amp;&amp;this.toShow.add(this.toHide).css({height:"",overflow:""}),this.toHide.removeClass("ui-accordion-content-active"),this.toHide.length&amp;&amp;(this.toHide.parent()[0].className=this.toHide.parent()[0].className),this._trigger("change",null,this.data)}}),a.extend(a.ui.accordion,{version:"1.8.24",animations:{slide:function(b,c){b=a.extend({easing:"swing",duration:300},b,c);if(!b.toHide.size()){b.toShow.animate({height:"show",paddingTop:"show",paddingBottom:"show"},b);return}if(!b.toShow.size()){b.toHide.animate({height:"hide",paddingTop:"hide",paddingBottom:"hide"},b);return}var d=b.toShow.css("overflow"),e=0,f={},g={},h=["height","paddingTop","paddingBottom"],i,j=b.toShow;i=j[0].style.width,j.width(j.parent().width()-parseFloat(j.css("paddingLeft"))-parseFloat(j.css("paddingRight"))-(parseFloat(j.css("borderLeftWidth"))||0)-(parseFloat(j.css("borderRightWidth"))||0)),a.each(h,function(c,d){g[d]="hide";var e=(""+a.css(b.toShow[0],d)).match(/^([\d+-.]+)(.*)$/);f[d]={value:e[1],unit:e[2]||"px"}}),b.toShow.css({height:0,overflow:"hidden"}).show(),b.toHide.filter(":hidden").each(b.complete).end().filter(":visible").animate(g,{step:function(a,c){c.prop=="height"&amp;&amp;(e=c.end-c.start===0?0:(c.now-c.start)/(c.end-c.start)),b.toShow[0].style[c.prop]=e*f[c.prop].value+f[c.prop].unit},duration:b.duration,easing:b.easing,complete:function(){b.autoHeight||b.toShow.css("height",""),b.toShow.css({width:i,overflow:d}),b.complete()}})},bounceslide:function(a){this.slide(a,{easing:a.down?"easeOutBounce":"swing",duration:a.down?1e3:200})}}})}(jQuery),function(a,b){var c=0;a.widget("ui.autocomplete",{options:{appendTo:"body",autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null},pending:0,_create:function(){var b=this,c=this.element[0].ownerDocument,d;this.isMultiLine=this.element.is("textarea"),this.element.addClass("ui-autocomplete-input").attr("autocomplete","off").attr({role:"textbox","aria-autocomplete":"list","aria-haspopup":"true"}).bind("keydown.autocomplete",function(c){if(b.options.disabled||b.element.propAttr("readOnly"))return;d=!1;var e=a.ui.keyCode;switch(c.keyCode){case e.PAGE_UP:b._move("previousPage",c);break;case e.PAGE_DOWN:b._move("nextPage",c);break;case e.UP:b._keyEvent("previous",c);break;case e.DOWN:b._keyEvent("next",c);break;case e.ENTER:case e.NUMPAD_ENTER:b.menu.active&amp;&amp;(d=!0,c.preventDefault());case e.TAB:if(!b.menu.active)return;b.menu.select(c);break;case e.ESCAPE:b.element.val(b.term),b.close(c);break;default:clearTimeout(b.searching),b.searching=setTimeout(function(){b.term!=b.element.val()&amp;&amp;(b.selectedItem=null,b.search(null,c))},b.options.delay)}}).bind("keypress.autocomplete",function(a){d&amp;&amp;(d=!1,a.preventDefault())}).bind("focus.autocomplete",function(){if(b.options.disabled)return;b.selectedItem=null,b.previous=b.element.val()}).bind("blur.autocomplete",function(a){if(b.options.disabled)return;clearTimeout(b.searching),b.closing=setTimeout(function(){b.close(a),b._change(a)},150)}),this._initSource(),this.menu=a("&lt;ul&gt;&lt;/ul&gt;").addClass("ui-autocomplete").appendTo(a(this.options.appendTo||"body",c)[0]).mousedown(function(c){var d=b.menu.element[0];a(c.target).closest(".ui-menu-item").length||setTimeout(function(){a(document).one("mousedown",function(c){c.target!==b.element[0]&amp;&amp;c.target!==d&amp;&amp;!a.ui.contains(d,c.target)&amp;&amp;b.close()})},1),setTimeout(function(){clearTimeout(b.closing)},13)}).menu({focus:function(a,c){var d=c.item.data("item.autocomplete");!1!==b._trigger("focus",a,{item:d})&amp;&amp;/^key/.test(a.originalEvent.type)&amp;&amp;b.element.val(d.value)},selected:function(a,d){var e=d.item.data("item.autocomplete"),f=b.previous;b.element[0]!==c.activeElement&amp;&amp;(b.element.focus(),b.previous=f,setTimeout(function(){b.previous=f,b.selectedItem=e},1)),!1!==b._trigger("select",a,{item:e})&amp;&amp;b.element.val(e.value),b.term=b.element.val(),b.close(a),b.selectedItem=e},blur:function(a,c){b.menu.element.is(":visible")&amp;&amp;b.element.val()!==b.term&amp;&amp;b.element.val(b.term)}}).zIndex(this.element.zIndex()+1).css({top:0,left:0}).hide().data("menu"),a.fn.bgiframe&amp;&amp;this.menu.element.bgiframe(),b.beforeunloadHandler=function(){b.element.removeAttr("autocomplete")},a(window).bind("beforeunload",b.beforeunloadHandler)},destroy:function(){this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup"),this.menu.element.remove(),a(window).unbind("beforeunload",this.beforeunloadHandler),a.Widget.prototype.destroy.call(this)},_setOption:function(b,c){a.Widget.prototype._setOption.apply(this,arguments),b==="source"&amp;&amp;this._initSource(),b==="appendTo"&amp;&amp;this.menu.element.appendTo(a(c||"body",this.element[0].ownerDocument)[0]),b==="disabled"&amp;&amp;c&amp;&amp;this.xhr&amp;&amp;this.xhr.abort()},_initSource:function(){var b=this,c,d;a.isArray(this.options.source)?(c=this.options.source,this.source=function(b,d){d(a.ui.autocomplete.filter(c,b.term))}):typeof this.options.source=="string"?(d=this.options.source,this.source=function(c,e){b.xhr&amp;&amp;b.xhr.abort(),b.xhr=a.ajax({url:d,data:c,dataType:"json",success:function(a,b){e(a)},error:function(){e([])}})}):this.source=this.options.source},search:function(a,b){a=a!=null?a:this.element.val(),this.term=this.element.val();if(a.length&lt;this.options.minLength)return this.close(b);clearTimeout(this.closing);if(this._trigger("search",b)===!1)return;return this._search(a)},_search:function(a){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.source({term:a},this._response())},_response:function(){var a=this,b=++c;return function(d){b===c&amp;&amp;a.__response(d),a.pending--,a.pending||a.element.removeClass("ui-autocomplete-loading")}},__response:function(a){!this.options.disabled&amp;&amp;a&amp;&amp;a.length?(a=this._normalize(a),this._suggest(a),this._trigger("open")):this.close()},close:function(a){clearTimeout(this.closing),this.menu.element.is(":visible")&amp;&amp;(this.menu.element.hide(),this.menu.deactivate(),this._trigger("close",a))},_change:function(a){this.previous!==this.element.val()&amp;&amp;this._trigger("change",a,{item:this.selectedItem})},_normalize:function(b){return b.length&amp;&amp;b[0].label&amp;&amp;b[0].value?b:a.map(b,function(b){return typeof b=="string"?{label:b,value:b}:a.extend({label:b.label||b.value,value:b.value||b.label},b)})},_suggest:function(b){var c=this.menu.element.empty().zIndex(this.element.zIndex()+1);this._renderMenu(c,b),this.menu.deactivate(),this.menu.refresh(),c.show(),this._resizeMenu(),c.position(a.extend({of:this.element},this.options.position)),this.options.autoFocus&amp;&amp;this.menu.next(new a.Event("mouseover"))},_resizeMenu:function(){var a=this.menu.element;a.outerWidth(Math.max(a.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(b,c){var d=this;a.each(c,function(a,c){d._renderItem(b,c)})},_renderItem:function(b,c){return a("&lt;li&gt;&lt;/li&gt;").data("item.autocomplete",c).append(a("&lt;a&gt;&lt;/a&gt;").text(c.label)).appendTo(b)},_move:function(a,b){if(!this.menu.element.is(":visible")){this.search(null,b);return}if(this.menu.first()&amp;&amp;/^previous/.test(a)||this.menu.last()&amp;&amp;/^next/.test(a)){this.element.val(this.term),this.menu.deactivate();return}this.menu[a](b)},widget:function(){return this.menu.element},_keyEvent:function(a,b){if(!this.isMultiLine||this.menu.element.is(":visible"))this._move(a,b),b.preventDefault()}}),a.extend(a.ui.autocomplete,{escapeRegex:function(a){return a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&amp;")},filter:function(b,c){var d=new RegExp(a.ui.autocomplete.escapeRegex(c),"i");return a.grep(b,function(a){return d.test(a.label||a.value||a)})}})}(jQuery),function(a){a.widget("ui.menu",{_create:function(){var b=this;this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({role:"listbox","aria-activedescendant":"ui-active-menuitem"}).click(function(c){if(!a(c.target).closest(".ui-menu-item a").length)return;c.preventDefault(),b.select(c)}),this.refresh()},refresh:function(){var b=this,c=this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","menuitem");c.children("a").addClass("ui-corner-all").attr("tabindex",-1).mouseenter(function(c){b.activate(c,a(this).parent())}).mouseleave(function(){b.deactivate()})},activate:function(a,b){this.deactivate();if(this.hasScroll()){var c=b.offset().top-this.element.offset().top,d=this.element.scrollTop(),e=this.element.height();c&lt;0?this.element.scrollTop(d+c):c&gt;=e&amp;&amp;this.element.scrollTop(d+c-e+b.height())}this.active=b.eq(0).children("a").addClass("ui-state-hover").attr("id","ui-active-menuitem").end(),this._trigger("focus",a,{item:b})},deactivate:function(){if(!this.active)return;this.active.children("a").removeClass("ui-state-hover").removeAttr("id"),this._trigger("blur"),this.active=null},next:function(a){this.move("next",".ui-menu-item:first",a)},previous:function(a){this.move("prev",".ui-menu-item:last",a)},first:function(){return this.active&amp;&amp;!this.active.prevAll(".ui-menu-item").length},last:function(){return this.active&amp;&amp;!this.active.nextAll(".ui-menu-item").length},move:function(a,b,c){if(!this.active){this.activate(c,this.element.children(b));return}var d=this.active[a+"All"](".ui-menu-item").eq(0);d.length?this.activate(c,d):this.activate(c,this.element.children(b))},nextPage:function(b){if(this.hasScroll()){if(!this.active||this.last()){this.activate(b,this.element.children(".ui-menu-item:first"));return}var c=this.active.offset().top,d=this.element.height(),e=this.element.children(".ui-menu-item").filter(function(){var b=a(this).offset().top-c-d+a(this).height();return b&lt;10&amp;&amp;b&gt;-10});e.length||(e=this.element.children(".ui-menu-item:last")),this.activate(b,e)}else this.activate(b,this.element.children(".ui-menu-item").filter(!this.active||this.last()?":first":":last"))},previousPage:function(b){if(this.hasScroll()){if(!this.active||this.first()){this.activate(b,this.element.children(".ui-menu-item:last"));return}var c=this.active.offset().top,d=this.element.height(),e=this.element.children(".ui-menu-item").filter(function(){var b=a(this).offset().top-c+d-a(this).height();return b&lt;10&amp;&amp;b&gt;-10});e.length||(e=this.element.children(".ui-menu-item:first")),this.activate(b,e)}else this.activate(b,this.element.children(".ui-menu-item").filter(!this.active||this.first()?":last":":first"))},hasScroll:function(){return this.element.height()&lt;this.element[a.fn.prop?"prop":"attr"]("scrollHeight")},select:function(a){this._trigger("selected",a,{item:this.active})}})}(jQuery),function(a,b){var c,d,e,f,g="ui-button ui-widget ui-state-default ui-corner-all",h="ui-state-hover ui-state-active ",i="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",j=function(){var b=a(this).find(":ui-button");setTimeout(function(){b.button("refresh")},1)},k=function(b){var c=b.name,d=b.form,e=a([]);return c&amp;&amp;(d?e=a(d).find("[name='"+c+"']"):e=a("[name='"+c+"']",b.ownerDocument).filter(function(){return!this.form})),e};a.widget("ui.button",{options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset.button").bind("reset.button",j),typeof this.options.disabled!="boolean"?this.options.disabled=!!this.element.propAttr("disabled"):this.element.propAttr("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var b=this,h=this.options,i=this.type==="checkbox"||this.type==="radio",l="ui-state-hover"+(i?"":" ui-state-active"),m="ui-state-focus";h.label===null&amp;&amp;(h.label=this.buttonElement.html()),this.buttonElement.addClass(g).attr("role","button").bind("mouseenter.button",function(){if(h.disabled)return;a(this).addClass("ui-state-hover"),this===c&amp;&amp;a(this).addClass("ui-state-active")}).bind("mouseleave.button",function(){if(h.disabled)return;a(this).removeClass(l)}).bind("click.button",function(a){h.disabled&amp;&amp;(a.preventDefault(),a.stopImmediatePropagation())}),this.element.bind("focus.button",function(){b.buttonElement.addClass(m)}).bind("blur.button",function(){b.buttonElement.removeClass(m)}),i&amp;&amp;(this.element.bind("change.button",function(){if(f)return;b.refresh()}),this.buttonElement.bind("mousedown.button",function(a){if(h.disabled)return;f=!1,d=a.pageX,e=a.pageY}).bind("mouseup.button",function(a){if(h.disabled)return;if(d!==a.pageX||e!==a.pageY)f=!0})),this.type==="checkbox"?this.buttonElement.bind("click.button",function(){if(h.disabled||f)return!1;a(this).toggleClass("ui-state-active"),b.buttonElement.attr("aria-pressed",b.element[0].checked)}):this.type==="radio"?this.buttonElement.bind("click.button",function(){if(h.disabled||f)return!1;a(this).addClass("ui-state-active"),b.buttonElement.attr("aria-pressed","true");var c=b.element[0];k(c).not(c).map(function(){return a(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown.button",function(){if(h.disabled)return!1;a(this).addClass("ui-state-active"),c=this,a(document).one("mouseup",function(){c=null})}).bind("mouseup.button",function(){if(h.disabled)return!1;a(this).removeClass("ui-state-active")}).bind("keydown.button",function(b){if(h.disabled)return!1;(b.keyCode==a.ui.keyCode.SPACE||b.keyCode==a.ui.keyCode.ENTER)&amp;&amp;a(this).addClass("ui-state-active")}).bind("keyup.button",function(){a(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&amp;&amp;this.buttonElement.keyup(function(b){b.keyCode===a.ui.keyCode.SPACE&amp;&amp;a(this).click()})),this._setOption("disabled",h.disabled),this._resetButton()},_determineButtonType:function(){this.element.is(":checkbox")?this.type="checkbox":this.element.is(":radio")?this.type="radio":this.element.is("input")?this.type="input":this.type="button";if(this.type==="checkbox"||this.type==="radio"){var a=this.element.parents().filter(":last"),b="label[for='"+this.element.attr("id")+"']";this.buttonElement=a.find(b),this.buttonElement.length||(a=a.length?a.siblings():this.element.siblings(),this.buttonElement=a.filter(b),this.buttonElement.length||(this.buttonElement=a.find(b))),this.element.addClass("ui-helper-hidden-accessible");var c=this.element.is(":checked");c&amp;&amp;this.buttonElement.addClass("ui-state-active"),this.buttonElement.attr("aria-pressed",c)}else this.buttonElement=this.element},widget:function(){return this.buttonElement},destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(g+" "+h+" "+i).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title"),a.Widget.prototype.destroy.call(this)},_setOption:function(b,c){a.Widget.prototype._setOption.apply(this,arguments);if(b==="disabled"){c?this.element.propAttr("disabled",!0):this.element.propAttr("disabled",!1);return}this._resetButton()},refresh:function(){var b=this.element.is(":disabled");b!==this.options.disabled&amp;&amp;this._setOption("disabled",b),this.type==="radio"?k(this.element[0]).each(function(){a(this).is(":checked")?a(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):a(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):this.type==="checkbox"&amp;&amp;(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if(this.type==="input"){this.options.label&amp;&amp;this.element.val(this.options.label);return}var b=this.buttonElement.removeClass(i),c=a("&lt;span&gt;&lt;/span&gt;",this.element[0].ownerDocument).addClass("ui-button-text").html(this.options.label).appendTo(b.empty()).text(),d=this.options.icons,e=d.primary&amp;&amp;d.secondary,f=[];d.primary||d.secondary?(this.options.text&amp;&amp;f.push("ui-button-text-icon"+(e?"s":d.primary?"-primary":"-secondary")),d.primary&amp;&amp;b.prepend("&lt;span class='ui-button-icon-primary ui-icon "+d.primary+"'&gt;&lt;/span&gt;"),d.secondary&amp;&amp;b.append("&lt;span class='ui-button-icon-secondary ui-icon "+d.secondary+"'&gt;&lt;/span&gt;"),this.options.text||(f.push(e?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||b.attr("title",c))):f.push("ui-button-text-only"),b.addClass(f.join(" "))}}),a.widget("ui.buttonset",{options:{items:":button, :submit, :reset, :checkbox, :radio, a, :data(button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(b,c){b==="disabled"&amp;&amp;this.buttons.button("option",b,c),a.Widget.prototype._setOption.apply(this,arguments)},refresh:function(){var b=this.element.css("direction")==="rtl";this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return a(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(b?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(b?"ui-corner-left":"ui-corner-right").end().end()},destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return a(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy"),a.Widget.prototype.destroy.call(this)}})}(jQuery),function($,undefined){function Datepicker(){this.debug=!1,this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},$.extend(this._defaults,this.regional[""]),this.dpDiv=bindHover($('&lt;div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"&gt;&lt;/div&gt;'))}function bindHover(a){var b="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return a.bind("mouseout",function(a){var c=$(a.target).closest(b);if(!c.length)return;c.removeClass("ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover")}).bind("mouseover",function(c){var d=$(c.target).closest(b);if($.datepicker._isDisabledDatepicker(instActive.inline?a.parent()[0]:instActive.input[0])||!d.length)return;d.parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),d.addClass("ui-state-hover"),d.hasClass("ui-datepicker-prev")&amp;&amp;d.addClass("ui-datepicker-prev-hover"),d.hasClass("ui-datepicker-next")&amp;&amp;d.addClass("ui-datepicker-next-hover")})}function extendRemove(a,b){$.extend(a,b);for(var c in b)if(b[c]==null||b[c]==undefined)a[c]=b[c];return a}function isArray(a){return a&amp;&amp;($.browser.safari&amp;&amp;typeof a=="object"&amp;&amp;a.length||a.constructor&amp;&amp;a.constructor.toString().match(/\Array\(\)/))}$.extend($.ui,{datepicker:{version:"1.8.24"}});var PROP_NAME="datepicker",dpuuid=(new Date).getTime(),instActive;$.extend(Datepicker.prototype,{markerClassName:"hasDatepicker",maxRows:4,log:function(){this.debug&amp;&amp;console.log.apply("",arguments)},_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(a){return extendRemove(this._defaults,a||{}),this},_attachDatepicker:function(target,settings){var inlineSettings=null;for(var attrName in this._defaults){var attrValue=target.getAttribute("date:"+attrName);if(attrValue){inlineSettings=inlineSettings||{};try{inlineSettings[attrName]=eval(attrValue)}catch(err){inlineSettings[attrName]=attrValue}}}var nodeName=target.nodeName.toLowerCase(),inline=nodeName=="div"||nodeName=="span";target.id||(this.uuid+=1,target.id="dp"+this.uuid);var inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{},inlineSettings||{}),nodeName=="input"?this._connectDatepicker(target,inst):inline&amp;&amp;this._inlineDatepicker(target,inst)},_newInst:function(a,b){var c=a[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1");return{id:c,input:a,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:b,dpDiv:b?bindHover($('&lt;div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"&gt;&lt;/div&gt;')):this.dpDiv}},_connectDatepicker:function(a,b){var c=$(a);b.append=$([]),b.trigger=$([]);if(c.hasClass(this.markerClassName))return;this._attachments(c,b),c.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function(a,c,d){b.settings[c]=d}).bind("getData.datepicker",function(a,c){return this._get(b,c)}),this._autoSize(b),$.data(a,PROP_NAME,b),b.settings.disabled&amp;&amp;this._disableDatepicker(a)},_attachments:function(a,b){var c=this._get(b,"appendText"),d=this._get(b,"isRTL");b.append&amp;&amp;b.append.remove(),c&amp;&amp;(b.append=$('&lt;span class="'+this._appendClass+'"&gt;'+c+"&lt;/span&gt;"),a[d?"before":"after"](b.append)),a.unbind("focus",this._showDatepicker),b.trigger&amp;&amp;b.trigger.remove();var e=this._get(b,"showOn");(e=="focus"||e=="both")&amp;&amp;a.focus(this._showDatepicker);if(e=="button"||e=="both"){var f=this._get(b,"buttonText"),g=this._get(b,"buttonImage");b.trigger=$(this._get(b,"buttonImageOnly")?$("&lt;img/&gt;").addClass(this._triggerClass).attr({src:g,alt:f,title:f}):$('&lt;button type="button"&gt;&lt;/button&gt;').addClass(this._triggerClass).html(g==""?f:$("&lt;img/&gt;").attr({src:g,alt:f,title:f}))),a[d?"before":"after"](b.trigger),b.trigger.click(function(){return $.datepicker._datepickerShowing&amp;&amp;$.datepicker._lastInput==a[0]?$.datepicker._hideDatepicker():$.datepicker._datepickerShowing&amp;&amp;$.datepicker._lastInput!=a[0]?($.datepicker._hideDatepicker(),$.datepicker._showDatepicker(a[0])):$.datepicker._showDatepicker(a[0]),!1})}},_autoSize:function(a){if(this._get(a,"autoSize")&amp;&amp;!a.inline){var b=new Date(2009,11,20),c=this._get(a,"dateFormat");if(c.match(/[DM]/)){var d=function(a){var b=0,c=0;for(var d=0;d&lt;a.length;d++)a[d].length&gt;b&amp;&amp;(b=a[d].length,c=d);return c};b.setMonth(d(this._get(a,c.match(/MM/)?"monthNames":"monthNamesShort"))),b.setDate(d(this._get(a,c.match(/DD/)?"dayNames":"dayNamesShort"))+20-b.getDay())}a.input.attr("size",this._formatDate(a,b).length)}},_inlineDatepicker:function(a,b){var c=$(a);if(c.hasClass(this.markerClassName))return;c.addClass(this.markerClassName).append(b.dpDiv).bind("setData.datepicker",function(a,c,d){b.settings[c]=d}).bind("getData.datepicker",function(a,c){return this._get(b,c)}),$.data(a,PROP_NAME,b),this._setDate(b,this._getDefaultDate(b),!0),this._updateDatepicker(b),this._updateAlternate(b),b.settings.disabled&amp;&amp;this._disableDatepicker(a),b.dpDiv.css("display","block")},_dialogDatepicker:function(a,b,c,d,e){var f=this._dialogInst;if(!f){this.uuid+=1;var g="dp"+this.uuid;this._dialogInput=$('&lt;input type="text" id="'+g+'" style="position: absolute; top: -100px; width: 0px;"/&gt;'),this._dialogInput.keydown(this._doKeyDown),$("body").append(this._dialogInput),f=this._dialogInst=this._newInst(this._dialogInput,!1),f.settings={},$.data(this._dialogInput[0],PROP_NAME,f)}extendRemove(f.settings,d||{}),b=b&amp;&amp;b.constructor==Date?this._formatDate(f,b):b,this._dialogInput.val(b),this._pos=e?e.length?e:[e.pageX,e.pageY]:null;if(!this._pos){var h=document.documentElement.clientWidth,i=document.documentElement.clientHeight,j=document.documentElement.scrollLeft||document.body.scrollLeft,k=document.documentElement.scrollTop||document.body.scrollTop;this._pos=[h/2-100+j,i/2-150+k]}return this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),f.settings.onSelect=c,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),$.blockUI&amp;&amp;$.blockUI(this.dpDiv),$.data(this._dialogInput[0],PROP_NAME,f),this},_destroyDatepicker:function(a){var b=$(a),c=$.data(a,PROP_NAME);if(!b.hasClass(this.markerClassName))return;var d=a.nodeName.toLowerCase();$.removeData(a,PROP_NAME),d=="input"?(c.append.remove(),c.trigger.remove(),b.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):(d=="div"||d=="span")&amp;&amp;b.removeClass(this.markerClassName).empty()},_enableDatepicker:function(a){var b=$(a),c=$.data(a,PROP_NAME);if(!b.hasClass(this.markerClassName))return;var d=a.nodeName.toLowerCase();if(d=="input")a.disabled=!1,c.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""});else if(d=="div"||d=="span"){var e=b.children("."+this._inlineClass);e.children().removeClass("ui-state-disabled"),e.find("select.ui-datepicker-month, select.ui-datepicker-year").removeAttr("disabled")}this._disabledInputs=$.map(this._disabledInputs,function(b){return b==a?null:b})},_disableDatepicker:function(a){var b=$(a),c=$.data(a,PROP_NAME);if(!b.hasClass(this.markerClassName))return;var d=a.nodeName.toLowerCase();if(d=="input")a.disabled=!0,c.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"});else if(d=="div"||d=="span"){var e=b.children("."+this._inlineClass);e.children().addClass("ui-state-disabled"),e.find("select.ui-datepicker-month, select.ui-datepicker-year").attr("disabled","disabled")}this._disabledInputs=$.map(this._disabledInputs,function(b){return b==a?null:b}),this._disabledInputs[this._disabledInputs.length]=a},_isDisabledDatepicker:function(a){if(!a)return!1;for(var b=0;b&lt;this._disabledInputs.length;b++)if(this._disabledInputs[b]==a)return!0;return!1},_getInst:function(a){try{return $.data(a,PROP_NAME)}catch(b){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(a,b,c){var d=this._getInst(a);if(arguments.length==2&amp;&amp;typeof b=="string")return b=="defaults"?$.extend({},$.datepicker._defaults):d?b=="all"?$.extend({},d.settings):this._get(d,b):null;var e=b||{};typeof b=="string"&amp;&amp;(e={},e[b]=c);if(d){this._curInst==d&amp;&amp;this._hideDatepicker();var f=this._getDateDatepicker(a,!0),g=this._getMinMaxDate(d,"min"),h=this._getMinMaxDate(d,"max");extendRemove(d.settings,e),g!==null&amp;&amp;e.dateFormat!==undefined&amp;&amp;e.minDate===undefined&amp;&amp;(d.settings.minDate=this._formatDate(d,g)),h!==null&amp;&amp;e.dateFormat!==undefined&amp;&amp;e.maxDate===undefined&amp;&amp;(d.settings.maxDate=this._formatDate(d,h)),this._attachments($(a),d),this._autoSize(d),this._setDate(d,f),this._updateAlternate(d),this._updateDatepicker(d)}},_changeDatepicker:function(a,b,c){this._optionDatepicker(a,b,c)},_refreshDatepicker:function(a){var b=this._getInst(a);b&amp;&amp;this._updateDatepicker(b)},_setDateDatepicker:function(a,b){var c=this._getInst(a);c&amp;&amp;(this._setDate(c,b),this._updateDatepicker(c),this._updateAlternate(c))},_getDateDatepicker:function(a,b){var c=this._getInst(a);return c&amp;&amp;!c.inline&amp;&amp;this._setDateFromField(c,b),c?this._getDate(c):null},_doKeyDown:function(a){var b=$.datepicker._getInst(a.target),c=!0,d=b.dpDiv.is(".ui-datepicker-rtl");b._keyEvent=!0;if($.datepicker._datepickerShowing)switch(a.keyCode){case 9:$.datepicker._hideDatepicker(),c=!1;break;case 13:var e=$("td."+$.datepicker._dayOverClass+":not(."+$.datepicker._currentClass+")",b.dpDiv);e[0]&amp;&amp;$.datepicker._selectDay(a.target,b.selectedMonth,b.selectedYear,e[0]);var f=$.datepicker._get(b,"onSelect");if(f){var g=$.datepicker._formatDate(b);f.apply(b.input?b.input[0]:null,[g,b])}else $.datepicker._hideDatepicker();return!1;case 27:$.datepicker._hideDatepicker();break;case 33:$.datepicker._adjustDate(a.target,a.ctrlKey?-$.datepicker._get(b,"stepBigMonths"):-$.datepicker._get(b,"stepMonths"),"M");break;case 34:$.datepicker._adjustDate(a.target,a.ctrlKey?+$.datepicker._get(b,"stepBigMonths"):+$.datepicker._get(b,"stepMonths"),"M");break;case 35:(a.ctrlKey||a.metaKey)&amp;&amp;$.datepicker._clearDate(a.target),c=a.ctrlKey||a.metaKey;break;case 36:(a.ctrlKey||a.metaKey)&amp;&amp;$.datepicker._gotoToday(a.target),c=a.ctrlKey||a.metaKey;break;case 37:(a.ctrlKey||a.metaKey)&amp;&amp;$.datepicker._adjustDate(a.target,d?1:-1,"D"),c=a.ctrlKey||a.metaKey,a.originalEvent.altKey&amp;&amp;$.datepicker._adjustDate(a.target,a.ctrlKey?-$.datepicker._get(b,"stepBigMonths"):-$.datepicker._get(b,"stepMonths"),"M");break;case 38:(a.ctrlKey||a.metaKey)&amp;&amp;$.datepicker._adjustDate(a.target,-7,"D"),c=a.ctrlKey||a.metaKey;break;case 39:(a.ctrlKey||a.metaKey)&amp;&amp;$.datepicker._adjustDate(a.target,d?-1:1,"D"),c=a.ctrlKey||a.metaKey,a.originalEvent.altKey&amp;&amp;$.datepicker._adjustDate(a.target,a.ctrlKey?+$.datepicker._get(b,"stepBigMonths"):+$.datepicker._get(b,"stepMonths"),"M");break;case 40:(a.ctrlKey||a.metaKey)&amp;&amp;$.datepicker._adjustDate(a.target,7,"D"),c=a.ctrlKey||a.metaKey;break;default:c=!1}else a.keyCode==36&amp;&amp;a.ctrlKey?$.datepicker._showDatepicker(this):c=!1;c&amp;&amp;(a.preventDefault(),a.stopPropagation())},_doKeyPress:function(a){var b=$.datepicker._getInst(a.target);if($.datepicker._get(b,"constrainInput")){var c=$.datepicker._possibleChars($.datepicker._get(b,"dateFormat")),d=String.fromCharCode(a.charCode==undefined?a.keyCode:a.charCode);return a.ctrlKey||a.metaKey||d&lt;" "||!c||c.indexOf(d)&gt;-1}},_doKeyUp:function(a){var b=$.datepicker._getInst(a.target);if(b.input.val()!=b.lastVal)try{var c=$.datepicker.parseDate($.datepicker._get(b,"dateFormat"),b.input?b.input.val():null,$.datepicker._getFormatConfig(b));c&amp;&amp;($.datepicker._setDateFromField(b),$.datepicker._updateAlternate(b),$.datepicker._updateDatepicker(b))}catch(d){$.datepicker.log(d)}return!0},_showDatepicker:function(a){a=a.target||a,a.nodeName.toLowerCase()!="input"&amp;&amp;(a=$("input",a.parentNode)[0]);if($.datepicker._isDisabledDatepicker(a)||$.datepicker._lastInput==a)return;var b=$.datepicker._getInst(a);$.datepicker._curInst&amp;&amp;$.datepicker._curInst!=b&amp;&amp;($.datepicker._curInst.dpDiv.stop(!0,!0),b&amp;&amp;$.datepicker._datepickerShowing&amp;&amp;$.datepicker._hideDatepicker($.datepicker._curInst.input[0]));var c=$.datepicker._get(b,"beforeShow"),d=c?c.apply(a,[a,b]):{};if(d===!1)return;extendRemove(b.settings,d),b.lastVal=null,$.datepicker._lastInput=a,$.datepicker._setDateFromField(b),$.datepicker._inDialog&amp;&amp;(a.value=""),$.datepicker._pos||($.datepicker._pos=$.datepicker._findPos(a),$.datepicker._pos[1]+=a.offsetHeight);var e=!1;$(a).parents().each(function(){return e|=$(this).css("position")=="fixed",!e}),e&amp;&amp;$.browser.opera&amp;&amp;($.datepicker._pos[0]-=document.documentElement.scrollLeft,$.datepicker._pos[1]-=document.documentElement.scrollTop);var f={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};$.datepicker._pos=null,b.dpDiv.empty(),b.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),$.datepicker._updateDatepicker(b),f=$.datepicker._checkOffset(b,f,e),b.dpDiv.css({position:$.datepicker._inDialog&amp;&amp;$.blockUI?"static":e?"fixed":"absolute",display:"none",left:f.left+"px",top:f.top+"px"});if(!b.inline){var g=$.datepicker._get(b,"showAnim"),h=$.datepicker._get(b,"duration"),i=function(){var a=b.dpDiv.find("iframe.ui-datepicker-cover");if(!!a.length){var c=$.datepicker._getBorders(b.dpDiv);a.css({left:-c[0],top:-c[1],width:b.dpDiv.outerWidth(),height:b.dpDiv.outerHeight()})}};b.dpDiv.zIndex($(a).zIndex()+1),$.datepicker._datepickerShowing=!0,$.effects&amp;&amp;$.effects[g]?b.dpDiv.show(g,$.datepicker._get(b,"showOptions"),h,i):b.dpDiv[g||"show"](g?h:null,i),(!g||!h)&amp;&amp;i(),b.input.is(":visible")&amp;&amp;!b.input.is(":disabled")&amp;&amp;b.input.focus(),$.datepicker._curInst=b}},_updateDatepicker:function(a){var b=this;b.maxRows=4;var c=$.datepicker._getBorders(a.dpDiv);instActive=a,a.dpDiv.empty().append(this._generateHTML(a)),this._attachHandlers(a);var d=a.dpDiv.find("iframe.ui-datepicker-cover");!d.length||d.css({left:-c[0],top:-c[1],width:a.dpDiv.outerWidth(),height:a.dpDiv.outerHeight()}),a.dpDiv.find("."+this._dayOverClass+" a").mouseover();var e=this._getNumberOfMonths(a),f=e[1],g=17;a.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),f&gt;1&amp;&amp;a.dpDiv.addClass("ui-datepicker-multi-"+f).css("width",g*f+"em"),a.dpDiv[(e[0]!=1||e[1]!=1?"add":"remove")+"Class"]("ui-datepicker-multi"),a.dpDiv[(this._get(a,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),a==$.datepicker._curInst&amp;&amp;$.datepicker._datepickerShowing&amp;&amp;a.input&amp;&amp;a.input.is(":visible")&amp;&amp;!a.input.is(":disabled")&amp;&amp;a.input[0]!=document.activeElement&amp;&amp;a.input.focus();if(a.yearshtml){var h=a.yearshtml;setTimeout(function(){h===a.yearshtml&amp;&amp;a.yearshtml&amp;&amp;a.dpDiv.find("select.ui-datepicker-year:first").replaceWith(a.yearshtml),h=a.yearshtml=null},0)}},_getBorders:function(a){var b=function(a){return{thin:1,medium:2,thick:3}[a]||a};return[parseFloat(b(a.css("border-left-width"))),parseFloat(b(a.css("border-top-width")))]},_checkOffset:function(a,b,c){var d=a.dpDiv.outerWidth(),e=a.dpDiv.outerHeight(),f=a.input?a.input.outerWidth():0,g=a.input?a.input.outerHeight():0,h=document.documentElement.clientWidth+(c?0:$(document).scrollLeft()),i=document.documentElement.clientHeight+(c?0:$(document).scrollTop());return b.left-=this._get(a,"isRTL")?d-f:0,b.left-=c&amp;&amp;b.left==a.input.offset().left?$(document).scrollLeft():0,b.top-=c&amp;&amp;b.top==a.input.offset().top+g?$(document).scrollTop():0,b.left-=Math.min(b.left,b.left+d&gt;h&amp;&amp;h&gt;d?Math.abs(b.left+d-h):0),b.top-=Math.min(b.top,b.top+e&gt;i&amp;&amp;i&gt;e?Math.abs(e+g):0),b},_findPos:function(a){var b=this._getInst(a),c=this._get(b,"isRTL");while(a&amp;&amp;(a.type=="hidden"||a.nodeType!=1||$.expr.filters.hidden(a)))a=a[c?"previousSibling":"nextSibling"];var d=$(a).offset();return[d.left,d.top]},_hideDatepicker:function(a){var b=this._curInst;if(!b||a&amp;&amp;b!=$.data(a,PROP_NAME))return;if(this._datepickerShowing){var c=this._get(b,"showAnim"),d=this._get(b,"duration"),e=function(){$.datepicker._tidyDialog(b)};$.effects&amp;&amp;$.effects[c]?b.dpDiv.hide(c,$.datepicker._get(b,"showOptions"),d,e):b.dpDiv[c=="slideDown"?"slideUp":c=="fadeIn"?"fadeOut":"hide"](c?d:null,e),c||e(),this._datepickerShowing=!1;var f=this._get(b,"onClose");f&amp;&amp;f.apply(b.input?b.input[0]:null,[b.input?b.input.val():"",b]),this._lastInput=null,this._inDialog&amp;&amp;(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),$.blockUI&amp;&amp;($.unblockUI(),$("body").append(this.dpDiv))),this._inDialog=!1}},_tidyDialog:function(a){a.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(a){if(!$.datepicker._curInst)return;var b=$(a.target),c=$.datepicker._getInst(b[0]);(b[0].id!=$.datepicker._mainDivId&amp;&amp;b.parents("#"+$.datepicker._mainDivId).length==0&amp;&amp;!b.hasClass($.datepicker.markerClassName)&amp;&amp;!b.closest("."+$.datepicker._triggerClass).length&amp;&amp;$.datepicker._datepickerShowing&amp;&amp;(!$.datepicker._inDialog||!$.blockUI)||b.hasClass($.datepicker.markerClassName)&amp;&amp;$.datepicker._curInst!=c)&amp;&amp;$.datepicker._hideDatepicker()},_adjustDate:function(a,b,c){var d=$(a),e=this._getInst(d[0]);if(this._isDisabledDatepicker(d[0]))return;this._adjustInstDate(e,b+(c=="M"?this._get(e,"showCurrentAtPos"):0),c),this._updateDatepicker(e)},_gotoToday:function(a){var b=$(a),c=this._getInst(b[0]);if(this._get(c,"gotoCurrent")&amp;&amp;c.currentDay)c.selectedDay=c.currentDay,c.drawMonth=c.selectedMonth=c.currentMonth,c.drawYear=c.selectedYear=c.currentYear;else{var d=new Date;c.selectedDay=d.getDate(),c.drawMonth=c.selectedMonth=d.getMonth(),c.drawYear=c.selectedYear=d.getFullYear()}this._notifyChange(c),this._adjustDate(b)},_selectMonthYear:function(a,b,c){var d=$(a),e=this._getInst(d[0]);e["selected"+(c=="M"?"Month":"Year")]=e["draw"+(c=="M"?"Month":"Year")]=parseInt(b.options[b.selectedIndex].value,10),this._notifyChange(e),this._adjustDate(d)},_selectDay:function(a,b,c,d){var e=$(a);if($(d).hasClass(this._unselectableClass)||this._isDisabledDatepicker(e[0]))return;var f=this._getInst(e[0]);f.selectedDay=f.currentDay=$("a",d).html(),f.selectedMonth=f.currentMonth=b,f.selectedYear=f.currentYear=c,this._selectDate(a,this._formatDate(f,f.currentDay,f.currentMonth,f.currentYear))},_clearDate:function(a){var b=$(a),c=this._getInst(b[0]);this._selectDate(b,"")},_selectDate:function(a,b){var c=$(a),d=this._getInst(c[0]);b=b!=null?b:this._formatDate(d),d.input&amp;&amp;d.input.val(b),this._updateAlternate(d);var e=this._get(d,"onSelect");e?e.apply(d.input?d.input[0]:null,[b,d]):d.input&amp;&amp;d.input.trigger("change"),d.inline?this._updateDatepicker(d):(this._hideDatepicker(),this._lastInput=d.input[0],typeof d.input[0]!="object"&amp;&amp;d.input.focus(),this._lastInput=null)},_updateAlternate:function(a){var b=this._get(a,"altField");if(b){var c=this._get(a,"altFormat")||this._get(a,"dateFormat"),d=this._getDate(a),e=this.formatDate(c,d,this._getFormatConfig(a));$(b).each(function(){$(this).val(e)})}},noWeekends:function(a){var b=a.getDay();return[b&gt;0&amp;&amp;b&lt;6,""]},iso8601Week:function(a){var b=new Date(a.getTime());b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1},parseDate:function(a,b,c){if(a==null||b==null)throw"Invalid arguments";b=typeof b=="object"?b.toString():b+"";if(b=="")return null;var d=(c?c.shortYearCutoff:null)||this._defaults.shortYearCutoff;d=typeof d!="string"?d:(new Date).getFullYear()%100+parseInt(d,10);var e=(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,f=(c?c.dayNames:null)||this._defaults.dayNames,g=(c?c.monthNamesShort:null)||this._defaults.monthNamesShort,h=(c?c.monthNames:null)||this._defaults.monthNames,i=-1,j=-1,k=-1,l=-1,m=!1,n=function(b){var c=s+1&lt;a.length&amp;&amp;a.charAt(s+1)==b;return c&amp;&amp;s++,c},o=function(a){var c=n(a),d=a=="@"?14:a=="!"?20:a=="y"&amp;&amp;c?4:a=="o"?3:2,e=new RegExp("^\\d{1,"+d+"}"),f=b.substring(r).match(e);if(!f)throw"Missing number at position "+r;return r+=f[0].length,parseInt(f[0],10)},p=function(a,c,d){var e=$.map(n(a)?d:c,function(a,b){return[[b,a]]}).sort(function(a,b){return-(a[1].length-b[1].length)}),f=-1;$.each(e,function(a,c){var d=c[1];if(b.substr(r,d.length).toLowerCase()==d.toLowerCase())return f=c[0],r+=d.length,!1});if(f!=-1)return f+1;throw"Unknown name at position "+r},q=function(){if(b.charAt(r)!=a.charAt(s))throw"Unexpected literal at position "+r;r++},r=0;for(var s=0;s&lt;a.length;s++)if(m)a.charAt(s)=="'"&amp;&amp;!n("'")?m=!1:q();else switch(a.charAt(s)){case"d":k=o("d");break;case"D":p("D",e,f);break;case"o":l=o("o");break;case"m":j=o("m");break;case"M":j=p("M",g,h);break;case"y":i=o("y");break;case"@":var t=new Date(o("@"));i=t.getFullYear(),j=t.getMonth()+1,k=t.getDate();break;case"!":var t=new Date((o("!")-this._ticksTo1970)/1e4);i=t.getFullYear(),j=t.getMonth()+1,k=t.getDate();break;case"'":n("'")?q():m=!0;break;default:q()}if(r&lt;b.length)throw"Extra/unparsed characters found in date: "+b.substring(r);i==-1?i=(new Date).getFullYear():i&lt;100&amp;&amp;(i+=(new Date).getFullYear()-(new Date).getFullYear()%100+(i&lt;=d?0:-100));if(l&gt;-1){j=1,k=l;do{var u=this._getDaysInMonth(i,j-1);if(k&lt;=u)break;j++,k-=u}while(!0)}var t=this._daylightSavingAdjust(new Date(i,j-1,k));if(t.getFullYear()!=i||t.getMonth()+1!=j||t.getDate()!=k)throw"Invalid date";return t},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*24*60*60*1e7,formatDate:function(a,b,c){if(!b)return"";var d=(c?c.dayNamesShort:null)||this._defaults.dayNamesShort,e=(c?c.dayNames:null)||this._defaults.dayNames,f=(c?c.monthNamesShort:null)||this._defaults.monthNamesShort,g=(c?c.monthNames:null)||this._defaults.monthNames,h=function(b){var c=m+1&lt;a.length&amp;&amp;a.charAt(m+1)==b;return c&amp;&amp;m++,c},i=function(a,b,c){var d=""+b;if(h(a))while(d.length&lt;c)d="0"+d;return d},j=function(a,b,c,d){return h(a)?d[b]:c[b]},k="",l=!1;if(b)for(var m=0;m&lt;a.length;m++)if(l)a.charAt(m)=="'"&amp;&amp;!h("'")?l=!1:k+=a.charAt(m);else switch(a.charAt(m)){case"d":k+=i("d",b.getDate(),2);break;case"D":k+=j("D",b.getDay(),d,e);break;case"o":k+=i("o",Math.round(((new Date(b.getFullYear(),b.getMonth(),b.getDate())).getTime()-(new Date(b.getFullYear(),0,0)).getTime())/864e5),3);break;case"m":k+=i("m",b.getMonth()+1,2);break;case"M":k+=j("M",b.getMonth(),f,g);break;case"y":k+=h("y")?b.getFullYear():(b.getYear()%100&lt;10?"0":"")+b.getYear()%100;break;case"@":k+=b.getTime();break;case"!":k+=b.getTime()*1e4+this._ticksTo1970;break;case"'":h("'")?k+="'":l=!0;break;default:k+=a.charAt(m)}return k},_possibleChars:function(a){var b="",c=!1,d=function(b){var c=e+1&lt;a.length&amp;&amp;a.charAt(e+1)==b;return c&amp;&amp;e++,c};for(var e=0;e&lt;a.length;e++)if(c)a.charAt(e)=="'"&amp;&amp;!d("'")?c=!1:b+=a.charAt(e);else switch(a.charAt(e)){case"d":case"m":case"y":case"@":b+="0123456789";break;case"D":case"M":return null;case"'":d("'")?b+="'":c=!0;break;default:b+=a.charAt(e)}return b},_get:function(a,b){return a.settings[b]!==undefined?a.settings[b]:this._defaults[b]},_setDateFromField:function(a,b){if(a.input.val()==a.lastVal)return;var c=this._get(a,"dateFormat"),d=a.lastVal=a.input?a.input.val():null,e,f;e=f=this._getDefaultDate(a);var g=this._getFormatConfig(a);try{e=this.parseDate(c,d,g)||f}catch(h){this.log(h),d=b?"":d}a.selectedDay=e.getDate(),a.drawMonth=a.selectedMonth=e.getMonth(),a.drawYear=a.selectedYear=e.getFullYear(),a.currentDay=d?e.getDate():0,a.currentMonth=d?e.getMonth():0,a.currentYear=d?e.getFullYear():0,this._adjustInstDate(a)},_getDefaultDate:function(a){return this._restrictMinMax(a,this._determineDate(a,this._get(a,"defaultDate"),new Date))},_determineDate:function(a,b,c){var d=function(a){var b=new Date;return b.setDate(b.getDate()+a),b},e=function(b){try{return $.datepicker.parseDate($.datepicker._get(a,"dateFormat"),b,$.datepicker._getFormatConfig(a))}catch(c){}var d=(b.toLowerCase().match(/^c/)?$.datepicker._getDate(a):null)||new Date,e=d.getFullYear(),f=d.getMonth(),g=d.getDate(),h=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,i=h.exec(b);while(i){switch(i[2]||"d"){case"d":case"D":g+=parseInt(i[1],10);break;case"w":case"W":g+=parseInt(i[1],10)*7;break;case"m":case"M":f+=parseInt(i[1],10),g=Math.min(g,$.datepicker._getDaysInMonth(e,f));break;case"y":case"Y":e+=parseInt(i[1],10),g=Math.min(g,$.datepicker._getDaysInMonth(e,f))}i=h.exec(b)}return new Date(e,f,g)},f=b==null||b===""?c:typeof b=="string"?e(b):typeof b=="number"?isNaN(b)?c:d(b):new Date(b.getTime());return f=f&amp;&amp;f.toString()=="Invalid Date"?c:f,f&amp;&amp;(f.setHours(0),f.setMinutes(0),f.setSeconds(0),f.setMilliseconds(0)),this._daylightSavingAdjust(f)},_daylightSavingAdjust:function(a){return a?(a.setHours(a.getHours()&gt;12?a.getHours()+2:0),a):null},_setDate:function(a,b,c){var d=!b,e=a.selectedMonth,f=a.selectedYear,g=this._restrictMinMax(a,this._determineDate(a,b,new Date));a.selectedDay=a.currentDay=g.getDate(),a.drawMonth=a.selectedMonth=a.currentMonth=g.getMonth(),a.drawYear=a.selectedYear=a.currentYear=g.getFullYear(),(e!=a.selectedMonth||f!=a.selectedYear)&amp;&amp;!c&amp;&amp;this._notifyChange(a),this._adjustInstDate(a),a.input&amp;&amp;a.input.val(d?"":this._formatDate(a))},_getDate:function(a){var b=!a.currentYear||a.input&amp;&amp;a.input.val()==""?null:this._daylightSavingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay));return b},_attachHandlers:function(a){var b=this._get(a,"stepMonths"),c="#"+a.id.replace(/\\\\/g,"\\");a.dpDiv.find("[data-handler]").map(function(){var a={prev:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(c,-b,"M")},next:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(c,+b,"M")},hide:function(){window["DP_jQuery_"+dpuuid].datepicker._hideDatepicker()},today:function(){window["DP_jQuery_"+dpuuid].datepicker._gotoToday(c)},selectDay:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectDay(c,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(c,this,"M"),!1},selectYear:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(c,this,"Y"),!1}};$(this).bind(this.getAttribute("data-event"),a[this.getAttribute("data-handler")])})},_generateHTML:function(a){var b=new Date;b=this._daylightSavingAdjust(new Date(b.getFullYear(),b.getMonth(),b.getDate()));var c=this._get(a,"isRTL"),d=this._get(a,"showButtonPanel"),e=this._get(a,"hideIfNoPrevNext"),f=this._get(a,"navigationAsDateFormat"),g=this._getNumberOfMonths(a),h=this._get(a,"showCurrentAtPos"),i=this._get(a,"stepMonths"),j=g[0]!=1||g[1]!=1,k=this._daylightSavingAdjust(a.currentDay?new Date(a.currentYear,a.currentMonth,a.currentDay):new Date(9999,9,9)),l=this._getMinMaxDate(a,"min"),m=this._getMinMaxDate(a,"max"),n=a.drawMonth-h,o=a.drawYear;n&lt;0&amp;&amp;(n+=12,o--);if(m){var p=this._daylightSavingAdjust(new Date(m.getFullYear(),m.getMonth()-g[0]*g[1]+1,m.getDate()));p=l&amp;&amp;p&lt;l?l:p;while(this._daylightSavingAdjust(new Date(o,n,1))&gt;p)n--,n&lt;0&amp;&amp;(n=11,o--)}a.drawMonth=n,a.drawYear=o;var q=this._get(a,"prevText");q=f?this.formatDate(q,this._daylightSavingAdjust(new Date(o,n-i,1)),this._getFormatConfig(a)):q;var r=this._canAdjustMonth(a,-1,o,n)?'&lt;a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="'+q+'"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-'+(c?"e":"w")+'"&gt;'+q+"&lt;/span&gt;&lt;/a&gt;":e?"":'&lt;a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+q+'"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-'+(c?"e":"w")+'"&gt;'+q+"&lt;/span&gt;&lt;/a&gt;",s=this._get(a,"nextText");s=f?this.formatDate(s,this._daylightSavingAdjust(new Date(o,n+i,1)),this._getFormatConfig(a)):s;var t=this._canAdjustMonth(a,1,o,n)?'&lt;a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="'+s+'"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-'+(c?"w":"e")+'"&gt;'+s+"&lt;/span&gt;&lt;/a&gt;":e?"":'&lt;a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+s+'"&gt;&lt;span class="ui-icon ui-icon-circle-triangle-'+(c?"w":"e")+'"&gt;'+s+"&lt;/span&gt;&lt;/a&gt;",u=this._get(a,"currentText"),v=this._get(a,"gotoCurrent")&amp;&amp;a.currentDay?k:b;u=f?this.formatDate(u,v,this._getFormatConfig(a)):u;var w=a.inline?"":'&lt;button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click"&gt;'+this._get(a,"closeText")+"&lt;/button&gt;",x=d?'&lt;div class="ui-datepicker-buttonpane ui-widget-content"&gt;'+(c?w:"")+(this._isInRange(a,v)?'&lt;button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"&gt;'+u+"&lt;/button&gt;":"")+(c?"":w)+"&lt;/div&gt;":"",y=parseInt(this._get(a,"firstDay"),10);y=isNaN(y)?0:y;var z=this._get(a,"showWeek"),A=this._get(a,"dayNames"),B=this._get(a,"dayNamesShort"),C=this._get(a,"dayNamesMin"),D=this._get(a,"monthNames"),E=this._get(a,"monthNamesShort"),F=this._get(a,"beforeShowDay"),G=this._get(a,"showOtherMonths"),H=this._get(a,"selectOtherMonths"),I=this._get(a,"calculateWeek")||this.iso8601Week,J=this._getDefaultDate(a),K="";for(var L=0;L&lt;g[0];L++){var M="";this.maxRows=4;for(var N=0;N&lt;g[1];N++){var O=this._daylightSavingAdjust(new Date(o,n,a.selectedDay)),P=" ui-corner-all",Q="";if(j){Q+='&lt;div class="ui-datepicker-group';if(g[1]&gt;1)switch(N){case 0:Q+=" ui-datepicker-group-first",P=" ui-corner-"+(c?"right":"left");break;case g[1]-1:Q+=" ui-datepicker-group-last",P=" ui-corner-"+(c?"left":"right");break;default:Q+=" ui-datepicker-group-middle",P=""}Q+='"&gt;'}Q+='&lt;div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+P+'"&gt;'+(/all|left/.test(P)&amp;&amp;L==0?c?t:r:"")+(/all|right/.test(P)&amp;&amp;L==0?c?r:t:"")+this._generateMonthYearHeader(a,n,o,l,m,L&gt;0||N&gt;0,D,E)+'&lt;/div&gt;&lt;table class="ui-datepicker-calendar"&gt;&lt;thead&gt;'+"&lt;tr&gt;";var R=z?'&lt;th class="ui-datepicker-week-col"&gt;'+this._get(a,"weekHeader")+"&lt;/th&gt;":"";for(var S=0;S&lt;7;S++){var T=(S+y)%7;R+="&lt;th"+((S+y+6)%7&gt;=5?' class="ui-datepicker-week-end"':"")+"&gt;"+'&lt;span title="'+A[T]+'"&gt;'+C[T]+"&lt;/span&gt;&lt;/th&gt;"}Q+=R+"&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;";var U=this._getDaysInMonth(o,n);o==a.selectedYear&amp;&amp;n==a.selectedMonth&amp;&amp;(a.selectedDay=Math.min(a.selectedDay,U));var V=(this._getFirstDayOfMonth(o,n)-y+7)%7,W=Math.ceil((V+U)/7),X=j?this.maxRows&gt;W?this.maxRows:W:W;this.maxRows=X;var Y=this._daylightSavingAdjust(new Date(o,n,1-V));for(var Z=0;Z&lt;X;Z++){Q+="&lt;tr&gt;";var _=z?'&lt;td class="ui-datepicker-week-col"&gt;'+this._get(a,"calculateWeek")(Y)+"&lt;/td&gt;":"";for(var S=0;S&lt;7;S++){var ba=F?F.apply(a.input?a.input[0]:null,[Y]):[!0,""],bb=Y.getMonth()!=n,bc=bb&amp;&amp;!H||!ba[0]||l&amp;&amp;Y&lt;l||m&amp;&amp;Y&gt;m;_+='&lt;td class="'+((S+y+6)%7&gt;=5?" ui-datepicker-week-end":"")+(bb?" ui-datepicker-other-month":"")+(Y.getTime()==O.getTime()&amp;&amp;n==a.selectedMonth&amp;&amp;a._keyEvent||J.getTime()==Y.getTime()&amp;&amp;J.getTime()==O.getTime()?" "+this._dayOverClass:"")+(bc?" "+this._unselectableClass+" ui-state-disabled":"")+(bb&amp;&amp;!G?"":" "+ba[1]+(Y.getTime()==k.getTime()?" "+this._currentClass:"")+(Y.getTime()==b.getTime()?" ui-datepicker-today":""))+'"'+((!bb||G)&amp;&amp;ba[2]?' title="'+ba[2]+'"':"")+(bc?"":' data-handler="selectDay" data-event="click" data-month="'+Y.getMonth()+'" data-year="'+Y.getFullYear()+'"')+"&gt;"+(bb&amp;&amp;!G?"&amp;#xa0;":bc?'&lt;span class="ui-state-default"&gt;'+Y.getDate()+"&lt;/span&gt;":'&lt;a class="ui-state-default'+(Y.getTime()==b.getTime()?" ui-state-highlight":"")+(Y.getTime()==k.getTime()?" ui-state-active":"")+(bb?" ui-priority-secondary":"")+'" href="#"&gt;'+Y.getDate()+"&lt;/a&gt;")+"&lt;/td&gt;",Y.setDate(Y.getDate()+1),Y=this._daylightSavingAdjust(Y)}Q+=_+"&lt;/tr&gt;"}n++,n&gt;11&amp;&amp;(n=0,o++),Q+="&lt;/tbody&gt;&lt;/table&gt;"+(j?"&lt;/div&gt;"+(g[0]&gt;0&amp;&amp;N==g[1]-1?'&lt;div class="ui-datepicker-row-break"&gt;&lt;/div&gt;':""):""),M+=Q}K+=M}return K+=x+($.browser.msie&amp;&amp;parseInt($.browser.version,10)&lt;7&amp;&amp;!a.inline?'&lt;iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"&gt;&lt;/iframe&gt;':""),a._keyEvent=!1,K},_generateMonthYearHeader:function(a,b,c,d,e,f,g,h){var i=this._get(a,"changeMonth"),j=this._get(a,"changeYear"),k=this._get(a,"showMonthAfterYear"),l='&lt;div class="ui-datepicker-title"&gt;',m="";if(f||!i)m+='&lt;span class="ui-datepicker-month"&gt;'+g[b]+"&lt;/span&gt;";else{var n=d&amp;&amp;d.getFullYear()==c,o=e&amp;&amp;e.getFullYear()==c;m+='&lt;select class="ui-datepicker-month" data-handler="selectMonth" data-event="change"&gt;';for(var p=0;p&lt;12;p++)(!n||p&gt;=d.getMonth())&amp;&amp;(!o||p&lt;=e.getMonth())&amp;&amp;(m+='&lt;option value="'+p+'"'+(p==b?' selected="selected"':"")+"&gt;"+h[p]+"&lt;/option&gt;");m+="&lt;/select&gt;"}k||(l+=m+(f||!i||!j?"&amp;#xa0;":""));if(!a.yearshtml){a.yearshtml="";if(f||!j)l+='&lt;span class="ui-datepicker-year"&gt;'+c+"&lt;/span&gt;";else{var q=this._get(a,"yearRange").split(":"),r=(new Date).getFullYear(),s=function(a){var b=a.match(/c[+-].*/)?c+parseInt(a.substring(1),10):a.match(/[+-].*/)?r+parseInt(a,10):parseInt(a,10);return isNaN(b)?r:b},t=s(q[0]),u=Math.max(t,s(q[1]||""));t=d?Math.max(t,d.getFullYear()):t,u=e?Math.min(u,e.getFullYear()):u,a.yearshtml+='&lt;select class="ui-datepicker-year" data-handler="selectYear" data-event="change"&gt;';for(;t&lt;=u;t++)a.yearshtml+='&lt;option value="'+t+'"'+(t==c?' selected="selected"':"")+"&gt;"+t+"&lt;/option&gt;";a.yearshtml+="&lt;/select&gt;",l+=a.yearshtml,a.yearshtml=null}}return l+=this._get(a,"yearSuffix"),k&amp;&amp;(l+=(f||!i||!j?"&amp;#xa0;":"")+m),l+="&lt;/div&gt;",l},_adjustInstDate:function(a,b,c){var d=a.drawYear+(c=="Y"?b:0),e=a.drawMonth+(c=="M"?b:0),f=Math.min(a.selectedDay,this._getDaysInMonth(d,e))+(c=="D"?b:0),g=this._restrictMinMax(a,this._daylightSavingAdjust(new Date(d,e,f)));a.selectedDay=g.getDate(),a.drawMonth=a.selectedMonth=g.getMonth(),a.drawYear=a.selectedYear=g.getFullYear(),(c=="M"||c=="Y")&amp;&amp;this._notifyChange(a)},_restrictMinMax:function(a,b){var c=this._getMinMaxDate(a,"min"),d=this._getMinMaxDate(a,"max"),e=c&amp;&amp;b&lt;c?c:b;return e=d&amp;&amp;e&gt;d?d:e,e},_notifyChange:function(a){var b=this._get(a,"onChangeMonthYear");b&amp;&amp;b.apply(a.input?a.input[0]:null,[a.selectedYear,a.selectedMonth+1,a])},_getNumberOfMonths:function(a){var b=this._get(a,"numberOfMonths");return b==null?[1,1]:typeof b=="number"?[1,b]:b},_getMinMaxDate:function(a,b){return this._determineDate(a,this._get(a,b+"Date"),null)},_getDaysInMonth:function(a,b){return 32-this._daylightSavingAdjust(new Date(a,b,32)).getDate()},_getFirstDayOfMonth:function(a,b){return(new Date(a,b,1)).getDay()},_canAdjustMonth:function(a,b,c,d){var e=this._getNumberOfMonths(a),f=this._daylightSavingAdjust(new Date(c,d+(b&lt;0?b:e[0]*e[1]),1));return b&lt;0&amp;&amp;f.setDate(this._getDaysInMonth(f.getFullYear(),f.getMonth())),this._isInRange(a,f)},_isInRange:function(a,b){var c=this._getMinMaxDate(a,"min"),d=this._getMinMaxDate(a,"max");return(!c||b.getTime()&gt;=c.getTime())&amp;&amp;(!d||b.getTime()&lt;=d.getTime())},_getFormatConfig:function(a){var b=this._get(a,"shortYearCutoff");return b=typeof b!="string"?b:(new Date).getFullYear()%100+parseInt(b,10),{shortYearCutoff:b,dayNamesShort:this._get(a,"dayNamesShort"),dayNames:this._get(a,"dayNames"),monthNamesShort:this._get(a,"monthNamesShort"),monthNames:this._get(a,"monthNames")}},_formatDate:function(a,b,c,d){b||(a.currentDay=a.selectedDay,a.currentMonth=a.selectedMonth,a.currentYear=a.selectedYear);var e=b?typeof b=="object"?b:this._daylightSavingAdjust(new Date(d,c,b)):this._daylightSavingAdjust(new Date(a.currentYear,a.currentMonth,a.currentDay));return this.formatDate(this._get(a,"dateFormat"),e,this._getFormatConfig(a))}}),$.fn.datepicker=function(a){if(!this.length)return this;$.datepicker.initialized||($(document).mousedown($.datepicker._checkExternalClick).find("body").append($.datepicker.dpDiv),$.datepicker.initialized=!0);var b=Array.prototype.slice.call(arguments,1);return typeof a!="string"||a!="isDisabled"&amp;&amp;a!="getDate"&amp;&amp;a!="widget"?a=="option"&amp;&amp;arguments.length==2&amp;&amp;typeof arguments[1]=="string"?$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this[0]].concat(b)):this.each(function(){typeof a=="string"?$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this].concat(b)):$.datepicker._attachDatepicker(this,a)}):$.datepicker["_"+a+"Datepicker"].apply($.datepicker,[this[0]].concat(b))},$.datepicker=new Datepicker,$.datepicker.initialized=!1,$.datepicker.uuid=(new Date).getTime(),$.datepicker.version="1.8.24",window["DP_jQuery_"+dpuuid]=$}(jQuery),function(a,b){var c="ui-dialog ui-widget ui-widget-content ui-corner-all ",d={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},e={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};a.widget("ui.dialog",{options:{autoOpen:!0,buttons:{},closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:!1,maxWidth:!1,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",collision:"fit",using:function(b){var c=a(this).css(b).offset().top;c&lt;0&amp;&amp;a(this).css("top",b.top-c)}},resizable:!0,show:null,stack:!0,title:"",width:300,zIndex:1e3},_create:function(){this.originalTitle=this.element.attr("title"),typeof this.originalTitle!="string"&amp;&amp;(this.originalTitle=""),this.options.title=this.options.title||this.originalTitle;var b=this,d=b.options,e=d.title||"&amp;#160;",f=a.ui.dialog.getTitleId(b.element),g=(b.uiDialog=a("&lt;div&gt;&lt;/div&gt;")).appendTo(document.body).hide().addClass(c+d.dialogClass).css({zIndex:d.zIndex}).attr("tabIndex",-1).css("outline",0).keydown(function(c){d.closeOnEscape&amp;&amp;!c.isDefaultPrevented()&amp;&amp;c.keyCode&amp;&amp;c.keyCode===a.ui.keyCode.ESCAPE&amp;&amp;(b.close(c),c.preventDefault())}).attr({role:"dialog","aria-labelledby":f}).mousedown(function(a){b.moveToTop(!1,a)}),h=b.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(g),i=(b.uiDialogTitlebar=a("&lt;div&gt;&lt;/div&gt;")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(g),j=a('&lt;a href="#"&gt;&lt;/a&gt;').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role","button").hover(function(){j.addClass("ui-state-hover")},function(){j.removeClass("ui-state-hover")}).focus(function(){j.addClass("ui-state-focus")}).blur(function(){j.removeClass("ui-state-focus")}).click(function(a){return b.close(a),!1}).appendTo(i),k=(b.uiDialogTitlebarCloseText=a("&lt;span&gt;&lt;/span&gt;")).addClass("ui-icon ui-icon-closethick").text(d.closeText).appendTo(j),l=a("&lt;span&gt;&lt;/span&gt;").addClass("ui-dialog-title").attr("id",f).html(e).prependTo(i);a.isFunction(d.beforeclose)&amp;&amp;!a.isFunction(d.beforeClose)&amp;&amp;(d.beforeClose=d.beforeclose),i.find("*").add(i).disableSelection(),d.draggable&amp;&amp;a.fn.draggable&amp;&amp;b._makeDraggable(),d.resizable&amp;&amp;a.fn.resizable&amp;&amp;b._makeResizable(),b._createButtons(d.buttons),b._isOpen=!1,a.fn.bgiframe&amp;&amp;g.bgiframe()},_init:function(){this.options.autoOpen&amp;&amp;this.open()},destroy:function(){var a=this;return a.overlay&amp;&amp;a.overlay.destroy(),a.uiDialog.hide(),a.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body"),a.uiDialog.remove(),a.originalTitle&amp;&amp;a.element.attr("title",a.originalTitle),a},widget:function(){return this.uiDialog},close:function(b){var c=this,d,e;if(!1===c._trigger("beforeClose",b))return;return c.overlay&amp;&amp;c.overlay.destroy(),c.uiDialog.unbind("keypress.ui-dialog"),c._isOpen=!1,c.options.hide?c.uiDialog.hide(c.options.hide,function(){c._trigger("close",b)}):(c.uiDialog.hide(),c._trigger("close",b)),a.ui.dialog.overlay.resize(),c.options.modal&amp;&amp;(d=0,a(".ui-dialog").each(function(){this!==c.uiDialog[0]&amp;&amp;(e=a(this).css("z-index"),isNaN(e)||(d=Math.max(d,e)))}),a.ui.dialog.maxZ=d),c},isOpen:function(){return this._isOpen},moveToTop:function(b,c){var d=this,e=d.options,f;return e.modal&amp;&amp;!b||!e.stack&amp;&amp;!e.modal?d._trigger("focus",c):(e.zIndex&gt;a.ui.dialog.maxZ&amp;&amp;(a.ui.dialog.maxZ=e.zIndex),d.overlay&amp;&amp;(a.ui.dialog.maxZ+=1,d.overlay.$el.css("z-index",a.ui.dialog.overlay.maxZ=a.ui.dialog.maxZ)),f={scrollTop:d.element.scrollTop(),scrollLeft:d.element.scrollLeft()},a.ui.dialog.maxZ+=1,d.uiDialog.css("z-index",a.ui.dialog.maxZ),d.element.attr(f),d._trigger("focus",c),d)},open:function(){if(this._isOpen)return;var b=this,c=b.options,d=b.uiDialog;return b.overlay=c.modal?new a.ui.dialog.overlay(b):null,b._size(),b._position(c.position),d.show(c.show),b.moveToTop(!0),c.modal&amp;&amp;d.bind("keydown.ui-dialog",function(b){if(b.keyCode!==a.ui.keyCode.TAB)return;var c=a(":tabbable",this),d=c.filter(":first"),e=c.filter(":last");if(b.target===e[0]&amp;&amp;!b.shiftKey)return d.focus(1),!1;if(b.target===d[0]&amp;&amp;b.shiftKey)return e.focus(1),!1}),a(b.element.find(":tabbable").get().concat(d.find(".ui-dialog-buttonpane :tabbable").get().concat(d.get()))).eq(0).focus(),b._isOpen=!0,b._trigger("open"),b},_createButtons:function(b){var c=this,d=!1,e=a("&lt;div&gt;&lt;/div&gt;").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),f=a("&lt;div&gt;&lt;/div&gt;").addClass("ui-dialog-buttonset").appendTo(e);c.uiDialog.find(".ui-dialog-buttonpane").remove(),typeof b=="object"&amp;&amp;b!==null&amp;&amp;a.each(b,function(){return!(d=!0)}),d&amp;&amp;(a.each(b,function(b,d){d=a.isFunction(d)?{click:d,text:b}:d;var e=a('&lt;button type="button"&gt;&lt;/button&gt;').click(function(){d.click.apply(c.element[0],arguments)}).appendTo(f);a.each(d,function(a,b){if(a==="click")return;a in e?e[a](b):e.attr(a,b)}),a.fn.button&amp;&amp;e.button()}),e.appendTo(c.uiDialog))},_makeDraggable:function(){function f(a){return{position:a.position,offset:a.offset}}var b=this,c=b.options,d=a(document),e;b.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(d,g){e=c.height==="auto"?"auto":a(this).height(),a(this).height(a(this).height()).addClass("ui-dialog-dragging"),b._trigger("dragStart",d,f(g))},drag:function(a,c){b._trigger("drag",a,f(c))},stop:function(g,h){c.position=[h.position.left-d.scrollLeft(),h.position.top-d.scrollTop()],a(this).removeClass("ui-dialog-dragging").height(e),b._trigger("dragStop",g,f(h)),a.ui.dialog.overlay.resize()}})},_makeResizable:function(c){function h(a){return{originalPosition:a.originalPosition,originalSize:a.originalSize,position:a.position,size:a.size}}c=c===b?this.options.resizable:c;var d=this,e=d.options,f=d.uiDialog.css("position"),g=typeof c=="string"?c:"n,e,s,w,se,sw,ne,nw";d.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:d.element,maxWidth:e.maxWidth,maxHeight:e.maxHeight,minWidth:e.minWidth,minHeight:d._minHeight(),handles:g,start:function(b,c){a(this).addClass("ui-dialog-resizing"),d._trigger("resizeStart",b,h(c))},resize:function(a,b){d._trigger("resize",a,h(b))},stop:function(b,c){a(this).removeClass("ui-dialog-resizing"),e.height=a(this).height(),e.width=a(this).width(),d._trigger("resizeStop",b,h(c)),a.ui.dialog.overlay.resize()}}).css("position",f).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")},_minHeight:function(){var a=this.options;return a.height==="auto"?a.minHeight:Math.min(a.minHeight,a.height)},_position:function(b){var c=[],d=[0,0],e;if(b){if(typeof b=="string"||typeof b=="object"&amp;&amp;"0"in b)c=b.split?b.split(" "):[b[0],b[1]],c.length===1&amp;&amp;(c[1]=c[0]),a.each(["left","top"],function(a,b){+c[a]===c[a]&amp;&amp;(d[a]=c[a],c[a]=b)}),b={my:c.join(" "),at:c.join(" "),offset:d.join(" ")};b=a.extend({},a.ui.dialog.prototype.options.position,b)}else b=a.ui.dialog.prototype.options.position;e=this.uiDialog.is(":visible"),e||this.uiDialog.show(),this.uiDialog.css({top:0,left:0}).position(a.extend({of:window},b)),e||this.uiDialog.hide()},_setOptions:function(b){var c=this,f={},g=!1;a.each(b,function(a,b){c._setOption(a,b),a in d&amp;&amp;(g=!0),a in e&amp;&amp;(f[a]=b)}),g&amp;&amp;this._size(),this.uiDialog.is(":data(resizable)")&amp;&amp;this.uiDialog.resizable("option",f)},_setOption:function(b,d){var e=this,f=e.uiDialog;switch(b){case"beforeclose":b="beforeClose";break;case"buttons":e._createButtons(d);break;case"closeText":e.uiDialogTitlebarCloseText.text(""+d);break;case"dialogClass":f.removeClass(e.options.dialogClass).addClass(c+d);break;case"disabled":d?f.addClass("ui-dialog-disabled"):f.removeClass("ui-dialog-disabled");break;case"draggable":var g=f.is(":data(draggable)");g&amp;&amp;!d&amp;&amp;f.draggable("destroy"),!g&amp;&amp;d&amp;&amp;e._makeDraggable();break;case"position":e._position(d);break;case"resizable":var h=f.is(":data(resizable)");h&amp;&amp;!d&amp;&amp;f.resizable("destroy"),h&amp;&amp;typeof d=="string"&amp;&amp;f.resizable("option","handles",d),!h&amp;&amp;d!==!1&amp;&amp;e._makeResizable(d);break;case"title":a(".ui-dialog-title",e.uiDialogTitlebar).html(""+(d||"&amp;#160;"))}a.Widget.prototype._setOption.apply(e,arguments)},_size:function(){var b=this.options,c,d,e=this.uiDialog.is(":visible");this.element.show().css({width:"auto",minHeight:0,height:0}),b.minWidth&gt;b.width&amp;&amp;(b.width=b.minWidth),c=this.uiDialog.css({height:"auto",width:b.width}).height(),d=Math.max(0,b.minHeight-c);if(b.height==="auto")if(a.support.minHeight)this.element.css({minHeight:d,height:"auto"});else{this.uiDialog.show();var f=this.element.css("height","auto").height();e||this.uiDialog.hide(),this.element.height(Math.max(f,d))}else this.element.height(Math.max(b.height-c,0));this.uiDialog.is(":data(resizable)")&amp;&amp;this.uiDialog.resizable("option","minHeight",this._minHeight())}}),a.extend(a.ui.dialog,{version:"1.8.24",uuid:0,maxZ:0,getTitleId:function(a){var b=a.attr("id");return b||(this.uuid+=1,b=this.uuid),"ui-dialog-title-"+b},overlay:function(b){this.$el=a.ui.dialog.overlay.create(b)}}),a.extend(a.ui.dialog.overlay,{instances:[],oldInstances:[],maxZ:0,events:a.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function(a){return a+".dialog-overlay"}).join(" "),create:function(b){this.instances.length===0&amp;&amp;(setTimeout(function(){a.ui.dialog.overlay.instances.length&amp;&amp;a(document).bind(a.ui.dialog.overlay.events,function(b){if(a(b.target).zIndex()&lt;a.ui.dialog.overlay.maxZ)return!1})},1),a(document).bind("keydown.dialog-overlay",function(c){b.options.closeOnEscape&amp;&amp;!c.isDefaultPrevented()&amp;&amp;c.keyCode&amp;&amp;c.keyCode===a.ui.keyCode.ESCAPE&amp;&amp;(b.close(c),c.preventDefault())}),a(window).bind("resize.dialog-overlay",a.ui.dialog.overlay.resize));var c=(this.oldInstances.pop()||a("&lt;div&gt;&lt;/div&gt;").addClass("ui-widget-overlay")).appendTo(document.body).css({width:this.width(),height:this.height()});return a.fn.bgiframe&amp;&amp;c.bgiframe(),this.instances.push(c),c},destroy:function(b){var c=a.inArray(b,this.instances);c!=-1&amp;&amp;this.oldInstances.push(this.instances.splice(c,1)[0]),this.instances.length===0&amp;&amp;a([document,window]).unbind(".dialog-overlay"),b.remove();var d=0;a.each(this.instances,function(){d=Math.max(d,this.css("z-index"))}),this.maxZ=d},height:function(){var b,c;return a.browser.msie&amp;&amp;a.browser.version&lt;7?(b=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),c=Math.max(document.documentElement.offsetHeight,document.body.offsetHeight),b&lt;c?a(window).height()+"px":b+"px"):a(document).height()+"px"},width:function(){var b,c;return a.browser.msie?(b=Math.max(document.documentElement.scrollWidth,document.body.scrollWidth),c=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth),b&lt;c?a(window).width()+"px":b+"px"):a(document).width()+"px"},resize:function(){var b=a([]);a.each(a.ui.dialog.overlay.instances,function(){b=b.add(this)}),b.css({width:0,height:0}).css({width:a.ui.dialog.overlay.width(),height:a.ui.dialog.overlay.height()})}}),a.extend(a.ui.dialog.overlay.prototype,{destroy:function(){a.ui.dialog.overlay.destroy(this.$el)}})}(jQuery),function(a,b){a.ui=a.ui||{};var c=/left|center|right/,d=/top|center|bottom/,e="center",f={},g=a.fn.position,h=a.fn.offset;a.fn.position=function(b){if(!b||!b.of)return g.apply(this,arguments);b=a.extend({},b);var h=a(b.of),i=h[0],j=(b.collision||"flip").split(" "),k=b.offset?b.offset.split(" "):[0,0],l,m,n;return i.nodeType===9?(l=h.width(),m=h.height(),n={top:0,left:0}):i.setTimeout?(l=h.width(),m=h.height(),n={top:h.scrollTop(),left:h.scrollLeft()}):i.preventDefault?(b.at="left top",l=m=0,n={top:b.of.pageY,left:b.of.pageX}):(l=h.outerWidth(),m=h.outerHeight(),n=h.offset()),a.each(["my","at"],function(){var a=(b[this]||"").split(" ");a.length===1&amp;&amp;(a=c.test(a[0])?a.concat([e]):d.test(a[0])?[e].concat(a):[e,e]),a[0]=c.test(a[0])?a[0]:e,a[1]=d.test(a[1])?a[1]:e,b[this]=a}),j.length===1&amp;&amp;(j[1]=j[0]),k[0]=parseInt(k[0],10)||0,k.length===1&amp;&amp;(k[1]=k[0]),k[1]=parseInt(k[1],10)||0,b.at[0]==="right"?n.left+=l:b.at[0]===e&amp;&amp;(n.left+=l/2),b.at[1]==="bottom"?n.top+=m:b.at[1]===e&amp;&amp;(n.top+=m/2),n.left+=k[0],n.top+=k[1],this.each(function(){var c=a(this),d=c.outerWidth(),g=c.outerHeight(),h=parseInt(a.curCSS(this,"marginLeft",!0))||0,i=parseInt(a.curCSS(this,"marginTop",!0))||0,o=d+h+(parseInt(a.curCSS(this,"marginRight",!0))||0),p=g+i+(parseInt(a.curCSS(this,"marginBottom",!0))||0),q=a.extend({},n),r;b.my[0]==="right"?q.left-=d:b.my[0]===e&amp;&amp;(q.left-=d/2),b.my[1]==="bottom"?q.top-=g:b.my[1]===e&amp;&amp;(q.top-=g/2),f.fractions||(q.left=Math.round(q.left),q.top=Math.round(q.top)),r={left:q.left-h,top:q.top-i},a.each(["left","top"],function(c,e){a.ui.position[j[c]]&amp;&amp;a.ui.position[j[c]][e](q,{targetWidth:l,targetHeight:m,elemWidth:d,elemHeight:g,collisionPosition:r,collisionWidth:o,collisionHeight:p,offset:k,my:b.my,at:b.at})}),a.fn.bgiframe&amp;&amp;c.bgiframe(),c.offset(a.extend(q,{using:b.using}))})},a.ui.position={fit:{left:function(b,c){var d=a(window),e=c.collisionPosition.left+c.collisionWidth-d.width()-d.scrollLeft();b.left=e&gt;0?b.left-e:Math.max(b.left-c.collisionPosition.left,b.left)},top:function(b,c){var d=a(window),e=c.collisionPosition.top+c.collisionHeight-d.height()-d.scrollTop();b.top=e&gt;0?b.top-e:Math.max(b.top-c.collisionPosition.top,b.top)}},flip:{left:function(b,c){if(c.at[0]===e)return;var d=a(window),f=c.collisionPosition.left+c.collisionWidth-d.width()-d.scrollLeft(),g=c.my[0]==="left"?-c.elemWidth:c.my[0]==="right"?c.elemWidth:0,h=c.at[0]==="left"?c.targetWidth:-c.targetWidth,i=-2*c.offset[0];b.left+=c.collisionPosition.left&lt;0?g+h+i:f&gt;0?g+h+i:0},top:function(b,c){if(c.at[1]===e)return;var d=a(window),f=c.collisionPosition.top+c.collisionHeight-d.height()-d.scrollTop(),g=c.my[1]==="top"?-c.elemHeight:c.my[1]==="bottom"?c.elemHeight:0,h=c.at[1]==="top"?c.targetHeight:-c.targetHeight,i=-2*c.offset[1];b.top+=c.collisionPosition.top&lt;0?g+h+i:f&gt;0?g+h+i:0}}},a.offset.setOffset||(a.offset.setOffset=function(b,c){/static/.test(a.curCSS(b,"position"))&amp;&amp;(b.style.position="relative");var d=a(b),e=d.offset(),f=parseInt(a.curCSS(b,"top",!0),10)||0,g=parseInt(a.curCSS(b,"left",!0),10)||0,h={top:c.top-e.top+f,left:c.left-e.left+g};"using"in c?c.using.call(b,h):d.css(h)},a.fn.offset=function(b){var c=this[0];return!c||!c.ownerDocument?null:b?a.isFunction(b)?this.each(function(c){a(this).offset(b.call(this,c,a(this).offset()))}):this.each(function(){a.offset.setOffset(this,b)}):h.call(this)}),a.curCSS||(a.curCSS=a.css),function(){var b=document.getElementsByTagName("body")[0],c=document.createElement("div"),d,e,g,h,i;d=document.createElement(b?"div":"body"),g={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},b&amp;&amp;a.extend(g,{position:"absolute",left:"-1000px",top:"-1000px"});for(var j in g)d.style[j]=g[j];d.appendChild(c),e=b||document.documentElement,e.insertBefore(d,e.firstChild),c.style.cssText="position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;",h=a(c).offset(function(a,b){return b}).offset(),d.innerHTML="",e.removeChild(d),i=h.top+h.left+(b?2e3:0),f.fractions=i&gt;21&amp;&amp;i&lt;22}()}(jQuery),function(a,b){a.widget("ui.progressbar",{options:{value:0,max:100},min:0,_create:function(){this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min,"aria-valuemax":this.options.max,"aria-valuenow":this._value()}),this.valueDiv=a("&lt;div class='ui-progressbar-value ui-widget-header ui-corner-left'&gt;&lt;/div&gt;").appendTo(this.element),this.oldValue=this._value(),this._refreshValue()},destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove(),a.Widget.prototype.destroy.apply(this,arguments)},value:function(a){return a===b?this._value():(this._setOption("value",a),this)},_setOption:function(b,c){b==="value"&amp;&amp;(this.options.value=c,this._refreshValue(),this._value()===this.options.max&amp;&amp;this._trigger("complete")),a.Widget.prototype._setOption.apply(this,arguments)},_value:function(){var a=this.options.value;return typeof a!="number"&amp;&amp;(a=0),Math.min(this.options.max,Math.max(this.min,a))},_percentage:function(){return 100*this._value()/this.options.max},_refreshValue:function(){var a=this.value(),b=this._percentage();this.oldValue!==a&amp;&amp;(this.oldValue=a,this._trigger("change")),this.valueDiv.toggle(a&gt;this.min).toggleClass("ui-corner-right",a===this.options.max).width(b.toFixed(0)+"%"),this.element.attr("aria-valuenow",a)}}),a.extend(a.ui.progressbar,{version:"1.8.24"})}(jQuery),function(a,b){var c=5;a.widget("ui.slider",a.ui.mouse,{widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null},_create:function(){var b=this,d=this.options,e=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),f="&lt;a class='ui-slider-handle ui-state-default ui-corner-all' href='#'&gt;&lt;/a&gt;",g=d.values&amp;&amp;d.values.length||1,h=[];this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"+(d.disabled?" ui-slider-disabled ui-disabled":"")),this.range=a([]),d.range&amp;&amp;(d.range===!0&amp;&amp;(d.values||(d.values=[this._valueMin(),this._valueMin()]),d.values.length&amp;&amp;d.values.length!==2&amp;&amp;(d.values=[d.values[0],d.values[0]])),this.range=a("&lt;div&gt;&lt;/div&gt;").appendTo(this.element).addClass("ui-slider-range ui-widget-header"+(d.range==="min"||d.range==="max"?" ui-slider-range-"+d.range:"")));for(var i=e.length;i&lt;g;i+=1)h.push(f);this.handles=e.add(a(h.join("")).appendTo(b.element)),this.handle=this.handles.eq(0),this.handles.add(this.range).filter("a").click(function(a){a.preventDefault()}).hover(function(){d.disabled||a(this).addClass("ui-state-hover")},function(){a(this).removeClass("ui-state-hover")}).focus(function(){d.disabled?a(this).blur():(a(".ui-slider .ui-state-focus").removeClass("ui-state-focus"),a(this).addClass("ui-state-focus"))}).blur(function(){a(this).removeClass("ui-state-focus")}),this.handles.each(function(b){a(this).data("index.ui-slider-handle",b)}),this.handles.keydown(function(d){var e=a(this).data("index.ui-slider-handle"),f,g,h,i;if(b.options.disabled)return;switch(d.keyCode){case a.ui.keyCode.HOME:case a.ui.keyCode.END:case a.ui.keyCode.PAGE_UP:case a.ui.keyCode.PAGE_DOWN:case a.ui.keyCode.UP:case a.ui.keyCode.RIGHT:case a.ui.keyCode.DOWN:case a.ui.keyCode.LEFT:d.preventDefault();if(!b._keySliding){b._keySliding=!0,a(this).addClass("ui-state-active"),f=b._start(d,e);if(f===!1)return}}i=b.options.step,b.options.values&amp;&amp;b.options.values.length?g=h=b.values(e):g=h=b.value();switch(d.keyCode){case a.ui.keyCode.HOME:h=b._valueMin();break;case a.ui.keyCode.END:h=b._valueMax();break;case a.ui.keyCode.PAGE_UP:h=b._trimAlignValue(g+(b._valueMax()-b._valueMin())/c);break;case a.ui.keyCode.PAGE_DOWN:h=b._trimAlignValue(g-(b._valueMax()-b._valueMin())/c);break;case a.ui.keyCode.UP:case a.ui.keyCode.RIGHT:if(g===b._valueMax())return;h=b._trimAlignValue(g+i);break;case a.ui.keyCode.DOWN:case a.ui.keyCode.LEFT:if(g===b._valueMin())return;h=b._trimAlignValue(g-i)}b._slide(d,e,h)}).keyup(function(c){var d=a(this).data("index.ui-slider-handle");b._keySliding&amp;&amp;(b._keySliding=!1,b._stop(c,d),b._change(c,d),a(this).removeClass("ui-state-active"))}),this._refreshValue(),this._animateOff=!1},destroy:function(){return this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider"),this._mouseDestroy(),this},_mouseCapture:function(b){var c=this.options,d,e,f,g,h,i,j,k,l;return c.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),d={x:b.pageX,y:b.pageY},e=this._normValueFromMouse(d),f=this._valueMax()-this._valueMin()+1,h=this,this.handles.each(function(b){var c=Math.abs(e-h.values(b));f&gt;c&amp;&amp;(f=c,g=a(this),i=b)}),c.range===!0&amp;&amp;this.values(1)===c.min&amp;&amp;(i+=1,g=a(this.handles[i])),j=this._start(b,i),j===!1?!1:(this._mouseSliding=!0,h._handleIndex=i,g.addClass("ui-state-active").focus(),k=g.offset(),l=!a(b.target).parents().andSelf().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:b.pageX-k.left-g.width()/2,top:b.pageY-k.top-g.height()/2-(parseInt(g.css("borderTopWidth"),10)||0)-(parseInt(g.css("borderBottomWidth"),10)||0)+(parseInt(g.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(b,i,e),this._animateOff=!0,!0))},_mouseStart:function(a){return!0},_mouseDrag:function(a){var b={x:a.pageX,y:a.pageY},c=this._normValueFromMouse(b);return this._slide(a,this._handleIndex,c),!1},_mouseStop:function(a){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(a,this._handleIndex),this._change(a,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation=this.options.orientation==="vertical"?"vertical":"horizontal"},_normValueFromMouse:function(a){var b,c,d,e,f;return this.orientation==="horizontal"?(b=this.elementSize.width,c=a.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(b=this.elementSize.height,c=a.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),d=c/b,d&gt;1&amp;&amp;(d=1),d&lt;0&amp;&amp;(d=0),this.orientation==="vertical"&amp;&amp;(d=1-d),e=this._valueMax()-this._valueMin(),f=this._valueMin()+d*e,this._trimAlignValue(f)},_start:function(a,b){var c={handle:this.handles[b],value:this.value()};return this.options.values&amp;&amp;this.options.values.length&amp;&amp;(c.value=this.values(b),c.values=this.values()),this._trigger("start",a,c)},_slide:function(a,b,c){var d,e,f;this.options.values&amp;&amp;this.options.values.length?(d=this.values(b?0:1),this.options.values.length===2&amp;&amp;this.options.range===!0&amp;&amp;(b===0&amp;&amp;c&gt;d||b===1&amp;&amp;c&lt;d)&amp;&amp;(c=d),c!==this.values(b)&amp;&amp;(e=this.values(),e[b]=c,f=this._trigger("slide",a,{handle:this.handles[b],value:c,values:e}),d=this.values(b?0:1),f!==!1&amp;&amp;this.values(b,c,!0))):c!==this.value()&amp;&amp;(f=this._trigger("slide",a,{handle:this.handles[b],value:c}),f!==!1&amp;&amp;this.value(c))},_stop:function(a,b){var c={handle:this.handles[b],value:this.value()};this.options.values&amp;&amp;this.options.values.length&amp;&amp;(c.value=this.values(b),c.values=this.values()),this._trigger("stop",a,c)},_change:function(a,b){if(!this._keySliding&amp;&amp;!this._mouseSliding){var c={handle:this.handles[b],value:this.value()};this.options.values&amp;&amp;this.options.values.length&amp;&amp;(c.value=this.values(b),c.values=this.values()),this._trigger("change",a,c)}},value:function(a){if(arguments.length){this.options.value=this._trimAlignValue(a),this._refreshValue(),this._change(null,0);return}return this._value()},values:function(b,c){var d,e,f;if(arguments.length&gt;1){this.options.values[b]=this._trimAlignValue(c),this._refreshValue(),this._change(null,b);return}if(!arguments.length)return this._values();if(!a.isArray(arguments[0]))return this.options.values&amp;&amp;this.options.values.length?this._values(b):this.value();d=this.options.values,e=arguments[0];for(f=0;f&lt;d.length;f+=1)d[f]=this._trimAlignValue(e[f]),this._change(null,f);this._refreshValue()},_setOption:function(b,c){var d,e=0;a.isArray(this.options.values)&amp;&amp;(e=this.options.values.length),a.Widget.prototype._setOption.apply(this,arguments);switch(b){case"disabled":c?(this.handles.filter(".ui-state-focus").blur(),this.handles.removeClass("ui-state-hover"),this.handles.propAttr("disabled",!0),this.element.addClass("ui-disabled")):(this.handles.propAttr("disabled",!1),this.element.removeClass("ui-disabled"));break;case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":this._animateOff=!0,this._refreshValue();for(d=0;d&lt;e;d+=1)this._change(null,d);this._animateOff=!1}},_value:function(){var a=this.options.value;return a=this._trimAlignValue(a),a},_values:function(a){var b,c,d;if(arguments.length)return b=this.options.values[a],b=this._trimAlignValue(b),b;c=this.options.values.slice();for(d=0;d&lt;c.length;d+=1)c[d]=this._trimAlignValue(c[d]);return c},_trimAlignValue:function(a){if(a&lt;=this._valueMin())return this._valueMin();if(a&gt;=this._valueMax())return this._valueMax();var b=this.options.step&gt;0?this.options.step:1,c=(a-this._valueMin())%b,d=a-c;return Math.abs(c)*2&gt;=b&amp;&amp;(d+=c&gt;0?b:-b),parseFloat(d.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var b=this.options.range,c=this.options,d=this,e=this._animateOff?!1:c.animate,f,g={},h,i,j,k;this.options.values&amp;&amp;this.options.values.length?this.handles.each(function(b,i){f=(d.values(b)-d._valueMin())/(d._valueMax()-d._valueMin())*100,g[d.orientation==="horizontal"?"left":"bottom"]=f+"%",a(this).stop(1,1)[e?"animate":"css"](g,c.animate),d.options.range===!0&amp;&amp;(d.orientation==="horizontal"?(b===0&amp;&amp;d.range.stop(1,1)[e?"animate":"css"]({left:f+"%"},c.animate),b===1&amp;&amp;d.range[e?"animate":"css"]({width:f-h+"%"},{queue:!1,duration:c.animate})):(b===0&amp;&amp;d.range.stop(1,1)[e?"animate":"css"]({bottom:f+"%"},c.animate),b===1&amp;&amp;d.range[e?"animate":"css"]({height:f-h+"%"},{queue:!1,duration:c.animate}))),h=f}):(i=this.value(),j=this._valueMin(),k=this._valueMax(),f=k!==j?(i-j)/(k-j)*100:0,g[d.orientation==="horizontal"?"left":"bottom"]=f+"%",this.handle.stop(1,1)[e?"animate":"css"](g,c.animate),b==="min"&amp;&amp;this.orientation==="horizontal"&amp;&amp;this.range.stop(1,1)[e?"animate":"css"]({width:f+"%"},c.animate),b==="max"&amp;&amp;this.orientation==="horizontal"&amp;&amp;this.range[e?"animate":"css"]({width:100-f+"%"},{queue:!1,duration:c.animate}),b==="min"&amp;&amp;this.orientation==="vertical"&amp;&amp;this.range.stop(1,1)[e?"animate":"css"]({height:f+"%"},c.animate),b==="max"&amp;&amp;this.orientation==="vertical"&amp;&amp;this.range[e?"animate":"css"]({height:100-f+"%"},{queue:!1,duration:c.animate}))}}),a.extend(a.ui.slider,{version:"1.8.24"})}(jQuery),function(a,b){function e(){return++c}function f(){return++d}var c=0,d=0;a.widget("ui.tabs",{options:{add:null,ajaxOptions:null,cache:!1,cookie:null,collapsible:!1,disable:null,disabled:[],enable:null,event:"click",fx:null,idPrefix:"ui-tabs-",load:null,panelTemplate:"&lt;div&gt;&lt;/div&gt;",remove:null,select:null,show:null,spinner:"&lt;em&gt;Loading&amp;#8230;&lt;/em&gt;",tabTemplate:"&lt;li&gt;&lt;a href='#{href}'&gt;&lt;span&gt;#{label}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;"},_create:function(){this._tabify(!0)},_setOption:function(a,b){if(a=="selected"){if(this.options.collapsible&amp;&amp;b==this.options.selected)return;this.select(b)}else this.options[a]=b,this._tabify()},_tabId:function(a){return a.title&amp;&amp;a.title.replace(/\s/g,"_").replace(/[^\w\u00c0-\uFFFF-]/g,"")||this.options.idPrefix+e()},_sanitizeSelector:function(a){return a.replace(/:/g,"\\:")},_cookie:function(){var b=this.cookie||(this.cookie=this.options.cookie.name||"ui-tabs-"+f());return a.cookie.apply(null,[b].concat(a.makeArray(arguments)))},_ui:function(a,b){return{tab:a,panel:b,index:this.anchors.index(a)}},_cleanup:function(){this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function(){var b=a(this);b.html(b.data("label.tabs")).removeData("label.tabs")})},_tabify:function(c){function m(b,c){b.css("display",""),!a.support.opacity&amp;&amp;c.opacity&amp;&amp;b[0].style.removeAttribute("filter")}var d=this,e=this.options,f=/^#.+/;this.list=this.element.find("ol,ul").eq(0),this.lis=a(" &gt; li:has(a[href])",this.list),this.anchors=this.lis.map(function(){return a("a",this)[0]}),this.panels=a([]),this.anchors.each(function(b,c){var g=a(c).attr("href"),h=g.split("#")[0],i;h&amp;&amp;(h===location.toString().split("#")[0]||(i=a("base")[0])&amp;&amp;h===i.href)&amp;&amp;(g=c.hash,c.href=g);if(f.test(g))d.panels=d.panels.add(d.element.find(d._sanitizeSelector(g)));else if(g&amp;&amp;g!=="#"){a.data(c,"href.tabs",g),a.data(c,"load.tabs",g.replace(/#.*$/,""));var j=d._tabId(c);c.href="#"+j;var k=d.element.find("#"+j);k.length||(k=a(e.panelTemplate).attr("id",j).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(d.panels[b-1]||d.list),k.data("destroy.tabs",!0)),d.panels=d.panels.add(k)}else e.disabled.push(b)}),c?(this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all"),this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"),this.lis.addClass("ui-state-default ui-corner-top"),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom"),e.selected===b?(location.hash&amp;&amp;this.anchors.each(function(a,b){if(b.hash==location.hash)return e.selected=a,!1}),typeof e.selected!="number"&amp;&amp;e.cookie&amp;&amp;(e.selected=parseInt(d._cookie(),10)),typeof e.selected!="number"&amp;&amp;this.lis.filter(".ui-tabs-selected").length&amp;&amp;(e.selected=this.lis.index(this.lis.filter(".ui-tabs-selected"))),e.selected=e.selected||(this.lis.length?0:-1)):e.selected===null&amp;&amp;(e.selected=-1),e.selected=e.selected&gt;=0&amp;&amp;this.anchors[e.selected]||e.selected&lt;0?e.selected:0,e.disabled=a.unique(e.disabled.concat(a.map(this.lis.filter(".ui-state-disabled"),function(a,b){return d.lis.index(a)}))).sort(),a.inArray(e.selected,e.disabled)!=-1&amp;&amp;e.disabled.splice(a.inArray(e.selected,e.disabled),1),this.panels.addClass("ui-tabs-hide"),this.lis.removeClass("ui-tabs-selected ui-state-active"),e.selected&gt;=0&amp;&amp;this.anchors.length&amp;&amp;(d.element.find(d._sanitizeSelector(d.anchors[e.selected].hash)).removeClass("ui-tabs-hide"),this.lis.eq(e.selected).addClass("ui-tabs-selected ui-state-active"),d.element.queue("tabs",function(){d._trigger("show",null,d._ui(d.anchors[e.selected],d.element.find(d._sanitizeSelector(d.anchors[e.selected].hash))[0]))}),this.load(e.selected)),a(window).bind("unload",function(){d.lis.add(d.anchors).unbind(".tabs"),d.lis=d.anchors=d.panels=null})):e.selected=this.lis.index(this.lis.filter(".ui-tabs-selected")),this.element[e.collapsible?"addClass":"removeClass"]("ui-tabs-collapsible"),e.cookie&amp;&amp;this._cookie(e.selected,e.cookie);for(var g=0,h;h=this.lis[g];g++)a(h)[a.inArray(g,e.disabled)!=-1&amp;&amp;!a(h).hasClass("ui-tabs-selected")?"addClass":"removeClass"]("ui-state-disabled");e.cache===!1&amp;&amp;this.anchors.removeData("cache.tabs"),this.lis.add(this.anchors).unbind(".tabs");if(e.event!=="mouseover"){var i=function(a,b){b.is(":not(.ui-state-disabled)")&amp;&amp;b.addClass("ui-state-"+a)},j=function(a,b){b.removeClass("ui-state-"+a)};this.lis.bind("mouseover.tabs",function(){i("hover",a(this))}),this.lis.bind("mouseout.tabs",function(){j("hover",a(this))}),this.anchors.bind("focus.tabs",function(){i("focus",a(this).closest("li"))}),this.anchors.bind("blur.tabs",function(){j("focus",a(this).closest("li"))})}var k,l;e.fx&amp;&amp;(a.isArray(e.fx)?(k=e.fx[0],l=e.fx[1]):k=l=e.fx);var n=l?function(b,c){a(b).closest("li").addClass("ui-tabs-selected ui-state-active"),c.hide().removeClass("ui-tabs-hide").animate(l,l.duration||"normal",function(){m(c,l),d._trigger("show",null,d._ui(b,c[0]))})}:function(b,c){a(b).closest("li").addClass("ui-tabs-selected ui-state-active"),c.removeClass("ui-tabs-hide"),d._trigger("show",null,d._ui(b,c[0]))},o=k?function(a,b){b.animate(k,k.duration||"normal",function(){d.lis.removeClass("ui-tabs-selected ui-state-active"),b.addClass("ui-tabs-hide"),m(b,k),d.element.dequeue("tabs")})}:function(a,b,c){d.lis.removeClass("ui-tabs-selected ui-state-active"),b.addClass("ui-tabs-hide"),d.element.dequeue("tabs")};this.anchors.bind(e.event+".tabs",function(){var b=this,c=a(b).closest("li"),f=d.panels.filter(":not(.ui-tabs-hide)"),g=d.element.find(d._sanitizeSelector(b.hash));if(c.hasClass("ui-tabs-selected")&amp;&amp;!e.collapsible||c.hasClass("ui-state-disabled")||c.hasClass("ui-state-processing")||d.panels.filter(":animated").length||d._trigger("select",null,d._ui(this,g[0]))===!1)return this.blur(),!1;e.selected=d.anchors.index(this),d.abort();if(e.collapsible){if(c.hasClass("ui-tabs-selected"))return e.selected=-1,e.cookie&amp;&amp;d._cookie(e.selected,e.cookie),d.element.queue("tabs",function(){o(b,f)}).dequeue("tabs"),this.blur(),!1;if(!f.length)return e.cookie&amp;&amp;d._cookie(e.selected,e.cookie),d.element.queue("tabs",function(){n(b,g)}),d.load(d.anchors.index(this)),this.blur(),!1}e.cookie&amp;&amp;d._cookie(e.selected,e.cookie);if(g.length)f.length&amp;&amp;d.element.queue("tabs",function(){o(b,f)}),d.element.queue("tabs",function(){n(b,g)}),d.load(d.anchors.index(this));else throw"jQuery UI Tabs: Mismatching fragment identifier.";a.browser.msie&amp;&amp;this.blur()}),this.anchors.bind("click.tabs",function(){return!1})},_getIndex:function(a){return typeof a=="string"&amp;&amp;(a=this.anchors.index(this.anchors.filter("[href$='"+a+"']"))),a},destroy:function(){var b=this.options;return this.abort(),this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs"),this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"),this.anchors.each(function(){var b=a.data(this,"href.tabs");b&amp;&amp;(this.href=b);var c=a(this).unbind(".tabs");a.each(["href","load","cache"],function(a,b){c.removeData(b+".tabs")})}),this.lis.unbind(".tabs").add(this.panels).each(function(){a.data(this,"destroy.tabs")?a(this).remove():a(this).removeClass(["ui-state-default","ui-corner-top","ui-tabs-selected","ui-state-active","ui-state-hover","ui-state-focus","ui-state-disabled","ui-tabs-panel","ui-widget-content","ui-corner-bottom","ui-tabs-hide"].join(" "))}),b.cookie&amp;&amp;this._cookie(null,b.cookie),this},add:function(c,d,e){e===b&amp;&amp;(e=this.anchors.length);var f=this,g=this.options,h=a(g.tabTemplate.replace(/#\{href\}/g,c).replace(/#\{label\}/g,d)),i=c.indexOf("#")?this._tabId(a("a",h)[0]):c.replace("#","");h.addClass("ui-state-default ui-corner-top").data("destroy.tabs",!0);var j=f.element.find("#"+i);return j.length||(j=a(g.panelTemplate).attr("id",i).data("destroy.tabs",!0)),j.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide"),e&gt;=this.lis.length?(h.appendTo(this.list),j.appendTo(this.list[0].parentNode)):(h.insertBefore(this.lis[e]),j.insertBefore(this.panels[e])),g.disabled=a.map(g.disabled,function(a,b){return a&gt;=e?++a:a}),this._tabify(),this.anchors.length==1&amp;&amp;(g.selected=0,h.addClass("ui-tabs-selected ui-state-active"),j.removeClass("ui-tabs-hide"),this.element.queue("tabs",function(){f._trigger("show",null,f._ui(f.anchors[0],f.panels[0]))}),this.load(0)),this._trigger("add",null,this._ui(this.anchors[e],this.panels[e])),this},remove:function(b){b=this._getIndex(b);var c=this.options,d=this.lis.eq(b).remove(),e=this.panels.eq(b).remove();return d.hasClass("ui-tabs-selected")&amp;&amp;this.anchors.length&gt;1&amp;&amp;this.select(b+(b+1&lt;this.anchors.length?1:-1)),c.disabled=a.map(a.grep(c.disabled,function(a,c){return a!=b}),function(a,c){return a&gt;=b?--a:a}),this._tabify(),this._trigger("remove",null,this._ui(d.find("a")[0],e[0])),this},enable:function(b){b=this._getIndex(b);var c=this.options;if(a.inArray(b,c.disabled)==-1)return;return this.lis.eq(b).removeClass("ui-state-disabled"),c.disabled=a.grep(c.disabled,function(a,c){return a!=b}),this._trigger("enable",null,this._ui(this.anchors[b],this.panels[b])),this},disable:function(a){a=this._getIndex(a);var b=this,c=this.options;return a!=c.selected&amp;&amp;(this.lis.eq(a).addClass("ui-state-disabled"),c.disabled.push(a),c.disabled.sort(),this._trigger("disable",null,this._ui(this.anchors[a],this.panels[a]))),this},select:function(a){a=this._getIndex(a);if(a==-1)if(this.options.collapsible&amp;&amp;this.options.selected!=-1)a=this.options.selected;else return this;return this.anchors.eq(a).trigger(this.options.event+".tabs"),this},load:function(b){b=this._getIndex(b);var c=this,d=this.options,e=this.anchors.eq(b)[0],f=a.data(e,"load.tabs");this.abort();if(!f||this.element.queue("tabs").length!==0&amp;&amp;a.data(e,"cache.tabs")){this.element.dequeue("tabs");return}this.lis.eq(b).addClass("ui-state-processing");if(d.spinner){var g=a("span",e);g.data("label.tabs",g.html()).html(d.spinner)}return this.xhr=a.ajax(a.extend({},d.ajaxOptions,{url:f,success:function(f,g){c.element.find(c._sanitizeSelector(e.hash)).html(f),c._cleanup(),d.cache&amp;&amp;a.data(e,"cache.tabs",!0),c._trigger("load",null,c._ui(c.anchors[b],c.panels[b]));try{d.ajaxOptions.success(f,g)}catch(h){}},error:function(a,f,g){c._cleanup(),c._trigger("load",null,c._ui(c.anchors[b],c.panels[b]));try{d.ajaxOptions.error(a,f,b,e)}catch(g){}}})),c.element.dequeue("tabs"),this},abort:function(){return this.element.queue([]),this.panels.stop(!1,!0),this.element.queue("tabs",this.element.queue("tabs").splice(-2,2)),this.xhr&amp;&amp;(this.xhr.abort(),delete this.xhr),this._cleanup(),this},url:function(a,b){return this.anchors.eq(a).removeData("cache.tabs").data("load.tabs",b),this},length:function(){return this.anchors.length}}),a.extend(a.ui.tabs,{version:"1.8.24"}),a.extend(a.ui.tabs.prototype,{rotation:null,rotate:function(a,b){var c=this,d=this.options,e=c._rotate||(c._rotate=function(b){clearTimeout(c.rotation),c.rotation=setTimeout(function(){var a=d.selected;c.select(++a&lt;c.anchors.length?a:0)},a),b&amp;&amp;b.stopPropagation()}),f=c._unrotate||(c._unrotate=b?function(a){e()}:function(a){a.clientX&amp;&amp;c.rotate(null)});return a?(this.element.bind("tabsshow",e),this.anchors.bind(d.event+".tabs",f),e()):(clearTimeout(c.rotation),this.element.unbind("tabsshow",e),this.anchors.unbind(d.event+".tabs",f),delete this._rotate,delete this._unrotate),this}})}(jQuery);



Scripts/jquery.unobtrusive-ajax.js


/*!
** Unobtrusive Ajax support library for jQuery
** Copyright (C) Microsoft Corporation. All rights reserved.
*/

/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */
/*global window: false, jQuery: false */

(function ($) {
    var data_click = "unobtrusiveAjaxClick",
        data_validation = "unobtrusiveValidation";

    function getFunction(code, argNames) {
        var fn = window, parts = (code || "").split(".");
        while (fn &amp;&amp; parts.length) {
            fn = fn[parts.shift()];
        }
        if (typeof (fn) === "function") {
            return fn;
        }
        argNames.push(code);
        return Function.constructor.apply(null, argNames);
    }

    function isMethodProxySafe(method) {
        return method === "GET" || method === "POST";
    }

    function asyncOnBeforeSend(xhr, method) {
        if (!isMethodProxySafe(method)) {
            xhr.setRequestHeader("X-HTTP-Method-Override", method);
        }
    }

    function asyncOnSuccess(element, data, contentType) {
        var mode;

        if (contentType.indexOf("application/x-javascript") !== -1) {  // jQuery already executes JavaScript for us
            return;
        }

        mode = (element.getAttribute("data-ajax-mode") || "").toUpperCase();
        $(element.getAttribute("data-ajax-update")).each(function (i, update) {
            var top;

            switch (mode) {
            case "BEFORE":
                top = update.firstChild;
                $("&lt;div /&gt;").html(data).contents().each(function () {
                    update.insertBefore(this, top);
                });
                break;
            case "AFTER":
                $("&lt;div /&gt;").html(data).contents().each(function () {
                    update.appendChild(this);
                });
                break;
            default:
                $(update).html(data);
                break;
            }
        });
    }

    function asyncRequest(element, options) {
        var confirm, loading, method, duration;

        confirm = element.getAttribute("data-ajax-confirm");
        if (confirm &amp;&amp; !window.confirm(confirm)) {
            return;
        }

        loading = $(element.getAttribute("data-ajax-loading"));
        duration = element.getAttribute("data-ajax-loading-duration") || 0;

        $.extend(options, {
            type: element.getAttribute("data-ajax-method") || undefined,
            url: element.getAttribute("data-ajax-url") || undefined,
            beforeSend: function (xhr) {
                var result;
                asyncOnBeforeSend(xhr, method);
                result = getFunction(element.getAttribute("data-ajax-begin"), ["xhr"]).apply(this, arguments);
                if (result !== false) {
                    loading.show(duration);
                }
                return result;
            },
            complete: function () {
                loading.hide(duration);
                getFunction(element.getAttribute("data-ajax-complete"), ["xhr", "status"]).apply(this, arguments);
            },
            success: function (data, status, xhr) {
                asyncOnSuccess(element, data, xhr.getResponseHeader("Content-Type") || "text/html");
                getFunction(element.getAttribute("data-ajax-success"), ["data", "status", "xhr"]).apply(this, arguments);
            },
            error: getFunction(element.getAttribute("data-ajax-failure"), ["xhr", "status", "error"])
        });

        options.data.push({ name: "X-Requested-With", value: "XMLHttpRequest" });

        method = options.type.toUpperCase();
        if (!isMethodProxySafe(method)) {
            options.type = "POST";
            options.data.push({ name: "X-HTTP-Method-Override", value: method });
        }

        $.ajax(options);
    }

    function validate(form) {
        var validationInfo = $(form).data(data_validation);
        return !validationInfo || !validationInfo.validate || validationInfo.validate();
    }

    $(document).on("click", "a[data-ajax=true]", function (evt) {
        evt.preventDefault();
        asyncRequest(this, {
            url: this.href,
            type: "GET",
            data: []
        });
    });

    $(document).on("click", "form[data-ajax=true] input[type=image]", function (evt) {
        var name = evt.target.name,
            $target = $(evt.target),
            form = $target.parents("form")[0],
            offset = $target.offset();

        $(form).data(data_click, [
            { name: name + ".x", value: Math.round(evt.pageX - offset.left) },
            { name: name + ".y", value: Math.round(evt.pageY - offset.top) }
        ]);

        setTimeout(function () {
            $(form).removeData(data_click);
        }, 0);
    });

    $(document).on("click", "form[data-ajax=true] :submit", function (evt) {
        var name = evt.target.name,
            form = $(evt.target).parents("form")[0];

        $(form).data(data_click, name ? [{ name: name, value: evt.target.value }] : []);

        setTimeout(function () {
            $(form).removeData(data_click);
        }, 0);
    });

    $(document).on("submit", "form[data-ajax=true]", function (evt) {
        var clickInfo = $(this).data(data_click) || [];
        evt.preventDefault();
        if (!validate(this)) {
            return;
        }
        asyncRequest(this, {
            url: this.action,
            type: this.method || "GET",
            data: clickInfo.concat($(this).serializeArray())
        });
    });
}(jQuery));



Scripts/jquery.unobtrusive-ajax.min.js


/*
** Unobtrusive Ajax support library for jQuery
** Copyright (C) Microsoft Corporation. All rights reserved.
*/
(function(a){var b="unobtrusiveAjaxClick",g="unobtrusiveValidation";function c(d,b){var a=window,c=(d||"").split(".");while(a&amp;&amp;c.length)a=a[c.shift()];if(typeof a==="function")return a;b.push(d);return Function.constructor.apply(null,b)}function d(a){return a==="GET"||a==="POST"}function f(b,a){!d(a)&amp;&amp;b.setRequestHeader("X-HTTP-Method-Override",a)}function h(c,b,e){var d;if(e.indexOf("application/x-javascript")!==-1)return;d=(c.getAttribute("data-ajax-mode")||"").toUpperCase();a(c.getAttribute("data-ajax-update")).each(function(f,c){var e;switch(d){case"BEFORE":e=c.firstChild;a("&lt;div /&gt;").html(b).contents().each(function(){c.insertBefore(this,e)});break;case"AFTER":a("&lt;div /&gt;").html(b).contents().each(function(){c.appendChild(this)});break;default:a(c).html(b)}})}function e(b,e){var j,k,g,i;j=b.getAttribute("data-ajax-confirm");if(j&amp;&amp;!window.confirm(j))return;k=a(b.getAttribute("data-ajax-loading"));i=b.getAttribute("data-ajax-loading-duration")||0;a.extend(e,{type:b.getAttribute("data-ajax-method")||undefined,url:b.getAttribute("data-ajax-url")||undefined,beforeSend:function(d){var a;f(d,g);a=c(b.getAttribute("data-ajax-begin"),["xhr"]).apply(this,arguments);a!==false&amp;&amp;k.show(i);return a},complete:function(){k.hide(i);c(b.getAttribute("data-ajax-complete"),["xhr","status"]).apply(this,arguments)},success:function(a,e,d){h(b,a,d.getResponseHeader("Content-Type")||"text/html");c(b.getAttribute("data-ajax-success"),["data","status","xhr"]).apply(this,arguments)},error:c(b.getAttribute("data-ajax-failure"),["xhr","status","error"])});e.data.push({name:"X-Requested-With",value:"XMLHttpRequest"});g=e.type.toUpperCase();if(!d(g)){e.type="POST";e.data.push({name:"X-HTTP-Method-Override",value:g})}a.ajax(e)}function i(c){var b=a(c).data(g);return!b||!b.validate||b.validate()}a(document).on("click","a[data-ajax=true]",function(a){a.preventDefault();e(this,{url:this.href,type:"GET",data:[]})});a(document).on("click","form[data-ajax=true] input[type=image]",function(c){var g=c.target.name,d=a(c.target),f=d.parents("form")[0],e=d.offset();a(f).data(b,[{name:g+".x",value:Math.round(c.pageX-e.left)},{name:g+".y",value:Math.round(c.pageY-e.top)}]);setTimeout(function(){a(f).removeData(b)},0)});a(document).on("click","form[data-ajax=true] :submit",function(c){var e=c.target.name,d=a(c.target).parents("form")[0];a(d).data(b,e?[{name:e,value:c.target.value}]:[]);setTimeout(function(){a(d).removeData(b)},0)});a(document).on("submit","form[data-ajax=true]",function(d){var c=a(this).data(b)||[];d.preventDefault();if(!i(this))return;e(this,{url:this.action,type:this.method||"GET",data:c.concat(a(this).serializeArray())})})})(jQuery);



Scripts/jquery.validate.js


/*! jQuery Validation Plugin - v1.10.0 - 9/7/2012
* https://github.com/jzaefferer/jquery-validation
* Copyright (c) 2012 Jrn Zaefferer; Licensed MIT */

(function($) {

$.extend($.fn, {
	// http://docs.jquery.com/Plugins/Validation/validate
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if (!this.length) {
			if (options &amp;&amp; options.debug &amp;&amp; window.console) {
				console.warn( "nothing selected, can't validate, returning nothing" );
			}
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data(this[0], 'validator');
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr('novalidate', 'novalidate');

		validator = new $.validator( options, this[0] );
		$.data(this[0], 'validator', validator);

		if ( validator.settings.onsubmit ) {

			this.validateDelegate( ":submit", "click", function(ev) {
				if ( validator.settings.submitHandler ) {
					validator.submitButton = ev.target;
				}
				// allow suppressing validation by adding a cancel class to the submit button
				if ( $(ev.target).hasClass('cancel') ) {
					validator.cancelSubmit = true;
				}
			});

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug ) {
					// prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden;
					if ( validator.settings.submitHandler ) {
						if (validator.submitButton) {
							// insert a hidden input as a replacement for the missing submit button
							hidden = $("&lt;input type='hidden'/&gt;").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
						}
						validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if (validator.submitButton) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://docs.jquery.com/Plugins/Validation/valid
	valid: function() {
		if ( $(this[0]).is('form')) {
			return this.validate().form();
		} else {
			var valid = true;
			var validator = $(this[0].form).validate();
			this.each(function() {
				valid &amp;= validator.element(this);
			});
			return valid;
		}
	},
	// attributes: space seperated list of attributes to retrieve and remove
	removeAttrs: function(attributes) {
		var result = {},
			$element = this;
		$.each(attributes.split(/\s/), function(index, value) {
			result[value] = $element.attr(value);
			$element.removeAttr(value);
		});
		return result;
	},
	// http://docs.jquery.com/Plugins/Validation/rules
	rules: function(command, argument) {
		var element = this[0];

		if (command) {
			var settings = $.data(element.form, 'validator').settings;
			var staticRules = settings.rules;
			var existingRules = $.validator.staticRules(element);
			switch(command) {
			case "add":
				$.extend(existingRules, $.validator.normalizeRule(argument));
				staticRules[element.name] = existingRules;
				if (argument.messages) {
					settings.messages[element.name] = $.extend( settings.messages[element.name], argument.messages );
				}
				break;
			case "remove":
				if (!argument) {
					delete staticRules[element.name];
					return existingRules;
				}
				var filtered = {};
				$.each(argument.split(/\s/), function(index, method) {
					filtered[method] = existingRules[method];
					delete existingRules[method];
				});
				return filtered;
			}
		}

		var data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.metadataRules(element),
			$.validator.classRules(element),
			$.validator.attributeRules(element),
			$.validator.staticRules(element)
		), element);

		// make sure required is at front
		if (data.required) {
			var param = data.required;
			delete data.required;
			data = $.extend({required: param}, data);
		}

		return data;
	}
});

// Custom selectors
$.extend($.expr[":"], {
	// http://docs.jquery.com/Plugins/Validation/blank
	blank: function(a) {return !$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/filled
	filled: function(a) {return !!$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/unchecked
	unchecked: function(a) {return !a.checked;}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

$.validator.format = function(source, params) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray(arguments);
			args.unshift(source);
			return $.validator.format.apply( this, args );
		};
	}
	if ( arguments.length &gt; 2 &amp;&amp; params.constructor !== Array  ) {
		params = $.makeArray(arguments).slice(1);
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each(params, function(i, n) {
		source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
	});
	return source;
};

$.extend($.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function(element, event) {
			this.lastActive = element;

			// hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup &amp;&amp; !this.blockFocusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.addWrapper(this.errorsFor(element)).hide();
			}
		},
		onfocusout: function(element, event) {
			if ( !this.checkable(element) &amp;&amp; (element.name in this.submitted || !this.optional(element)) ) {
				this.element(element);
			}
		},
		onkeyup: function(element, event) {
			if ( event.which === 9 &amp;&amp; this.elementValue(element) === '' ) {
				return;
			} else if ( element.name in this.submitted || element === this.lastActive ) {
				this.element(element);
			}
		},
		onclick: function(element, event) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element(element);
			}
			// or option elements, check parent select in that case
			else if (element.parentNode.name in this.submitted) {
				this.element(element.parentNode);
			}
		},
		highlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else {
				$(element).addClass(errorClass).removeClass(validClass);
			}
		},
		unhighlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else {
				$(element).removeClass(errorClass).addClass(validClass);
			}
		}
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/setDefaults
	setDefaults: function(settings) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format("Please enter no more than {0} characters."),
		minlength: $.validator.format("Please enter at least {0} characters."),
		rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
		range: $.validator.format("Please enter a value between {0} and {1}."),
		max: $.validator.format("Please enter a value less than or equal to {0}."),
		min: $.validator.format("Please enter a value greater than or equal to {0}.")
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length &amp;&amp; this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = (this.groups = {});
			$.each(this.settings.groups, function(key, value) {
				$.each(value.split(/\s/), function(index, name) {
					groups[name] = key;
				});
			});
			var rules = this.settings.rules;
			$.each(rules, function(key, value) {
				rules[key] = $.validator.normalizeRule(value);
			});

			function delegate(event) {
				var validator = $.data(this[0].form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, "");
				if (validator.settings[eventType]) {
					validator.settings[eventType].call(validator, this[0], event);
				}
			}
			$(this.currentForm)
				.validateDelegate(":text, [type='password'], [type='file'], select, textarea, " +
					"[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
					"[type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], " +
					"[type='range'], [type='color'] ",
					"focusin focusout keyup", delegate)
				.validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);

			if (this.settings.invalidHandler) {
				$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
			}
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/form
		form: function() {
			this.checkForm();
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if (!this.valid()) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
				this.check( elements[i] );
			}
			return this.valid();
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/element
		element: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );
			this.lastElement = element;
			this.prepareElement( element );
			this.currentElements = $(element);
			var result = this.check( element ) !== false;
			if (result) {
				delete this.invalid[element.name];
			} else {
				this.invalid[element.name] = true;
			}
			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/showErrors
		showErrors: function(errors) {
			if(errors) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[name],
						element: this.findByName(name)[0]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function(element) {
					return !(element.name in errors);
				});
			}
			if (this.settings.showErrors) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/resetForm
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements().removeClass( this.settings.errorClass ).removeData( "previousValue" );
		},

		numberOfInvalids: function() {
			return this.objectLength(this.invalid);
		},

		objectLength: function( obj ) {
			var count = 0;
			for ( var i in obj ) {
				count++;
			}
			return count;
		},

		hideErrors: function() {
			this.addWrapper( this.toHide ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if( this.settings.focusInvalid ) {
				try {
					$(this.findLastActive() || this.errorList.length &amp;&amp; this.errorList[0].element || [])
					.filter(":visible")
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger("focusin");
				} catch(e) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive &amp;&amp; $.grep(this.errorList, function(n) {
				return n.element.name === lastActive.name;
			}).length === 1 &amp;&amp; lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $(this.currentForm)
			.find("input, select, textarea")
			.not(":submit, :reset, :image, [disabled]")
			.not( this.settings.ignore )
			.filter(function() {
				if ( !this.name &amp;&amp; validator.settings.debug &amp;&amp; window.console ) {
					console.error( "%o has no name assigned", this);
				}

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength($(this).rules()) ) {
					return false;
				}

				rulesCache[this.name] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $( selector )[0];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.replace(' ', '.');
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $([]);
			this.toHide = $([]);
			this.currentElements = $([]);
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor(element);
		},

		elementValue: function( element ) {
			var type = $(element).attr('type'),
				val = $(element).val();

			if ( type === 'radio' || type === 'checkbox' ) {
				return $('input[name="' + $(element).attr('name') + '"]:checked').val();
			}

			if ( typeof val === 'string' ) {
				return val.replace(/\r/g, "");
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $(element).rules();
			var dependencyMismatch = false;
			var val = this.elementValue(element);
			var result;

			for (var method in rules ) {
				var rule = { method: method, parameters: rules[method] };
				try {

					result = $.validator.methods[method].call( this, val, element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor(element) );
						return;
					}

					if( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch(e) {
					if ( this.settings.debug &amp;&amp; window.console ) {
						console.log("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method", e);
					}
					throw e;
				}
			}
			if (dependencyMismatch) {
				return;
			}
			if ( this.objectLength(rules) ) {
				this.successList.push(element);
			}
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's "messages" metadata
		customMetaMessage: function(element, method) {
			if (!$.metadata) {
				return;
			}
			var meta = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata();
			return meta &amp;&amp; meta.messages &amp;&amp; meta.messages[method];
		},

		// return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		customDataMessage: function(element, method) {
			return $(element).data('msg-' + method.toLowerCase()) || (element.attributes &amp;&amp; $(element).attr('data-msg-' + method.toLowerCase()));
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[name];
			return m &amp;&amp; (m.constructor === String ? m : m[method]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for(var i = 0; i &lt; arguments.length; i++) {
				if (arguments[i] !== undefined) {
					return arguments[i];
				}
			}
			return undefined;
		},

		defaultMessage: function( element, method) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customDataMessage( element, method ),
				this.customMetaMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle &amp;&amp; element.title || undefined,
				$.validator.messages[method],
				"&lt;strong&gt;Warning: No message defined for " + element.name + "&lt;/strong&gt;"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call(this, rule.parameters, element);
			} else if (theregex.test(message)) {
				message = $.validator.format(message.replace(theregex, '{$1}'), rule.parameters);
			}
			this.errorList.push({
				message: message,
				element: element
			});

			this.errorMap[element.name] = message;
			this.submitted[element.name] = message;
		},

		addWrapper: function(toToggle) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements;
			for ( i = 0; this.errorList[i]; i++ ) {
				var error = this.errorList[i];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if (this.settings.success) {
				for ( i = 0; this.successList[i]; i++ ) {
					this.showLabel( this.successList[i] );
				}
			}
			if (this.settings.unhighlight) {
				for ( i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not(this.invalidElements());
		},

		invalidElements: function() {
			return $(this.errorList).map(function() {
				return this.element;
			});
		},

		showLabel: function(element, message) {
			var label = this.errorsFor( element );
			if ( label.length ) {
				// refresh error/success class
				label.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// check if we have a generated label, replace the message then
				if ( label.attr("generated") ) {
					label.html(message);
				}
			} else {
				// create label
				label = $("&lt;" + this.settings.errorElement + "/&gt;")
					.attr({"for":  this.idOrName(element), generated: true})
					.addClass(this.settings.errorClass)
					.html(message || "");
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					label = label.hide().show().wrap("&lt;" + this.settings.wrapper + "/&gt;").parent();
				}
				if ( !this.labelContainer.append(label).length ) {
					if ( this.settings.errorPlacement ) {
						this.settings.errorPlacement(label, $(element) );
					} else {
					label.insertAfter(element);
					}
				}
			}
			if ( !message &amp;&amp; this.settings.success ) {
				label.text("");
				if ( typeof this.settings.success === "string" ) {
					label.addClass( this.settings.success );
				} else {
					this.settings.success( label, element );
				}
			}
			this.toShow = this.toShow.add(label);
		},

		errorsFor: function(element) {
			var name = this.idOrName(element);
			return this.errors().filter(function() {
				return $(this).attr('for') === name;
			});
		},

		idOrName: function(element) {
			return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
		},

		validationTargetFor: function(element) {
			// if radio/checkbox, validate first element in group instead
			if (this.checkable(element)) {
				element = this.findByName( element.name ).not(this.settings.ignore)[0];
			}
			return element;
		},

		checkable: function( element ) {
			return (/radio|checkbox/i).test(element.type);
		},

		findByName: function( name ) {
			return $(this.currentForm).find('[name="' + name + '"]');
		},

		getLength: function(value, element) {
			switch( element.nodeName.toLowerCase() ) {
			case 'select':
				return $("option:selected", element).length;
			case 'input':
				if( this.checkable( element) ) {
					return this.findByName(element.name).filter(':checked').length;
				}
			}
			return value.length;
		},

		depend: function(param, element) {
			return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
		},

		dependTypes: {
			"boolean": function(param, element) {
				return param;
			},
			"string": function(param, element) {
				return !!$(param, element.form).length;
			},
			"function": function(param, element) {
				return param(element);
			}
		},

		optional: function(element) {
			var val = this.elementValue(element);
			return !$.validator.methods.required.call(this, val, element) &amp;&amp; "dependency-mismatch";
		},

		startRequest: function(element) {
			if (!this.pending[element.name]) {
				this.pendingRequest++;
				this.pending[element.name] = true;
			}
		},

		stopRequest: function(element, valid) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never &lt; 0
			if (this.pendingRequest &lt; 0) {
				this.pendingRequest = 0;
			}
			delete this.pending[element.name];
			if ( valid &amp;&amp; this.pendingRequest === 0 &amp;&amp; this.formSubmitted &amp;&amp; this.form() ) {
				$(this.currentForm).submit();
				this.formSubmitted = false;
			} else if (!valid &amp;&amp; this.pendingRequest === 0 &amp;&amp; this.formSubmitted) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
				this.formSubmitted = false;
			}
		},

		previousValue: function(element) {
			return $.data(element, "previousValue") || $.data(element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: {required: true},
		email: {email: true},
		url: {url: true},
		date: {date: true},
		dateISO: {dateISO: true},
		number: {number: true},
		digits: {digits: true},
		creditcard: {creditcard: true}
	},

	addClassRules: function(className, rules) {
		if ( className.constructor === String ) {
			this.classRuleSettings[className] = rules;
		} else {
			$.extend(this.classRuleSettings, className);
		}
	},

	classRules: function(element) {
		var rules = {};
		var classes = $(element).attr('class');
		if ( classes ) {
			$.each(classes.split(' '), function() {
				if (this in $.validator.classRuleSettings) {
					$.extend(rules, $.validator.classRuleSettings[this]);
				}
			});
		}
		return rules;
	},

	attributeRules: function(element) {
		var rules = {};
		var $element = $(element);

		for (var method in $.validator.methods) {
			var value;

			// support for &lt;input required&gt; in both html5 and older browsers
			if (method === 'required') {
				value = $element.get(0).getAttribute(method);
				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if (value === "") {
					value = true;
				}
				// force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr(method);
			}

			if (value) {
				rules[method] = value;
			} else if ($element[0].getAttribute("type") === method) {
				rules[method] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
		if (rules.maxlength &amp;&amp; /-1|2147483647|524288/.test(rules.maxlength)) {
			delete rules.maxlength;
		}

		return rules;
	},

	metadataRules: function(element) {
		if (!$.metadata) {
			return {};
		}

		var meta = $.data(element.form, 'validator').settings.meta;
		return meta ?
			$(element).metadata()[meta] :
			$(element).metadata();
	},

	staticRules: function(element) {
		var rules = {};
		var validator = $.data(element.form, 'validator');
		if (validator.settings.rules) {
			rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
		}
		return rules;
	},

	normalizeRules: function(rules, element) {
		// handle dependency check
		$.each(rules, function(prop, val) {
			// ignore rule when param is explicitly false, eg. required:false
			if (val === false) {
				delete rules[prop];
				return;
			}
			if (val.param || val.depends) {
				var keepRule = true;
				switch (typeof val.depends) {
					case "string":
						keepRule = !!$(val.depends, element.form).length;
						break;
					case "function":
						keepRule = val.depends.call(element, element);
						break;
				}
				if (keepRule) {
					rules[prop] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[prop];
				}
			}
		});

		// evaluate parameters
		$.each(rules, function(rule, parameter) {
			rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
		});

		// clean number parameters
		$.each(['minlength', 'maxlength', 'min', 'max'], function() {
			if (rules[this]) {
				rules[this] = Number(rules[this]);
			}
		});
		$.each(['rangelength', 'range'], function() {
			if (rules[this]) {
				rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
			}
		});

		if ($.validator.autoCreateRanges) {
			// auto-create ranges
			if (rules.min &amp;&amp; rules.max) {
				rules.range = [rules.min, rules.max];
				delete rules.min;
				delete rules.max;
			}
			if (rules.minlength &amp;&amp; rules.maxlength) {
				rules.rangelength = [rules.minlength, rules.maxlength];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		// To support custom messages in metadata ignore rule methods titled "messages"
		if (rules.messages) {
			delete rules.messages;
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function(data) {
		if( typeof data === "string" ) {
			var transformed = {};
			$.each(data.split(/\s/), function() {
				transformed[this] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/addMethod
	addMethod: function(name, method, message) {
		$.validator.methods[name] = method;
		$.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
		if (method.length &lt; 3) {
			$.validator.addClassRules(name, $.validator.normalizeRule(name));
		}
	},

	methods: {

		// http://docs.jquery.com/Plugins/Validation/Methods/required
		required: function(value, element, param) {
			// check if dependency is met
			if ( !this.depend(param, element) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {
				// could be an array for select-multiple or a string, both are fine this way
				var val = $(element).val();
				return val &amp;&amp; val.length &gt; 0;
			}
			if ( this.checkable(element) ) {
				return this.getLength(value, element) &gt; 0;
			}
			return $.trim(value).length &gt; 0;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/remote
		remote: function(value, element, param) {
			if ( this.optional(element) ) {
				return "dependency-mismatch";
			}

			var previous = this.previousValue(element);
			if (!this.settings.messages[element.name] ) {
				this.settings.messages[element.name] = {};
			}
			previous.originalMessage = this.settings.messages[element.name].remote;
			this.settings.messages[element.name].remote = previous.message;

			param = typeof param === "string" &amp;&amp; {url:param} || param;

			if ( this.pending[element.name] ) {
				return "pending";
			}
			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			var validator = this;
			this.startRequest(element);
			var data = {};
			data[element.name] = value;
			$.ajax($.extend(true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				success: function(response) {
					validator.settings.messages[element.name].remote = previous.originalMessage;
					var valid = response === true || response === "true";
					if ( valid ) {
						var submitted = validator.formSubmitted;
						validator.prepareElement(element);
						validator.formSubmitted = submitted;
						validator.successList.push(element);
						delete validator.invalid[element.name];
						validator.showErrors();
					} else {
						var errors = {};
						var message = response || validator.defaultMessage( element, "remote" );
						errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
						validator.invalid[element.name] = true;
						validator.showErrors(errors);
					}
					previous.valid = valid;
					validator.stopRequest(element, valid);
				}
			}, param));
			return "pending";
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/minlength
		minlength: function(value, element, param) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || length &gt;= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/maxlength
		maxlength: function(value, element, param) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || length &lt;= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/rangelength
		rangelength: function(value, element, param) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || ( length &gt;= param[0] &amp;&amp; length &lt;= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/min
		min: function( value, element, param ) {
			return this.optional(element) || value &gt;= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/max
		max: function( value, element, param ) {
			return this.optional(element) || value &lt;= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/range
		range: function( value, element, param ) {
			return this.optional(element) || ( value &gt;= param[0] &amp;&amp; value &lt;= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/email
		email: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
			return this.optional(element) || /^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/url
		url: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/date
		date: function(value, element) {
			return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/dateISO
		dateISO: function(value, element) {
			return this.optional(element) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/number
		number: function(value, element) {
			return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/digits
		digits: function(value, element) {
			return this.optional(element) || /^\d+$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/creditcard
		// based on http://en.wikipedia.org/wiki/Luhn
		creditcard: function(value, element) {
			if ( this.optional(element) ) {
				return "dependency-mismatch";
			}
			// accept only spaces, digits and dashes
			if (/[^0-9 \-]+/.test(value)) {
				return false;
			}
			var nCheck = 0,
				nDigit = 0,
				bEven = false;

			value = value.replace(/\D/g, "");

			for (var n = value.length - 1; n &gt;= 0; n--) {
				var cDigit = value.charAt(n);
				nDigit = parseInt(cDigit, 10);
				if (bEven) {
					if ((nDigit *= 2) &gt; 9) {
						nDigit -= 9;
					}
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return (nCheck % 10) === 0;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/equalTo
		equalTo: function(value, element, param) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $(param);
			if (this.settings.onfocusout) {
				target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
					$(element).valid();
				});
			}
			return value === target.val();
		}

	}

});

// deprecated, use $.validator.format instead
$.format = $.validator.format;

}(jQuery));

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
(function($) {
	var pendingRequests = {};
	// Use a prefilter if available (1.5+)
	if ( $.ajaxPrefilter ) {
		$.ajaxPrefilter(function(settings, _, xhr) {
			var port = settings.port;
			if (settings.mode === "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {
		// Proxy ajax
		var ajax = $.ajax;
		$.ajax = function(settings) {
			var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
				port = ( "port" in settings ? settings : $.ajaxSettings ).port;
			if (mode === "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				return (pendingRequests[port] = ajax.apply(this, arguments));
			}
			return ajax.apply(this, arguments);
		};
	}
}(jQuery));

// provides cross-browser focusin and focusout events
// IE has native support, in other browsers, use event caputuring (neither bubbles)

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
(function($) {
	// only implement if not provided by jQuery core (since 1.4)
	// TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs
	if (!jQuery.event.special.focusin &amp;&amp; !jQuery.event.special.focusout &amp;&amp; document.addEventListener) {
		$.each({
			focus: 'focusin',
			blur: 'focusout'
		}, function( original, fix ){
			$.event.special[fix] = {
				setup:function() {
					this.addEventListener( original, handler, true );
				},
				teardown:function() {
					this.removeEventListener( original, handler, true );
				},
				handler: function(e) {
					var args = arguments;
					args[0] = $.event.fix(e);
					args[0].type = fix;
					return $.event.handle.apply(this, args);
				}
			};
			function handler(e) {
				e = $.event.fix(e);
				e.type = fix;
				return $.event.handle.call(this, e);
			}
		});
	}
	$.extend($.fn, {
		validateDelegate: function(delegate, type, handler) {
			return this.bind(type, function(event) {
				var target = $(event.target);
				if (target.is(delegate)) {
					return handler.apply(target, arguments);
				}
			});
		}
	});
}(jQuery));




Scripts/jquery.validate.min.js


/*! jQuery Validation Plugin - v1.10.0 - 9/7/2012
* https://github.com/jzaefferer/jquery-validation
* Copyright (c) 2012 Jrn Zaefferer; Licensed MIT */
(function(a){a.extend(a.fn,{validate:function(b){if(!this.length){b&amp;&amp;b.debug&amp;&amp;window.console&amp;&amp;console.warn("nothing selected, can't validate, returning nothing");return}var c=a.data(this[0],"validator");return c?c:(this.attr("novalidate","novalidate"),c=new a.validator(b,this[0]),a.data(this[0],"validator",c),c.settings.onsubmit&amp;&amp;(this.validateDelegate(":submit","click",function(b){c.settings.submitHandler&amp;&amp;(c.submitButton=b.target),a(b.target).hasClass("cancel")&amp;&amp;(c.cancelSubmit=!0)}),this.submit(function(b){function d(){var d;return c.settings.submitHandler?(c.submitButton&amp;&amp;(d=a("&lt;input type='hidden'/&gt;").attr("name",c.submitButton.name).val(c.submitButton.value).appendTo(c.currentForm)),c.settings.submitHandler.call(c,c.currentForm,b),c.submitButton&amp;&amp;d.remove(),!1):!0}return c.settings.debug&amp;&amp;b.preventDefault(),c.cancelSubmit?(c.cancelSubmit=!1,d()):c.form()?c.pendingRequest?(c.formSubmitted=!0,!1):d():(c.focusInvalid(),!1)})),c)},valid:function(){if(a(this[0]).is("form"))return this.validate().form();var b=!0,c=a(this[0].form).validate();return this.each(function(){b&amp;=c.element(this)}),b},removeAttrs:function(b){var c={},d=this;return a.each(b.split(/\s/),function(a,b){c[b]=d.attr(b),d.removeAttr(b)}),c},rules:function(b,c){var d=this[0];if(b){var e=a.data(d.form,"validator").settings,f=e.rules,g=a.validator.staticRules(d);switch(b){case"add":a.extend(g,a.validator.normalizeRule(c)),f[d.name]=g,c.messages&amp;&amp;(e.messages[d.name]=a.extend(e.messages[d.name],c.messages));break;case"remove":if(!c)return delete f[d.name],g;var h={};return a.each(c.split(/\s/),function(a,b){h[b]=g[b],delete g[b]}),h}}var i=a.validator.normalizeRules(a.extend({},a.validator.metadataRules(d),a.validator.classRules(d),a.validator.attributeRules(d),a.validator.staticRules(d)),d);if(i.required){var j=i.required;delete i.required,i=a.extend({required:j},i)}return i}}),a.extend(a.expr[":"],{blank:function(b){return!a.trim(""+b.value)},filled:function(b){return!!a.trim(""+b.value)},unchecked:function(a){return!a.checked}}),a.validator=function(b,c){this.settings=a.extend(!0,{},a.validator.defaults,b),this.currentForm=c,this.init()},a.validator.format=function(b,c){return arguments.length===1?function(){var c=a.makeArray(arguments);return c.unshift(b),a.validator.format.apply(this,c)}:(arguments.length&gt;2&amp;&amp;c.constructor!==Array&amp;&amp;(c=a.makeArray(arguments).slice(1)),c.constructor!==Array&amp;&amp;(c=[c]),a.each(c,function(a,c){b=b.replace(new RegExp("\\{"+a+"\\}","g"),c)}),b)},a.extend(a.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusInvalid:!0,errorContainer:a([]),errorLabelContainer:a([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(a,b){this.lastActive=a,this.settings.focusCleanup&amp;&amp;!this.blockFocusCleanup&amp;&amp;(this.settings.unhighlight&amp;&amp;this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),this.addWrapper(this.errorsFor(a)).hide())},onfocusout:function(a,b){!this.checkable(a)&amp;&amp;(a.name in this.submitted||!this.optional(a))&amp;&amp;this.element(a)},onkeyup:function(a,b){if(b.which===9&amp;&amp;this.elementValue(a)==="")return;(a.name in this.submitted||a===this.lastActive)&amp;&amp;this.element(a)},onclick:function(a,b){a.name in this.submitted?this.element(a):a.parentNode.name in this.submitted&amp;&amp;this.element(a.parentNode)},highlight:function(b,c,d){b.type==="radio"?this.findByName(b.name).addClass(c).removeClass(d):a(b).addClass(c).removeClass(d)},unhighlight:function(b,c,d){b.type==="radio"?this.findByName(b.name).removeClass(c).addClass(d):a(b).removeClass(c).addClass(d)}},setDefaults:function(b){a.extend(a.validator.defaults,b)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:a.validator.format("Please enter no more than {0} characters."),minlength:a.validator.format("Please enter at least {0} characters."),rangelength:a.validator.format("Please enter a value between {0} and {1} characters long."),range:a.validator.format("Please enter a value between {0} and {1}."),max:a.validator.format("Please enter a value less than or equal to {0}."),min:a.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){function d(b){var c=a.data(this[0].form,"validator"),d="on"+b.type.replace(/^validate/,"");c.settings[d]&amp;&amp;c.settings[d].call(c,this[0],b)}this.labelContainer=a(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&amp;&amp;this.labelContainer||a(this.currentForm),this.containers=a(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var b=this.groups={};a.each(this.settings.groups,function(c,d){a.each(d.split(/\s/),function(a,d){b[d]=c})});var c=this.settings.rules;a.each(c,function(b,d){c[b]=a.validator.normalizeRule(d)}),a(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ","focusin focusout keyup",d).validateDelegate("[type='radio'], [type='checkbox'], select, option","click",d),this.settings.invalidHandler&amp;&amp;a(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),a.extend(this.submitted,this.errorMap),this.invalid=a.extend({},this.errorMap),this.valid()||a(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);return this.valid()},element:function(b){b=this.validationTargetFor(this.clean(b)),this.lastElement=b,this.prepareElement(b),this.currentElements=a(b);var c=this.check(b)!==!1;return c?delete this.invalid[b.name]:this.invalid[b.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),c},showErrors:function(b){if(b){a.extend(this.errorMap,b),this.errorList=[];for(var c in b)this.errorList.push({message:b[c],element:this.findByName(c)[0]});this.successList=a.grep(this.successList,function(a){return!(a.name in b)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){a.fn.resetForm&amp;&amp;a(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors(),this.elements().removeClass(this.settings.errorClass).removeData("previousValue")},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(a){var b=0;for(var c in a)b++;return b},hideErrors:function(){this.addWrapper(this.toHide).hide()},valid:function(){return this.size()===0},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{a(this.findLastActive()||this.errorList.length&amp;&amp;this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(b){}},findLastActive:function(){var b=this.lastActive;return b&amp;&amp;a.grep(this.errorList,function(a){return a.element.name===b.name}).length===1&amp;&amp;b},elements:function(){var b=this,c={};return a(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function(){return!this.name&amp;&amp;b.settings.debug&amp;&amp;window.console&amp;&amp;console.error("%o has no name assigned",this),this.name in c||!b.objectLength(a(this).rules())?!1:(c[this.name]=!0,!0)})},clean:function(b){return a(b)[0]},errors:function(){var b=this.settings.errorClass.replace(" ",".");return a(this.settings.errorElement+"."+b,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=a([]),this.toHide=a([]),this.currentElements=a([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(a){this.reset(),this.toHide=this.errorsFor(a)},elementValue:function(b){var c=a(b).attr("type"),d=a(b).val();return c==="radio"||c==="checkbox"?a('input[name="'+a(b).attr("name")+'"]:checked').val():typeof d=="string"?d.replace(/\r/g,""):d},check:function(b){b=this.validationTargetFor(this.clean(b));var c=a(b).rules(),d=!1,e=this.elementValue(b),f;for(var g in c){var h={method:g,parameters:c[g]};try{f=a.validator.methods[g].call(this,e,b,h.parameters);if(f==="dependency-mismatch"){d=!0;continue}d=!1;if(f==="pending"){this.toHide=this.toHide.not(this.errorsFor(b));return}if(!f)return this.formatAndAdd(b,h),!1}catch(i){throw this.settings.debug&amp;&amp;window.console&amp;&amp;console.log("exception occured when checking element "+b.id+", check the '"+h.method+"' method",i),i}}if(d)return;return this.objectLength(c)&amp;&amp;this.successList.push(b),!0},customMetaMessage:function(b,c){if(!a.metadata)return;var d=this.settings.meta?a(b).metadata()[this.settings.meta]:a(b).metadata();return d&amp;&amp;d.messages&amp;&amp;d.messages[c]},customDataMessage:function(b,c){return a(b).data("msg-"+c.toLowerCase())||b.attributes&amp;&amp;a(b).attr("data-msg-"+c.toLowerCase())},customMessage:function(a,b){var c=this.settings.messages[a];return c&amp;&amp;(c.constructor===String?c:c[b])},findDefined:function(){for(var a=0;a&lt;arguments.length;a++)if(arguments[a]!==undefined)return arguments[a];return undefined},defaultMessage:function(b,c){return this.findDefined(this.customMessage(b.name,c),this.customDataMessage(b,c),this.customMetaMessage(b,c),!this.settings.ignoreTitle&amp;&amp;b.title||undefined,a.validator.messages[c],"&lt;strong&gt;Warning: No message defined for "+b.name+"&lt;/strong&gt;")},formatAndAdd:function(b,c){var d=this.defaultMessage(b,c.method),e=/\$?\{(\d+)\}/g;typeof d=="function"?d=d.call(this,c.parameters,b):e.test(d)&amp;&amp;(d=a.validator.format(d.replace(e,"{$1}"),c.parameters)),this.errorList.push({message:d,element:b}),this.errorMap[b.name]=d,this.submitted[b.name]=d},addWrapper:function(a){return this.settings.wrapper&amp;&amp;(a=a.add(a.parent(this.settings.wrapper))),a},defaultShowErrors:function(){var a,b;for(a=0;this.errorList[a];a++){var c=this.errorList[a];this.settings.highlight&amp;&amp;this.settings.highlight.call(this,c.element,this.settings.errorClass,this.settings.validClass),this.showLabel(c.element,c.message)}this.errorList.length&amp;&amp;(this.toShow=this.toShow.add(this.containers));if(this.settings.success)for(a=0;this.successList[a];a++)this.showLabel(this.successList[a]);if(this.settings.unhighlight)for(a=0,b=this.validElements();b[a];a++)this.settings.unhighlight.call(this,b[a],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return a(this.errorList).map(function(){return this.element})},showLabel:function(b,c){var d=this.errorsFor(b);d.length?(d.removeClass(this.settings.validClass).addClass(this.settings.errorClass),d.attr("generated")&amp;&amp;d.html(c)):(d=a("&lt;"+this.settings.errorElement+"/&gt;").attr({"for":this.idOrName(b),generated:!0}).addClass(this.settings.errorClass).html(c||""),this.settings.wrapper&amp;&amp;(d=d.hide().show().wrap("&lt;"+this.settings.wrapper+"/&gt;").parent()),this.labelContainer.append(d).length||(this.settings.errorPlacement?this.settings.errorPlacement(d,a(b)):d.insertAfter(b))),!c&amp;&amp;this.settings.success&amp;&amp;(d.text(""),typeof this.settings.success=="string"?d.addClass(this.settings.success):this.settings.success(d,b)),this.toShow=this.toShow.add(d)},errorsFor:function(b){var c=this.idOrName(b);return this.errors().filter(function(){return a(this).attr("for")===c})},idOrName:function(a){return this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},validationTargetFor:function(a){return this.checkable(a)&amp;&amp;(a=this.findByName(a.name).not(this.settings.ignore)[0]),a},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(b){return a(this.currentForm).find('[name="'+b+'"]')},getLength:function(b,c){switch(c.nodeName.toLowerCase()){case"select":return a("option:selected",c).length;case"input":if(this.checkable(c))return this.findByName(c.name).filter(":checked").length}return b.length},depend:function(a,b){return this.dependTypes[typeof a]?this.dependTypes[typeof a](a,b):!0},dependTypes:{"boolean":function(a,b){return a},string:function(b,c){return!!a(b,c.form).length},"function":function(a,b){return a(b)}},optional:function(b){var c=this.elementValue(b);return!a.validator.methods.required.call(this,c,b)&amp;&amp;"dependency-mismatch"},startRequest:function(a){this.pending[a.name]||(this.pendingRequest++,this.pending[a.name]=!0)},stopRequest:function(b,c){this.pendingRequest--,this.pendingRequest&lt;0&amp;&amp;(this.pendingRequest=0),delete this.pending[b.name],c&amp;&amp;this.pendingRequest===0&amp;&amp;this.formSubmitted&amp;&amp;this.form()?(a(this.currentForm).submit(),this.formSubmitted=!1):!c&amp;&amp;this.pendingRequest===0&amp;&amp;this.formSubmitted&amp;&amp;(a(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(b){return a.data(b,"previousValue")||a.data(b,"previousValue",{old:null,valid:!0,message:this.defaultMessage(b,"remote")})}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(b,c){b.constructor===String?this.classRuleSettings[b]=c:a.extend(this.classRuleSettings,b)},classRules:function(b){var c={},d=a(b).attr("class");return d&amp;&amp;a.each(d.split(" "),function(){this in a.validator.classRuleSettings&amp;&amp;a.extend(c,a.validator.classRuleSettings[this])}),c},attributeRules:function(b){var c={},d=a(b);for(var e in a.validator.methods){var f;e==="required"?(f=d.get(0).getAttribute(e),f===""&amp;&amp;(f=!0),f=!!f):f=d.attr(e),f?c[e]=f:d[0].getAttribute("type")===e&amp;&amp;(c[e]=!0)}return c.maxlength&amp;&amp;/-1|2147483647|524288/.test(c.maxlength)&amp;&amp;delete c.maxlength,c},metadataRules:function(b){if(!a.metadata)return{};var c=a.data(b.form,"validator").settings.meta;return c?a(b).metadata()[c]:a(b).metadata()},staticRules:function(b){var c={},d=a.data(b.form,"validator");return d.settings.rules&amp;&amp;(c=a.validator.normalizeRule(d.settings.rules[b.name])||{}),c},normalizeRules:function(b,c){return a.each(b,function(d,e){if(e===!1){delete b[d];return}if(e.param||e.depends){var f=!0;switch(typeof e.depends){case"string":f=!!a(e.depends,c.form).length;break;case"function":f=e.depends.call(c,c)}f?b[d]=e.param!==undefined?e.param:!0:delete b[d]}}),a.each(b,function(d,e){b[d]=a.isFunction(e)?e(c):e}),a.each(["minlength","maxlength","min","max"],function(){b[this]&amp;&amp;(b[this]=Number(b[this]))}),a.each(["rangelength","range"],function(){b[this]&amp;&amp;(b[this]=[Number(b[this][0]),Number(b[this][1])])}),a.validator.autoCreateRanges&amp;&amp;(b.min&amp;&amp;b.max&amp;&amp;(b.range=[b.min,b.max],delete b.min,delete b.max),b.minlength&amp;&amp;b.maxlength&amp;&amp;(b.rangelength=[b.minlength,b.maxlength],delete b.minlength,delete b.maxlength)),b.messages&amp;&amp;delete b.messages,b},normalizeRule:function(b){if(typeof b=="string"){var c={};a.each(b.split(/\s/),function(){c[this]=!0}),b=c}return b},addMethod:function(b,c,d){a.validator.methods[b]=c,a.validator.messages[b]=d!==undefined?d:a.validator.messages[b],c.length&lt;3&amp;&amp;a.validator.addClassRules(b,a.validator.normalizeRule(b))},methods:{required:function(b,c,d){if(!this.depend(d,c))return"dependency-mismatch";if(c.nodeName.toLowerCase()==="select"){var e=a(c).val();return e&amp;&amp;e.length&gt;0}return this.checkable(c)?this.getLength(b,c)&gt;0:a.trim(b).length&gt;0},remote:function(b,c,d){if(this.optional(c))return"dependency-mismatch";var e=this.previousValue(c);this.settings.messages[c.name]||(this.settings.messages[c.name]={}),e.originalMessage=this.settings.messages[c.name].remote,this.settings.messages[c.name].remote=e.message,d=typeof d=="string"&amp;&amp;{url:d}||d;if(this.pending[c.name])return"pending";if(e.old===b)return e.valid;e.old=b;var f=this;this.startRequest(c);var g={};return g[c.name]=b,a.ajax(a.extend(!0,{url:d,mode:"abort",port:"validate"+c.name,dataType:"json",data:g,success:function(d){f.settings.messages[c.name].remote=e.originalMessage;var g=d===!0||d==="true";if(g){var h=f.formSubmitted;f.prepareElement(c),f.formSubmitted=h,f.successList.push(c),delete f.invalid[c.name],f.showErrors()}else{var i={},j=d||f.defaultMessage(c,"remote");i[c.name]=e.message=a.isFunction(j)?j(b):j,f.invalid[c.name]=!0,f.showErrors(i)}e.valid=g,f.stopRequest(c,g)}},d)),"pending"},minlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(a.trim(b),c);return this.optional(c)||e&gt;=d},maxlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(a.trim(b),c);return this.optional(c)||e&lt;=d},rangelength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(a.trim(b),c);return this.optional(c)||e&gt;=d[0]&amp;&amp;e&lt;=d[1]},min:function(a,b,c){return this.optional(b)||a&gt;=c},max:function(a,b,c){return this.optional(b)||a&lt;=c},range:function(a,b,c){return this.optional(b)||a&gt;=c[0]&amp;&amp;a&lt;=c[1]},email:function(a,b){return this.optional(b)||/^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(a)},url:function(a,b){return this.optional(b)||/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&amp;'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)},date:function(a,b){return this.optional(b)||!/Invalid|NaN/.test(new Date(a))},dateISO:function(a,b){return this.optional(b)||/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(a)},number:function(a,b){return this.optional(b)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\d+$/.test(a)},creditcard:function(a,b){if(this.optional(b))return"dependency-mismatch";if(/[^0-9 \-]+/.test(a))return!1;var c=0,d=0,e=!1;a=a.replace(/\D/g,"");for(var f=a.length-1;f&gt;=0;f--){var g=a.charAt(f);d=parseInt(g,10),e&amp;&amp;(d*=2)&gt;9&amp;&amp;(d-=9),c+=d,e=!e}return c%10===0},equalTo:function(b,c,d){var e=a(d);return this.settings.onfocusout&amp;&amp;e.unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){a(c).valid()}),b===e.val()}}}),a.format=a.validator.format})(jQuery),function(a){var b={};if(a.ajaxPrefilter)a.ajaxPrefilter(function(a,c,d){var e=a.port;a.mode==="abort"&amp;&amp;(b[e]&amp;&amp;b[e].abort(),b[e]=d)});else{var c=a.ajax;a.ajax=function(d){var e=("mode"in d?d:a.ajaxSettings).mode,f=("port"in d?d:a.ajaxSettings).port;return e==="abort"?(b[f]&amp;&amp;b[f].abort(),b[f]=c.apply(this,arguments)):c.apply(this,arguments)}}}(jQuery),function(a){!jQuery.event.special.focusin&amp;&amp;!jQuery.event.special.focusout&amp;&amp;document.addEventListener&amp;&amp;a.each({focus:"focusin",blur:"focusout"},function(b,c){function d(b){return b=a.event.fix(b),b.type=c,a.event.handle.call(this,b)}a.event.special[c]={setup:function(){this.addEventListener(b,d,!0)},teardown:function(){this.removeEventListener(b,d,!0)},handler:function(b){var d=arguments;return d[0]=a.event.fix(b),d[0].type=c,a.event.handle.apply(this,d)}}}),a.extend(a.fn,{validateDelegate:function(b,c,d){return this.bind(c,function(c){var e=a(c.target);if(e.is(b))return d.apply(e,arguments)})}})}(jQuery)



Scripts/jquery.validate.unobtrusive.js


/*!
** Unobtrusive validation support library for jQuery and jQuery Validate
** Copyright (C) Microsoft Corporation. All rights reserved.
*/

/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */
/*global document: false, jQuery: false */

(function ($) {
    var $jQval = $.validator,
        adapters,
        data_validation = "unobtrusiveValidation";

    function setValidationValues(options, ruleName, value) {
        options.rules[ruleName] = value;
        if (options.message) {
            options.messages[ruleName] = options.message;
        }
    }

    function splitAndTrim(value) {
        return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
    }

    function escapeAttributeValue(value) {
        // As mentioned on http://api.jquery.com/category/selectors/
        return value.replace(/([!"#$%&amp;'()*+,./:;&lt;=&gt;?@\[\\\]^`{|}~])/g, "\\$1");
    }

    function getModelPrefix(fieldName) {
        return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
    }

    function appendModelPrefix(value, prefix) {
        if (value.indexOf("*.") === 0) {
            value = value.replace("*.", prefix);
        }
        return value;
    }

    function onError(error, inputElement) {  // 'this' is the form element
        var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
            replaceAttrValue = container.attr("data-valmsg-replace"),
            replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

        container.removeClass("field-validation-valid").addClass("field-validation-error");
        error.data("unobtrusiveContainer", container);

        if (replace) {
            container.empty();
            error.removeClass("input-validation-error").appendTo(container);
        }
        else {
            error.hide();
        }
    }

    function onErrors(event, validator) {  // 'this' is the form element
        var container = $(this).find("[data-valmsg-summary=true]"),
            list = container.find("ul");

        if (list &amp;&amp; list.length &amp;&amp; validator.errorList.length) {
            list.empty();
            container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

            $.each(validator.errorList, function () {
                $("&lt;li /&gt;").html(this.message).appendTo(list);
            });
        }
    }

    function onSuccess(error) {  // 'this' is the form element
        var container = error.data("unobtrusiveContainer"),
            replaceAttrValue = container.attr("data-valmsg-replace"),
            replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

        if (container) {
            container.addClass("field-validation-valid").removeClass("field-validation-error");
            error.removeData("unobtrusiveContainer");

            if (replace) {
                container.empty();
            }
        }
    }

    function onReset(event) {  // 'this' is the form element
        var $form = $(this);
        $form.data("validator").resetForm();
        $form.find(".validation-summary-errors")
            .addClass("validation-summary-valid")
            .removeClass("validation-summary-errors");
        $form.find(".field-validation-error")
            .addClass("field-validation-valid")
            .removeClass("field-validation-error")
            .removeData("unobtrusiveContainer")
            .find("&gt;*")  // If we were using valmsg-replace, get the underlying error
                .removeData("unobtrusiveContainer");
    }

    function validationInfo(form) {
        var $form = $(form),
            result = $form.data(data_validation),
            onResetProxy = $.proxy(onReset, form);

        if (!result) {
            result = {
                options: {  // options structure passed to jQuery Validate's validate() method
                    errorClass: "input-validation-error",
                    errorElement: "span",
                    errorPlacement: $.proxy(onError, form),
                    invalidHandler: $.proxy(onErrors, form),
                    messages: {},
                    rules: {},
                    success: $.proxy(onSuccess, form)
                },
                attachValidation: function () {
                    $form
                        .unbind("reset." + data_validation, onResetProxy)
                        .bind("reset." + data_validation, onResetProxy)
                        .validate(this.options);
                },
                validate: function () {  // a validation function that is called by unobtrusive Ajax
                    $form.validate();
                    return $form.valid();
                }
            };
            $form.data(data_validation, result);
        }

        return result;
    }

    $jQval.unobtrusive = {
        adapters: [],

        parseElement: function (element, skipAttach) {
            /// &lt;summary&gt;
            /// Parses a single HTML element for unobtrusive validation attributes.
            /// &lt;/summary&gt;
            /// &lt;param name="element" domElement="true"&gt;The HTML element to be parsed.&lt;/param&gt;
            /// &lt;param name="skipAttach" type="Boolean"&gt;[Optional] true to skip attaching the
            /// validation to the form. If parsing just this single element, you should specify true.
            /// If parsing several elements, you should specify false, and manually attach the validation
            /// to the form when you are finished. The default is false.&lt;/param&gt;
            var $element = $(element),
                form = $element.parents("form")[0],
                valInfo, rules, messages;

            if (!form) {  // Cannot do client-side validation without a form
                return;
            }

            valInfo = validationInfo(form);
            valInfo.options.rules[element.name] = rules = {};
            valInfo.options.messages[element.name] = messages = {};

            $.each(this.adapters, function () {
                var prefix = "data-val-" + this.name,
                    message = $element.attr(prefix),
                    paramValues = {};

                if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                    prefix += "-";

                    $.each(this.params, function () {
                        paramValues[this] = $element.attr(prefix + this);
                    });

                    this.adapt({
                        element: element,
                        form: form,
                        message: message,
                        params: paramValues,
                        rules: rules,
                        messages: messages
                    });
                }
            });

            $.extend(rules, { "__dummy__": true });

            if (!skipAttach) {
                valInfo.attachValidation();
            }
        },

        parse: function (selector) {
            /// &lt;summary&gt;
            /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
            /// with the [data-val=true] attribute value and enables validation according to the data-val-*
            /// attribute values.
            /// &lt;/summary&gt;
            /// &lt;param name="selector" type="String"&gt;Any valid jQuery selector.&lt;/param&gt;
            var $forms = $(selector)
                .parents("form")
                .andSelf()
                .add($(selector).find("form"))
                .filter("form");

            $(selector).find(":input[data-val=true]").each(function () {
                $jQval.unobtrusive.parseElement(this, true);
            });

            $forms.each(function () {
                var info = validationInfo(this);
                if (info) {
                    info.attachValidation();
                }
            });
        }
    };

    adapters = $jQval.unobtrusive.adapters;

    adapters.add = function (adapterName, params, fn) {
        /// &lt;summary&gt;Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.&lt;/summary&gt;
        /// &lt;param name="adapterName" type="String"&gt;The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).&lt;/param&gt;
        /// &lt;param name="params" type="Array" optional="true"&gt;[Optional] An array of parameter names (strings) that will
        /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
        /// mmmm is the parameter name).&lt;/param&gt;
        /// &lt;param name="fn" type="Function"&gt;The function to call, which adapts the values from the HTML
        /// attributes into jQuery Validate rules and/or messages.&lt;/param&gt;
        /// &lt;returns type="jQuery.validator.unobtrusive.adapters" /&gt;
        if (!fn) {  // Called with no params, just a function
            fn = params;
            params = [];
        }
        this.push({ name: adapterName, params: params, adapt: fn });
        return this;
    };

    adapters.addBool = function (adapterName, ruleName) {
        /// &lt;summary&gt;Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation rule has no parameter values.&lt;/summary&gt;
        /// &lt;param name="adapterName" type="String"&gt;The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).&lt;/param&gt;
        /// &lt;param name="ruleName" type="String" optional="true"&gt;[Optional] The name of the jQuery Validate rule. If not provided, the value
        /// of adapterName will be used instead.&lt;/param&gt;
        /// &lt;returns type="jQuery.validator.unobtrusive.adapters" /&gt;
        return this.add(adapterName, function (options) {
            setValidationValues(options, ruleName || adapterName, true);
        });
    };

    adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
        /// &lt;summary&gt;Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and
        /// one for min-and-max). The HTML parameters are expected to be named -min and -max.&lt;/summary&gt;
        /// &lt;param name="adapterName" type="String"&gt;The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).&lt;/param&gt;
        /// &lt;param name="minRuleName" type="String"&gt;The name of the jQuery Validate rule to be used when you only
        /// have a minimum value.&lt;/param&gt;
        /// &lt;param name="maxRuleName" type="String"&gt;The name of the jQuery Validate rule to be used when you only
        /// have a maximum value.&lt;/param&gt;
        /// &lt;param name="minMaxRuleName" type="String"&gt;The name of the jQuery Validate rule to be used when you
        /// have both a minimum and maximum value.&lt;/param&gt;
        /// &lt;param name="minAttribute" type="String" optional="true"&gt;[Optional] The name of the HTML attribute that
        /// contains the minimum value. The default is "min".&lt;/param&gt;
        /// &lt;param name="maxAttribute" type="String" optional="true"&gt;[Optional] The name of the HTML attribute that
        /// contains the maximum value. The default is "max".&lt;/param&gt;
        /// &lt;returns type="jQuery.validator.unobtrusive.adapters" /&gt;
        return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
            var min = options.params.min,
                max = options.params.max;

            if (min &amp;&amp; max) {
                setValidationValues(options, minMaxRuleName, [min, max]);
            }
            else if (min) {
                setValidationValues(options, minRuleName, min);
            }
            else if (max) {
                setValidationValues(options, maxRuleName, max);
            }
        });
    };

    adapters.addSingleVal = function (adapterName, attribute, ruleName) {
        /// &lt;summary&gt;Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
        /// the jQuery Validate validation rule has a single value.&lt;/summary&gt;
        /// &lt;param name="adapterName" type="String"&gt;The name of the adapter to be added. This matches the name used
        /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).&lt;/param&gt;
        /// &lt;param name="attribute" type="String"&gt;[Optional] The name of the HTML attribute that contains the value.
        /// The default is "val".&lt;/param&gt;
        /// &lt;param name="ruleName" type="String" optional="true"&gt;[Optional] The name of the jQuery Validate rule. If not provided, the value
        /// of adapterName will be used instead.&lt;/param&gt;
        /// &lt;returns type="jQuery.validator.unobtrusive.adapters" /&gt;
        return this.add(adapterName, [attribute || "val"], function (options) {
            setValidationValues(options, ruleName || adapterName, options.params[attribute]);
        });
    };

    $jQval.addMethod("__dummy__", function (value, element, params) {
        return true;
    });

    $jQval.addMethod("regex", function (value, element, params) {
        var match;
        if (this.optional(element)) {
            return true;
        }

        match = new RegExp(params).exec(value);
        return (match &amp;&amp; (match.index === 0) &amp;&amp; (match[0].length === value.length));
    });

    $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
        var match;
        if (nonalphamin) {
            match = value.match(/\W/g);
            match = match &amp;&amp; match.length &gt;= nonalphamin;
        }
        return match;
    });

    adapters.addSingleVal("accept", "exts").addSingleVal("regex", "pattern");
    adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
    adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
    adapters.add("equalto", ["other"], function (options) {
        var prefix = getModelPrefix(options.element.name),
            other = options.params.other,
            fullOtherName = appendModelPrefix(other, prefix),
            element = $(options.form).find(":input[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

        setValidationValues(options, "equalTo", element);
    });
    adapters.add("required", function (options) {
        // jQuery Validate equates "required" with "mandatory" for checkbox elements
        if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
            setValidationValues(options, "required", true);
        }
    });
    adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
        var value = {
            url: options.params.url,
            type: options.params.type || "GET",
            data: {}
        },
            prefix = getModelPrefix(options.element.name);

        $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
            var paramName = appendModelPrefix(fieldName, prefix);
            value.data[paramName] = function () {
                return $(options.form).find(":input[name='" + escapeAttributeValue(paramName) + "']").val();
            };
        });

        setValidationValues(options, "remote", value);
    });
    adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
        if (options.params.min) {
            setValidationValues(options, "minlength", options.params.min);
        }
        if (options.params.nonalphamin) {
            setValidationValues(options, "nonalphamin", options.params.nonalphamin);
        }
        if (options.params.regex) {
            setValidationValues(options, "regex", options.params.regex);
        }
    });

    $(function () {
        $jQval.unobtrusive.parse(document);
    });
} (jQuery));



Scripts/jquery.validate.unobtrusive.min.js


/*
** Unobtrusive validation support library for jQuery and jQuery Validate
** Copyright (C) Microsoft Corporation. All rights reserved.
*/
(function(a){var d=a.validator,b,e="unobtrusiveValidation";function c(a,b,c){a.rules[b]=c;if(a.message)a.messages[b]=a.message}function j(a){return a.replace(/^\s+|\s+$/g,"").split(/\s*,\s*/g)}function f(a){return a.replace(/([!"#$%&amp;'()*+,./:;&lt;=&gt;?@\[\\\]^`{|}~])/g,"\\$1")}function h(a){return a.substr(0,a.lastIndexOf(".")+1)}function g(a,b){if(a.indexOf("*.")===0)a=a.replace("*.",b);return a}function m(c,e){var b=a(this).find("[data-valmsg-for='"+f(e[0].name)+"']"),d=b.attr("data-valmsg-replace"),g=d?a.parseJSON(d)!==false:null;b.removeClass("field-validation-valid").addClass("field-validation-error");c.data("unobtrusiveContainer",b);if(g){b.empty();c.removeClass("input-validation-error").appendTo(b)}else c.hide()}function l(e,d){var c=a(this).find("[data-valmsg-summary=true]"),b=c.find("ul");if(b&amp;&amp;b.length&amp;&amp;d.errorList.length){b.empty();c.addClass("validation-summary-errors").removeClass("validation-summary-valid");a.each(d.errorList,function(){a("&lt;li /&gt;").html(this.message).appendTo(b)})}}function k(d){var b=d.data("unobtrusiveContainer"),c=b.attr("data-valmsg-replace"),e=c?a.parseJSON(c):null;if(b){b.addClass("field-validation-valid").removeClass("field-validation-error");d.removeData("unobtrusiveContainer");e&amp;&amp;b.empty()}}function n(){var b=a(this);b.data("validator").resetForm();b.find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors");b.find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find("&gt;*").removeData("unobtrusiveContainer")}function i(c){var b=a(c),d=b.data(e),f=a.proxy(n,c);if(!d){d={options:{errorClass:"input-validation-error",errorElement:"span",errorPlacement:a.proxy(m,c),invalidHandler:a.proxy(l,c),messages:{},rules:{},success:a.proxy(k,c)},attachValidation:function(){b.unbind("reset."+e,f).bind("reset."+e,f).validate(this.options)},validate:function(){b.validate();return b.valid()}};b.data(e,d)}return d}d.unobtrusive={adapters:[],parseElement:function(b,h){var d=a(b),f=d.parents("form")[0],c,e,g;if(!f)return;c=i(f);c.options.rules[b.name]=e={};c.options.messages[b.name]=g={};a.each(this.adapters,function(){var c="data-val-"+this.name,i=d.attr(c),h={};if(i!==undefined){c+="-";a.each(this.params,function(){h[this]=d.attr(c+this)});this.adapt({element:b,form:f,message:i,params:h,rules:e,messages:g})}});a.extend(e,{__dummy__:true});!h&amp;&amp;c.attachValidation()},parse:function(b){var c=a(b).parents("form").andSelf().add(a(b).find("form")).filter("form");a(b).find(":input[data-val=true]").each(function(){d.unobtrusive.parseElement(this,true)});c.each(function(){var a=i(this);a&amp;&amp;a.attachValidation()})}};b=d.unobtrusive.adapters;b.add=function(c,a,b){if(!b){b=a;a=[]}this.push({name:c,params:a,adapt:b});return this};b.addBool=function(a,b){return this.add(a,function(d){c(d,b||a,true)})};b.addMinMax=function(e,g,f,a,d,b){return this.add(e,[d||"min",b||"max"],function(b){var e=b.params.min,d=b.params.max;if(e&amp;&amp;d)c(b,a,[e,d]);else if(e)c(b,g,e);else d&amp;&amp;c(b,f,d)})};b.addSingleVal=function(a,b,d){return this.add(a,[b||"val"],function(e){c(e,d||a,e.params[b])})};d.addMethod("__dummy__",function(){return true});d.addMethod("regex",function(b,c,d){var a;if(this.optional(c))return true;a=(new RegExp(d)).exec(b);return a&amp;&amp;a.index===0&amp;&amp;a[0].length===b.length});d.addMethod("nonalphamin",function(c,d,b){var a;if(b){a=c.match(/\W/g);a=a&amp;&amp;a.length&gt;=b}return a});b.addSingleVal("accept","exts").addSingleVal("regex","pattern");b.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");b.addMinMax("length","minlength","maxlength","rangelength").addMinMax("range","min","max","range");b.add("equalto",["other"],function(b){var i=h(b.element.name),j=b.params.other,d=g(j,i),e=a(b.form).find(":input[name='"+f(d)+"']")[0];c(b,"equalTo",e)});b.add("required",function(a){(a.element.tagName.toUpperCase()!=="INPUT"||a.element.type.toUpperCase()!=="CHECKBOX")&amp;&amp;c(a,"required",true)});b.add("remote",["url","type","additionalfields"],function(b){var d={url:b.params.url,type:b.params.type||"GET",data:{}},e=h(b.element.name);a.each(j(b.params.additionalfields||b.element.name),function(i,h){var c=g(h,e);d.data[c]=function(){return a(b.form).find(":input[name='"+f(c)+"']").val()}});c(b,"remote",d)});b.add("password",["min","nonalphamin","regex"],function(a){a.params.min&amp;&amp;c(a,"minlength",a.params.min);a.params.nonalphamin&amp;&amp;c(a,"nonalphamin",a.params.nonalphamin);a.params.regex&amp;&amp;c(a,"regex",a.params.regex)});a(function(){d.unobtrusive.parse(document)})})(jQuery);



Scripts/knockout-2.2.0.debug.js


// Knockout JavaScript library v2.2.0
// (c) Steven Sanderson - http://knockoutjs.com/
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function(){
var DEBUG=true;
(function(window,document,navigator,jQuery,undefined){
!function(factory) {
    // Support three module loading scenarios
    if (typeof require === 'function' &amp;&amp; typeof exports === 'object' &amp;&amp; typeof module === 'object') {
        // [1] CommonJS/Node.js
        var target = module['exports'] || exports; // module.exports is for Node.js
        factory(target);
    } else if (typeof define === 'function' &amp;&amp; define['amd']) {
        // [2] AMD anonymous module
        define(['exports'], factory);
    } else {
        // [3] No module loader (plain &lt;script&gt; tag) - put directly in global namespace
        factory(window['ko'] = {});
    }
}(function(koExports){
// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).
// In the future, the following "ko" variable may be made distinct from "koExports" so that private objects are not externally reachable.
var ko = typeof koExports !== 'undefined' ? koExports : {};
// Google Closure Compiler helpers (used only to make the minified file smaller)
ko.exportSymbol = function(koPath, object) {
	var tokens = koPath.split(".");

	// In the future, "ko" may become distinct from "koExports" (so that non-exported objects are not reachable)
	// At that point, "target" would be set to: (typeof koExports !== "undefined" ? koExports : ko)
	var target = ko;

	for (var i = 0; i &lt; tokens.length - 1; i++)
		target = target[tokens[i]];
	target[tokens[tokens.length - 1]] = object;
};
ko.exportProperty = function(owner, publicName, object) {
  owner[publicName] = object;
};
ko.version = "2.2.0";

ko.exportSymbol('version', ko.version);
ko.utils = new (function () {
    var stringTrimRegex = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;

    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)
    var knownEvents = {}, knownEventTypesByEventName = {};
    var keyEventTypeName = /Firefox\/2/i.test(navigator.userAgent) ? 'KeyboardEvent' : 'UIEvents';
    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];
    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];
    for (var eventType in knownEvents) {
        var knownEventsForType = knownEvents[eventType];
        if (knownEventsForType.length) {
            for (var i = 0, j = knownEventsForType.length; i &lt; j; i++)
                knownEventTypesByEventName[knownEventsForType[i]] = eventType;
        }
    }
    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406

    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)
    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE &lt; 10.
    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.
    // If there is a future need to detect specific versions of IE10+, we will amend this.
    var ieVersion = (function() {
        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');

        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
        while (
            div.innerHTML = '&lt;!--[if gt IE ' + (++version) + ']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;',
            iElems[0]
        );
        return version &gt; 4 ? version : undefined;
    }());
    var isIe6 = ieVersion === 6,
        isIe7 = ieVersion === 7;

    function isClickOnCheckableElement(element, eventType) {
        if ((ko.utils.tagNameLower(element) !== "input") || !element.type) return false;
        if (eventType.toLowerCase() != "click") return false;
        var inputType = element.type;
        return (inputType == "checkbox") || (inputType == "radio");
    }

    return {
        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],

        arrayForEach: function (array, action) {
            for (var i = 0, j = array.length; i &lt; j; i++)
                action(array[i]);
        },

        arrayIndexOf: function (array, item) {
            if (typeof Array.prototype.indexOf == "function")
                return Array.prototype.indexOf.call(array, item);
            for (var i = 0, j = array.length; i &lt; j; i++)
                if (array[i] === item)
                    return i;
            return -1;
        },

        arrayFirst: function (array, predicate, predicateOwner) {
            for (var i = 0, j = array.length; i &lt; j; i++)
                if (predicate.call(predicateOwner, array[i]))
                    return array[i];
            return null;
        },

        arrayRemoveItem: function (array, itemToRemove) {
            var index = ko.utils.arrayIndexOf(array, itemToRemove);
            if (index &gt;= 0)
                array.splice(index, 1);
        },

        arrayGetDistinctValues: function (array) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i &lt; j; i++) {
                if (ko.utils.arrayIndexOf(result, array[i]) &lt; 0)
                    result.push(array[i]);
            }
            return result;
        },

        arrayMap: function (array, mapping) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i &lt; j; i++)
                result.push(mapping(array[i]));
            return result;
        },

        arrayFilter: function (array, predicate) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i &lt; j; i++)
                if (predicate(array[i]))
                    result.push(array[i]);
            return result;
        },

        arrayPushAll: function (array, valuesToPush) {
            if (valuesToPush instanceof Array)
                array.push.apply(array, valuesToPush);
            else
                for (var i = 0, j = valuesToPush.length; i &lt; j; i++)
                    array.push(valuesToPush[i]);
            return array;
        },

        extend: function (target, source) {
            if (source) {
                for(var prop in source) {
                    if(source.hasOwnProperty(prop)) {
                        target[prop] = source[prop];
                    }
                }
            }
            return target;
        },

        emptyDomNode: function (domNode) {
            while (domNode.firstChild) {
                ko.removeNode(domNode.firstChild);
            }
        },

        moveCleanedNodesToContainerElement: function(nodes) {
            // Ensure it's a real array, as we're about to reparent the nodes and
            // we don't want the underlying collection to change while we're doing that.
            var nodesArray = ko.utils.makeArray(nodes);

            var container = document.createElement('div');
            for (var i = 0, j = nodesArray.length; i &lt; j; i++) {
                container.appendChild(ko.cleanNode(nodesArray[i]));
            }
            return container;
        },

        cloneNodes: function (nodesArray, shouldCleanNodes) {
            for (var i = 0, j = nodesArray.length, newNodesArray = []; i &lt; j; i++) {
                var clonedNode = nodesArray[i].cloneNode(true);
                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);
            }
            return newNodesArray;
        },

        setDomNodeChildren: function (domNode, childNodes) {
            ko.utils.emptyDomNode(domNode);
            if (childNodes) {
                for (var i = 0, j = childNodes.length; i &lt; j; i++)
                    domNode.appendChild(childNodes[i]);
            }
        },

        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {
            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;
            if (nodesToReplaceArray.length &gt; 0) {
                var insertionPoint = nodesToReplaceArray[0];
                var parent = insertionPoint.parentNode;
                for (var i = 0, j = newNodesArray.length; i &lt; j; i++)
                    parent.insertBefore(newNodesArray[i], insertionPoint);
                for (var i = 0, j = nodesToReplaceArray.length; i &lt; j; i++) {
                    ko.removeNode(nodesToReplaceArray[i]);
                }
            }
        },

        setOptionNodeSelectionState: function (optionNode, isSelected) {
            // IE6 sometimes throws "unknown error" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.
            if (ieVersion &lt; 7)
                optionNode.setAttribute("selected", isSelected);
            else
                optionNode.selected = isSelected;
        },

        stringTrim: function (string) {
            return (string || "").replace(stringTrimRegex, "");
        },

        stringTokenize: function (string, delimiter) {
            var result = [];
            var tokens = (string || "").split(delimiter);
            for (var i = 0, j = tokens.length; i &lt; j; i++) {
                var trimmed = ko.utils.stringTrim(tokens[i]);
                if (trimmed !== "")
                    result.push(trimmed);
            }
            return result;
        },

        stringStartsWith: function (string, startsWith) {
            string = string || "";
            if (startsWith.length &gt; string.length)
                return false;
            return string.substring(0, startsWith.length) === startsWith;
        },

        domNodeIsContainedBy: function (node, containedByNode) {
            if (containedByNode.compareDocumentPosition)
                return (containedByNode.compareDocumentPosition(node) &amp; 16) == 16;
            while (node != null) {
                if (node == containedByNode)
                    return true;
                node = node.parentNode;
            }
            return false;
        },

        domNodeIsAttachedToDocument: function (node) {
            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument);
        },

        tagNameLower: function(element) {
            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.
            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),
            // we don't need to do the .toLowerCase() as it will always be lower case anyway.
            return element &amp;&amp; element.tagName &amp;&amp; element.tagName.toLowerCase();
        },

        registerEventHandler: function (element, eventType, handler) {
            var mustUseAttachEvent = ieVersion &amp;&amp; eventsThatMustBeRegisteredUsingAttachEvent[eventType];
            if (!mustUseAttachEvent &amp;&amp; typeof jQuery != "undefined") {
                if (isClickOnCheckableElement(element, eventType)) {
                    // For click events on checkboxes, jQuery interferes with the event handling in an awkward way:
                    // it toggles the element checked state *after* the click event handlers run, whereas native
                    // click events toggle the checked state *before* the event handler.
                    // Fix this by intecepting the handler and applying the correct checkedness before it runs.
                    var originalHandler = handler;
                    handler = function(event, eventData) {
                        var jQuerySuppliedCheckedState = this.checked;
                        if (eventData)
                            this.checked = eventData.checkedStateBeforeEvent !== true;
                        originalHandler.call(this, event);
                        this.checked = jQuerySuppliedCheckedState; // Restore the state jQuery applied
                    };
                }
                jQuery(element)['bind'](eventType, handler);
            } else if (!mustUseAttachEvent &amp;&amp; typeof element.addEventListener == "function")
                element.addEventListener(eventType, handler, false);
            else if (typeof element.attachEvent != "undefined")
                element.attachEvent("on" + eventType, function (event) {
                    handler.call(element, event);
                });
            else
                throw new Error("Browser doesn't support addEventListener or attachEvent");
        },

        triggerEvent: function (element, eventType) {
            if (!(element &amp;&amp; element.nodeType))
                throw new Error("element must be a DOM node when calling triggerEvent");

            if (typeof jQuery != "undefined") {
                var eventData = [];
                if (isClickOnCheckableElement(element, eventType)) {
                    // Work around the jQuery "click events on checkboxes" issue described above by storing the original checked state before triggering the handler
                    eventData.push({ checkedStateBeforeEvent: element.checked });
                }
                jQuery(element)['trigger'](eventType, eventData);
            } else if (typeof document.createEvent == "function") {
                if (typeof element.dispatchEvent == "function") {
                    var eventCategory = knownEventTypesByEventName[eventType] || "HTMLEvents";
                    var event = document.createEvent(eventCategory);
                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);
                    element.dispatchEvent(event);
                }
                else
                    throw new Error("The supplied element doesn't support dispatchEvent");
            } else if (typeof element.fireEvent != "undefined") {
                // Unlike other browsers, IE doesn't change the checked state of checkboxes/radiobuttons when you trigger their "click" event
                // so to make it consistent, we'll do it manually here
                if (isClickOnCheckableElement(element, eventType))
                    element.checked = element.checked !== true;
                element.fireEvent("on" + eventType);
            }
            else
                throw new Error("Browser doesn't support triggering events");
        },

        unwrapObservable: function (value) {
            return ko.isObservable(value) ? value() : value;
        },

        peekObservable: function (value) {
            return ko.isObservable(value) ? value.peek() : value;
        },

        toggleDomNodeCssClass: function (node, classNames, shouldHaveClass) {
            if (classNames) {
                var cssClassNameRegex = /[\w-]+/g,
                    currentClassNames = node.className.match(cssClassNameRegex) || [];
                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {
                    var indexOfClass = ko.utils.arrayIndexOf(currentClassNames, className);
                    if (indexOfClass &gt;= 0) {
                        if (!shouldHaveClass)
                            currentClassNames.splice(indexOfClass, 1);
                    } else {
                        if (shouldHaveClass)
                            currentClassNames.push(className);
                    }
                });
                node.className = currentClassNames.join(" ");
            }
        },

        setTextContent: function(element, textContent) {
            var value = ko.utils.unwrapObservable(textContent);
            if ((value === null) || (value === undefined))
                value = "";

            if (element.nodeType === 3) {
                element.data = value;
            } else {
                // We need there to be exactly one child: a text node.
                // If there are no children, more than one, or if it's not a text node,
                // we'll clear everything and create a single text node.
                var innerTextNode = ko.virtualElements.firstChild(element);
                if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {
                    ko.virtualElements.setDomNodeChildren(element, [document.createTextNode(value)]);
                } else {
                    innerTextNode.data = value;
                }

                ko.utils.forceRefresh(element);
            }
        },

        setElementName: function(element, name) {
            element.name = name;

            // Workaround IE 6/7 issue
            // - https://github.com/SteveSanderson/knockout/issues/197
            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/
            if (ieVersion &lt;= 7) {
                try {
                    element.mergeAttributes(document.createElement("&lt;input name='" + element.name + "'/&gt;"), false);
                }
                catch(e) {} // For IE9 with doc mode "IE9 Standards" and browser mode "IE9 Compatibility View"
            }
        },

        forceRefresh: function(node) {
            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209
            if (ieVersion &gt;= 9) {
                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container
                var elem = node.nodeType == 1 ? node : node.parentNode;
                if (elem.style)
                    elem.style.zoom = elem.style.zoom;
            }
        },

        ensureSelectElementIsRenderedCorrectly: function(selectElement) {
            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.
            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)
            if (ieVersion &gt;= 9) {
                var originalWidth = selectElement.style.width;
                selectElement.style.width = 0;
                selectElement.style.width = originalWidth;
            }
        },

        range: function (min, max) {
            min = ko.utils.unwrapObservable(min);
            max = ko.utils.unwrapObservable(max);
            var result = [];
            for (var i = min; i &lt;= max; i++)
                result.push(i);
            return result;
        },

        makeArray: function(arrayLikeObject) {
            var result = [];
            for (var i = 0, j = arrayLikeObject.length; i &lt; j; i++) {
                result.push(arrayLikeObject[i]);
            };
            return result;
        },

        isIe6 : isIe6,
        isIe7 : isIe7,
        ieVersion : ieVersion,

        getFormFields: function(form, fieldName) {
            var fields = ko.utils.makeArray(form.getElementsByTagName("input")).concat(ko.utils.makeArray(form.getElementsByTagName("textarea")));
            var isMatchingField = (typeof fieldName == 'string')
                ? function(field) { return field.name === fieldName }
                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate
            var matches = [];
            for (var i = fields.length - 1; i &gt;= 0; i--) {
                if (isMatchingField(fields[i]))
                    matches.push(fields[i]);
            };
            return matches;
        },

        parseJson: function (jsonString) {
            if (typeof jsonString == "string") {
                jsonString = ko.utils.stringTrim(jsonString);
                if (jsonString) {
                    if (window.JSON &amp;&amp; window.JSON.parse) // Use native parsing where available
                        return window.JSON.parse(jsonString);
                    return (new Function("return " + jsonString))(); // Fallback on less safe parsing for older browsers
                }
            }
            return null;
        },

        stringifyJson: function (data, replacer, space) {   // replacer and space are optional
            if ((typeof JSON == "undefined") || (typeof JSON.stringify == "undefined"))
                throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE &lt; 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);
        },

        postJson: function (urlOrForm, data, options) {
            options = options || {};
            var params = options['params'] || {};
            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;
            var url = urlOrForm;

            // If we were given a form, use its 'action' URL and pick out any requested field values
            if((typeof urlOrForm == 'object') &amp;&amp; (ko.utils.tagNameLower(urlOrForm) === "form")) {
                var originalForm = urlOrForm;
                url = originalForm.action;
                for (var i = includeFields.length - 1; i &gt;= 0; i--) {
                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);
                    for (var j = fields.length - 1; j &gt;= 0; j--)
                        params[fields[j].name] = fields[j].value;
                }
            }

            data = ko.utils.unwrapObservable(data);
            var form = document.createElement("form");
            form.style.display = "none";
            form.action = url;
            form.method = "post";
            for (var key in data) {
                var input = document.createElement("input");
                input.name = key;
                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));
                form.appendChild(input);
            }
            for (var key in params) {
                var input = document.createElement("input");
                input.name = key;
                input.value = params[key];
                form.appendChild(input);
            }
            document.body.appendChild(form);
            options['submitter'] ? options['submitter'](form) : form.submit();
            setTimeout(function () { form.parentNode.removeChild(form); }, 0);
        }
    }
})();

ko.exportSymbol('utils', ko.utils);
ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);
ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);
ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);
ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);
ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);
ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);
ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);
ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);
ko.exportSymbol('utils.extend', ko.utils.extend);
ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);
ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);
ko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);
ko.exportSymbol('utils.postJson', ko.utils.postJson);
ko.exportSymbol('utils.parseJson', ko.utils.parseJson);
ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);
ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);
ko.exportSymbol('utils.range', ko.utils.range);
ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);
ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);
ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);

if (!Function.prototype['bind']) {
    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)
    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js
    Function.prototype['bind'] = function (object) {
        var originalFunction = this, args = Array.prototype.slice.call(arguments), object = args.shift();
        return function () {
            return originalFunction.apply(object, args.concat(Array.prototype.slice.call(arguments)));
        };
    };
}

ko.utils.domData = new (function () {
    var uniqueId = 0;
    var dataStoreKeyExpandoPropertyName = "__ko__" + (new Date).getTime();
    var dataStore = {};
    return {
        get: function (node, key) {
            var allDataForNode = ko.utils.domData.getAll(node, false);
            return allDataForNode === undefined ? undefined : allDataForNode[key];
        },
        set: function (node, key, value) {
            if (value === undefined) {
                // Make sure we don't actually create a new domData key if we are actually deleting a value
                if (ko.utils.domData.getAll(node, false) === undefined)
                    return;
            }
            var allDataForNode = ko.utils.domData.getAll(node, true);
            allDataForNode[key] = value;
        },
        getAll: function (node, createIfNotFound) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            var hasExistingDataStore = dataStoreKey &amp;&amp; (dataStoreKey !== "null") &amp;&amp; dataStore[dataStoreKey];
            if (!hasExistingDataStore) {
                if (!createIfNotFound)
                    return undefined;
                dataStoreKey = node[dataStoreKeyExpandoPropertyName] = "ko" + uniqueId++;
                dataStore[dataStoreKey] = {};
            }
            return dataStore[dataStoreKey];
        },
        clear: function (node) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            if (dataStoreKey) {
                delete dataStore[dataStoreKey];
                node[dataStoreKeyExpandoPropertyName] = null;
                return true; // Exposing "did clean" flag purely so specs can infer whether things have been cleaned up as intended
            }
            return false;
        }
    }
})();

ko.exportSymbol('utils.domData', ko.utils.domData);
ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully

ko.utils.domNodeDisposal = new (function () {
    var domDataKey = "__ko_domNodeDisposal__" + (new Date).getTime();
    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document
    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document

    function getDisposeCallbacksCollection(node, createIfNotFound) {
        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);
        if ((allDisposeCallbacks === undefined) &amp;&amp; createIfNotFound) {
            allDisposeCallbacks = [];
            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);
        }
        return allDisposeCallbacks;
    }
    function destroyCallbacksCollection(node) {
        ko.utils.domData.set(node, domDataKey, undefined);
    }

    function cleanSingleNode(node) {
        // Run all the dispose callbacks
        var callbacks = getDisposeCallbacksCollection(node, false);
        if (callbacks) {
            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)
            for (var i = 0; i &lt; callbacks.length; i++)
                callbacks[i](node);
        }

        // Also erase the DOM data
        ko.utils.domData.clear(node);

        // Special support for jQuery here because it's so commonly used.
        // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData
        // so notify it to tear down any resources associated with the node &amp; descendants here.
        if ((typeof jQuery == "function") &amp;&amp; (typeof jQuery['cleanData'] == "function"))
            jQuery['cleanData']([node]);

        // Also clear any immediate-child comment nodes, as these wouldn't have been found by
        // node.getElementsByTagName("*") in cleanNode() (comment nodes aren't elements)
        if (cleanableNodeTypesWithDescendants[node.nodeType])
            cleanImmediateCommentTypeChildren(node);
    }

    function cleanImmediateCommentTypeChildren(nodeWithChildren) {
        var child, nextChild = nodeWithChildren.firstChild;
        while (child = nextChild) {
            nextChild = child.nextSibling;
            if (child.nodeType === 8)
                cleanSingleNode(child);
        }
    }

    return {
        addDisposeCallback : function(node, callback) {
            if (typeof callback != "function")
                throw new Error("Callback must be a function");
            getDisposeCallbacksCollection(node, true).push(callback);
        },

        removeDisposeCallback : function(node, callback) {
            var callbacksCollection = getDisposeCallbacksCollection(node, false);
            if (callbacksCollection) {
                ko.utils.arrayRemoveItem(callbacksCollection, callback);
                if (callbacksCollection.length == 0)
                    destroyCallbacksCollection(node);
            }
        },

        cleanNode : function(node) {
            // First clean this node, where applicable
            if (cleanableNodeTypes[node.nodeType]) {
                cleanSingleNode(node);

                // ... then its descendants, where applicable
                if (cleanableNodeTypesWithDescendants[node.nodeType]) {
                    // Clone the descendants list in case it changes during iteration
                    var descendants = [];
                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName("*"));
                    for (var i = 0, j = descendants.length; i &lt; j; i++)
                        cleanSingleNode(descendants[i]);
                }
            }
            return node;
        },

        removeNode : function(node) {
            ko.cleanNode(node);
            if (node.parentNode)
                node.parentNode.removeChild(node);
        }
    }
})();
ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience
ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience
ko.exportSymbol('cleanNode', ko.cleanNode);
ko.exportSymbol('removeNode', ko.removeNode);
ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);
ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);
ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);
(function () {
    var leadingCommentRegex = /^(\s*)&lt;!--(.*?)--&gt;/;

    function simpleHtmlParse(html) {
        // Based on jQuery's "clean" function, but only accounting for table-related elements.
        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's "clean" function directly

        // Note that there's still an issue in IE &lt; 9 whereby it will discard comment nodes that are the first child of
        // a descendant node. For example: "&lt;div&gt;&lt;!-- mycomment --&gt;abc&lt;/div&gt;" will get parsed as "&lt;div&gt;abc&lt;/div&gt;"
        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node
        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.

        // Trim whitespace, otherwise indexOf won't work as expected
        var tags = ko.utils.stringTrim(html).toLowerCase(), div = document.createElement("div");

        // Finds the first match from the left column, and returns the corresponding "wrap" data from the right column
        var wrap = tags.match(/^&lt;(thead|tbody|tfoot)/)              &amp;&amp; [1, "&lt;table&gt;", "&lt;/table&gt;"] ||
                   !tags.indexOf("&lt;tr")                             &amp;&amp; [2, "&lt;table&gt;&lt;tbody&gt;", "&lt;/tbody&gt;&lt;/table&gt;"] ||
                   (!tags.indexOf("&lt;td") || !tags.indexOf("&lt;th"))   &amp;&amp; [3, "&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;", "&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;"] ||
                   /* anything else */                                 [0, "", ""];

        // Go to html and back, then peel off extra wrappers
        // Note that we always prefix with some dummy text, because otherwise, IE&lt;9 will strip out leading comment nodes in descendants. Total madness.
        var markup = "ignored&lt;div&gt;" + wrap[1] + html + wrap[2] + "&lt;/div&gt;";
        if (typeof window['innerShiv'] == "function") {
            div.appendChild(window['innerShiv'](markup));
        } else {
            div.innerHTML = markup;
        }

        // Move to the right depth
        while (wrap[0]--)
            div = div.lastChild;

        return ko.utils.makeArray(div.lastChild.childNodes);
    }

    function jQueryHtmlParse(html) {
        var elems = jQuery['clean']([html]);

        // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.
        // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.
        // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.
        if (elems &amp;&amp; elems[0]) {
            // Find the top-most parent element that's a direct child of a document fragment
            var elem = elems[0];
            while (elem.parentNode &amp;&amp; elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)
                elem = elem.parentNode;
            // ... then detach it
            if (elem.parentNode)
                elem.parentNode.removeChild(elem);
        }

        return elems;
    }

    ko.utils.parseHtmlFragment = function(html) {
        return typeof jQuery != 'undefined' ? jQueryHtmlParse(html)   // As below, benefit from jQuery's optimisations where possible
                                            : simpleHtmlParse(html);  // ... otherwise, this simple logic will do in most common cases.
    };

    ko.utils.setHtml = function(node, html) {
        ko.utils.emptyDomNode(node);

        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it
        html = ko.utils.unwrapObservable(html);

        if ((html !== null) &amp;&amp; (html !== undefined)) {
            if (typeof html != 'string')
                html = html.toString();

            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,
            // for example &lt;tr&gt; elements which are not normally allowed to exist on their own.
            // If you've referenced jQuery we'll use that rather than duplicating its code.
            if (typeof jQuery != 'undefined') {
                jQuery(node)['html'](html);
            } else {
                // ... otherwise, use KO's own parsing logic.
                var parsedNodes = ko.utils.parseHtmlFragment(html);
                for (var i = 0; i &lt; parsedNodes.length; i++)
                    node.appendChild(parsedNodes[i]);
            }
        }
    };
})();

ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);
ko.exportSymbol('utils.setHtml', ko.utils.setHtml);

ko.memoization = (function () {
    var memos = {};

    function randomMax8HexChars() {
        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
    }
    function generateRandomId() {
        return randomMax8HexChars() + randomMax8HexChars();
    }
    function findMemoNodes(rootNode, appendToArray) {
        if (!rootNode)
            return;
        if (rootNode.nodeType == 8) {
            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);
            if (memoId != null)
                appendToArray.push({ domNode: rootNode, memoId: memoId });
        } else if (rootNode.nodeType == 1) {
            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i &lt; j; i++)
                findMemoNodes(childNodes[i], appendToArray);
        }
    }

    return {
        memoize: function (callback) {
            if (typeof callback != "function")
                throw new Error("You can only pass a function to ko.memoization.memoize()");
            var memoId = generateRandomId();
            memos[memoId] = callback;
            return "&lt;!--[ko_memo:" + memoId + "]--&gt;";
        },

        unmemoize: function (memoId, callbackParams) {
            var callback = memos[memoId];
            if (callback === undefined)
                throw new Error("Couldn't find any memo with ID " + memoId + ". Perhaps it's already been unmemoized.");
            try {
                callback.apply(null, callbackParams || []);
                return true;
            }
            finally { delete memos[memoId]; }
        },

        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {
            var memos = [];
            findMemoNodes(domNode, memos);
            for (var i = 0, j = memos.length; i &lt; j; i++) {
                var node = memos[i].domNode;
                var combinedParams = [node];
                if (extraCallbackParamsArray)
                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);
                ko.memoization.unmemoize(memos[i].memoId, combinedParams);
                node.nodeValue = ""; // Neuter this node so we don't try to unmemoize it again
                if (node.parentNode)
                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)
            }
        },

        parseMemoText: function (memoText) {
            var match = memoText.match(/^\[ko_memo\:(.*?)\]$/);
            return match ? match[1] : null;
        }
    };
})();

ko.exportSymbol('memoization', ko.memoization);
ko.exportSymbol('memoization.memoize', ko.memoization.memoize);
ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);
ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);
ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);
ko.extenders = {
    'throttle': function(target, timeout) {
        // Throttling means two things:

        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies
        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate
        target['throttleEvaluation'] = timeout;

        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*
        //     so the target cannot change value synchronously or faster than a certain rate
        var writeTimeoutInstance = null;
        return ko.dependentObservable({
            'read': target,
            'write': function(value) {
                clearTimeout(writeTimeoutInstance);
                writeTimeoutInstance = setTimeout(function() {
                    target(value);
                }, timeout);
            }
        });
    },

    'notify': function(target, notifyWhen) {
        target["equalityComparer"] = notifyWhen == "always"
            ? function() { return false } // Treat all values as not equal
            : ko.observable["fn"]["equalityComparer"];
        return target;
    }
};

function applyExtenders(requestedExtenders) {
    var target = this;
    if (requestedExtenders) {
        for (var key in requestedExtenders) {
            var extenderHandler = ko.extenders[key];
            if (typeof extenderHandler == 'function') {
                target = extenderHandler(target, requestedExtenders[key]);
            }
        }
    }
    return target;
}

ko.exportSymbol('extenders', ko.extenders);

ko.subscription = function (target, callback, disposeCallback) {
    this.target = target;
    this.callback = callback;
    this.disposeCallback = disposeCallback;
    ko.exportProperty(this, 'dispose', this.dispose);
};
ko.subscription.prototype.dispose = function () {
    this.isDisposed = true;
    this.disposeCallback();
};

ko.subscribable = function () {
    this._subscriptions = {};

    ko.utils.extend(this, ko.subscribable['fn']);
    ko.exportProperty(this, 'subscribe', this.subscribe);
    ko.exportProperty(this, 'extend', this.extend);
    ko.exportProperty(this, 'getSubscriptionsCount', this.getSubscriptionsCount);
}

var defaultEvent = "change";

ko.subscribable['fn'] = {
    subscribe: function (callback, callbackTarget, event) {
        event = event || defaultEvent;
        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;

        var subscription = new ko.subscription(this, boundCallback, function () {
            ko.utils.arrayRemoveItem(this._subscriptions[event], subscription);
        }.bind(this));

        if (!this._subscriptions[event])
            this._subscriptions[event] = [];
        this._subscriptions[event].push(subscription);
        return subscription;
    },

    "notifySubscribers": function (valueToNotify, event) {
        event = event || defaultEvent;
        if (this._subscriptions[event]) {
            ko.dependencyDetection.ignore(function() {
                ko.utils.arrayForEach(this._subscriptions[event].slice(0), function (subscription) {
                    // In case a subscription was disposed during the arrayForEach cycle, check
                    // for isDisposed on each subscription before invoking its callback
                    if (subscription &amp;&amp; (subscription.isDisposed !== true))
                        subscription.callback(valueToNotify);
                });
            }, this);
        }
    },

    getSubscriptionsCount: function () {
        var total = 0;
        for (var eventName in this._subscriptions) {
            if (this._subscriptions.hasOwnProperty(eventName))
                total += this._subscriptions[eventName].length;
        }
        return total;
    },

    extend: applyExtenders
};


ko.isSubscribable = function (instance) {
    return typeof instance.subscribe == "function" &amp;&amp; typeof instance["notifySubscribers"] == "function";
};

ko.exportSymbol('subscribable', ko.subscribable);
ko.exportSymbol('isSubscribable', ko.isSubscribable);

ko.dependencyDetection = (function () {
    var _frames = [];

    return {
        begin: function (callback) {
            _frames.push({ callback: callback, distinctDependencies:[] });
        },

        end: function () {
            _frames.pop();
        },

        registerDependency: function (subscribable) {
            if (!ko.isSubscribable(subscribable))
                throw new Error("Only subscribable things can act as dependencies");
            if (_frames.length &gt; 0) {
                var topFrame = _frames[_frames.length - 1];
                if (!topFrame || ko.utils.arrayIndexOf(topFrame.distinctDependencies, subscribable) &gt;= 0)
                    return;
                topFrame.distinctDependencies.push(subscribable);
                topFrame.callback(subscribable);
            }
        },

        ignore: function(callback, callbackTarget, callbackArgs) {
            try {
                _frames.push(null);
                return callback.apply(callbackTarget, callbackArgs || []);
            } finally {
                _frames.pop();
            }
        }
    };
})();
var primitiveTypes = { 'undefined':true, 'boolean':true, 'number':true, 'string':true };

ko.observable = function (initialValue) {
    var _latestValue = initialValue;

    function observable() {
        if (arguments.length &gt; 0) {
            // Write

            // Ignore writes if the value hasn't changed
            if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) {
                observable.valueWillMutate();
                _latestValue = arguments[0];
                if (DEBUG) observable._latestValue = _latestValue;
                observable.valueHasMutated();
            }
            return this; // Permits chained assignments
        }
        else {
            // Read
            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a "read" operation
            return _latestValue;
        }
    }
    if (DEBUG) observable._latestValue = _latestValue;
    ko.subscribable.call(observable);
    observable.peek = function() { return _latestValue };
    observable.valueHasMutated = function () { observable["notifySubscribers"](_latestValue); }
    observable.valueWillMutate = function () { observable["notifySubscribers"](_latestValue, "beforeChange"); }
    ko.utils.extend(observable, ko.observable['fn']);

    ko.exportProperty(observable, 'peek', observable.peek);
    ko.exportProperty(observable, "valueHasMutated", observable.valueHasMutated);
    ko.exportProperty(observable, "valueWillMutate", observable.valueWillMutate);

    return observable;
}

ko.observable['fn'] = {
    "equalityComparer": function valuesArePrimitiveAndEqual(a, b) {
        var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);
        return oldValueIsPrimitive ? (a === b) : false;
    }
};

var protoProperty = ko.observable.protoProperty = "__ko_proto__";
ko.observable['fn'][protoProperty] = ko.observable;

ko.hasPrototype = function(instance, prototype) {
    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;
    if (instance[protoProperty] === prototype) return true;
    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain
};

ko.isObservable = function (instance) {
    return ko.hasPrototype(instance, ko.observable);
}
ko.isWriteableObservable = function (instance) {
    // Observable
    if ((typeof instance == "function") &amp;&amp; instance[protoProperty] === ko.observable)
        return true;
    // Writeable dependent observable
    if ((typeof instance == "function") &amp;&amp; (instance[protoProperty] === ko.dependentObservable) &amp;&amp; (instance.hasWriteFunction))
        return true;
    // Anything else
    return false;
}


ko.exportSymbol('observable', ko.observable);
ko.exportSymbol('isObservable', ko.isObservable);
ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);
ko.observableArray = function (initialValues) {
    if (arguments.length == 0) {
        // Zero-parameter constructor initializes to empty array
        initialValues = [];
    }
    if ((initialValues !== null) &amp;&amp; (initialValues !== undefined) &amp;&amp; !('length' in initialValues))
        throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");

    var result = ko.observable(initialValues);
    ko.utils.extend(result, ko.observableArray['fn']);
    return result;
}

ko.observableArray['fn'] = {
    'remove': function (valueOrPredicate) {
        var underlyingArray = this.peek();
        var removedValues = [];
        var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
        for (var i = 0; i &lt; underlyingArray.length; i++) {
            var value = underlyingArray[i];
            if (predicate(value)) {
                if (removedValues.length === 0) {
                    this.valueWillMutate();
                }
                removedValues.push(value);
                underlyingArray.splice(i, 1);
                i--;
            }
        }
        if (removedValues.length) {
            this.valueHasMutated();
        }
        return removedValues;
    },

    'removeAll': function (arrayOfValues) {
        // If you passed zero args, we remove everything
        if (arrayOfValues === undefined) {
            var underlyingArray = this.peek();
            var allValues = underlyingArray.slice(0);
            this.valueWillMutate();
            underlyingArray.splice(0, underlyingArray.length);
            this.valueHasMutated();
            return allValues;
        }
        // If you passed an arg, we interpret it as an array of entries to remove
        if (!arrayOfValues)
            return [];
        return this['remove'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) &gt;= 0;
        });
    },

    'destroy': function (valueOrPredicate) {
        var underlyingArray = this.peek();
        var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
        this.valueWillMutate();
        for (var i = underlyingArray.length - 1; i &gt;= 0; i--) {
            var value = underlyingArray[i];
            if (predicate(value))
                underlyingArray[i]["_destroy"] = true;
        }
        this.valueHasMutated();
    },

    'destroyAll': function (arrayOfValues) {
        // If you passed zero args, we destroy everything
        if (arrayOfValues === undefined)
            return this['destroy'](function() { return true });

        // If you passed an arg, we interpret it as an array of entries to destroy
        if (!arrayOfValues)
            return [];
        return this['destroy'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) &gt;= 0;
        });
    },

    'indexOf': function (item) {
        var underlyingArray = this();
        return ko.utils.arrayIndexOf(underlyingArray, item);
    },

    'replace': function(oldItem, newItem) {
        var index = this['indexOf'](oldItem);
        if (index &gt;= 0) {
            this.valueWillMutate();
            this.peek()[index] = newItem;
            this.valueHasMutated();
        }
    }
}

// Populate ko.observableArray.fn with read/write functions from native arrays
// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array
// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale
ko.utils.arrayForEach(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (methodName) {
    ko.observableArray['fn'][methodName] = function () {
        // Use "peek" to avoid creating a subscription in any computed that we're executing in the context of
        // (for consistency with mutating regular observables)
        var underlyingArray = this.peek();
        this.valueWillMutate();
        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);
        this.valueHasMutated();
        return methodCallResult;
    };
});

// Populate ko.observableArray.fn with read-only functions from native arrays
ko.utils.arrayForEach(["slice"], function (methodName) {
    ko.observableArray['fn'][methodName] = function () {
        var underlyingArray = this();
        return underlyingArray[methodName].apply(underlyingArray, arguments);
    };
});

ko.exportSymbol('observableArray', ko.observableArray);
ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {
    var _latestValue,
        _hasBeenEvaluated = false,
        _isBeingEvaluated = false,
        readFunction = evaluatorFunctionOrOptions;

    if (readFunction &amp;&amp; typeof readFunction == "object") {
        // Single-parameter syntax - everything is on this "options" param
        options = readFunction;
        readFunction = options["read"];
    } else {
        // Multi-parameter syntax - construct the options according to the params passed
        options = options || {};
        if (!readFunction)
            readFunction = options["read"];
    }
    if (typeof readFunction != "function")
        throw new Error("Pass a function that returns the value of the ko.computed");

    function addSubscriptionToDependency(subscribable) {
        _subscriptionsToDependencies.push(subscribable.subscribe(evaluatePossiblyAsync));
    }

    function disposeAllSubscriptionsToDependencies() {
        ko.utils.arrayForEach(_subscriptionsToDependencies, function (subscription) {
            subscription.dispose();
        });
        _subscriptionsToDependencies = [];
    }

    function evaluatePossiblyAsync() {
        var throttleEvaluationTimeout = dependentObservable['throttleEvaluation'];
        if (throttleEvaluationTimeout &amp;&amp; throttleEvaluationTimeout &gt;= 0) {
            clearTimeout(evaluationTimeoutInstance);
            evaluationTimeoutInstance = setTimeout(evaluateImmediate, throttleEvaluationTimeout);
        } else
            evaluateImmediate();
    }

    function evaluateImmediate() {
        if (_isBeingEvaluated) {
            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.
            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost
            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing
            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387
            return;
        }

        // Don't dispose on first evaluation, because the "disposeWhen" callback might
        // e.g., dispose when the associated DOM element isn't in the doc, and it's not
        // going to be in the doc until *after* the first evaluation
        if (_hasBeenEvaluated &amp;&amp; disposeWhen()) {
            dispose();
            return;
        }

        _isBeingEvaluated = true;
        try {
            // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).
            // Then, during evaluation, we cross off any that are in fact still being used.
            var disposalCandidates = ko.utils.arrayMap(_subscriptionsToDependencies, function(item) {return item.target;});

            ko.dependencyDetection.begin(function(subscribable) {
                var inOld;
                if ((inOld = ko.utils.arrayIndexOf(disposalCandidates, subscribable)) &gt;= 0)
                    disposalCandidates[inOld] = undefined; // Don't want to dispose this subscription, as it's still being used
                else
                    addSubscriptionToDependency(subscribable); // Brand new subscription - add it
            });

            var newValue = readFunction.call(evaluatorFunctionTarget);

            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it
            for (var i = disposalCandidates.length - 1; i &gt;= 0; i--) {
                if (disposalCandidates[i])
                    _subscriptionsToDependencies.splice(i, 1)[0].dispose();
            }
            _hasBeenEvaluated = true;

            dependentObservable["notifySubscribers"](_latestValue, "beforeChange");
            _latestValue = newValue;
            if (DEBUG) dependentObservable._latestValue = _latestValue;
        } finally {
            ko.dependencyDetection.end();
        }

        dependentObservable["notifySubscribers"](_latestValue);
        _isBeingEvaluated = false;
        if (!_subscriptionsToDependencies.length)
            dispose();
    }

    function dependentObservable() {
        if (arguments.length &gt; 0) {
            if (typeof writeFunction === "function") {
                // Writing a value
                writeFunction.apply(evaluatorFunctionTarget, arguments);
            } else {
                throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
            }
            return this; // Permits chained assignments
        } else {
            // Reading the value
            if (!_hasBeenEvaluated)
                evaluateImmediate();
            ko.dependencyDetection.registerDependency(dependentObservable);
            return _latestValue;
        }
    }

    function peek() {
        if (!_hasBeenEvaluated)
            evaluateImmediate();
        return _latestValue;
    }

    function isActive() {
        return !_hasBeenEvaluated || _subscriptionsToDependencies.length &gt; 0;
    }

    // By here, "options" is always non-null
    var writeFunction = options["write"],
        disposeWhenNodeIsRemoved = options["disposeWhenNodeIsRemoved"] || options.disposeWhenNodeIsRemoved || null,
        disposeWhen = options["disposeWhen"] || options.disposeWhen || function() { return false; },
        dispose = disposeAllSubscriptionsToDependencies,
        _subscriptionsToDependencies = [],
        evaluationTimeoutInstance = null;

    if (!evaluatorFunctionTarget)
        evaluatorFunctionTarget = options["owner"];

    dependentObservable.peek = peek;
    dependentObservable.getDependenciesCount = function () { return _subscriptionsToDependencies.length; };
    dependentObservable.hasWriteFunction = typeof options["write"] === "function";
    dependentObservable.dispose = function () { dispose(); };
    dependentObservable.isActive = isActive;

    ko.subscribable.call(dependentObservable);
    ko.utils.extend(dependentObservable, ko.dependentObservable['fn']);

    ko.exportProperty(dependentObservable, 'peek', dependentObservable.peek);
    ko.exportProperty(dependentObservable, 'dispose', dependentObservable.dispose);
    ko.exportProperty(dependentObservable, 'isActive', dependentObservable.isActive);
    ko.exportProperty(dependentObservable, 'getDependenciesCount', dependentObservable.getDependenciesCount);

    // Evaluate, unless deferEvaluation is true
    if (options['deferEvaluation'] !== true)
        evaluateImmediate();

    // Build "disposeWhenNodeIsRemoved" and "disposeWhenNodeIsRemovedCallback" option values.
    // But skip if isActive is false (there will never be any dependencies to dispose).
    // (Note: "disposeWhenNodeIsRemoved" option both proactively disposes as soon as the node is removed using ko.removeNode(),
    // plus adds a "disposeWhen" callback that, on each evaluation, disposes if the node was removed by some other means.)
    if (disposeWhenNodeIsRemoved &amp;&amp; isActive()) {
        dispose = function() {
            ko.utils.domNodeDisposal.removeDisposeCallback(disposeWhenNodeIsRemoved, arguments.callee);
            disposeAllSubscriptionsToDependencies();
        };
        ko.utils.domNodeDisposal.addDisposeCallback(disposeWhenNodeIsRemoved, dispose);
        var existingDisposeWhenFunction = disposeWhen;
        disposeWhen = function () {
            return !ko.utils.domNodeIsAttachedToDocument(disposeWhenNodeIsRemoved) || existingDisposeWhenFunction();
        }
    }

    return dependentObservable;
};

ko.isComputed = function(instance) {
    return ko.hasPrototype(instance, ko.dependentObservable);
};

var protoProp = ko.observable.protoProperty; // == "__ko_proto__"
ko.dependentObservable[protoProp] = ko.observable;

ko.dependentObservable['fn'] = {};
ko.dependentObservable['fn'][protoProp] = ko.dependentObservable;

ko.exportSymbol('dependentObservable', ko.dependentObservable);
ko.exportSymbol('computed', ko.dependentObservable); // Make "ko.computed" an alias for "ko.dependentObservable"
ko.exportSymbol('isComputed', ko.isComputed);

(function() {
    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)

    ko.toJS = function(rootObject) {
        if (arguments.length == 0)
            throw new Error("When calling ko.toJS, pass the object you want to convert.");

        // We just unwrap everything at every level in the object graph
        return mapJsObjectGraph(rootObject, function(valueToMap) {
            // Loop because an observable's value might in turn be another observable wrapper
            for (var i = 0; ko.isObservable(valueToMap) &amp;&amp; (i &lt; maxNestedObservableDepth); i++)
                valueToMap = valueToMap();
            return valueToMap;
        });
    };

    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional
        var plainJavaScriptObject = ko.toJS(rootObject);
        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);
    };

    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {
        visitedObjects = visitedObjects || new objectLookup();

        rootObject = mapInputCallback(rootObject);
        var canHaveProperties = (typeof rootObject == "object") &amp;&amp; (rootObject !== null) &amp;&amp; (rootObject !== undefined) &amp;&amp; (!(rootObject instanceof Date));
        if (!canHaveProperties)
            return rootObject;

        var outputProperties = rootObject instanceof Array ? [] : {};
        visitedObjects.save(rootObject, outputProperties);

        visitPropertiesOrArrayEntries(rootObject, function(indexer) {
            var propertyValue = mapInputCallback(rootObject[indexer]);

            switch (typeof propertyValue) {
                case "boolean":
                case "number":
                case "string":
                case "function":
                    outputProperties[indexer] = propertyValue;
                    break;
                case "object":
                case "undefined":
                    var previouslyMappedValue = visitedObjects.get(propertyValue);
                    outputProperties[indexer] = (previouslyMappedValue !== undefined)
                        ? previouslyMappedValue
                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);
                    break;
            }
        });

        return outputProperties;
    }

    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
        if (rootObject instanceof Array) {
            for (var i = 0; i &lt; rootObject.length; i++)
                visitorCallback(i);

            // For arrays, also respect toJSON property for custom mappings (fixes #278)
            if (typeof rootObject['toJSON'] == 'function')
                visitorCallback('toJSON');
        } else {
            for (var propertyName in rootObject)
                visitorCallback(propertyName);
        }
    };

    function objectLookup() {
        var keys = [];
        var values = [];
        this.save = function(key, value) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            if (existingIndex &gt;= 0)
                values[existingIndex] = value;
            else {
                keys.push(key);
                values.push(value);
            }
        };
        this.get = function(key) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            return (existingIndex &gt;= 0) ? values[existingIndex] : undefined;
        };
    };
})();

ko.exportSymbol('toJS', ko.toJS);
ko.exportSymbol('toJSON', ko.toJSON);
(function () {
    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';

    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values
    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values
    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.
    ko.selectExtensions = {
        readValue : function(element) {
            switch (ko.utils.tagNameLower(element)) {
                case 'option':
                    if (element[hasDomDataExpandoProperty] === true)
                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);
                    return ko.utils.ieVersion &lt;= 7
                        ? (element.getAttributeNode('value').specified ? element.value : element.text)
                        : element.value;
                case 'select':
                    return element.selectedIndex &gt;= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;
                default:
                    return element.value;
            }
        },

        writeValue: function(element, value) {
            switch (ko.utils.tagNameLower(element)) {
                case 'option':
                    switch(typeof value) {
                        case "string":
                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);
                            if (hasDomDataExpandoProperty in element) { // IE &lt;= 8 throws errors if you delete non-existent properties from a DOM node
                                delete element[hasDomDataExpandoProperty];
                            }
                            element.value = value;
                            break;
                        default:
                            // Store arbitrary object using DomData
                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);
                            element[hasDomDataExpandoProperty] = true;

                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.
                            element.value = typeof value === "number" ? value : "";
                            break;
                    }
                    break;
                case 'select':
                    for (var i = element.options.length - 1; i &gt;= 0; i--) {
                        if (ko.selectExtensions.readValue(element.options[i]) == value) {
                            element.selectedIndex = i;
                            break;
                        }
                    }
                    break;
                default:
                    if ((value === null) || (value === undefined))
                        value = "";
                    element.value = value;
                    break;
            }
        }
    };
})();

ko.exportSymbol('selectExtensions', ko.selectExtensions);
ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);
ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);
ko.expressionRewriting = (function () {
    var restoreCapturedTokensRegex = /\@ko_token_(\d+)\@/g;
    var javaScriptReservedWords = ["true", "false"];

    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor
    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).
    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i;

    function restoreTokens(string, tokens) {
        var prevValue = null;
        while (string != prevValue) { // Keep restoring tokens until it no longer makes a difference (they may be nested)
            prevValue = string;
            string = string.replace(restoreCapturedTokensRegex, function (match, tokenIndex) {
                return tokens[tokenIndex];
            });
        }
        return string;
    }

    function getWriteableValue(expression) {
        if (ko.utils.arrayIndexOf(javaScriptReservedWords, ko.utils.stringTrim(expression).toLowerCase()) &gt;= 0)
            return false;
        var match = expression.match(javaScriptAssignmentTarget);
        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;
    }

    function ensureQuoted(key) {
        var trimmedKey = ko.utils.stringTrim(key);
        switch (trimmedKey.length &amp;&amp; trimmedKey.charAt(0)) {
            case "'":
            case '"':
                return key;
            default:
                return "'" + trimmedKey + "'";
        }
    }

    return {
        bindingRewriteValidators: [],

        parseObjectLiteral: function(objectLiteralString) {
            // A full tokeniser+lexer would add too much weight to this library, so here's a simple parser
            // that is sufficient just to split an object literal string into a set of top-level key-value pairs

            var str = ko.utils.stringTrim(objectLiteralString);
            if (str.length &lt; 3)
                return [];
            if (str.charAt(0) === "{")// Ignore any braces surrounding the whole object literal
                str = str.substring(1, str.length - 1);

            // Pull out any string literals and regex literals
            var tokens = [];
            var tokenStart = null, tokenEndChar;
            for (var position = 0; position &lt; str.length; position++) {
                var c = str.charAt(position);
                if (tokenStart === null) {
                    switch (c) {
                        case '"':
                        case "'":
                        case "/":
                            tokenStart = position;
                            tokenEndChar = c;
                            break;
                    }
                } else if ((c == tokenEndChar) &amp;&amp; (str.charAt(position - 1) !== "\\")) {
                    var token = str.substring(tokenStart, position + 1);
                    tokens.push(token);
                    var replacement = "@ko_token_" + (tokens.length - 1) + "@";
                    str = str.substring(0, tokenStart) + replacement + str.substring(position + 1);
                    position -= (token.length - replacement.length);
                    tokenStart = null;
                }
            }

            // Next pull out balanced paren, brace, and bracket blocks
            tokenStart = null;
            tokenEndChar = null;
            var tokenDepth = 0, tokenStartChar = null;
            for (var position = 0; position &lt; str.length; position++) {
                var c = str.charAt(position);
                if (tokenStart === null) {
                    switch (c) {
                        case "{": tokenStart = position; tokenStartChar = c;
                                  tokenEndChar = "}";
                                  break;
                        case "(": tokenStart = position; tokenStartChar = c;
                                  tokenEndChar = ")";
                                  break;
                        case "[": tokenStart = position; tokenStartChar = c;
                                  tokenEndChar = "]";
                                  break;
                    }
                }

                if (c === tokenStartChar)
                    tokenDepth++;
                else if (c === tokenEndChar) {
                    tokenDepth--;
                    if (tokenDepth === 0) {
                        var token = str.substring(tokenStart, position + 1);
                        tokens.push(token);
                        var replacement = "@ko_token_" + (tokens.length - 1) + "@";
                        str = str.substring(0, tokenStart) + replacement + str.substring(position + 1);
                        position -= (token.length - replacement.length);
                        tokenStart = null;
                    }
                }
            }

            // Now we can safely split on commas to get the key/value pairs
            var result = [];
            var keyValuePairs = str.split(",");
            for (var i = 0, j = keyValuePairs.length; i &lt; j; i++) {
                var pair = keyValuePairs[i];
                var colonPos = pair.indexOf(":");
                if ((colonPos &gt; 0) &amp;&amp; (colonPos &lt; pair.length - 1)) {
                    var key = pair.substring(0, colonPos);
                    var value = pair.substring(colonPos + 1);
                    result.push({ 'key': restoreTokens(key, tokens), 'value': restoreTokens(value, tokens) });
                } else {
                    result.push({ 'unknown': restoreTokens(pair, tokens) });
                }
            }
            return result;
        },

        preProcessBindings: function (objectLiteralStringOrKeyValueArray) {
            var keyValueArray = typeof objectLiteralStringOrKeyValueArray === "string"
                ? ko.expressionRewriting.parseObjectLiteral(objectLiteralStringOrKeyValueArray)
                : objectLiteralStringOrKeyValueArray;
            var resultStrings = [], propertyAccessorResultStrings = [];

            var keyValueEntry;
            for (var i = 0; keyValueEntry = keyValueArray[i]; i++) {
                if (resultStrings.length &gt; 0)
                    resultStrings.push(",");

                if (keyValueEntry['key']) {
                    var quotedKey = ensureQuoted(keyValueEntry['key']), val = keyValueEntry['value'];
                    resultStrings.push(quotedKey);
                    resultStrings.push(":");
                    resultStrings.push(val);

                    if (val = getWriteableValue(ko.utils.stringTrim(val))) {
                        if (propertyAccessorResultStrings.length &gt; 0)
                            propertyAccessorResultStrings.push(", ");
                        propertyAccessorResultStrings.push(quotedKey + " : function(__ko_value) { " + val + " = __ko_value; }");
                    }
                } else if (keyValueEntry['unknown']) {
                    resultStrings.push(keyValueEntry['unknown']);
                }
            }

            var combinedResult = resultStrings.join("");
            if (propertyAccessorResultStrings.length &gt; 0) {
                var allPropertyAccessors = propertyAccessorResultStrings.join("");
                combinedResult = combinedResult + ", '_ko_property_writers' : { " + allPropertyAccessors + " } ";
            }

            return combinedResult;
        },

        keyValueArrayContainsKey: function(keyValueArray, key) {
            for (var i = 0; i &lt; keyValueArray.length; i++)
                if (ko.utils.stringTrim(keyValueArray[i]['key']) == key)
                    return true;
            return false;
        },

        // Internal, private KO utility for updating model properties from within bindings
        // property:            If the property being updated is (or might be) an observable, pass it here
        //                      If it turns out to be a writable observable, it will be written to directly
        // allBindingsAccessor: All bindings in the current execution context.
        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable
        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'
        // value:               The value to be written
        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if
        //                      it is !== existing value on that writable observable
        writeValueToProperty: function(property, allBindingsAccessor, key, value, checkIfDifferent) {
            if (!property || !ko.isWriteableObservable(property)) {
                var propWriters = allBindingsAccessor()['_ko_property_writers'];
                if (propWriters &amp;&amp; propWriters[key])
                    propWriters[key](value);
            } else if (!checkIfDifferent || property.peek() !== value) {
                property(value);
            }
        }
    };
})();

ko.exportSymbol('expressionRewriting', ko.expressionRewriting);
ko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);
ko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);
ko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);

// For backward compatibility, define the following aliases. (Previously, these function names were misleading because
// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)
ko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);
ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);(function() {
    // "Virtual elements" is an abstraction on top of the usual DOM API which understands the notion that comment nodes
    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).
    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state
    // of that virtual hierarchy
    //
    // The point of all this is to support containerless templates (e.g., &lt;!-- ko foreach:someCollection --&gt;blah&lt;!-- /ko --&gt;)
    // without having to scatter special cases all over the binding and templating code.

    // IE 9 cannot reliably read the "nodeValue" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)
    // but it does give them a nonstandard alternative property called "text" that it can read reliably. Other browsers don't have that property.
    // So, use node.text where available, and node.nodeValue elsewhere
    var commentNodesHaveTextProperty = document.createComment("test").text === "&lt;!--test--&gt;";

    var startCommentRegex = commentNodesHaveTextProperty ? /^&lt;!--\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*--&gt;$/ : /^\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*$/;
    var endCommentRegex =   commentNodesHaveTextProperty ? /^&lt;!--\s*\/ko\s*--&gt;$/ : /^\s*\/ko\s*$/;
    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };

    function isStartComment(node) {
        return (node.nodeType == 8) &amp;&amp; (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);
    }

    function isEndComment(node) {
        return (node.nodeType == 8) &amp;&amp; (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(endCommentRegex);
    }

    function getVirtualChildren(startComment, allowUnbalanced) {
        var currentNode = startComment;
        var depth = 1;
        var children = [];
        while (currentNode = currentNode.nextSibling) {
            if (isEndComment(currentNode)) {
                depth--;
                if (depth === 0)
                    return children;
            }

            children.push(currentNode);

            if (isStartComment(currentNode))
                depth++;
        }
        if (!allowUnbalanced)
            throw new Error("Cannot find closing comment tag to match: " + startComment.nodeValue);
        return null;
    }

    function getMatchingEndComment(startComment, allowUnbalanced) {
        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);
        if (allVirtualChildren) {
            if (allVirtualChildren.length &gt; 0)
                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;
            return startComment.nextSibling;
        } else
            return null; // Must have no matching end comment, and allowUnbalanced is true
    }

    function getUnbalancedChildTags(node) {
        // e.g., from &lt;div&gt;OK&lt;/div&gt;&lt;!-- ko blah --&gt;&lt;span&gt;Another&lt;/span&gt;, returns: &lt;!-- ko blah --&gt;&lt;span&gt;Another&lt;/span&gt;
        //       from &lt;div&gt;OK&lt;/div&gt;&lt;!-- /ko --&gt;&lt;!-- /ko --&gt;,             returns: &lt;!-- /ko --&gt;&lt;!-- /ko --&gt;
        var childNode = node.firstChild, captureRemaining = null;
        if (childNode) {
            do {
                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes
                    captureRemaining.push(childNode);
                else if (isStartComment(childNode)) {
                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);
                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set
                        childNode = matchingEndComment;
                    else
                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point
                } else if (isEndComment(childNode)) {
                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing
                }
            } while (childNode = childNode.nextSibling);
        }
        return captureRemaining;
    }

    ko.virtualElements = {
        allowedBindings: {},

        childNodes: function(node) {
            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;
        },

        emptyNode: function(node) {
            if (!isStartComment(node))
                ko.utils.emptyDomNode(node);
            else {
                var virtualChildren = ko.virtualElements.childNodes(node);
                for (var i = 0, j = virtualChildren.length; i &lt; j; i++)
                    ko.removeNode(virtualChildren[i]);
            }
        },

        setDomNodeChildren: function(node, childNodes) {
            if (!isStartComment(node))
                ko.utils.setDomNodeChildren(node, childNodes);
            else {
                ko.virtualElements.emptyNode(node);
                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children
                for (var i = 0, j = childNodes.length; i &lt; j; i++)
                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);
            }
        },

        prepend: function(containerNode, nodeToPrepend) {
            if (!isStartComment(containerNode)) {
                if (containerNode.firstChild)
                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);
                else
                    containerNode.appendChild(nodeToPrepend);
            } else {
                // Start comments must always have a parent and at least one following sibling (the end comment)
                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);
            }
        },

        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {
            if (!insertAfterNode) {
                ko.virtualElements.prepend(containerNode, nodeToInsert);
            } else if (!isStartComment(containerNode)) {
                // Insert after insertion point
                if (insertAfterNode.nextSibling)
                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
                else
                    containerNode.appendChild(nodeToInsert);
            } else {
                // Children of start comments must always have a parent and at least one following sibling (the end comment)
                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
            }
        },

        firstChild: function(node) {
            if (!isStartComment(node))
                return node.firstChild;
            if (!node.nextSibling || isEndComment(node.nextSibling))
                return null;
            return node.nextSibling;
        },

        nextSibling: function(node) {
            if (isStartComment(node))
                node = getMatchingEndComment(node);
            if (node.nextSibling &amp;&amp; isEndComment(node.nextSibling))
                return null;
            return node.nextSibling;
        },

        virtualNodeBindingValue: function(node) {
            var regexMatch = isStartComment(node);
            return regexMatch ? regexMatch[1] : null;
        },

        normaliseVirtualElementDomStructure: function(elementVerified) {
            // Workaround for https://github.com/SteveSanderson/knockout/issues/155
            // (IE &lt;= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing &lt;/li&gt; tags as if they don't exist, thereby moving comment nodes
            // that are direct descendants of &lt;ul&gt; into the preceding &lt;li&gt;)
            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])
                return;

            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags
            // must be intended to appear *after* that child, so move them there.
            var childNode = elementVerified.firstChild;
            if (childNode) {
                do {
                    if (childNode.nodeType === 1) {
                        var unbalancedTags = getUnbalancedChildTags(childNode);
                        if (unbalancedTags) {
                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child
                            var nodeToInsertBefore = childNode.nextSibling;
                            for (var i = 0; i &lt; unbalancedTags.length; i++) {
                                if (nodeToInsertBefore)
                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);
                                else
                                    elementVerified.appendChild(unbalancedTags[i]);
                            }
                        }
                    }
                } while (childNode = childNode.nextSibling);
            }
        }
    };
})();
ko.exportSymbol('virtualElements', ko.virtualElements);
ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);
ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);
//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified
ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);
//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified
ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);
ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);
(function() {
    var defaultBindingAttributeName = "data-bind";

    ko.bindingProvider = function() {
        this.bindingCache = {};
    };

    ko.utils.extend(ko.bindingProvider.prototype, {
        'nodeHasBindings': function(node) {
            switch (node.nodeType) {
                case 1: return node.getAttribute(defaultBindingAttributeName) != null;   // Element
                case 8: return ko.virtualElements.virtualNodeBindingValue(node) != null; // Comment node
                default: return false;
            }
        },

        'getBindings': function(node, bindingContext) {
            var bindingsString = this['getBindingsString'](node, bindingContext);
            return bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;
        },

        // The following function is only used internally by this default provider.
        // It's not part of the interface definition for a general binding provider.
        'getBindingsString': function(node, bindingContext) {
            switch (node.nodeType) {
                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element
                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node
                default: return null;
            }
        },

        // The following function is only used internally by this default provider.
        // It's not part of the interface definition for a general binding provider.
        'parseBindingsString': function(bindingsString, bindingContext, node) {
            try {
                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache);
                return bindingFunction(bindingContext, node);
            } catch (ex) {
                throw new Error("Unable to parse bindings.\nMessage: " + ex + ";\nBindings value: " + bindingsString);
            }
        }
    });

    ko.bindingProvider['instance'] = new ko.bindingProvider();

    function createBindingsStringEvaluatorViaCache(bindingsString, cache) {
        var cacheKey = bindingsString;
        return cache[cacheKey]
            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString));
    }

    function createBindingsStringEvaluator(bindingsString) {
        // Build the source for a function that evaluates "expression"
        // For each scope variable, add an extra level of "with" nesting
        // Example result: with(sc1) { with(sc0) { return (expression) } }
        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString),
            functionBody = "with($context){with($data||{}){return{" + rewrittenBindings + "}}}";
        return new Function("$context", "$element", functionBody);
    }
})();

ko.exportSymbol('bindingProvider', ko.bindingProvider);
(function () {
    ko.bindingHandlers = {};

    ko.bindingContext = function(dataItem, parentBindingContext, dataItemAlias) {
        if (parentBindingContext) {
            ko.utils.extend(this, parentBindingContext); // Inherit $root and any custom properties
            this['$parentContext'] = parentBindingContext;
            this['$parent'] = parentBindingContext['$data'];
            this['$parents'] = (parentBindingContext['$parents'] || []).slice(0);
            this['$parents'].unshift(this['$parent']);
        } else {
            this['$parents'] = [];
            this['$root'] = dataItem;
            // Export 'ko' in the binding context so it will be available in bindings and templates
            // even if 'ko' isn't exported as a global, such as when using an AMD loader.
            // See https://github.com/SteveSanderson/knockout/issues/490
            this['ko'] = ko;
        }
        this['$data'] = dataItem;
        if (dataItemAlias)
            this[dataItemAlias] = dataItem;
    }
    ko.bindingContext.prototype['createChildContext'] = function (dataItem, dataItemAlias) {
        return new ko.bindingContext(dataItem, this, dataItemAlias);
    };
    ko.bindingContext.prototype['extend'] = function(properties) {
        var clone = ko.utils.extend(new ko.bindingContext(), this);
        return ko.utils.extend(clone, properties);
    };

    function validateThatBindingIsAllowedForVirtualElements(bindingName) {
        var validator = ko.virtualElements.allowedBindings[bindingName];
        if (!validator)
            throw new Error("The binding '" + bindingName + "' cannot be used with virtual elements")
    }

    function applyBindingsToDescendantsInternal (viewModel, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {
        var currentChild, nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);
        while (currentChild = nextInQueue) {
            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position
            nextInQueue = ko.virtualElements.nextSibling(currentChild);
            applyBindingsToNodeAndDescendantsInternal(viewModel, currentChild, bindingContextsMayDifferFromDomParentElement);
        }
    }

    function applyBindingsToNodeAndDescendantsInternal (viewModel, nodeVerified, bindingContextMayDifferFromDomParentElement) {
        var shouldBindDescendants = true;

        // Perf optimisation: Apply bindings only if...
        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)
        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those
        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)
        var isElement = (nodeVerified.nodeType === 1);
        if (isElement) // Workaround IE &lt;= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);

        var shouldApplyBindings = (isElement &amp;&amp; bindingContextMayDifferFromDomParentElement)             // Case (1)
                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)
        if (shouldApplyBindings)
            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, viewModel, bindingContextMayDifferFromDomParentElement).shouldBindDescendants;

        if (shouldBindDescendants) {
            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,
            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,
            //    hence bindingContextsMayDifferFromDomParentElement is false
            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may
            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,
            //    hence bindingContextsMayDifferFromDomParentElement is true
            applyBindingsToDescendantsInternal(viewModel, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);
        }
    }

    function applyBindingsToNodeInternal (node, bindings, viewModelOrBindingContext, bindingContextMayDifferFromDomParentElement) {
        // Need to be sure that inits are only run once, and updates never run until all the inits have been run
        var initPhase = 0; // 0 = before all inits, 1 = during inits, 2 = after all inits

        // Each time the dependentObservable is evaluated (after data changes),
        // the binding attribute is reparsed so that it can pick out the correct
        // model properties in the context of the changed data.
        // DOM event callbacks need to be able to access this changed data,
        // so we need a single parsedBindings variable (shared by all callbacks
        // associated with this node's bindings) that all the closures can access.
        var parsedBindings;
        function makeValueAccessor(bindingKey) {
            return function () { return parsedBindings[bindingKey] }
        }
        function parsedBindingsAccessor() {
            return parsedBindings;
        }

        var bindingHandlerThatControlsDescendantBindings;
        ko.dependentObservable(
            function () {
                // Ensure we have a nonnull binding context to work with
                var bindingContextInstance = viewModelOrBindingContext &amp;&amp; (viewModelOrBindingContext instanceof ko.bindingContext)
                    ? viewModelOrBindingContext
                    : new ko.bindingContext(ko.utils.unwrapObservable(viewModelOrBindingContext));
                var viewModel = bindingContextInstance['$data'];

                // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because
                // we can easily recover it just by scanning up the node's ancestors in the DOM
                // (note: here, parent node means "real DOM parent" not "virtual parent", as there's no O(1) way to find the virtual parent)
                if (bindingContextMayDifferFromDomParentElement)
                    ko.storedBindingContextForNode(node, bindingContextInstance);

                // Use evaluatedBindings if given, otherwise fall back on asking the bindings provider to give us some bindings
                var evaluatedBindings = (typeof bindings == "function") ? bindings(bindingContextInstance, node) : bindings;
                parsedBindings = evaluatedBindings || ko.bindingProvider['instance']['getBindings'](node, bindingContextInstance);

                if (parsedBindings) {
                    // First run all the inits, so bindings can register for notification on changes
                    if (initPhase === 0) {
                        initPhase = 1;
                        for (var bindingKey in parsedBindings) {
                            var binding = ko.bindingHandlers[bindingKey];
                            if (binding &amp;&amp; node.nodeType === 8)
                                validateThatBindingIsAllowedForVirtualElements(bindingKey);

                            if (binding &amp;&amp; typeof binding["init"] == "function") {
                                var handlerInitFn = binding["init"];
                                var initResult = handlerInitFn(node, makeValueAccessor(bindingKey), parsedBindingsAccessor, viewModel, bindingContextInstance);

                                // If this binding handler claims to control descendant bindings, make a note of this
                                if (initResult &amp;&amp; initResult['controlsDescendantBindings']) {
                                    if (bindingHandlerThatControlsDescendantBindings !== undefined)
                                        throw new Error("Multiple bindings (" + bindingHandlerThatControlsDescendantBindings + " and " + bindingKey + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
                                    bindingHandlerThatControlsDescendantBindings = bindingKey;
                                }
                            }
                        }
                        initPhase = 2;
                    }

                    // ... then run all the updates, which might trigger changes even on the first evaluation
                    if (initPhase === 2) {
                        for (var bindingKey in parsedBindings) {
                            var binding = ko.bindingHandlers[bindingKey];
                            if (binding &amp;&amp; typeof binding["update"] == "function") {
                                var handlerUpdateFn = binding["update"];
                                handlerUpdateFn(node, makeValueAccessor(bindingKey), parsedBindingsAccessor, viewModel, bindingContextInstance);
                            }
                        }
                    }
                }
            },
            null,
            { disposeWhenNodeIsRemoved : node }
        );

        return {
            shouldBindDescendants: bindingHandlerThatControlsDescendantBindings === undefined
        };
    };

    var storedBindingContextDomDataKey = "__ko_bindingContext__";
    ko.storedBindingContextForNode = function (node, bindingContext) {
        if (arguments.length == 2)
            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);
        else
            return ko.utils.domData.get(node, storedBindingContextDomDataKey);
    }

    ko.applyBindingsToNode = function (node, bindings, viewModel) {
        if (node.nodeType === 1) // If it's an element, workaround IE &lt;= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(node);
        return applyBindingsToNodeInternal(node, bindings, viewModel, true);
    };

    ko.applyBindingsToDescendants = function(viewModel, rootNode) {
        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)
            applyBindingsToDescendantsInternal(viewModel, rootNode, true);
    };

    ko.applyBindings = function (viewModel, rootNode) {
        if (rootNode &amp;&amp; (rootNode.nodeType !== 1) &amp;&amp; (rootNode.nodeType !== 8))
            throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");
        rootNode = rootNode || window.document.body; // Make "rootNode" parameter optional

        applyBindingsToNodeAndDescendantsInternal(viewModel, rootNode, true);
    };

    // Retrieving binding context from arbitrary nodes
    ko.contextFor = function(node) {
        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)
        switch (node.nodeType) {
            case 1:
            case 8:
                var context = ko.storedBindingContextForNode(node);
                if (context) return context;
                if (node.parentNode) return ko.contextFor(node.parentNode);
                break;
        }
        return undefined;
    };
    ko.dataFor = function(node) {
        var context = ko.contextFor(node);
        return context ? context['$data'] : undefined;
    };

    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);
    ko.exportSymbol('applyBindings', ko.applyBindings);
    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);
    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);
    ko.exportSymbol('contextFor', ko.contextFor);
    ko.exportSymbol('dataFor', ko.dataFor);
})();
var attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };
ko.bindingHandlers['attr'] = {
    'update': function(element, valueAccessor, allBindingsAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor()) || {};
        for (var attrName in value) {
            if (typeof attrName == "string") {
                var attrValue = ko.utils.unwrapObservable(value[attrName]);

                // To cover cases like "attr: { checked:someProp }", we want to remove the attribute entirely
                // when someProp is a "no value"-like value (strictly null, false, or undefined)
                // (because the absence of the "checked" attr is how to mark an element as not checked, etc.)
                var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);
                if (toRemove)
                    element.removeAttribute(attrName);

                // In IE &lt;= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the
                // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,
                // but instead of figuring out the mode, we'll just set the attribute through the Javascript
                // property for IE &lt;= 8.
                if (ko.utils.ieVersion &lt;= 8 &amp;&amp; attrName in attrHtmlToJavascriptMap) {
                    attrName = attrHtmlToJavascriptMap[attrName];
                    if (toRemove)
                        element.removeAttribute(attrName);
                    else
                        element[attrName] = attrValue;
                } else if (!toRemove) {
                    element.setAttribute(attrName, attrValue.toString());
                }

                // Treat "name" specially - although you can think of it as an attribute, it also needs
                // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)
                // Deliberately being case-sensitive here because XHTML would regard "Name" as a different thing
                // entirely, and there's no strong reason to allow for such casing in HTML.
                if (attrName === "name") {
                    ko.utils.setElementName(element, toRemove ? "" : attrValue.toString());
                }
            }
        }
    }
};
ko.bindingHandlers['checked'] = {
    'init': function (element, valueAccessor, allBindingsAccessor) {
        var updateHandler = function() {
            var valueToWrite;
            if (element.type == "checkbox") {
                valueToWrite = element.checked;
            } else if ((element.type == "radio") &amp;&amp; (element.checked)) {
                valueToWrite = element.value;
            } else {
                return; // "checked" binding only responds to checkboxes and selected radio buttons
            }

            var modelValue = valueAccessor(), unwrappedValue = ko.utils.unwrapObservable(modelValue);
            if ((element.type == "checkbox") &amp;&amp; (unwrappedValue instanceof Array)) {
                // For checkboxes bound to an array, we add/remove the checkbox value to that array
                // This works for both observable and non-observable arrays
                var existingEntryIndex = ko.utils.arrayIndexOf(unwrappedValue, element.value);
                if (element.checked &amp;&amp; (existingEntryIndex &lt; 0))
                    modelValue.push(element.value);
                else if ((!element.checked) &amp;&amp; (existingEntryIndex &gt;= 0))
                    modelValue.splice(existingEntryIndex, 1);
            } else {
                ko.expressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'checked', valueToWrite, true);
            }
        };
        ko.utils.registerEventHandler(element, "click", updateHandler);

        // IE 6 won't allow radio buttons to be selected unless they have a name
        if ((element.type == "radio") &amp;&amp; !element.name)
            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });
    },
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());

        if (element.type == "checkbox") {
            if (value instanceof Array) {
                // When bound to an array, the checkbox being checked represents its value being present in that array
                element.checked = ko.utils.arrayIndexOf(value, element.value) &gt;= 0;
            } else {
                // When bound to anything other value (not an array), the checkbox being checked represents the value being trueish
                element.checked = value;
            }
        } else if (element.type == "radio") {
            element.checked = (element.value == value);
        }
    }
};
var classesWrittenByBindingKey = '__ko__cssValue';
ko.bindingHandlers['css'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (typeof value == "object") {
            for (var className in value) {
                var shouldHaveClass = ko.utils.unwrapObservable(value[className]);
                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);
            }
        } else {
            value = String(value || ''); // Make sure we don't try to store or set a non-string value
            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);
            element[classesWrittenByBindingKey] = value;
            ko.utils.toggleDomNodeCssClass(element, value, true);
        }
    }
};
ko.bindingHandlers['enable'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (value &amp;&amp; element.disabled)
            element.removeAttribute("disabled");
        else if ((!value) &amp;&amp; (!element.disabled))
            element.disabled = true;
    }
};

ko.bindingHandlers['disable'] = {
    'update': function (element, valueAccessor) {
        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });
    }
};
// For certain common events (currently just 'click'), allow a simplified data-binding syntax
// e.g. click:handler instead of the usual full-length event:{click:handler}
function makeEventHandlerShortcut(eventName) {
    ko.bindingHandlers[eventName] = {
        'init': function(element, valueAccessor, allBindingsAccessor, viewModel) {
            var newValueAccessor = function () {
                var result = {};
                result[eventName] = valueAccessor();
                return result;
            };
            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindingsAccessor, viewModel);
        }
    }
}

ko.bindingHandlers['event'] = {
    'init' : function (element, valueAccessor, allBindingsAccessor, viewModel) {
        var eventsToHandle = valueAccessor() || {};
        for(var eventNameOutsideClosure in eventsToHandle) {
            (function() {
                var eventName = eventNameOutsideClosure; // Separate variable to be captured by event handler closure
                if (typeof eventName == "string") {
                    ko.utils.registerEventHandler(element, eventName, function (event) {
                        var handlerReturnValue;
                        var handlerFunction = valueAccessor()[eventName];
                        if (!handlerFunction)
                            return;
                        var allBindings = allBindingsAccessor();

                        try {
                            // Take all the event args, and prefix with the viewmodel
                            var argsForHandler = ko.utils.makeArray(arguments);
                            argsForHandler.unshift(viewModel);
                            handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);
                        } finally {
                            if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                                if (event.preventDefault)
                                    event.preventDefault();
                                else
                                    event.returnValue = false;
                            }
                        }

                        var bubble = allBindings[eventName + 'Bubble'] !== false;
                        if (!bubble) {
                            event.cancelBubble = true;
                            if (event.stopPropagation)
                                event.stopPropagation();
                        }
                    });
                }
            })();
        }
    }
};
// "foreach: someExpression" is equivalent to "template: { foreach: someExpression }"
// "foreach: { data: someExpression, afterAdd: myfn }" is equivalent to "template: { foreach: someExpression, afterAdd: myfn }"
ko.bindingHandlers['foreach'] = {
    makeTemplateValueAccessor: function(valueAccessor) {
        return function() {
            var modelValue = valueAccessor(),
                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here

            // If unwrappedValue is the array, pass in the wrapped value on its own
            // The value will be unwrapped and tracked within the template binding
            // (See https://github.com/SteveSanderson/knockout/issues/523)
            if ((!unwrappedValue) || typeof unwrappedValue.length == "number")
                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };

            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates
            ko.utils.unwrapObservable(modelValue);
            return {
                'foreach': unwrappedValue['data'],
                'as': unwrappedValue['as'],
                'includeDestroyed': unwrappedValue['includeDestroyed'],
                'afterAdd': unwrappedValue['afterAdd'],
                'beforeRemove': unwrappedValue['beforeRemove'],
                'afterRender': unwrappedValue['afterRender'],
                'beforeMove': unwrappedValue['beforeMove'],
                'afterMove': unwrappedValue['afterMove'],
                'templateEngine': ko.nativeTemplateEngine.instance
            };
        };
    },
    'init': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));
    },
    'update': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
    }
};
ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings
ko.virtualElements.allowedBindings['foreach'] = true;
var hasfocusUpdatingProperty = '__ko_hasfocusUpdating';
ko.bindingHandlers['hasfocus'] = {
    'init': function(element, valueAccessor, allBindingsAccessor) {
        var handleElementFocusChange = function(isFocused) {
            // Where possible, ignore which event was raised and determine focus state using activeElement,
            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.
            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,
            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus
            // from calling 'blur()' on the element when it loses focus.
            // Discussion at https://github.com/SteveSanderson/knockout/pull/352
            element[hasfocusUpdatingProperty] = true;
            var ownerDoc = element.ownerDocument;
            if ("activeElement" in ownerDoc) {
                isFocused = (ownerDoc.activeElement === element);
            }
            var modelValue = valueAccessor();
            ko.expressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'hasfocus', isFocused, true);
            element[hasfocusUpdatingProperty] = false;
        };
        var handleElementFocusIn = handleElementFocusChange.bind(null, true);
        var handleElementFocusOut = handleElementFocusChange.bind(null, false);

        ko.utils.registerEventHandler(element, "focus", handleElementFocusIn);
        ko.utils.registerEventHandler(element, "focusin", handleElementFocusIn); // For IE
        ko.utils.registerEventHandler(element, "blur",  handleElementFocusOut);
        ko.utils.registerEventHandler(element, "focusout",  handleElementFocusOut); // For IE
    },
    'update': function(element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        if (!element[hasfocusUpdatingProperty]) {
            value ? element.focus() : element.blur();
            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? "focusin" : "focusout"]); // For IE, which doesn't reliably fire "focus" or "blur" events synchronously
        }
    }
};
ko.bindingHandlers['html'] = {
    'init': function() {
        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)
        return { 'controlsDescendantBindings': true };
    },
    'update': function (element, valueAccessor) {
        // setHtml will unwrap the value if needed
        ko.utils.setHtml(element, valueAccessor());
    }
};
var withIfDomDataKey = '__ko_withIfBindingData';
// Makes a binding like with or if
function makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {
    ko.bindingHandlers[bindingKey] = {
        'init': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            ko.utils.domData.set(element, withIfDomDataKey, {});
            return { 'controlsDescendantBindings': true };
        },
        'update': function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var withIfData = ko.utils.domData.get(element, withIfDomDataKey),
                dataValue = ko.utils.unwrapObservable(valueAccessor()),
                shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue
                isFirstRender = !withIfData.savedNodes,
                needsRefresh = isFirstRender || isWith || (shouldDisplay !== withIfData.didDisplayOnLastUpdate);

            if (needsRefresh) {
                if (isFirstRender) {
                    withIfData.savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);
                }

                if (shouldDisplay) {
                    if (!isFirstRender) {
                        ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(withIfData.savedNodes));
                    }
                    ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, dataValue) : bindingContext, element);
                } else {
                    ko.virtualElements.emptyNode(element);
                }

                withIfData.didDisplayOnLastUpdate = shouldDisplay;
            }
        }
    };
    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings
    ko.virtualElements.allowedBindings[bindingKey] = true;
}

// Construct the actual binding handlers
makeWithIfBinding('if');
makeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);
makeWithIfBinding('with', true /* isWith */, false /* isNot */,
    function(bindingContext, dataValue) {
        return bindingContext['createChildContext'](dataValue);
    }
);
function ensureDropdownSelectionIsConsistentWithModelValue(element, modelValue, preferModelValue) {
    if (preferModelValue) {
        if (modelValue !== ko.selectExtensions.readValue(element))
            ko.selectExtensions.writeValue(element, modelValue);
    }

    // No matter which direction we're syncing in, we want the end result to be equality between dropdown value and model value.
    // If they aren't equal, either we prefer the dropdown value, or the model value couldn't be represented, so either way,
    // change the model value to match the dropdown.
    if (modelValue !== ko.selectExtensions.readValue(element))
        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, "change"]);
};

ko.bindingHandlers['options'] = {
    'update': function (element, valueAccessor, allBindingsAccessor) {
        if (ko.utils.tagNameLower(element) !== "select")
            throw new Error("options binding applies only to SELECT elements");

        var selectWasPreviouslyEmpty = element.length == 0;
        var previousSelectedValues = ko.utils.arrayMap(ko.utils.arrayFilter(element.childNodes, function (node) {
            return node.tagName &amp;&amp; (ko.utils.tagNameLower(node) === "option") &amp;&amp; node.selected;
        }), function (node) {
            return ko.selectExtensions.readValue(node) || node.innerText || node.textContent;
        });
        var previousScrollTop = element.scrollTop;

        var value = ko.utils.unwrapObservable(valueAccessor());
        var selectedValue = element.value;

        // Remove all existing &lt;option&gt;s.
        // Need to use .remove() rather than .removeChild() for &lt;option&gt;s otherwise IE behaves oddly (https://github.com/SteveSanderson/knockout/issues/134)
        while (element.length &gt; 0) {
            ko.cleanNode(element.options[0]);
            element.remove(0);
        }

        if (value) {
            var allBindings = allBindingsAccessor(),
                includeDestroyed = allBindings['optionsIncludeDestroyed'];

            if (typeof value.length != "number")
                value = [value];
            if (allBindings['optionsCaption']) {
                var option = document.createElement("option");
                ko.utils.setHtml(option, allBindings['optionsCaption']);
                ko.selectExtensions.writeValue(option, undefined);
                element.appendChild(option);
            }

            for (var i = 0, j = value.length; i &lt; j; i++) {
                // Skip destroyed items
                var arrayEntry = value[i];
                if (arrayEntry &amp;&amp; arrayEntry['_destroy'] &amp;&amp; !includeDestroyed)
                    continue;

                var option = document.createElement("option");

                function applyToObject(object, predicate, defaultValue) {
                    var predicateType = typeof predicate;
                    if (predicateType == "function")    // Given a function; run it against the data value
                        return predicate(object);
                    else if (predicateType == "string") // Given a string; treat it as a property name on the data value
                        return object[predicate];
                    else                                // Given no optionsText arg; use the data value itself
                        return defaultValue;
                }

                // Apply a value to the option element
                var optionValue = applyToObject(arrayEntry, allBindings['optionsValue'], arrayEntry);
                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));

                // Apply some text to the option element
                var optionText = applyToObject(arrayEntry, allBindings['optionsText'], optionValue);
                ko.utils.setTextContent(option, optionText);

                element.appendChild(option);
            }

            // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.
            // That's why we first added them without selection. Now it's time to set the selection.
            var newOptions = element.getElementsByTagName("option");
            var countSelectionsRetained = 0;
            for (var i = 0, j = newOptions.length; i &lt; j; i++) {
                if (ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[i])) &gt;= 0) {
                    ko.utils.setOptionNodeSelectionState(newOptions[i], true);
                    countSelectionsRetained++;
                }
            }

            element.scrollTop = previousScrollTop;

            if (selectWasPreviouslyEmpty &amp;&amp; ('value' in allBindings)) {
                // Ensure consistency between model value and selected option.
                // If the dropdown is being populated for the first time here (or was otherwise previously empty),
                // the dropdown selection state is meaningless, so we preserve the model value.
                ensureDropdownSelectionIsConsistentWithModelValue(element, ko.utils.peekObservable(allBindings['value']), /* preferModelValue */ true);
            }

            // Workaround for IE9 bug
            ko.utils.ensureSelectElementIsRenderedCorrectly(element);
        }
    }
};
ko.bindingHandlers['options'].optionValueDomDataKey = '__ko.optionValueDomData__';
ko.bindingHandlers['selectedOptions'] = {
    'init': function (element, valueAccessor, allBindingsAccessor) {
        ko.utils.registerEventHandler(element, "change", function () {
            var value = valueAccessor(), valueToWrite = [];
            ko.utils.arrayForEach(element.getElementsByTagName("option"), function(node) {
                if (node.selected)
                    valueToWrite.push(ko.selectExtensions.readValue(node));
            });
            ko.expressionRewriting.writeValueToProperty(value, allBindingsAccessor, 'value', valueToWrite);
        });
    },
    'update': function (element, valueAccessor) {
        if (ko.utils.tagNameLower(element) != "select")
            throw new Error("values binding applies only to SELECT elements");

        var newValue = ko.utils.unwrapObservable(valueAccessor());
        if (newValue &amp;&amp; typeof newValue.length == "number") {
            ko.utils.arrayForEach(element.getElementsByTagName("option"), function(node) {
                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) &gt;= 0;
                ko.utils.setOptionNodeSelectionState(node, isSelected);
            });
        }
    }
};
ko.bindingHandlers['style'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor() || {});
        for (var styleName in value) {
            if (typeof styleName == "string") {
                var styleValue = ko.utils.unwrapObservable(value[styleName]);
                element.style[styleName] = styleValue || ""; // Empty string removes the value, whereas null/undefined have no effect
            }
        }
    }
};
ko.bindingHandlers['submit'] = {
    'init': function (element, valueAccessor, allBindingsAccessor, viewModel) {
        if (typeof valueAccessor() != "function")
            throw new Error("The value for a submit binding must be a function");
        ko.utils.registerEventHandler(element, "submit", function (event) {
            var handlerReturnValue;
            var value = valueAccessor();
            try { handlerReturnValue = value.call(viewModel, element); }
            finally {
                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                    if (event.preventDefault)
                        event.preventDefault();
                    else
                        event.returnValue = false;
                }
            }
        });
    }
};
ko.bindingHandlers['text'] = {
    'update': function (element, valueAccessor) {
        ko.utils.setTextContent(element, valueAccessor());
    }
};
ko.virtualElements.allowedBindings['text'] = true;
ko.bindingHandlers['uniqueName'] = {
    'init': function (element, valueAccessor) {
        if (valueAccessor()) {
            var name = "ko_unique_" + (++ko.bindingHandlers['uniqueName'].currentIndex);
            ko.utils.setElementName(element, name);
        }
    }
};
ko.bindingHandlers['uniqueName'].currentIndex = 0;
ko.bindingHandlers['value'] = {
    'init': function (element, valueAccessor, allBindingsAccessor) {
        // Always catch "change" event; possibly other events too if asked
        var eventsToCatch = ["change"];
        var requestedEventsToCatch = allBindingsAccessor()["valueUpdate"];
        var propertyChangedFired = false;
        if (requestedEventsToCatch) {
            if (typeof requestedEventsToCatch == "string") // Allow both individual event names, and arrays of event names
                requestedEventsToCatch = [requestedEventsToCatch];
            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);
            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);
        }

        var valueUpdateHandler = function() {
            propertyChangedFired = false;
            var modelValue = valueAccessor();
            var elementValue = ko.selectExtensions.readValue(element);
            ko.expressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'value', elementValue);
        }

        // Workaround for https://github.com/SteveSanderson/knockout/issues/122
        // IE doesn't fire "change" events on textboxes if the user selects a value from its autocomplete list
        var ieAutoCompleteHackNeeded = ko.utils.ieVersion &amp;&amp; element.tagName.toLowerCase() == "input" &amp;&amp; element.type == "text"
                                       &amp;&amp; element.autocomplete != "off" &amp;&amp; (!element.form || element.form.autocomplete != "off");
        if (ieAutoCompleteHackNeeded &amp;&amp; ko.utils.arrayIndexOf(eventsToCatch, "propertychange") == -1) {
            ko.utils.registerEventHandler(element, "propertychange", function () { propertyChangedFired = true });
            ko.utils.registerEventHandler(element, "blur", function() {
                if (propertyChangedFired) {
                    valueUpdateHandler();
                }
            });
        }

        ko.utils.arrayForEach(eventsToCatch, function(eventName) {
            // The syntax "after&lt;eventname&gt;" means "run the handler asynchronously after the event"
            // This is useful, for example, to catch "keydown" events after the browser has updated the control
            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)
            var handler = valueUpdateHandler;
            if (ko.utils.stringStartsWith(eventName, "after")) {
                handler = function() { setTimeout(valueUpdateHandler, 0) };
                eventName = eventName.substring("after".length);
            }
            ko.utils.registerEventHandler(element, eventName, handler);
        });
    },
    'update': function (element, valueAccessor) {
        var valueIsSelectOption = ko.utils.tagNameLower(element) === "select";
        var newValue = ko.utils.unwrapObservable(valueAccessor());
        var elementValue = ko.selectExtensions.readValue(element);
        var valueHasChanged = (newValue != elementValue);

        // JavaScript's 0 == "" behavious is unfortunate here as it prevents writing 0 to an empty text box (loose equality suggests the values are the same).
        // We don't want to do a strict equality comparison as that is more confusing for developers in certain cases, so we specifically special case 0 != "" here.
        if ((newValue === 0) &amp;&amp; (elementValue !== 0) &amp;&amp; (elementValue !== "0"))
            valueHasChanged = true;

        if (valueHasChanged) {
            var applyValueAction = function () { ko.selectExtensions.writeValue(element, newValue); };
            applyValueAction();

            // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread
            // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread
            // to apply the value as well.
            var alsoApplyAsynchronously = valueIsSelectOption;
            if (alsoApplyAsynchronously)
                setTimeout(applyValueAction, 0);
        }

        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,
        // because you're not allowed to have a model value that disagrees with a visible UI selection.
        if (valueIsSelectOption &amp;&amp; (element.length &gt; 0))
            ensureDropdownSelectionIsConsistentWithModelValue(element, newValue, /* preferModelValue */ false);
    }
};
ko.bindingHandlers['visible'] = {
    'update': function (element, valueAccessor) {
        var value = ko.utils.unwrapObservable(valueAccessor());
        var isCurrentlyVisible = !(element.style.display == "none");
        if (value &amp;&amp; !isCurrentlyVisible)
            element.style.display = "";
        else if ((!value) &amp;&amp; isCurrentlyVisible)
            element.style.display = "none";
    }
};
// 'click' is just a shorthand for the usual full-length event:{click:handler}
makeEventHandlerShortcut('click');
// If you want to make a custom template engine,
//
// [1] Inherit from this class (like ko.nativeTemplateEngine does)
// [2] Override 'renderTemplateSource', supplying a function with this signature:
//
//        function (templateSource, bindingContext, options) {
//            // - templateSource.text() is the text of the template you should render
//            // - bindingContext.$data is the data you should pass into the template
//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,
//            //     and bindingContext.$root available in the template too
//            // - options gives you access to any other properties set on "data-bind: { template: options }"
//            //
//            // Return value: an array of DOM nodes
//        }
//
// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:
//
//        function (script) {
//            // Return value: Whatever syntax means "Evaluate the JavaScript statement 'script' and output the result"
//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'
//        }
//
//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.
//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)
//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.

ko.templateEngine = function () { };

ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options) {
    throw new Error("Override renderTemplateSource");
};

ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {
    throw new Error("Override createJavaScriptEvaluatorBlock");
};

ko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {
    // Named template
    if (typeof template == "string") {
        templateDocument = templateDocument || document;
        var elem = templateDocument.getElementById(template);
        if (!elem)
            throw new Error("Cannot find template with ID " + template);
        return new ko.templateSources.domElement(elem);
    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {
        // Anonymous template
        return new ko.templateSources.anonymousTemplate(template);
    } else
        throw new Error("Unknown template type: " + template);
};

ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {
    var templateSource = this['makeTemplateSource'](template, templateDocument);
    return this['renderTemplateSource'](templateSource, bindingContext, options);
};

ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {
    // Skip rewriting if requested
    if (this['allowTemplateRewriting'] === false)
        return true;
    return this['makeTemplateSource'](template, templateDocument)['data']("isRewritten");
};

ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {
    var templateSource = this['makeTemplateSource'](template, templateDocument);
    var rewritten = rewriterCallback(templateSource['text']());
    templateSource['text'](rewritten);
    templateSource['data']("isRewritten", true);
};

ko.exportSymbol('templateEngine', ko.templateEngine);

ko.templateRewriting = (function () {
    var memoizeDataBindingAttributeSyntaxRegex = /(&lt;[a-z]+\d*(\s+(?!data-bind=)[a-z0-9\-]+(=(\"[^\"]*\"|\'[^\']*\'))?)*\s+)data-bind=(["'])([\s\S]*?)\5/gi;
    var memoizeVirtualContainerBindingSyntaxRegex = /&lt;!--\s*ko\b\s*([\s\S]*?)\s*--&gt;/g;

    function validateDataBindValuesForRewriting(keyValueArray) {
        var allValidators = ko.expressionRewriting.bindingRewriteValidators;
        for (var i = 0; i &lt; keyValueArray.length; i++) {
            var key = keyValueArray[i]['key'];
            if (allValidators.hasOwnProperty(key)) {
                var validator = allValidators[key];

                if (typeof validator === "function") {
                    var possibleErrorMessage = validator(keyValueArray[i]['value']);
                    if (possibleErrorMessage)
                        throw new Error(possibleErrorMessage);
                } else if (!validator) {
                    throw new Error("This template engine does not support the '" + key + "' binding within its templates");
                }
            }
        }
    }

    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, templateEngine) {
        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);
        validateDataBindValuesForRewriting(dataBindKeyValueArray);
        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray);

        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional
        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this
        // extra indirection.
        var applyBindingsToNextSiblingScript =
            "ko.__tr_ambtns(function($context,$element){return(function(){return{ " + rewrittenDataBindAttributeValue + " } })()})";
        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;
    }

    return {
        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {
            if (!templateEngine['isTemplateRewritten'](template, templateDocument))
                templateEngine['rewriteTemplate'](template, function (htmlString) {
                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);
                }, templateDocument);
        },

        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {
            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {
                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[6], /* tagToRetain: */ arguments[1], templateEngine);
            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {
                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ "&lt;!-- ko --&gt;", templateEngine);
            });
        },

        applyMemoizedBindingsToNextSibling: function (bindings) {
            return ko.memoization.memoize(function (domNode, bindingContext) {
                if (domNode.nextSibling)
                    ko.applyBindingsToNode(domNode.nextSibling, bindings, bindingContext);
            });
        }
    }
})();


// Exported only because it has to be referenced by string lookup from within rewritten template
ko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);
(function() {
    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving
    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)
    //
    // Two are provided by default:
    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element
    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but
    //                                           without reading/writing the actual element text content, since it will be overwritten
    //                                           with the rendered template output.
    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.
    // Template sources need to have the following functions:
    //   text() 			- returns the template text from your storage location
    //   text(value)		- writes the supplied template text to your storage location
    //   data(key)			- reads values stored using data(key, value) - see below
    //   data(key, value)	- associates "value" with this template and the key "key". Is used to store information like "isRewritten".
    //
    // Optionally, template sources can also have the following functions:
    //   nodes()            - returns a DOM element containing the nodes of this template, where available
    //   nodes(value)       - writes the given DOM element to your storage location
    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()
    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().
    //
    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were
    // using and overriding "makeTemplateSource" to return an instance of your custom template source.

    ko.templateSources = {};

    // ---- ko.templateSources.domElement -----

    ko.templateSources.domElement = function(element) {
        this.domElement = element;
    }

    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {
        var tagNameLower = ko.utils.tagNameLower(this.domElement),
            elemContentsProperty = tagNameLower === "script" ? "text"
                                 : tagNameLower === "textarea" ? "value"
                                 : "innerHTML";

        if (arguments.length == 0) {
            return this.domElement[elemContentsProperty];
        } else {
            var valueToWrite = arguments[0];
            if (elemContentsProperty === "innerHTML")
                ko.utils.setHtml(this.domElement, valueToWrite);
            else
                this.domElement[elemContentsProperty] = valueToWrite;
        }
    };

    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {
        if (arguments.length === 1) {
            return ko.utils.domData.get(this.domElement, "templateSourceData_" + key);
        } else {
            ko.utils.domData.set(this.domElement, "templateSourceData_" + key, arguments[1]);
        }
    };

    // ---- ko.templateSources.anonymousTemplate -----
    // Anonymous templates are normally saved/retrieved as DOM nodes through "nodes".
    // For compatibility, you can also read "text"; it will be serialized from the nodes on demand.
    // Writing to "text" is still supported, but then the template data will not be available as DOM nodes.

    var anonymousTemplatesDomDataKey = "__ko_anon_template__";
    ko.templateSources.anonymousTemplate = function(element) {
        this.domElement = element;
    }
    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();
    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {
        if (arguments.length == 0) {
            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};
            if (templateData.textData === undefined &amp;&amp; templateData.containerData)
                templateData.textData = templateData.containerData.innerHTML;
            return templateData.textData;
        } else {
            var valueToWrite = arguments[0];
            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {textData: valueToWrite});
        }
    };
    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {
        if (arguments.length == 0) {
            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};
            return templateData.containerData;
        } else {
            var valueToWrite = arguments[0];
            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {containerData: valueToWrite});
        }
    };

    ko.exportSymbol('templateSources', ko.templateSources);
    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);
    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);
})();
(function () {
    var _templateEngine;
    ko.setTemplateEngine = function (templateEngine) {
        if ((templateEngine != undefined) &amp;&amp; !(templateEngine instanceof ko.templateEngine))
            throw new Error("templateEngine must inherit from ko.templateEngine");
        _templateEngine = templateEngine;
    }

    function invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, action) {
        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);
        while (nextInQueue &amp;&amp; ((node = nextInQueue) !== firstOutOfRangeNode)) {
            nextInQueue = ko.virtualElements.nextSibling(node);
            if (node.nodeType === 1 || node.nodeType === 8)
                action(node);
        }
    }

    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {
        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element
        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because
        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,
        // (1) Does a regular "applyBindings" to associate bindingContext with this node and to activate any non-memoized bindings
        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)

        if (continuousNodeArray.length) {
            var firstNode = continuousNodeArray[0], lastNode = continuousNodeArray[continuousNodeArray.length - 1];

            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)
            // whereas a regular applyBindings won't introduce new memoized nodes
            invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, function(node) {
                ko.applyBindings(bindingContext, node);
            });
            invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, function(node) {
                ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);
            });
        }
    }

    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {
        return nodeOrNodeArray.nodeType ? nodeOrNodeArray
                                        : nodeOrNodeArray.length &gt; 0 ? nodeOrNodeArray[0]
                                        : null;
    }

    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {
        options = options || {};
        var firstTargetNode = targetNodeOrNodeArray &amp;&amp; getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
        var templateDocument = firstTargetNode &amp;&amp; firstTargetNode.ownerDocument;
        var templateEngineToUse = (options['templateEngine'] || _templateEngine);
        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);
        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);

        // Loosely check result is an array of DOM nodes
        if ((typeof renderedNodesArray.length != "number") || (renderedNodesArray.length &gt; 0 &amp;&amp; typeof renderedNodesArray[0].nodeType != "number"))
            throw new Error("Template engine must return an array of DOM nodes");

        var haveAddedNodesToParent = false;
        switch (renderMode) {
            case "replaceChildren":
                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);
                haveAddedNodesToParent = true;
                break;
            case "replaceNode":
                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);
                haveAddedNodesToParent = true;
                break;
            case "ignoreTargetNode": break;
            default:
                throw new Error("Unknown renderMode: " + renderMode);
        }

        if (haveAddedNodesToParent) {
            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);
            if (options['afterRender'])
                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);
        }

        return renderedNodesArray;
    }

    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {
        options = options || {};
        if ((options['templateEngine'] || _templateEngine) == undefined)
            throw new Error("Set a template engine before calling renderTemplate");
        renderMode = renderMode || "replaceChildren";

        if (targetNodeOrNodeArray) {
            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);

            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)
            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode &amp;&amp; renderMode == "replaceNode") ? firstTargetNode.parentNode : firstTargetNode;

            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes
                function () {
                    // Ensure we've got a proper binding context to work with
                    var bindingContext = (dataOrBindingContext &amp;&amp; (dataOrBindingContext instanceof ko.bindingContext))
                        ? dataOrBindingContext
                        : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));

                    // Support selecting template as a function of the data being rendered
                    var templateName = typeof(template) == 'function' ? template(bindingContext['$data'], bindingContext) : template;

                    var renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);
                    if (renderMode == "replaceNode") {
                        targetNodeOrNodeArray = renderedNodesArray;
                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
                    }
                },
                null,
                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }
            );
        } else {
            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node
            return ko.memoization.memoize(function (domNode) {
                ko.renderTemplate(template, dataOrBindingContext, options, domNode, "replaceNode");
            });
        }
    };

    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {
        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then
        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.
        var arrayItemContext;

        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode
        var executeTemplateForArrayItem = function (arrayValue, index) {
            // Support selecting template as a function of the data being rendered
            arrayItemContext = parentBindingContext['createChildContext'](ko.utils.unwrapObservable(arrayValue), options['as']);
            arrayItemContext['$index'] = index;
            var templateName = typeof(template) == 'function' ? template(arrayValue, arrayItemContext) : template;
            return executeTemplate(null, "ignoreTargetNode", templateName, arrayItemContext, options);
        }

        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode
        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {
            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);
            if (options['afterRender'])
                options['afterRender'](addedNodesArray, arrayValue);
        };

        return ko.dependentObservable(function () {
            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];
            if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
                unwrappedArray = [unwrappedArray];

            // Filter out any entries marked as destroyed
            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {
                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);
            });

            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).
            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.
            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);

        }, null, { disposeWhenNodeIsRemoved: targetNode });
    };

    var templateComputedDomDataKey = '__ko__templateComputedDomDataKey__';
    function disposeOldComputedAndStoreNewOne(element, newComputed) {
        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);
        if (oldComputed &amp;&amp; (typeof(oldComputed.dispose) == 'function'))
            oldComputed.dispose();
        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed &amp;&amp; newComputed.isActive()) ? newComputed : undefined);
    }

    ko.bindingHandlers['template'] = {
        'init': function(element, valueAccessor) {
            // Support anonymous templates
            var bindingValue = ko.utils.unwrapObservable(valueAccessor());
            if ((typeof bindingValue != "string") &amp;&amp; (!bindingValue['name']) &amp;&amp; (element.nodeType == 1 || element.nodeType == 8)) {
                // It's an anonymous template - store the element contents, then clear the element
                var templateNodes = element.nodeType == 1 ? element.childNodes : ko.virtualElements.childNodes(element),
                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent
                new ko.templateSources.anonymousTemplate(element)['nodes'](container);
            }
            return { 'controlsDescendantBindings': true };
        },
        'update': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var templateName = ko.utils.unwrapObservable(valueAccessor()),
                options = {},
                shouldDisplay = true,
                dataValue,
                templateComputed = null;

            if (typeof templateName != "string") {
                options = templateName;
                templateName = options['name'];

                // Support "if"/"ifnot" conditions
                if ('if' in options)
                    shouldDisplay = ko.utils.unwrapObservable(options['if']);
                if (shouldDisplay &amp;&amp; 'ifnot' in options)
                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);

                dataValue = ko.utils.unwrapObservable(options['data']);
            }

            if ('foreach' in options) {
                // Render once for each data point (treating data set as empty if shouldDisplay==false)
                var dataArray = (shouldDisplay &amp;&amp; options['foreach']) || [];
                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);
            } else if (!shouldDisplay) {
                ko.virtualElements.emptyNode(element);
            } else {
                // Render once for this single data point (or use the viewModel if no data was provided)
                var innerBindingContext = ('data' in options) ?
                    bindingContext['createChildContext'](dataValue, options['as']) :  // Given an explitit 'data' value, we create a child binding context for it
                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context
                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);
            }

            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)
            disposeOldComputedAndStoreNewOne(element, templateComputed);
        }
    };

    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.
    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {
        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);

        if ((parsedBindingValue.length == 1) &amp;&amp; parsedBindingValue[0]['unknown'])
            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)

        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, "name"))
            return null; // Named templates can be rewritten, so return "no error"
        return "This template engine does not support anonymous templates nested within its templates";
    };

    ko.virtualElements.allowedBindings['template'] = true;
})();

ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);
ko.exportSymbol('renderTemplate', ko.renderTemplate);

ko.utils.compareArrays = (function () {
    var statusNotInOld = 'added', statusNotInNew = 'deleted';

    // Simple calculation based on Levenshtein distance.
    function compareArrays(oldArray, newArray, dontLimitMoves) {
        oldArray = oldArray || [];
        newArray = newArray || [];

        if (oldArray.length &lt;= newArray.length)
            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, dontLimitMoves);
        else
            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, dontLimitMoves);
    }

    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, dontLimitMoves) {
        var myMin = Math.min,
            myMax = Math.max,
            editDistanceMatrix = [],
            smlIndex, smlIndexMax = smlArray.length,
            bigIndex, bigIndexMax = bigArray.length,
            compareRange = (bigIndexMax - smlIndexMax) || 1,
            maxDistance = smlIndexMax + bigIndexMax + 1,
            thisRow, lastRow,
            bigIndexMaxForRow, bigIndexMinForRow;

        for (smlIndex = 0; smlIndex &lt;= smlIndexMax; smlIndex++) {
            lastRow = thisRow;
            editDistanceMatrix.push(thisRow = []);
            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);
            bigIndexMinForRow = myMax(0, smlIndex - 1);
            for (bigIndex = bigIndexMinForRow; bigIndex &lt;= bigIndexMaxForRow; bigIndex++) {
                if (!bigIndex)
                    thisRow[bigIndex] = smlIndex + 1;
                else if (!smlIndex)  // Top row - transform empty array into new array via additions
                    thisRow[bigIndex] = bigIndex + 1;
                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])
                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)
                else {
                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)
                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)
                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;
                }
            }
        }

        var editScript = [], meMinusOne, notInSml = [], notInBig = [];
        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {
            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;
            if (bigIndex &amp;&amp; meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {
                notInSml.push(editScript[editScript.length] = {     // added
                    'status': statusNotInSml,
                    'value': bigArray[--bigIndex],
                    'index': bigIndex });
            } else if (smlIndex &amp;&amp; meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {
                notInBig.push(editScript[editScript.length] = {     // deleted
                    'status': statusNotInBig,
                    'value': smlArray[--smlIndex],
                    'index': smlIndex });
            } else {
                editScript.push({
                    'status': "retained",
                    'value': bigArray[--bigIndex] });
                --smlIndex;
            }
        }

        if (notInSml.length &amp;&amp; notInBig.length) {
            // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of
            // smlIndexMax keeps the time complexity of this algorithm linear.
            var limitFailedCompares = smlIndexMax * 10, failedCompares,
                a, d, notInSmlItem, notInBigItem;
            // Go through the items that have been added and deleted and try to find matches between them.
            for (failedCompares = a = 0; (dontLimitMoves || failedCompares &lt; limitFailedCompares) &amp;&amp; (notInSmlItem = notInSml[a]); a++) {
                for (d = 0; notInBigItem = notInBig[d]; d++) {
                    if (notInSmlItem['value'] === notInBigItem['value']) {
                        notInSmlItem['moved'] = notInBigItem['index'];
                        notInBigItem['moved'] = notInSmlItem['index'];
                        notInBig.splice(d,1);       // This item is marked as moved; so remove it from notInBig list
                        failedCompares = d = 0;     // Reset failed compares count because we're checking for consecutive failures
                        break;
                    }
                }
                failedCompares += d;
            }
        }
        return editScript.reverse();
    }

    return compareArrays;
})();

ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);

(function () {
    // Objective:
    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,
    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node
    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node
    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we
    //   previously mapped - retain those nodes, and just insert/delete other ones

    // "callbackAfterAddingNodes" will be invoked after any "mapping"-generated nodes are inserted into the container node
    // You can use this, for example, to activate bindings on those nodes.

    function fixUpNodesToBeMovedOrRemoved(contiguousNodeArray) {
        // Before moving, deleting, or replacing a set of nodes that were previously outputted by the "map" function, we have to reconcile
        // them against what is in the DOM right now. It may be that some of the nodes have already been removed from the document,
        // or that new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been
        // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.
        // So, this function translates the old "map" output array into its best guess of what set of current DOM nodes should be removed.
        //
        // Rules:
        //   [A] Any leading nodes that aren't in the document any more should be ignored
        //       These most likely correspond to memoization nodes that were already removed during binding
        //       See https://github.com/SteveSanderson/knockout/pull/440
        //   [B] We want to output a contiguous series of nodes that are still in the document. So, ignore any nodes that
        //       have already been removed, and include any nodes that have been inserted among the previous collection

        // Rule [A]
        while (contiguousNodeArray.length &amp;&amp; !ko.utils.domNodeIsAttachedToDocument(contiguousNodeArray[0]))
            contiguousNodeArray.splice(0, 1);

        // Rule [B]
        if (contiguousNodeArray.length &gt; 1) {
            // Build up the actual new contiguous node set
            var current = contiguousNodeArray[0], last = contiguousNodeArray[contiguousNodeArray.length - 1], newContiguousSet = [current];
            while (current !== last) {
                current = current.nextSibling;
                if (!current) // Won't happen, except if the developer has manually removed some DOM elements (then we're in an undefined scenario)
                    return;
                newContiguousSet.push(current);
            }

            // ... then mutate the input array to match this.
            // (The following line replaces the contents of contiguousNodeArray with newContiguousSet)
            Array.prototype.splice.apply(contiguousNodeArray, [0, contiguousNodeArray.length].concat(newContiguousSet));
        }
        return contiguousNodeArray;
    }

    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {
        // Map this array value inside a dependentObservable so we re-map when any dependency changes
        var mappedNodes = [];
        var dependentObservable = ko.dependentObservable(function() {
            var newMappedNodes = mapping(valueToMap, index) || [];

            // On subsequent evaluations, just replace the previously-inserted DOM nodes
            if (mappedNodes.length &gt; 0) {
                ko.utils.replaceDomNodes(fixUpNodesToBeMovedOrRemoved(mappedNodes), newMappedNodes);
                if (callbackAfterAddingNodes)
                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);
            }

            // Replace the contents of the mappedNodes array, thereby updating the record
            // of which nodes would be deleted if valueToMap was itself later removed
            mappedNodes.splice(0, mappedNodes.length);
            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);
        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return (mappedNodes.length == 0) || !ko.utils.domNodeIsAttachedToDocument(mappedNodes[0]) } });
        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };
    }

    var lastMappingResultDomDataKey = "setDomNodeChildrenFromArrayMapping_lastMappingResult";

    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {
        // Compare the provided array against the previous one
        array = array || [];
        options = options || {};
        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;
        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];
        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });
        var editScript = ko.utils.compareArrays(lastArray, array);

        // Build the new mapping result
        var newMappingResult = [];
        var lastMappingResultIndex = 0;
        var newMappingResultIndex = 0;

        var nodesToDelete = [];
        var itemsToProcess = [];
        var itemsForBeforeRemoveCallbacks = [];
        var itemsForMoveCallbacks = [];
        var itemsForAfterAddCallbacks = [];
        var mapData;

        function itemMovedOrRetained(editScriptIndex, oldPosition) {
            mapData = lastMappingResult[oldPosition];
            if (newMappingResultIndex !== oldPosition)
                itemsForMoveCallbacks[editScriptIndex] = mapData;
            // Since updating the index might change the nodes, do so before calling fixUpNodesToBeMovedOrRemoved
            mapData.indexObservable(newMappingResultIndex++);
            fixUpNodesToBeMovedOrRemoved(mapData.mappedNodes);
            newMappingResult.push(mapData);
            itemsToProcess.push(mapData);
        }

        function callCallback(callback, items) {
            if (callback) {
                for (var i = 0, n = items.length; i &lt; n; i++) {
                    if (items[i]) {
                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {
                            callback(node, i, items[i].arrayEntry);
                        });
                    }
                }
            }
        }

        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {
            movedIndex = editScriptItem['moved'];
            switch (editScriptItem['status']) {
                case "deleted":
                    if (movedIndex === undefined) {
                        mapData = lastMappingResult[lastMappingResultIndex];

                        // Stop tracking changes to the mapping for these nodes
                        if (mapData.dependentObservable)
                            mapData.dependentObservable.dispose();

                        // Queue these nodes for later removal
                        nodesToDelete.push.apply(nodesToDelete, fixUpNodesToBeMovedOrRemoved(mapData.mappedNodes));
                        if (options['beforeRemove']) {
                            itemsForBeforeRemoveCallbacks[i] = mapData;
                            itemsToProcess.push(mapData);
                        }
                    }
                    lastMappingResultIndex++;
                    break;

                case "retained":
                    itemMovedOrRetained(i, lastMappingResultIndex++);
                    break;

                case "added":
                    if (movedIndex !== undefined) {
                        itemMovedOrRetained(i, movedIndex);
                    } else {
                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };
                        newMappingResult.push(mapData);
                        itemsToProcess.push(mapData);
                        if (!isFirstExecution)
                            itemsForAfterAddCallbacks[i] = mapData;
                    }
                    break;
            }
        }

        // Call beforeMove first before any changes have been made to the DOM
        callCallback(options['beforeMove'], itemsForMoveCallbacks);

        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)
        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);

        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)
        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {
            // Get nodes for newly added items
            if (!mapData.mappedNodes)
                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));

            // Put nodes in the right place if they aren't there already
            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {
                if (node !== nextNode)
                    ko.virtualElements.insertAfter(domNode, node, lastNode);
            }

            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)
            if (!mapData.initialized &amp;&amp; callbackAfterAddingNodes) {
                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);
                mapData.initialized = true;
            }
        }

        // If there's a beforeRemove callback, call it after reordering.
        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using
        // some sort of animation, which is why we first reorder the nodes that will be removed. If the
        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.
        // Perhaps we'll make that change in the future if this scenario becomes more common.
        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);

        // Finally call afterMove and afterAdd callbacks
        callCallback(options['afterMove'], itemsForMoveCallbacks);
        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);

        // Store a copy of the array items we just considered so we can difference it next time
        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);
    }
})();

ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);
ko.nativeTemplateEngine = function () {
    this['allowTemplateRewriting'] = false;
}

ko.nativeTemplateEngine.prototype = new ko.templateEngine();
ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options) {
    var useNodesIfAvailable = !(ko.utils.ieVersion &lt; 9), // IE&lt;9 cloneNode doesn't work properly
        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,
        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;

    if (templateNodes) {
        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);
    } else {
        var templateText = templateSource['text']();
        return ko.utils.parseHtmlFragment(templateText);
    }
};

ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();
ko.setTemplateEngine(ko.nativeTemplateEngine.instance);

ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);
(function() {
    ko.jqueryTmplTemplateEngine = function () {
        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl
        // doesn't expose a version number, so we have to infer it.
        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,
        // which KO internally refers to as version "2", so older versions are no longer detected.
        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {
            if ((typeof(jQuery) == "undefined") || !(jQuery['tmpl']))
                return 0;
            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.
            try {
                if (jQuery['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') &gt;= 0) {
                    // Since 1.0.0pre, custom tags should append markup to an array called "__"
                    return 2; // Final version of jquery.tmpl
                }
            } catch(ex) { /* Apparently not the version we were looking for */ }

            return 1; // Any older version that we don't support
        })();

        function ensureHasReferencedJQueryTemplates() {
            if (jQueryTmplVersion &lt; 2)
                throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");
        }

        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {
            return jQuery['tmpl'](compiledTemplate, data, jQueryTemplateOptions);
        }

        this['renderTemplateSource'] = function(templateSource, bindingContext, options) {
            options = options || {};
            ensureHasReferencedJQueryTemplates();

            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)
            var precompiled = templateSource['data']('precompiled');
            if (!precompiled) {
                var templateText = templateSource['text']() || "";
                // Wrap in "with($whatever.koBindingContext) { ... }"
                templateText = "{{ko_with $item.koBindingContext}}" + templateText + "{{/ko_with}}";

                precompiled = jQuery['template'](null, templateText);
                templateSource['data']('precompiled', precompiled);
            }

            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays
            var jQueryTemplateOptions = jQuery['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);

            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);
            resultNodes['appendTo'](document.createElement("div")); // Using "appendTo" forces jQuery/jQuery.tmpl to perform necessary cleanup work

            jQuery['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders
            return resultNodes;
        };

        this['createJavaScriptEvaluatorBlock'] = function(script) {
            return "{{ko_code ((function() { return " + script + " })()) }}";
        };

        this['addTemplate'] = function(templateName, templateMarkup) {
            document.write("&lt;script type='text/html' id='" + templateName + "'&gt;" + templateMarkup + "&lt;/script&gt;");
        };

        if (jQueryTmplVersion &gt; 0) {
            jQuery['tmpl']['tag']['ko_code'] = {
                open: "__.push($1 || '');"
            };
            jQuery['tmpl']['tag']['ko_with'] = {
                open: "with($1) {",
                close: "} "
            };
        }
    };

    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();

    // Use this one by default *only if jquery.tmpl is referenced*
    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();
    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion &gt; 0)
        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);

    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);
})();
});
})(window,document,navigator,window["jQuery"]);
})();




Scripts/knockout-2.2.0.js


// Knockout JavaScript library v2.2.0
// (c) Steven Sanderson - http://knockoutjs.com/
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function() {function i(v){throw v;}var l=!0,n=null,q=!1;function t(v){return function(){return v}};var w=window,x=document,fa=navigator,E=window.jQuery,H=void 0;
function K(v){function ga(a,d,c,e,f){var g=[],a=b.j(function(){var a=d(c,f)||[];0&lt;g.length&amp;&amp;(b.a.Xa(L(g),a),e&amp;&amp;b.r.K(e,n,[c,a,f]));g.splice(0,g.length);b.a.P(g,a)},n,{W:a,Ja:function(){return 0==g.length||!b.a.X(g[0])}});return{M:g,j:a.oa()?a:H}}function L(a){for(;a.length&amp;&amp;!b.a.X(a[0]);)a.splice(0,1);if(1&lt;a.length){for(var d=a[0],c=a[a.length-1],e=[d];d!==c;){d=d.nextSibling;if(!d)return;e.push(d)}Array.prototype.splice.apply(a,[0,a.length].concat(e))}return a}function R(a,b,c,e,f){var g=Math.min,
h=Math.max,j=[],k,m=a.length,p,r=b.length,u=r-m||1,F=m+r+1,I,z,y;for(k=0;k&lt;=m;k++){z=I;j.push(I=[]);y=g(r,k+u);for(p=h(0,k-1);p&lt;=y;p++)I[p]=p?k?a[k-1]===b[p-1]?z[p-1]:g(z[p]||F,I[p-1]||F)+1:p+1:k+1}g=[];h=[];u=[];k=m;for(p=r;k||p;)r=j[k][p]-1,p&amp;&amp;r===j[k][p-1]?h.push(g[g.length]={status:c,value:b[--p],index:p}):k&amp;&amp;r===j[k-1][p]?u.push(g[g.length]={status:e,value:a[--k],index:k}):(g.push({status:"retained",value:b[--p]}),--k);if(h.length&amp;&amp;u.length)for(var a=10*m,s,b=c=0;(f||b&lt;a)&amp;&amp;(s=h[c]);c++){for(e=
0;j=u[e];e++)if(s.value===j.value){s.moved=j.index;j.moved=s.index;u.splice(e,1);b=e=0;break}b+=e}return g.reverse()}function S(a,d,c,e,f){var f=f||{},g=a&amp;&amp;M(a),g=g&amp;&amp;g.ownerDocument,h=f.templateEngine||N;b.ya.ub(c,h,g);c=h.renderTemplate(c,e,f,g);("number"!=typeof c.length||0&lt;c.length&amp;&amp;"number"!=typeof c[0].nodeType)&amp;&amp;i(Error("Template engine must return an array of DOM nodes"));g=q;switch(d){case "replaceChildren":b.e.N(a,c);g=l;break;case "replaceNode":b.a.Xa(a,c);g=l;break;case "ignoreTargetNode":break;
default:i(Error("Unknown renderMode: "+d))}g&amp;&amp;(T(c,e),f.afterRender&amp;&amp;b.r.K(f.afterRender,n,[c,e.$data]));return c}function M(a){return a.nodeType?a:0&lt;a.length?a[0]:n}function T(a,d){if(a.length){var c=a[0],e=a[a.length-1];U(c,e,function(a){b.Ca(d,a)});U(c,e,function(a){b.s.hb(a,[d])})}}function U(a,d,c){for(var e,d=b.e.nextSibling(d);a&amp;&amp;(e=a)!==d;)a=b.e.nextSibling(e),(1===e.nodeType||8===e.nodeType)&amp;&amp;c(e)}function V(a,d,c){for(var a=b.g.aa(a),e=b.g.Q,f=0;f&lt;a.length;f++){var g=a[f].key;if(e.hasOwnProperty(g)){var h=
e[g];"function"===typeof h?(g=h(a[f].value))&amp;&amp;i(Error(g)):h||i(Error("This template engine does not support the '"+g+"' binding within its templates"))}}a="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+b.g.ba(a)+" } })()})";return c.createJavaScriptEvaluatorBlock(a)+d}function W(a,d,c,e){function f(a){return function(){return j[a]}}function g(){return j}var h=0,j,k;b.j(function(){var m=c&amp;&amp;c instanceof b.z?c:new b.z(b.a.d(c)),p=m.$data;e&amp;&amp;b.cb(a,m);if(j=("function"==typeof d?
d(m,a):d)||b.J.instance.getBindings(a,m)){if(0===h){h=1;for(var r in j){var u=b.c[r];u&amp;&amp;8===a.nodeType&amp;&amp;!b.e.I[r]&amp;&amp;i(Error("The binding '"+r+"' cannot be used with virtual elements"));if(u&amp;&amp;"function"==typeof u.init&amp;&amp;(u=(0,u.init)(a,f(r),g,p,m))&amp;&amp;u.controlsDescendantBindings)k!==H&amp;&amp;i(Error("Multiple bindings ("+k+" and "+r+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.")),k=r}h=2}if(2===h)for(r in j)(u=b.c[r])&amp;&amp;"function"==
typeof u.update&amp;&amp;(0,u.update)(a,f(r),g,p,m)}},n,{W:a});return{Mb:k===H}}function X(a,d,c){var e=l,f=1===d.nodeType;f&amp;&amp;b.e.Sa(d);if(f&amp;&amp;c||b.J.instance.nodeHasBindings(d))e=W(d,n,a,c).Mb;e&amp;&amp;Y(a,d,!f)}function Y(a,d,c){for(var e=b.e.firstChild(d);d=e;)e=b.e.nextSibling(d),X(a,d,c)}function Z(a,b){var c=$(a,b);return c?0&lt;c.length?c[c.length-1].nextSibling:a.nextSibling:n}function $(a,b){for(var c=a,e=1,f=[];c=c.nextSibling;){if(G(c)&amp;&amp;(e--,0===e))return f;f.push(c);A(c)&amp;&amp;e++}b||i(Error("Cannot find closing comment tag to match: "+
a.nodeValue));return n}function G(a){return 8==a.nodeType&amp;&amp;(J?a.text:a.nodeValue).match(ha)}function A(a){return 8==a.nodeType&amp;&amp;(J?a.text:a.nodeValue).match(ia)}function O(a,b){for(var c=n;a!=c;)c=a,a=a.replace(ja,function(a,c){return b[c]});return a}function ka(){var a=[],d=[];this.save=function(c,e){var f=b.a.i(a,c);0&lt;=f?d[f]=e:(a.push(c),d.push(e))};this.get=function(c){c=b.a.i(a,c);return 0&lt;=c?d[c]:H}}function aa(a,b,c){function e(e){var g=b(a[e]);switch(typeof g){case "boolean":case "number":case "string":case "function":f[e]=
g;break;case "object":case "undefined":var h=c.get(g);f[e]=h!==H?h:aa(g,b,c)}}c=c||new ka;a=b(a);if(!("object"==typeof a&amp;&amp;a!==n&amp;&amp;a!==H&amp;&amp;!(a instanceof Date)))return a;var f=a instanceof Array?[]:{};c.save(a,f);var g=a;if(g instanceof Array){for(var h=0;h&lt;g.length;h++)e(h);"function"==typeof g.toJSON&amp;&amp;e("toJSON")}else for(h in g)e(h);return f}function ba(a,d){if(a)if(8==a.nodeType){var c=b.s.Ta(a.nodeValue);c!=n&amp;&amp;d.push({rb:a,Eb:c})}else if(1==a.nodeType)for(var c=0,e=a.childNodes,f=e.length;c&lt;f;c++)ba(e[c],
d)}function P(a,d,c,e){b.c[a]={init:function(a){b.a.f.set(a,ca,{});return{controlsDescendantBindings:l}},update:function(a,g,h,j,k){var h=b.a.f.get(a,ca),g=b.a.d(g()),j=!c!==!g,m=!h.Ya;if(m||d||j!==h.pb)m&amp;&amp;(h.Ya=b.a.Ha(b.e.childNodes(a),l)),j?(m||b.e.N(a,b.a.Ha(h.Ya)),b.Da(e?e(k,g):k,a)):b.e.Y(a),h.pb=j}};b.g.Q[a]=q;b.e.I[a]=l}function da(a,d,c){c&amp;&amp;d!==b.k.q(a)&amp;&amp;b.k.T(a,d);d!==b.k.q(a)&amp;&amp;b.r.K(b.a.Aa,n,[a,"change"])}var b="undefined"!==typeof v?v:{};b.b=function(a,d){for(var c=a.split("."),e=b,f=0;f&lt;
c.length-1;f++)e=e[c[f]];e[c[c.length-1]]=d};b.p=function(a,b,c){a[b]=c};b.version="2.2.0";b.b("version",b.version);b.a=new function(){function a(a,d){if("input"!==b.a.u(a)||!a.type||"click"!=d.toLowerCase())return q;var c=a.type;return"checkbox"==c||"radio"==c}var d=/^(\s|\u00A0)+|(\s|\u00A0)+$/g,c={},e={};c[/Firefox\/2/i.test(fa.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"];c.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" ");
for(var f in c){var g=c[f];if(g.length)for(var h=0,j=g.length;h&lt;j;h++)e[g[h]]=f}var k={propertychange:l},m,c=3;f=x.createElement("div");for(g=f.getElementsByTagName("i");f.innerHTML="&lt;\!--[if gt IE "+ ++c+"]&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--\&gt;",g[0];);m=4&lt;c?c:H;return{Ma:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],o:function(a,b){for(var d=0,c=a.length;d&lt;c;d++)b(a[d])},i:function(a,b){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(a,b);for(var d=0,c=a.length;d&lt;
c;d++)if(a[d]===b)return d;return-1},kb:function(a,b,d){for(var c=0,e=a.length;c&lt;e;c++)if(b.call(d,a[c]))return a[c];return n},ga:function(a,d){var c=b.a.i(a,d);0&lt;=c&amp;&amp;a.splice(c,1)},Fa:function(a){for(var a=a||[],d=[],c=0,e=a.length;c&lt;e;c++)0&gt;b.a.i(d,a[c])&amp;&amp;d.push(a[c]);return d},V:function(a,b){for(var a=a||[],d=[],c=0,e=a.length;c&lt;e;c++)d.push(b(a[c]));return d},fa:function(a,b){for(var a=a||[],d=[],c=0,e=a.length;c&lt;e;c++)b(a[c])&amp;&amp;d.push(a[c]);return d},P:function(a,b){if(b instanceof Array)a.push.apply(a,
b);else for(var d=0,c=b.length;d&lt;c;d++)a.push(b[d]);return a},extend:function(a,b){if(b)for(var d in b)b.hasOwnProperty(d)&amp;&amp;(a[d]=b[d]);return a},ka:function(a){for(;a.firstChild;)b.removeNode(a.firstChild)},Gb:function(a){for(var a=b.a.L(a),d=x.createElement("div"),c=0,e=a.length;c&lt;e;c++)d.appendChild(b.A(a[c]));return d},Ha:function(a,d){for(var c=0,e=a.length,g=[];c&lt;e;c++){var f=a[c].cloneNode(l);g.push(d?b.A(f):f)}return g},N:function(a,d){b.a.ka(a);if(d)for(var c=0,e=d.length;c&lt;e;c++)a.appendChild(d[c])},
Xa:function(a,d){var c=a.nodeType?[a]:a;if(0&lt;c.length){for(var e=c[0],g=e.parentNode,f=0,h=d.length;f&lt;h;f++)g.insertBefore(d[f],e);f=0;for(h=c.length;f&lt;h;f++)b.removeNode(c[f])}},ab:function(a,b){7&gt;m?a.setAttribute("selected",b):a.selected=b},D:function(a){return(a||"").replace(d,"")},Qb:function(a,d){for(var c=[],e=(a||"").split(d),f=0,g=e.length;f&lt;g;f++){var h=b.a.D(e[f]);""!==h&amp;&amp;c.push(h)}return c},Nb:function(a,b){a=a||"";return b.length&gt;a.length?q:a.substring(0,b.length)===b},sb:function(a,b){if(b.compareDocumentPosition)return 16==
(b.compareDocumentPosition(a)&amp;16);for(;a!=n;){if(a==b)return l;a=a.parentNode}return q},X:function(a){return b.a.sb(a,a.ownerDocument)},u:function(a){return a&amp;&amp;a.tagName&amp;&amp;a.tagName.toLowerCase()},n:function(b,d,c){var e=m&amp;&amp;k[d];if(!e&amp;&amp;"undefined"!=typeof E){if(a(b,d))var f=c,c=function(a,b){var d=this.checked;b&amp;&amp;(this.checked=b.mb!==l);f.call(this,a);this.checked=d};E(b).bind(d,c)}else!e&amp;&amp;"function"==typeof b.addEventListener?b.addEventListener(d,c,q):"undefined"!=typeof b.attachEvent?b.attachEvent("on"+
d,function(a){c.call(b,a)}):i(Error("Browser doesn't support addEventListener or attachEvent"))},Aa:function(b,d){(!b||!b.nodeType)&amp;&amp;i(Error("element must be a DOM node when calling triggerEvent"));if("undefined"!=typeof E){var c=[];a(b,d)&amp;&amp;c.push({mb:b.checked});E(b).trigger(d,c)}else"function"==typeof x.createEvent?"function"==typeof b.dispatchEvent?(c=x.createEvent(e[d]||"HTMLEvents"),c.initEvent(d,l,l,w,0,0,0,0,0,q,q,q,q,0,b),b.dispatchEvent(c)):i(Error("The supplied element doesn't support dispatchEvent")):
"undefined"!=typeof b.fireEvent?(a(b,d)&amp;&amp;(b.checked=b.checked!==l),b.fireEvent("on"+d)):i(Error("Browser doesn't support triggering events"))},d:function(a){return b.$(a)?a():a},ta:function(a){return b.$(a)?a.t():a},da:function(a,d,c){if(d){var e=/[\w-]+/g,f=a.className.match(e)||[];b.a.o(d.match(e),function(a){var d=b.a.i(f,a);0&lt;=d?c||f.splice(d,1):c&amp;&amp;f.push(a)});a.className=f.join(" ")}},bb:function(a,d){var c=b.a.d(d);if(c===n||c===H)c="";if(3===a.nodeType)a.data=c;else{var e=b.e.firstChild(a);
!e||3!=e.nodeType||b.e.nextSibling(e)?b.e.N(a,[x.createTextNode(c)]):e.data=c;b.a.vb(a)}},$a:function(a,b){a.name=b;if(7&gt;=m)try{a.mergeAttributes(x.createElement("&lt;input name='"+a.name+"'/&gt;"),q)}catch(d){}},vb:function(a){9&lt;=m&amp;&amp;(a=1==a.nodeType?a:a.parentNode,a.style&amp;&amp;(a.style.zoom=a.style.zoom))},tb:function(a){if(9&lt;=m){var b=a.style.width;a.style.width=0;a.style.width=b}},Kb:function(a,d){for(var a=b.a.d(a),d=b.a.d(d),c=[],e=a;e&lt;=d;e++)c.push(e);return c},L:function(a){for(var b=[],d=0,c=a.length;d&lt;
c;d++)b.push(a[d]);return b},Ob:6===m,Pb:7===m,Z:m,Na:function(a,d){for(var c=b.a.L(a.getElementsByTagName("input")).concat(b.a.L(a.getElementsByTagName("textarea"))),e="string"==typeof d?function(a){return a.name===d}:function(a){return d.test(a.name)},f=[],g=c.length-1;0&lt;=g;g--)e(c[g])&amp;&amp;f.push(c[g]);return f},Hb:function(a){return"string"==typeof a&amp;&amp;(a=b.a.D(a))?w.JSON&amp;&amp;w.JSON.parse?w.JSON.parse(a):(new Function("return "+a))():n},wa:function(a,d,c){("undefined"==typeof JSON||"undefined"==typeof JSON.stringify)&amp;&amp;
i(Error("Cannot find JSON.stringify(). Some browsers (e.g., IE &lt; 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js"));return JSON.stringify(b.a.d(a),d,c)},Ib:function(a,d,c){var c=c||{},e=c.params||{},f=c.includeFields||this.Ma,g=a;if("object"==typeof a&amp;&amp;"form"===b.a.u(a))for(var g=a.action,h=f.length-1;0&lt;=h;h--)for(var j=b.a.Na(a,f[h]),k=j.length-1;0&lt;=k;k--)e[j[k].name]=j[k].value;var d=b.a.d(d),m=x.createElement("form");
m.style.display="none";m.action=g;m.method="post";for(var v in d)a=x.createElement("input"),a.name=v,a.value=b.a.wa(b.a.d(d[v])),m.appendChild(a);for(v in e)a=x.createElement("input"),a.name=v,a.value=e[v],m.appendChild(a);x.body.appendChild(m);c.submitter?c.submitter(m):m.submit();setTimeout(function(){m.parentNode.removeChild(m)},0)}}};b.b("utils",b.a);b.b("utils.arrayForEach",b.a.o);b.b("utils.arrayFirst",b.a.kb);b.b("utils.arrayFilter",b.a.fa);b.b("utils.arrayGetDistinctValues",b.a.Fa);b.b("utils.arrayIndexOf",
b.a.i);b.b("utils.arrayMap",b.a.V);b.b("utils.arrayPushAll",b.a.P);b.b("utils.arrayRemoveItem",b.a.ga);b.b("utils.extend",b.a.extend);b.b("utils.fieldsIncludedWithJsonPost",b.a.Ma);b.b("utils.getFormFields",b.a.Na);b.b("utils.peekObservable",b.a.ta);b.b("utils.postJson",b.a.Ib);b.b("utils.parseJson",b.a.Hb);b.b("utils.registerEventHandler",b.a.n);b.b("utils.stringifyJson",b.a.wa);b.b("utils.range",b.a.Kb);b.b("utils.toggleDomNodeCssClass",b.a.da);b.b("utils.triggerEvent",b.a.Aa);b.b("utils.unwrapObservable",
b.a.d);Function.prototype.bind||(Function.prototype.bind=function(a){var b=this,c=Array.prototype.slice.call(arguments),a=c.shift();return function(){return b.apply(a,c.concat(Array.prototype.slice.call(arguments)))}});b.a.f=new function(){var a=0,d="__ko__"+(new Date).getTime(),c={};return{get:function(a,d){var c=b.a.f.getAll(a,q);return c===H?H:c[d]},set:function(a,d,c){c===H&amp;&amp;b.a.f.getAll(a,q)===H||(b.a.f.getAll(a,l)[d]=c)},getAll:function(b,f){var g=b[d];if(!g||!("null"!==g&amp;&amp;c[g])){if(!f)return H;
g=b[d]="ko"+a++;c[g]={}}return c[g]},clear:function(a){var b=a[d];return b?(delete c[b],a[d]=n,l):q}}};b.b("utils.domData",b.a.f);b.b("utils.domData.clear",b.a.f.clear);b.a.F=new function(){function a(a,d){var e=b.a.f.get(a,c);e===H&amp;&amp;d&amp;&amp;(e=[],b.a.f.set(a,c,e));return e}function d(c){var e=a(c,q);if(e)for(var e=e.slice(0),j=0;j&lt;e.length;j++)e[j](c);b.a.f.clear(c);"function"==typeof E&amp;&amp;"function"==typeof E.cleanData&amp;&amp;E.cleanData([c]);if(f[c.nodeType])for(e=c.firstChild;c=e;)e=c.nextSibling,8===c.nodeType&amp;&amp;
d(c)}var c="__ko_domNodeDisposal__"+(new Date).getTime(),e={1:l,8:l,9:l},f={1:l,9:l};return{Ba:function(b,d){"function"!=typeof d&amp;&amp;i(Error("Callback must be a function"));a(b,l).push(d)},Wa:function(d,e){var f=a(d,q);f&amp;&amp;(b.a.ga(f,e),0==f.length&amp;&amp;b.a.f.set(d,c,H))},A:function(a){if(e[a.nodeType]&amp;&amp;(d(a),f[a.nodeType])){var c=[];b.a.P(c,a.getElementsByTagName("*"));for(var j=0,k=c.length;j&lt;k;j++)d(c[j])}return a},removeNode:function(a){b.A(a);a.parentNode&amp;&amp;a.parentNode.removeChild(a)}}};b.A=b.a.F.A;
b.removeNode=b.a.F.removeNode;b.b("cleanNode",b.A);b.b("removeNode",b.removeNode);b.b("utils.domNodeDisposal",b.a.F);b.b("utils.domNodeDisposal.addDisposeCallback",b.a.F.Ba);b.b("utils.domNodeDisposal.removeDisposeCallback",b.a.F.Wa);b.a.sa=function(a){var d;if("undefined"!=typeof E){if((d=E.clean([a]))&amp;&amp;d[0]){for(a=d[0];a.parentNode&amp;&amp;11!==a.parentNode.nodeType;)a=a.parentNode;a.parentNode&amp;&amp;a.parentNode.removeChild(a)}}else{var c=b.a.D(a).toLowerCase();d=x.createElement("div");c=c.match(/^&lt;(thead|tbody|tfoot)/)&amp;&amp;
[1,"&lt;table&gt;","&lt;/table&gt;"]||!c.indexOf("&lt;tr")&amp;&amp;[2,"&lt;table&gt;&lt;tbody&gt;","&lt;/tbody&gt;&lt;/table&gt;"]||(!c.indexOf("&lt;td")||!c.indexOf("&lt;th"))&amp;&amp;[3,"&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;","&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;"]||[0,"",""];a="ignored&lt;div&gt;"+c[1]+a+c[2]+"&lt;/div&gt;";for("function"==typeof w.innerShiv?d.appendChild(w.innerShiv(a)):d.innerHTML=a;c[0]--;)d=d.lastChild;d=b.a.L(d.lastChild.childNodes)}return d};b.a.ca=function(a,d){b.a.ka(a);d=b.a.d(d);if(d!==n&amp;&amp;d!==H)if("string"!=typeof d&amp;&amp;(d=d.toString()),"undefined"!=typeof E)E(a).html(d);else for(var c=
b.a.sa(d),e=0;e&lt;c.length;e++)a.appendChild(c[e])};b.b("utils.parseHtmlFragment",b.a.sa);b.b("utils.setHtml",b.a.ca);var Q={};b.s={qa:function(a){"function"!=typeof a&amp;&amp;i(Error("You can only pass a function to ko.memoization.memoize()"));var b=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);Q[b]=a;return"&lt;\!--[ko_memo:"+b+"]--\&gt;"},gb:function(a,b){var c=Q[a];c===H&amp;&amp;i(Error("Couldn't find any memo with ID "+a+". Perhaps it's already been unmemoized."));
try{return c.apply(n,b||[]),l}finally{delete Q[a]}},hb:function(a,d){var c=[];ba(a,c);for(var e=0,f=c.length;e&lt;f;e++){var g=c[e].rb,h=[g];d&amp;&amp;b.a.P(h,d);b.s.gb(c[e].Eb,h);g.nodeValue="";g.parentNode&amp;&amp;g.parentNode.removeChild(g)}},Ta:function(a){return(a=a.match(/^\[ko_memo\:(.*?)\]$/))?a[1]:n}};b.b("memoization",b.s);b.b("memoization.memoize",b.s.qa);b.b("memoization.unmemoize",b.s.gb);b.b("memoization.parseMemoText",b.s.Ta);b.b("memoization.unmemoizeDomNodeAndDescendants",b.s.hb);b.La={throttle:function(a,
d){a.throttleEvaluation=d;var c=n;return b.j({read:a,write:function(b){clearTimeout(c);c=setTimeout(function(){a(b)},d)}})},notify:function(a,d){a.equalityComparer="always"==d?t(q):b.m.fn.equalityComparer;return a}};b.b("extenders",b.La);b.eb=function(a,d,c){this.target=a;this.ha=d;this.qb=c;b.p(this,"dispose",this.B)};b.eb.prototype.B=function(){this.Bb=l;this.qb()};b.S=function(){this.w={};b.a.extend(this,b.S.fn);b.p(this,"subscribe",this.xa);b.p(this,"extend",this.extend);b.p(this,"getSubscriptionsCount",
this.xb)};b.S.fn={xa:function(a,d,c){var c=c||"change",a=d?a.bind(d):a,e=new b.eb(this,a,function(){b.a.ga(this.w[c],e)}.bind(this));this.w[c]||(this.w[c]=[]);this.w[c].push(e);return e},notifySubscribers:function(a,d){d=d||"change";this.w[d]&amp;&amp;b.r.K(function(){b.a.o(this.w[d].slice(0),function(b){b&amp;&amp;b.Bb!==l&amp;&amp;b.ha(a)})},this)},xb:function(){var a=0,b;for(b in this.w)this.w.hasOwnProperty(b)&amp;&amp;(a+=this.w[b].length);return a},extend:function(a){var d=this;if(a)for(var c in a){var e=b.La[c];"function"==
typeof e&amp;&amp;(d=e(d,a[c]))}return d}};b.Pa=function(a){return"function"==typeof a.xa&amp;&amp;"function"==typeof a.notifySubscribers};b.b("subscribable",b.S);b.b("isSubscribable",b.Pa);var B=[];b.r={lb:function(a){B.push({ha:a,Ka:[]})},end:function(){B.pop()},Va:function(a){b.Pa(a)||i(Error("Only subscribable things can act as dependencies"));if(0&lt;B.length){var d=B[B.length-1];d&amp;&amp;!(0&lt;=b.a.i(d.Ka,a))&amp;&amp;(d.Ka.push(a),d.ha(a))}},K:function(a,b,c){try{return B.push(n),a.apply(b,c||[])}finally{B.pop()}}};var la={undefined:l,
"boolean":l,number:l,string:l};b.m=function(a){function d(){if(0&lt;arguments.length){if(!d.equalityComparer||!d.equalityComparer(c,arguments[0]))d.H(),c=arguments[0],d.G();return this}b.r.Va(d);return c}var c=a;b.S.call(d);d.t=function(){return c};d.G=function(){d.notifySubscribers(c)};d.H=function(){d.notifySubscribers(c,"beforeChange")};b.a.extend(d,b.m.fn);b.p(d,"peek",d.t);b.p(d,"valueHasMutated",d.G);b.p(d,"valueWillMutate",d.H);return d};b.m.fn={equalityComparer:function(a,b){return a===n||typeof a in
la?a===b:q}};var D=b.m.Jb="__ko_proto__";b.m.fn[D]=b.m;b.la=function(a,d){return a===n||a===H||a[D]===H?q:a[D]===d?l:b.la(a[D],d)};b.$=function(a){return b.la(a,b.m)};b.Qa=function(a){return"function"==typeof a&amp;&amp;a[D]===b.m||"function"==typeof a&amp;&amp;a[D]===b.j&amp;&amp;a.yb?l:q};b.b("observable",b.m);b.b("isObservable",b.$);b.b("isWriteableObservable",b.Qa);b.R=function(a){0==arguments.length&amp;&amp;(a=[]);a!==n&amp;&amp;(a!==H&amp;&amp;!("length"in a))&amp;&amp;i(Error("The argument passed when initializing an observable array must be an array, or null, or undefined."));
var d=b.m(a);b.a.extend(d,b.R.fn);return d};b.R.fn={remove:function(a){for(var b=this.t(),c=[],e="function"==typeof a?a:function(b){return b===a},f=0;f&lt;b.length;f++){var g=b[f];e(g)&amp;&amp;(0===c.length&amp;&amp;this.H(),c.push(g),b.splice(f,1),f--)}c.length&amp;&amp;this.G();return c},removeAll:function(a){if(a===H){var d=this.t(),c=d.slice(0);this.H();d.splice(0,d.length);this.G();return c}return!a?[]:this.remove(function(d){return 0&lt;=b.a.i(a,d)})},destroy:function(a){var b=this.t(),c="function"==typeof a?a:function(b){return b===
a};this.H();for(var e=b.length-1;0&lt;=e;e--)c(b[e])&amp;&amp;(b[e]._destroy=l);this.G()},destroyAll:function(a){return a===H?this.destroy(t(l)):!a?[]:this.destroy(function(d){return 0&lt;=b.a.i(a,d)})},indexOf:function(a){var d=this();return b.a.i(d,a)},replace:function(a,b){var c=this.indexOf(a);0&lt;=c&amp;&amp;(this.H(),this.t()[c]=b,this.G())}};b.a.o("pop push reverse shift sort splice unshift".split(" "),function(a){b.R.fn[a]=function(){var b=this.t();this.H();b=b[a].apply(b,arguments);this.G();return b}});b.a.o(["slice"],
function(a){b.R.fn[a]=function(){var b=this();return b[a].apply(b,arguments)}});b.b("observableArray",b.R);b.j=function(a,d,c){function e(){b.a.o(y,function(a){a.B()});y=[]}function f(){var a=h.throttleEvaluation;a&amp;&amp;0&lt;=a?(clearTimeout(s),s=setTimeout(g,a)):g()}function g(){if(!p)if(m&amp;&amp;v())z();else{p=l;try{var a=b.a.V(y,function(a){return a.target});b.r.lb(function(c){var d;0&lt;=(d=b.a.i(a,c))?a[d]=H:y.push(c.xa(f))});for(var c=r.call(d),e=a.length-1;0&lt;=e;e--)a[e]&amp;&amp;y.splice(e,1)[0].B();m=l;h.notifySubscribers(k,
"beforeChange");k=c}finally{b.r.end()}h.notifySubscribers(k);p=q;y.length||z()}}function h(){if(0&lt;arguments.length)return"function"===typeof u?u.apply(d,arguments):i(Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.")),this;m||g();b.r.Va(h);return k}function j(){return!m||0&lt;y.length}var k,m=q,p=q,r=a;r&amp;&amp;"object"==typeof r?(c=r,r=c.read):(c=c||{},r||(r=c.read));"function"!=typeof r&amp;&amp;i(Error("Pass a function that returns the value of the ko.computed"));
var u=c.write,F=c.disposeWhenNodeIsRemoved||c.W||n,v=c.disposeWhen||c.Ja||t(q),z=e,y=[],s=n;d||(d=c.owner);h.t=function(){m||g();return k};h.wb=function(){return y.length};h.yb="function"===typeof c.write;h.B=function(){z()};h.oa=j;b.S.call(h);b.a.extend(h,b.j.fn);b.p(h,"peek",h.t);b.p(h,"dispose",h.B);b.p(h,"isActive",h.oa);b.p(h,"getDependenciesCount",h.wb);c.deferEvaluation!==l&amp;&amp;g();if(F&amp;&amp;j()){z=function(){b.a.F.Wa(F,arguments.callee);e()};b.a.F.Ba(F,z);var C=v,v=function(){return!b.a.X(F)||C()}}return h};
b.Ab=function(a){return b.la(a,b.j)};v=b.m.Jb;b.j[v]=b.m;b.j.fn={};b.j.fn[v]=b.j;b.b("dependentObservable",b.j);b.b("computed",b.j);b.b("isComputed",b.Ab);b.fb=function(a){0==arguments.length&amp;&amp;i(Error("When calling ko.toJS, pass the object you want to convert."));return aa(a,function(a){for(var c=0;b.$(a)&amp;&amp;10&gt;c;c++)a=a();return a})};b.toJSON=function(a,d,c){a=b.fb(a);return b.a.wa(a,d,c)};b.b("toJS",b.fb);b.b("toJSON",b.toJSON);b.k={q:function(a){switch(b.a.u(a)){case "option":return a.__ko__hasDomDataOptionValue__===
l?b.a.f.get(a,b.c.options.ra):7&gt;=b.a.Z?a.getAttributeNode("value").specified?a.value:a.text:a.value;case "select":return 0&lt;=a.selectedIndex?b.k.q(a.options[a.selectedIndex]):H;default:return a.value}},T:function(a,d){switch(b.a.u(a)){case "option":switch(typeof d){case "string":b.a.f.set(a,b.c.options.ra,H);"__ko__hasDomDataOptionValue__"in a&amp;&amp;delete a.__ko__hasDomDataOptionValue__;a.value=d;break;default:b.a.f.set(a,b.c.options.ra,d),a.__ko__hasDomDataOptionValue__=l,a.value="number"===typeof d?
d:""}break;case "select":for(var c=a.options.length-1;0&lt;=c;c--)if(b.k.q(a.options[c])==d){a.selectedIndex=c;break}break;default:if(d===n||d===H)d="";a.value=d}}};b.b("selectExtensions",b.k);b.b("selectExtensions.readValue",b.k.q);b.b("selectExtensions.writeValue",b.k.T);var ja=/\@ko_token_(\d+)\@/g,ma=["true","false"],na=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i;b.g={Q:[],aa:function(a){var d=b.a.D(a);if(3&gt;d.length)return[];"{"===d.charAt(0)&amp;&amp;(d=d.substring(1,d.length-1));for(var a=[],
c=n,e,f=0;f&lt;d.length;f++){var g=d.charAt(f);if(c===n)switch(g){case '"':case "'":case "/":c=f,e=g}else if(g==e&amp;&amp;"\\"!==d.charAt(f-1)){g=d.substring(c,f+1);a.push(g);var h="@ko_token_"+(a.length-1)+"@",d=d.substring(0,c)+h+d.substring(f+1),f=f-(g.length-h.length),c=n}}e=c=n;for(var j=0,k=n,f=0;f&lt;d.length;f++){g=d.charAt(f);if(c===n)switch(g){case "{":c=f;k=g;e="}";break;case "(":c=f;k=g;e=")";break;case "[":c=f,k=g,e="]"}g===k?j++:g===e&amp;&amp;(j--,0===j&amp;&amp;(g=d.substring(c,f+1),a.push(g),h="@ko_token_"+(a.length-
1)+"@",d=d.substring(0,c)+h+d.substring(f+1),f-=g.length-h.length,c=n))}e=[];d=d.split(",");c=0;for(f=d.length;c&lt;f;c++)j=d[c],k=j.indexOf(":"),0&lt;k&amp;&amp;k&lt;j.length-1?(g=j.substring(k+1),e.push({key:O(j.substring(0,k),a),value:O(g,a)})):e.push({unknown:O(j,a)});return e},ba:function(a){for(var d="string"===typeof a?b.g.aa(a):a,c=[],a=[],e,f=0;e=d[f];f++)if(0&lt;c.length&amp;&amp;c.push(","),e.key){var g;a:{g=e.key;var h=b.a.D(g);switch(h.length&amp;&amp;h.charAt(0)){case "'":case '"':break a;default:g="'"+h+"'"}}e=e.value;
c.push(g);c.push(":");c.push(e);e=b.a.D(e);0&lt;=b.a.i(ma,b.a.D(e).toLowerCase())?e=q:(h=e.match(na),e=h===n?q:h[1]?"Object("+h[1]+")"+h[2]:e);e&amp;&amp;(0&lt;a.length&amp;&amp;a.push(", "),a.push(g+" : function(__ko_value) { "+e+" = __ko_value; }"))}else e.unknown&amp;&amp;c.push(e.unknown);d=c.join("");0&lt;a.length&amp;&amp;(d=d+", '_ko_property_writers' : { "+a.join("")+" } ");return d},Db:function(a,d){for(var c=0;c&lt;a.length;c++)if(b.a.D(a[c].key)==d)return l;return q},ea:function(a,d,c,e,f){if(!a||!b.Qa(a)){if((a=d()._ko_property_writers)&amp;&amp;
a[c])a[c](e)}else(!f||a.t()!==e)&amp;&amp;a(e)}};b.b("expressionRewriting",b.g);b.b("expressionRewriting.bindingRewriteValidators",b.g.Q);b.b("expressionRewriting.parseObjectLiteral",b.g.aa);b.b("expressionRewriting.preProcessBindings",b.g.ba);b.b("jsonExpressionRewriting",b.g);b.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",b.g.ba);var J="&lt;\!--test--\&gt;"===x.createComment("test").text,ia=J?/^&lt;\!--\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*--\&gt;$/:/^\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*$/,ha=J?/^&lt;\!--\s*\/ko\s*--\&gt;$/:
/^\s*\/ko\s*$/,oa={ul:l,ol:l};b.e={I:{},childNodes:function(a){return A(a)?$(a):a.childNodes},Y:function(a){if(A(a))for(var a=b.e.childNodes(a),d=0,c=a.length;d&lt;c;d++)b.removeNode(a[d]);else b.a.ka(a)},N:function(a,d){if(A(a)){b.e.Y(a);for(var c=a.nextSibling,e=0,f=d.length;e&lt;f;e++)c.parentNode.insertBefore(d[e],c)}else b.a.N(a,d)},Ua:function(a,b){A(a)?a.parentNode.insertBefore(b,a.nextSibling):a.firstChild?a.insertBefore(b,a.firstChild):a.appendChild(b)},Oa:function(a,d,c){c?A(a)?a.parentNode.insertBefore(d,
c.nextSibling):c.nextSibling?a.insertBefore(d,c.nextSibling):a.appendChild(d):b.e.Ua(a,d)},firstChild:function(a){return!A(a)?a.firstChild:!a.nextSibling||G(a.nextSibling)?n:a.nextSibling},nextSibling:function(a){A(a)&amp;&amp;(a=Z(a));return a.nextSibling&amp;&amp;G(a.nextSibling)?n:a.nextSibling},ib:function(a){return(a=A(a))?a[1]:n},Sa:function(a){if(oa[b.a.u(a)]){var d=a.firstChild;if(d){do if(1===d.nodeType){var c;c=d.firstChild;var e=n;if(c){do if(e)e.push(c);else if(A(c)){var f=Z(c,l);f?c=f:e=[c]}else G(c)&amp;&amp;
(e=[c]);while(c=c.nextSibling)}if(c=e){e=d.nextSibling;for(f=0;f&lt;c.length;f++)e?a.insertBefore(c[f],e):a.appendChild(c[f])}}while(d=d.nextSibling)}}}};b.b("virtualElements",b.e);b.b("virtualElements.allowedBindings",b.e.I);b.b("virtualElements.emptyNode",b.e.Y);b.b("virtualElements.insertAfter",b.e.Oa);b.b("virtualElements.prepend",b.e.Ua);b.b("virtualElements.setDomNodeChildren",b.e.N);b.J=function(){this.Ga={}};b.a.extend(b.J.prototype,{nodeHasBindings:function(a){switch(a.nodeType){case 1:return a.getAttribute("data-bind")!=
n;case 8:return b.e.ib(a)!=n;default:return q}},getBindings:function(a,b){var c=this.getBindingsString(a,b);return c?this.parseBindingsString(c,b,a):n},getBindingsString:function(a){switch(a.nodeType){case 1:return a.getAttribute("data-bind");case 8:return b.e.ib(a);default:return n}},parseBindingsString:function(a,d,c){try{var e;if(!(e=this.Ga[a])){var f=this.Ga,g="with($context){with($data||{}){return{"+b.g.ba(a)+"}}}";e=f[a]=new Function("$context","$element",g)}return e(d,c)}catch(h){i(Error("Unable to parse bindings.\nMessage: "+
h+";\nBindings value: "+a))}}});b.J.instance=new b.J;b.b("bindingProvider",b.J);b.c={};b.z=function(a,d,c){d?(b.a.extend(this,d),this.$parentContext=d,this.$parent=d.$data,this.$parents=(d.$parents||[]).slice(0),this.$parents.unshift(this.$parent)):(this.$parents=[],this.$root=a,this.ko=b);this.$data=a;c&amp;&amp;(this[c]=a)};b.z.prototype.createChildContext=function(a,d){return new b.z(a,this,d)};b.z.prototype.extend=function(a){var d=b.a.extend(new b.z,this);return b.a.extend(d,a)};b.cb=function(a,d){if(2==
arguments.length)b.a.f.set(a,"__ko_bindingContext__",d);else return b.a.f.get(a,"__ko_bindingContext__")};b.Ea=function(a,d,c){1===a.nodeType&amp;&amp;b.e.Sa(a);return W(a,d,c,l)};b.Da=function(a,b){(1===b.nodeType||8===b.nodeType)&amp;&amp;Y(a,b,l)};b.Ca=function(a,b){b&amp;&amp;(1!==b.nodeType&amp;&amp;8!==b.nodeType)&amp;&amp;i(Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node"));b=b||w.document.body;X(a,b,l)};b.ja=function(a){switch(a.nodeType){case 1:case 8:var d=b.cb(a);if(d)return d;
if(a.parentNode)return b.ja(a.parentNode)}return H};b.ob=function(a){return(a=b.ja(a))?a.$data:H};b.b("bindingHandlers",b.c);b.b("applyBindings",b.Ca);b.b("applyBindingsToDescendants",b.Da);b.b("applyBindingsToNode",b.Ea);b.b("contextFor",b.ja);b.b("dataFor",b.ob);var ea={"class":"className","for":"htmlFor"};b.c.attr={update:function(a,d){var c=b.a.d(d())||{},e;for(e in c)if("string"==typeof e){var f=b.a.d(c[e]),g=f===q||f===n||f===H;g&amp;&amp;a.removeAttribute(e);8&gt;=b.a.Z&amp;&amp;e in ea?(e=ea[e],g?a.removeAttribute(e):
a[e]=f):g||a.setAttribute(e,f.toString());"name"===e&amp;&amp;b.a.$a(a,g?"":f.toString())}}};b.c.checked={init:function(a,d,c){b.a.n(a,"click",function(){var e;if("checkbox"==a.type)e=a.checked;else if("radio"==a.type&amp;&amp;a.checked)e=a.value;else return;var f=d(),g=b.a.d(f);"checkbox"==a.type&amp;&amp;g instanceof Array?(e=b.a.i(g,a.value),a.checked&amp;&amp;0&gt;e?f.push(a.value):!a.checked&amp;&amp;0&lt;=e&amp;&amp;f.splice(e,1)):b.g.ea(f,c,"checked",e,l)});"radio"==a.type&amp;&amp;!a.name&amp;&amp;b.c.uniqueName.init(a,t(l))},update:function(a,d){var c=b.a.d(d());
"checkbox"==a.type?a.checked=c instanceof Array?0&lt;=b.a.i(c,a.value):c:"radio"==a.type&amp;&amp;(a.checked=a.value==c)}};b.c.css={update:function(a,d){var c=b.a.d(d());if("object"==typeof c)for(var e in c){var f=b.a.d(c[e]);b.a.da(a,e,f)}else c=String(c||""),b.a.da(a,a.__ko__cssValue,q),a.__ko__cssValue=c,b.a.da(a,c,l)}};b.c.enable={update:function(a,d){var c=b.a.d(d());c&amp;&amp;a.disabled?a.removeAttribute("disabled"):!c&amp;&amp;!a.disabled&amp;&amp;(a.disabled=l)}};b.c.disable={update:function(a,d){b.c.enable.update(a,function(){return!b.a.d(d())})}};
b.c.event={init:function(a,d,c,e){var f=d()||{},g;for(g in f)(function(){var f=g;"string"==typeof f&amp;&amp;b.a.n(a,f,function(a){var g,m=d()[f];if(m){var p=c();try{var r=b.a.L(arguments);r.unshift(e);g=m.apply(e,r)}finally{g!==l&amp;&amp;(a.preventDefault?a.preventDefault():a.returnValue=q)}p[f+"Bubble"]===q&amp;&amp;(a.cancelBubble=l,a.stopPropagation&amp;&amp;a.stopPropagation())}})})()}};b.c.foreach={Ra:function(a){return function(){var d=a(),c=b.a.ta(d);if(!c||"number"==typeof c.length)return{foreach:d,templateEngine:b.C.na};
b.a.d(d);return{foreach:c.data,as:c.as,includeDestroyed:c.includeDestroyed,afterAdd:c.afterAdd,beforeRemove:c.beforeRemove,afterRender:c.afterRender,beforeMove:c.beforeMove,afterMove:c.afterMove,templateEngine:b.C.na}}},init:function(a,d){return b.c.template.init(a,b.c.foreach.Ra(d))},update:function(a,d,c,e,f){return b.c.template.update(a,b.c.foreach.Ra(d),c,e,f)}};b.g.Q.foreach=q;b.e.I.foreach=l;b.c.hasfocus={init:function(a,d,c){function e(e){a.__ko_hasfocusUpdating=l;var f=a.ownerDocument;"activeElement"in
f&amp;&amp;(e=f.activeElement===a);f=d();b.g.ea(f,c,"hasfocus",e,l);a.__ko_hasfocusUpdating=q}var f=e.bind(n,l),g=e.bind(n,q);b.a.n(a,"focus",f);b.a.n(a,"focusin",f);b.a.n(a,"blur",g);b.a.n(a,"focusout",g)},update:function(a,d){var c=b.a.d(d());a.__ko_hasfocusUpdating||(c?a.focus():a.blur(),b.r.K(b.a.Aa,n,[a,c?"focusin":"focusout"]))}};b.c.html={init:function(){return{controlsDescendantBindings:l}},update:function(a,d){b.a.ca(a,d())}};var ca="__ko_withIfBindingData";P("if");P("ifnot",q,l);P("with",l,q,function(a,
b){return a.createChildContext(b)});b.c.options={update:function(a,d,c){"select"!==b.a.u(a)&amp;&amp;i(Error("options binding applies only to SELECT elements"));for(var e=0==a.length,f=b.a.V(b.a.fa(a.childNodes,function(a){return a.tagName&amp;&amp;"option"===b.a.u(a)&amp;&amp;a.selected}),function(a){return b.k.q(a)||a.innerText||a.textContent}),g=a.scrollTop,h=b.a.d(d());0&lt;a.length;)b.A(a.options[0]),a.remove(0);if(h){var c=c(),j=c.optionsIncludeDestroyed;"number"!=typeof h.length&amp;&amp;(h=[h]);if(c.optionsCaption){var k=x.createElement("option");
b.a.ca(k,c.optionsCaption);b.k.T(k,H);a.appendChild(k)}for(var d=0,m=h.length;d&lt;m;d++){var p=h[d];if(!p||!p._destroy||j){var k=x.createElement("option"),r=function(a,b,c){var d=typeof b;return"function"==d?b(a):"string"==d?a[b]:c},u=r(p,c.optionsValue,p);b.k.T(k,b.a.d(u));p=r(p,c.optionsText,u);b.a.bb(k,p);a.appendChild(k)}}h=a.getElementsByTagName("option");d=j=0;for(m=h.length;d&lt;m;d++)0&lt;=b.a.i(f,b.k.q(h[d]))&amp;&amp;(b.a.ab(h[d],l),j++);a.scrollTop=g;e&amp;&amp;"value"in c&amp;&amp;da(a,b.a.ta(c.value),l);b.a.tb(a)}}};
b.c.options.ra="__ko.optionValueDomData__";b.c.selectedOptions={init:function(a,d,c){b.a.n(a,"change",function(){var e=d(),f=[];b.a.o(a.getElementsByTagName("option"),function(a){a.selected&amp;&amp;f.push(b.k.q(a))});b.g.ea(e,c,"value",f)})},update:function(a,d){"select"!=b.a.u(a)&amp;&amp;i(Error("values binding applies only to SELECT elements"));var c=b.a.d(d());c&amp;&amp;"number"==typeof c.length&amp;&amp;b.a.o(a.getElementsByTagName("option"),function(a){var d=0&lt;=b.a.i(c,b.k.q(a));b.a.ab(a,d)})}};b.c.style={update:function(a,
d){var c=b.a.d(d()||{}),e;for(e in c)if("string"==typeof e){var f=b.a.d(c[e]);a.style[e]=f||""}}};b.c.submit={init:function(a,d,c,e){"function"!=typeof d()&amp;&amp;i(Error("The value for a submit binding must be a function"));b.a.n(a,"submit",function(b){var c,h=d();try{c=h.call(e,a)}finally{c!==l&amp;&amp;(b.preventDefault?b.preventDefault():b.returnValue=q)}})}};b.c.text={update:function(a,d){b.a.bb(a,d())}};b.e.I.text=l;b.c.uniqueName={init:function(a,d){if(d()){var c="ko_unique_"+ ++b.c.uniqueName.nb;b.a.$a(a,
c)}}};b.c.uniqueName.nb=0;b.c.value={init:function(a,d,c){function e(){h=q;var e=d(),f=b.k.q(a);b.g.ea(e,c,"value",f)}var f=["change"],g=c().valueUpdate,h=q;g&amp;&amp;("string"==typeof g&amp;&amp;(g=[g]),b.a.P(f,g),f=b.a.Fa(f));if(b.a.Z&amp;&amp;("input"==a.tagName.toLowerCase()&amp;&amp;"text"==a.type&amp;&amp;"off"!=a.autocomplete&amp;&amp;(!a.form||"off"!=a.form.autocomplete))&amp;&amp;-1==b.a.i(f,"propertychange"))b.a.n(a,"propertychange",function(){h=l}),b.a.n(a,"blur",function(){h&amp;&amp;e()});b.a.o(f,function(c){var d=e;b.a.Nb(c,"after")&amp;&amp;(d=function(){setTimeout(e,
0)},c=c.substring(5));b.a.n(a,c,d)})},update:function(a,d){var c="select"===b.a.u(a),e=b.a.d(d()),f=b.k.q(a),g=e!=f;0===e&amp;&amp;(0!==f&amp;&amp;"0"!==f)&amp;&amp;(g=l);g&amp;&amp;(f=function(){b.k.T(a,e)},f(),c&amp;&amp;setTimeout(f,0));c&amp;&amp;0&lt;a.length&amp;&amp;da(a,e,q)}};b.c.visible={update:function(a,d){var c=b.a.d(d()),e="none"!=a.style.display;c&amp;&amp;!e?a.style.display="":!c&amp;&amp;e&amp;&amp;(a.style.display="none")}};b.c.click={init:function(a,d,c,e){return b.c.event.init.call(this,a,function(){var a={};a.click=d();return a},c,e)}};b.v=function(){};b.v.prototype.renderTemplateSource=
function(){i(Error("Override renderTemplateSource"))};b.v.prototype.createJavaScriptEvaluatorBlock=function(){i(Error("Override createJavaScriptEvaluatorBlock"))};b.v.prototype.makeTemplateSource=function(a,d){if("string"==typeof a){var d=d||x,c=d.getElementById(a);c||i(Error("Cannot find template with ID "+a));return new b.l.h(c)}if(1==a.nodeType||8==a.nodeType)return new b.l.O(a);i(Error("Unknown template type: "+a))};b.v.prototype.renderTemplate=function(a,b,c,e){a=this.makeTemplateSource(a,e);
return this.renderTemplateSource(a,b,c)};b.v.prototype.isTemplateRewritten=function(a,b){return this.allowTemplateRewriting===q?l:this.makeTemplateSource(a,b).data("isRewritten")};b.v.prototype.rewriteTemplate=function(a,b,c){a=this.makeTemplateSource(a,c);b=b(a.text());a.text(b);a.data("isRewritten",l)};b.b("templateEngine",b.v);var pa=/(&lt;[a-z]+\d*(\s+(?!data-bind=)[a-z0-9\-]+(=(\"[^\"]*\"|\'[^\']*\'))?)*\s+)data-bind=(["'])([\s\S]*?)\5/gi,qa=/&lt;\!--\s*ko\b\s*([\s\S]*?)\s*--\&gt;/g;b.ya={ub:function(a,
d,c){d.isTemplateRewritten(a,c)||d.rewriteTemplate(a,function(a){return b.ya.Fb(a,d)},c)},Fb:function(a,b){return a.replace(pa,function(a,e,f,g,h,j,k){return V(k,e,b)}).replace(qa,function(a,e){return V(e,"&lt;\!-- ko --\&gt;",b)})},jb:function(a){return b.s.qa(function(d,c){d.nextSibling&amp;&amp;b.Ea(d.nextSibling,a,c)})}};b.b("__tr_ambtns",b.ya.jb);b.l={};b.l.h=function(a){this.h=a};b.l.h.prototype.text=function(){var a=b.a.u(this.h),a="script"===a?"text":"textarea"===a?"value":"innerHTML";if(0==arguments.length)return this.h[a];
var d=arguments[0];"innerHTML"===a?b.a.ca(this.h,d):this.h[a]=d};b.l.h.prototype.data=function(a){if(1===arguments.length)return b.a.f.get(this.h,"templateSourceData_"+a);b.a.f.set(this.h,"templateSourceData_"+a,arguments[1])};b.l.O=function(a){this.h=a};b.l.O.prototype=new b.l.h;b.l.O.prototype.text=function(){if(0==arguments.length){var a=b.a.f.get(this.h,"__ko_anon_template__")||{};a.za===H&amp;&amp;a.ia&amp;&amp;(a.za=a.ia.innerHTML);return a.za}b.a.f.set(this.h,"__ko_anon_template__",{za:arguments[0]})};b.l.h.prototype.nodes=
function(){if(0==arguments.length)return(b.a.f.get(this.h,"__ko_anon_template__")||{}).ia;b.a.f.set(this.h,"__ko_anon_template__",{ia:arguments[0]})};b.b("templateSources",b.l);b.b("templateSources.domElement",b.l.h);b.b("templateSources.anonymousTemplate",b.l.O);var N;b.va=function(a){a!=H&amp;&amp;!(a instanceof b.v)&amp;&amp;i(Error("templateEngine must inherit from ko.templateEngine"));N=a};b.ua=function(a,d,c,e,f){c=c||{};(c.templateEngine||N)==H&amp;&amp;i(Error("Set a template engine before calling renderTemplate"));
f=f||"replaceChildren";if(e){var g=M(e);return b.j(function(){var h=d&amp;&amp;d instanceof b.z?d:new b.z(b.a.d(d)),j="function"==typeof a?a(h.$data,h):a,h=S(e,f,j,h,c);"replaceNode"==f&amp;&amp;(e=h,g=M(e))},n,{Ja:function(){return!g||!b.a.X(g)},W:g&amp;&amp;"replaceNode"==f?g.parentNode:g})}return b.s.qa(function(e){b.ua(a,d,c,e,"replaceNode")})};b.Lb=function(a,d,c,e,f){function g(a,b){T(b,j);c.afterRender&amp;&amp;c.afterRender(b,a)}function h(d,e){j=f.createChildContext(b.a.d(d),c.as);j.$index=e;var g="function"==typeof a?
a(d,j):a;return S(n,"ignoreTargetNode",g,j,c)}var j;return b.j(function(){var a=b.a.d(d)||[];"undefined"==typeof a.length&amp;&amp;(a=[a]);a=b.a.fa(a,function(a){return c.includeDestroyed||a===H||a===n||!b.a.d(a._destroy)});b.r.K(b.a.Za,n,[e,a,h,c,g])},n,{W:e})};b.c.template={init:function(a,d){var c=b.a.d(d());if("string"!=typeof c&amp;&amp;!c.name&amp;&amp;(1==a.nodeType||8==a.nodeType))c=1==a.nodeType?a.childNodes:b.e.childNodes(a),c=b.a.Gb(c),(new b.l.O(a)).nodes(c);return{controlsDescendantBindings:l}},update:function(a,
d,c,e,f){var d=b.a.d(d()),c={},e=l,g,h=n;"string"!=typeof d&amp;&amp;(c=d,d=c.name,"if"in c&amp;&amp;(e=b.a.d(c["if"])),e&amp;&amp;"ifnot"in c&amp;&amp;(e=!b.a.d(c.ifnot)),g=b.a.d(c.data));"foreach"in c?h=b.Lb(d||a,e&amp;&amp;c.foreach||[],c,a,f):e?(f="data"in c?f.createChildContext(g,c.as):f,h=b.ua(d||a,f,c,a)):b.e.Y(a);f=h;(g=b.a.f.get(a,"__ko__templateComputedDomDataKey__"))&amp;&amp;"function"==typeof g.B&amp;&amp;g.B();b.a.f.set(a,"__ko__templateComputedDomDataKey__",f&amp;&amp;f.oa()?f:H)}};b.g.Q.template=function(a){a=b.g.aa(a);return 1==a.length&amp;&amp;a[0].unknown||
b.g.Db(a,"name")?n:"This template engine does not support anonymous templates nested within its templates"};b.e.I.template=l;b.b("setTemplateEngine",b.va);b.b("renderTemplate",b.ua);b.a.Ia=function(a,b,c){a=a||[];b=b||[];return a.length&lt;=b.length?R(a,b,"added","deleted",c):R(b,a,"deleted","added",c)};b.b("utils.compareArrays",b.a.Ia);b.a.Za=function(a,d,c,e,f){function g(a,b){s=k[b];v!==b&amp;&amp;(y[a]=s);s.ma(v++);L(s.M);r.push(s);z.push(s)}function h(a,c){if(a)for(var d=0,e=c.length;d&lt;e;d++)c[d]&amp;&amp;b.a.o(c[d].M,
function(b){a(b,d,c[d].U)})}for(var d=d||[],e=e||{},j=b.a.f.get(a,"setDomNodeChildrenFromArrayMapping_lastMappingResult")===H,k=b.a.f.get(a,"setDomNodeChildrenFromArrayMapping_lastMappingResult")||[],m=b.a.V(k,function(a){return a.U}),p=b.a.Ia(m,d),r=[],u=0,v=0,A=[],z=[],d=[],y=[],m=[],s,C=0,B,D;B=p[C];C++)switch(D=B.moved,B.status){case "deleted":D===H&amp;&amp;(s=k[u],s.j&amp;&amp;s.j.B(),A.push.apply(A,L(s.M)),e.beforeRemove&amp;&amp;(d[C]=s,z.push(s)));u++;break;case "retained":g(C,u++);break;case "added":D!==H?g(C,
D):(s={U:B.value,ma:b.m(v++)},r.push(s),z.push(s),j||(m[C]=s))}h(e.beforeMove,y);b.a.o(A,e.beforeRemove?b.A:b.removeNode);for(var C=0,j=b.e.firstChild(a),G;s=z[C];C++){s.M||b.a.extend(s,ga(a,c,s.U,f,s.ma));for(u=0;p=s.M[u];j=p.nextSibling,G=p,u++)p!==j&amp;&amp;b.e.Oa(a,p,G);!s.zb&amp;&amp;f&amp;&amp;(f(s.U,s.M,s.ma),s.zb=l)}h(e.beforeRemove,d);h(e.afterMove,y);h(e.afterAdd,m);b.a.f.set(a,"setDomNodeChildrenFromArrayMapping_lastMappingResult",r)};b.b("utils.setDomNodeChildrenFromArrayMapping",b.a.Za);b.C=function(){this.allowTemplateRewriting=
q};b.C.prototype=new b.v;b.C.prototype.renderTemplateSource=function(a){var d=!(9&gt;b.a.Z)&amp;&amp;a.nodes?a.nodes():n;if(d)return b.a.L(d.cloneNode(l).childNodes);a=a.text();return b.a.sa(a)};b.C.na=new b.C;b.va(b.C.na);b.b("nativeTemplateEngine",b.C);b.pa=function(){var a=this.Cb=function(){if("undefined"==typeof E||!E.tmpl)return 0;try{if(0&lt;=E.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(a){}return 1}();this.renderTemplateSource=function(b,c,e){e=e||{};2&gt;a&amp;&amp;i(Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later."));
var f=b.data("precompiled");f||(f=b.text()||"",f=E.template(n,"{{ko_with $item.koBindingContext}}"+f+"{{/ko_with}}"),b.data("precompiled",f));b=[c.$data];c=E.extend({koBindingContext:c},e.templateOptions);c=E.tmpl(f,b,c);c.appendTo(x.createElement("div"));E.fragments={};return c};this.createJavaScriptEvaluatorBlock=function(a){return"{{ko_code ((function() { return "+a+" })()) }}"};this.addTemplate=function(a,b){x.write("&lt;script type='text/html' id='"+a+"'&gt;"+b+"&lt;\/script&gt;")};0&lt;a&amp;&amp;(E.tmpl.tag.ko_code=
{open:"__.push($1 || '');"},E.tmpl.tag.ko_with={open:"with($1) {",close:"} "})};b.pa.prototype=new b.v;v=new b.pa;0&lt;v.Cb&amp;&amp;b.va(v);b.b("jqueryTmplTemplateEngine",b.pa)}"function"===typeof require&amp;&amp;"object"===typeof exports&amp;&amp;"object"===typeof module?K(module.exports||exports):"function"===typeof define&amp;&amp;define.amd?define(["exports"],K):K(w.ko={});l;
})();




Scripts/modernizr-2.6.2.js


/*!
 * Modernizr v2.6.2
 * www.modernizr.com
 *
 * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton
 * Available under the BSD and MIT licenses: www.modernizr.com/license/
 */

/*
 * Modernizr tests which native CSS3 and HTML5 features are available in
 * the current UA and makes the results available to you in two ways:
 * as properties on a global Modernizr object, and as classes on the
 * &lt;html&gt; element. This information allows you to progressively enhance
 * your pages with a granular level of control over the experience.
 *
 * Modernizr has an optional (not included) conditional resource loader
 * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).
 * To get a build that includes Modernizr.load(), as well as choosing
 * which tests to include, go to www.modernizr.com/download/
 *
 * Authors        Faruk Ates, Paul Irish, Alex Sexton
 * Contributors   Ryan Seddon, Ben Alman
 */

window.Modernizr = (function( window, document, undefined ) {

    var version = '2.6.2',

    Modernizr = {},

    /*&gt;&gt;cssclasses*/
    // option for enabling the HTML classes to be added
    enableClasses = true,
    /*&gt;&gt;cssclasses*/

    docElement = document.documentElement,

    /**
     * Create our "modernizr" element that we do most feature tests on.
     */
    mod = 'modernizr',
    modElem = document.createElement(mod),
    mStyle = modElem.style,

    /**
     * Create the input element for various Web Forms feature tests.
     */
    inputElem /*&gt;&gt;inputelem*/ = document.createElement('input') /*&gt;&gt;inputelem*/ ,

    /*&gt;&gt;smile*/
    smile = ':)',
    /*&gt;&gt;smile*/

    toString = {}.toString,

    // TODO :: make the prefixes more granular
    /*&gt;&gt;prefixes*/
    // List of property values to set for css tests. See ticket #21
    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
    /*&gt;&gt;prefixes*/

    /*&gt;&gt;domprefixes*/
    // Following spec is to expose vendor-specific style properties as:
    //   elem.style.WebkitBorderRadius
    // and the following would be incorrect:
    //   elem.style.webkitBorderRadius

    // Webkit ghosts their properties in lowercase but Opera &amp; Moz do not.
    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
    //   erik.eae.net/archives/2008/03/10/21.48.10/

    // More here: github.com/Modernizr/Modernizr/issues/issue/21
    omPrefixes = 'Webkit Moz O ms',

    cssomPrefixes = omPrefixes.split(' '),

    domPrefixes = omPrefixes.toLowerCase().split(' '),
    /*&gt;&gt;domprefixes*/

    /*&gt;&gt;ns*/
    ns = {'svg': 'http://www.w3.org/2000/svg'},
    /*&gt;&gt;ns*/

    tests = {},
    inputs = {},
    attrs = {},

    classes = [],

    slice = classes.slice,

    featureName, // used in testing loop


    /*&gt;&gt;teststyles*/
    // Inject element with style element and some CSS rules
    injectElementWithStyles = function( rule, callback, nodes, testnames ) {

      var style, ret, node, docOverflow,
          div = document.createElement('div'),
          // After page load injecting a fake body doesn't work so check if body exists
          body = document.body,
          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.
          fakeBody = body || document.createElement('body');

      if ( parseInt(nodes, 10) ) {
          // In order not to give false positives we create a node for each test
          // This also allows the method to scale for unspecified uses
          while ( nodes-- ) {
              node = document.createElement('div');
              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
              div.appendChild(node);
          }
      }

      // &lt;style&gt; elements in IE6-9 are considered 'NoScope' elements and therefore will be removed
      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element
      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.
      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx
      // Documents served as xml will throw if using &amp;shy; so use xml friendly encoded version. See issue #277
      style = ['&amp;#173;','&lt;style id="s', mod, '"&gt;', rule, '&lt;/style&gt;'].join('');
      div.id = mod;
      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
      (body ? div : fakeBody).innerHTML += style;
      fakeBody.appendChild(div);
      if ( !body ) {
          //avoid crashing IE8, if background image is used
          fakeBody.style.background = '';
          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
          fakeBody.style.overflow = 'hidden';
          docOverflow = docElement.style.overflow;
          docElement.style.overflow = 'hidden';
          docElement.appendChild(fakeBody);
      }

      ret = callback(div, rule);
      // If this is done after page load we don't want to remove the body so check if body exists
      if ( !body ) {
          fakeBody.parentNode.removeChild(fakeBody);
          docElement.style.overflow = docOverflow;
      } else {
          div.parentNode.removeChild(div);
      }

      return !!ret;

    },
    /*&gt;&gt;teststyles*/

    /*&gt;&gt;mq*/
    // adapted from matchMedia polyfill
    // by Scott Jehl and Paul Irish
    // gist.github.com/786768
    testMediaQuery = function( mq ) {

      var matchMedia = window.matchMedia || window.msMatchMedia;
      if ( matchMedia ) {
        return matchMedia(mq).matches;
      }

      var bool;

      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {
        bool = (window.getComputedStyle ?
                  getComputedStyle(node, null) :
                  node.currentStyle)['position'] == 'absolute';
      });

      return bool;

     },
     /*&gt;&gt;mq*/


    /*&gt;&gt;hasevent*/
    //
    // isEventSupported determines if a given element supports the given event
    // kangax.github.com/iseventsupported/
    //
    // The following results are known incorrects:
    //   Modernizr.hasEvent("webkitTransitionEnd", elem) // false negative
    //   Modernizr.hasEvent("textInput") // in Webkit. github.com/Modernizr/Modernizr/issues/333
    //   ...
    isEventSupported = (function() {

      var TAGNAMES = {
        'select': 'input', 'change': 'input',
        'submit': 'form', 'reset': 'form',
        'error': 'img', 'load': 'img', 'abort': 'img'
      };

      function isEventSupported( eventName, element ) {

        element = element || document.createElement(TAGNAMES[eventName] || 'div');
        eventName = 'on' + eventName;

        // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and "resize", whereas `in` "catches" those
        var isSupported = eventName in element;

        if ( !isSupported ) {
          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element
          if ( !element.setAttribute ) {
            element = document.createElement('div');
          }
          if ( element.setAttribute &amp;&amp; element.removeAttribute ) {
            element.setAttribute(eventName, '');
            isSupported = is(element[eventName], 'function');

            // If property was created, "remove it" (by setting value to `undefined`)
            if ( !is(element[eventName], 'undefined') ) {
              element[eventName] = undefined;
            }
            element.removeAttribute(eventName);
          }
        }

        element = null;
        return isSupported;
      }
      return isEventSupported;
    })(),
    /*&gt;&gt;hasevent*/

    // TODO :: Add flag for hasownprop ? didn't last time

    // hasOwnProperty shim by kangax needed for Safari 2.0 support
    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;

    if ( !is(_hasOwnProperty, 'undefined') &amp;&amp; !is(_hasOwnProperty.call, 'undefined') ) {
      hasOwnProp = function (object, property) {
        return _hasOwnProperty.call(object, property);
      };
    }
    else {
      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */
        return ((property in object) &amp;&amp; is(object.constructor.prototype[property], 'undefined'));
      };
    }

    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
    // es5.github.com/#x15.3.4.5

    if (!Function.prototype.bind) {
      Function.prototype.bind = function bind(that) {

        var target = this;

        if (typeof target != "function") {
            throw new TypeError();
        }

        var args = slice.call(arguments, 1),
            bound = function () {

            if (this instanceof bound) {

              var F = function(){};
              F.prototype = target.prototype;
              var self = new F();

              var result = target.apply(
                  self,
                  args.concat(slice.call(arguments))
              );
              if (Object(result) === result) {
                  return result;
              }
              return self;

            } else {

              return target.apply(
                  that,
                  args.concat(slice.call(arguments))
              );

            }

        };

        return bound;
      };
    }

    /**
     * setCss applies given styles to the Modernizr DOM node.
     */
    function setCss( str ) {
        mStyle.cssText = str;
    }

    /**
     * setCssAll extrapolates all vendor-specific css strings.
     */
    function setCssAll( str1, str2 ) {
        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));
    }

    /**
     * is returns a boolean for if typeof obj is exactly type.
     */
    function is( obj, type ) {
        return typeof obj === type;
    }

    /**
     * contains returns a boolean for if substr is found within str.
     */
    function contains( str, substr ) {
        return !!~('' + str).indexOf(substr);
    }

    /*&gt;&gt;testprop*/

    // testProps is a generic CSS / DOM property test.

    // In testing support for a given CSS property, it's legit to test:
    //    `elem.style[styleName] !== undefined`
    // If the property is supported it will return an empty string,
    // if unsupported it will return undefined.

    // We'll take advantage of this quick test and skip setting a style
    // on our modernizr element, but instead just testing undefined vs
    // empty string.

    // Because the testing of the CSS property names (with "-", as
    // opposed to the camelCase DOM properties) is non-portable and
    // non-standard but works in WebKit and IE (but not Gecko or Opera),
    // we explicitly reject properties with dashes so that authors
    // developing in WebKit or IE first don't end up with
    // browser-specific content by accident.

    function testProps( props, prefixed ) {
        for ( var i in props ) {
            var prop = props[i];
            if ( !contains(prop, "-") &amp;&amp; mStyle[prop] !== undefined ) {
                return prefixed == 'pfx' ? prop : true;
            }
        }
        return false;
    }
    /*&gt;&gt;testprop*/

    // TODO :: add testDOMProps
    /**
     * testDOMProps is a generic DOM property test; if a browser supports
     *   a certain property, it won't return undefined for it.
     */
    function testDOMProps( props, obj, elem ) {
        for ( var i in props ) {
            var item = obj[props[i]];
            if ( item !== undefined) {

                // return the property name as a string
                if (elem === false) return props[i];

                // let's bind a function
                if (is(item, 'function')){
                  // default to autobind unless override
                  return item.bind(elem || obj);
                }

                // return the unbound function or obj or value
                return item;
            }
        }
        return false;
    }

    /*&gt;&gt;testallprops*/
    /**
     * testPropsAll tests a list of DOM properties we want to check against.
     *   We specify literally ALL possible (known and/or likely) properties on
     *   the element including the non-vendor prefixed one, for forward-
     *   compatibility.
     */
    function testPropsAll( prop, prefixed, elem ) {

        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),
            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

        // did they call .prefixed('boxSizing') or are we just testing a prop?
        if(is(prefixed, "string") || is(prefixed, "undefined")) {
          return testProps(props, prefixed);

        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
        } else {
          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
          return testDOMProps(props, prefixed, elem);
        }
    }
    /*&gt;&gt;testallprops*/


    /**
     * Tests
     * -----
     */

    // The *new* flexbox
    // dev.w3.org/csswg/css3-flexbox

    tests['flexbox'] = function() {
      return testPropsAll('flexWrap');
    };

    // The *old* flexbox
    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/

    tests['flexboxlegacy'] = function() {
        return testPropsAll('boxDirection');
    };

    // On the S60 and BB Storm, getContext exists, but always returns undefined
    // so we actually have to call getContext() to verify
    // github.com/Modernizr/Modernizr/issues/issue/97/

    tests['canvas'] = function() {
        var elem = document.createElement('canvas');
        return !!(elem.getContext &amp;&amp; elem.getContext('2d'));
    };

    tests['canvastext'] = function() {
        return !!(Modernizr['canvas'] &amp;&amp; is(document.createElement('canvas').getContext('2d').fillText, 'function'));
    };

    // webk.it/70117 is tracking a legit WebGL feature detect proposal

    // We do a soft detect which may false positive in order to avoid
    // an expensive context creation: bugzil.la/732441

    tests['webgl'] = function() {
        return !!window.WebGLRenderingContext;
    };

    /*
     * The Modernizr.touch test only indicates if the browser supports
     *    touch events, which does not necessarily reflect a touchscreen
     *    device, as evidenced by tablets running Windows 7 or, alas,
     *    the Palm Pre / WebOS (touch) phones.
     *
     * Additionally, Chrome (desktop) used to lie about its support on this,
     *    but that has since been rectified: crbug.com/36415
     *
     * We also test for Firefox 4 Multitouch Support.
     *
     * For more info, see: modernizr.github.com/Modernizr/touch.html
     */

    tests['touch'] = function() {
        var bool;

        if(('ontouchstart' in window) || window.DocumentTouch &amp;&amp; document instanceof DocumentTouch) {
          bool = true;
        } else {
          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {
            bool = node.offsetTop === 9;
          });
        }

        return bool;
    };


    // geolocation is often considered a trivial feature detect...
    // Turns out, it's quite tricky to get right:
    //
    // Using !!navigator.geolocation does two things we don't want. It:
    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513
    //   2. Disables page caching in WebKit: webk.it/43956
    //
    // Meanwhile, in Firefox &lt; 8, an about:config setting could expose
    // a false positive that would throw an exception: bugzil.la/688158

    tests['geolocation'] = function() {
        return 'geolocation' in navigator;
    };


    tests['postmessage'] = function() {
      return !!window.postMessage;
    };


    // Chrome incognito mode used to throw an exception when using openDatabase
    // It doesn't anymore.
    tests['websqldatabase'] = function() {
      return !!window.openDatabase;
    };

    // Vendors had inconsistent prefixing with the experimental Indexed DB:
    // - Webkit's implementation is accessible through webkitIndexedDB
    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB
    // For speed, we don't test the legacy (and beta-only) indexedDB
    tests['indexedDB'] = function() {
      return !!testPropsAll("indexedDB", window);
    };

    // documentMode logic from YUI to filter out IE8 Compat Mode
    //   which false positives.
    tests['hashchange'] = function() {
      return isEventSupported('hashchange', window) &amp;&amp; (document.documentMode === undefined || document.documentMode &gt; 7);
    };

    // Per 1.6:
    // This used to be Modernizr.historymanagement but the longer
    // name has been deprecated in favor of a shorter and property-matching one.
    // The old API is still available in 1.6, but as of 2.0 will throw a warning,
    // and in the first release thereafter disappear entirely.
    tests['history'] = function() {
      return !!(window.history &amp;&amp; history.pushState);
    };

    tests['draganddrop'] = function() {
        var div = document.createElement('div');
        return ('draggable' in div) || ('ondragstart' in div &amp;&amp; 'ondrop' in div);
    };

    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10
    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.
    // FF10 still uses prefixes, so check for it until then.
    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/
    tests['websockets'] = function() {
        return 'WebSocket' in window || 'MozWebSocket' in window;
    };


    // css-tricks.com/rgba-browser-support/
    tests['rgba'] = function() {
        // Set an rgba() color and check the returned value

        setCss('background-color:rgba(150,255,150,.5)');

        return contains(mStyle.backgroundColor, 'rgba');
    };

    tests['hsla'] = function() {
        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,
        //   except IE9 who retains it as hsla

        setCss('background-color:hsla(120,40%,100%,.5)');

        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
    };

    tests['multiplebgs'] = function() {
        // Setting multiple images AND a color on the background shorthand property
        //  and then querying the style.background property value for the number of
        //  occurrences of "url(" is a reliable method for detecting ACTUAL support for this!

        setCss('background:url(https://),url(https://),red url(https://)');

        // If the UA supports multiple backgrounds, there should be three occurrences
        //   of the string "url(" in the return value for elemStyle.background

        return (/(url\s*\(.*?){3}/).test(mStyle.background);
    };



    // this will false positive in Opera Mini
    //   github.com/Modernizr/Modernizr/issues/396

    tests['backgroundsize'] = function() {
        return testPropsAll('backgroundSize');
    };

    tests['borderimage'] = function() {
        return testPropsAll('borderImage');
    };


    // Super comprehensive table about all the unique implementations of
    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance

    tests['borderradius'] = function() {
        return testPropsAll('borderRadius');
    };

    // WebOS unfortunately false positives on this test.
    tests['boxshadow'] = function() {
        return testPropsAll('boxShadow');
    };

    // FF3.0 will false positive on this test
    tests['textshadow'] = function() {
        return document.createElement('div').style.textShadow === '';
    };


    tests['opacity'] = function() {
        // Browsers that actually have CSS Opacity implemented have done so
        //  according to spec, which means their return values are within the
        //  range of [0.0,1.0] - including the leading zero.

        setCssAll('opacity:.55');

        // The non-literal . in this regex is intentional:
        //   German Chrome returns this value as 0,55
        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632
        return (/^0.55$/).test(mStyle.opacity);
    };


    // Note, Android &lt; 4 will pass this test, but can only animate
    //   a single property at a time
    //   daneden.me/2011/12/putting-up-with-androids-bullshit/
    tests['cssanimations'] = function() {
        return testPropsAll('animationName');
    };


    tests['csscolumns'] = function() {
        return testPropsAll('columnCount');
    };


    tests['cssgradients'] = function() {
        /**
         * For CSS Gradients syntax, please see:
         * webkit.org/blog/175/introducing-css-gradients/
         * developer.mozilla.org/en/CSS/-moz-linear-gradient
         * developer.mozilla.org/en/CSS/-moz-radial-gradient
         * dev.w3.org/csswg/css3-images/#gradients-
         */

        var str1 = 'background-image:',
            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
            str3 = 'linear-gradient(left top,#9f9, white);';

        setCss(
             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
              (str1 + '-webkit- '.split(' ').join(str2 + str1) +
             // standard syntax             // trailing 'background-image:'
              prefixes.join(str3 + str1)).slice(0, -str1.length)
        );

        return contains(mStyle.backgroundImage, 'gradient');
    };


    tests['cssreflections'] = function() {
        return testPropsAll('boxReflect');
    };


    tests['csstransforms'] = function() {
        return !!testPropsAll('transform');
    };


    tests['csstransforms3d'] = function() {

        var ret = !!testPropsAll('perspective');

        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.
        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in
        //   some conditions. As a result, Webkit typically recognizes the syntax but
        //   will sometimes throw a false positive, thus we must do a more thorough check:
        if ( ret &amp;&amp; 'webkitPerspective' in docElement.style ) {

          // Webkit allows this media query to succeed only if the feature is enabled.
          // `@media (transform-3d),(-webkit-transform-3d){ ... }`
          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {
            ret = node.offsetLeft === 9 &amp;&amp; node.offsetHeight === 3;
          });
        }
        return ret;
    };


    tests['csstransitions'] = function() {
        return testPropsAll('transition');
    };


    /*&gt;&gt;fontface*/
    // @font-face detection routine by Diego Perini
    // javascript.nwbox.com/CSSSupport/

    // false positives:
    //   WebOS github.com/Modernizr/Modernizr/issues/342
    //   WP7   github.com/Modernizr/Modernizr/issues/538
    tests['fontface'] = function() {
        var bool;

        injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function( node, rule ) {
          var style = document.getElementById('smodernizr'),
              sheet = style.sheet || style.styleSheet,
              cssText = sheet ? (sheet.cssRules &amp;&amp; sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';

          bool = /src/i.test(cssText) &amp;&amp; cssText.indexOf(rule.split(' ')[0]) === 0;
        });

        return bool;
    };
    /*&gt;&gt;fontface*/

    // CSS generated content detection
    tests['generatedcontent'] = function() {
        var bool;

        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:"',smile,'";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {
          bool = node.offsetHeight &gt;= 3;
        });

        return bool;
    };



    // These tests evaluate support of the video/audio elements, as well as
    // testing what types of content they support.
    //
    // We're using the Boolean constructor here, so that we can extend the value
    // e.g.  Modernizr.video     // true
    //       Modernizr.video.ogg // 'probably'
    //
    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845
    //                     thx to NielsLeenheer and zcorpan

    // Note: in some older browsers, "no" was a return value instead of empty string.
    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2
    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5

    tests['video'] = function() {
        var elem = document.createElement('video'),
            bool = false;

        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
        try {
            if ( bool = !!elem.canPlayType ) {
                bool      = new Boolean(bool);
                bool.ogg  = elem.canPlayType('video/ogg; codecs="theora"')      .replace(/^no$/,'');

                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546
                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"') .replace(/^no$/,'');

                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,'');
            }

        } catch(e) { }

        return bool;
    };

    tests['audio'] = function() {
        var elem = document.createElement('audio'),
            bool = false;

        try {
            if ( bool = !!elem.canPlayType ) {
                bool      = new Boolean(bool);
                bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');

                // Mimetypes accepted:
                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
                //   bit.ly/iphoneoscodecs
                bool.wav  = elem.canPlayType('audio/wav; codecs="1"')     .replace(/^no$/,'');
                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||
                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');
            }
        } catch(e) { }

        return bool;
    };


    // In FF4, if disabled, window.localStorage should === null.

    // Normally, we could not test that directly and need to do a
    //   `('localStorage' in window) &amp;&amp; ` test first because otherwise Firefox will
    //   throw bugzil.la/365772 if cookies are disabled

    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
    // will throw the exception:
    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.
    // Peculiarly, getItem and removeItem calls do not throw.

    // Because we are forced to try/catch this, we'll go aggressive.

    // Just FWIW: IE8 Compat mode supports these features completely:
    //   www.quirksmode.org/dom/html5.html
    // But IE8 doesn't support either with local files

    tests['localstorage'] = function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    };

    tests['sessionstorage'] = function() {
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    };


    tests['webworkers'] = function() {
        return !!window.Worker;
    };


    tests['applicationcache'] = function() {
        return !!window.applicationCache;
    };


    // Thanks to Erik Dahlstrom
    tests['svg'] = function() {
        return !!document.createElementNS &amp;&amp; !!document.createElementNS(ns.svg, 'svg').createSVGRect;
    };

    // specifically for SVG inline in HTML, not within XHTML
    // test page: paulirish.com/demo/inline-svg
    tests['inlinesvg'] = function() {
      var div = document.createElement('div');
      div.innerHTML = '&lt;svg/&gt;';
      return (div.firstChild &amp;&amp; div.firstChild.namespaceURI) == ns.svg;
    };

    // SVG SMIL animation
    tests['smil'] = function() {
        return !!document.createElementNS &amp;&amp; /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
    };

    // This test is only for clip paths in SVG proper, not clip paths on HTML content
    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg

    // However read the comments to dig into applying SVG clippaths to HTML content here:
    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491
    tests['svgclippaths'] = function() {
        return !!document.createElementNS &amp;&amp; /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
    };

    /*&gt;&gt;webforms*/
    // input features and input types go directly onto the ret object, bypassing the tests loop.
    // Hold this guy to execute in a moment.
    function webforms() {
        /*&gt;&gt;input*/
        // Run through HTML5's new input attributes to see if the UA understands any.
        // We're using f which is the &lt;input&gt; element created early on
        // Mike Taylr has created a comprehensive resource for testing these attributes
        //   when applied to all input types:
        //   miketaylr.com/code/input-type-attr.html
        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary

        // Only input placeholder is tested while textarea's placeholder is not.
        // Currently Safari 4 and Opera 11 have support only for the input placeholder
        // Both tests are available in feature-detects/forms-placeholder.js
        Modernizr['input'] = (function( props ) {
            for ( var i = 0, len = props.length; i &lt; len; i++ ) {
                attrs[ props[i] ] = !!(props[i] in inputElem);
            }
            if (attrs.list){
              // safari false positive's on datalist: webk.it/74252
              // see also github.com/Modernizr/Modernizr/issues/146
              attrs.list = !!(document.createElement('datalist') &amp;&amp; window.HTMLDataListElement);
            }
            return attrs;
        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
        /*&gt;&gt;input*/

        /*&gt;&gt;inputtypes*/
        // Run through HTML5's new input types to see if the UA understands any.
        //   This is put behind the tests runloop because it doesn't return a
        //   true/false like all the other tests; instead, it returns an object
        //   containing each input type with its corresponding true/false value

        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/
        Modernizr['inputtypes'] = (function(props) {

            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i &lt; len; i++ ) {

                inputElem.setAttribute('type', inputElemType = props[i]);
                bool = inputElem.type !== 'text';

                // We first check to see if the type we give it sticks..
                // If the type does, we feed it a textual value, which shouldn't be valid.
                // If the value doesn't stick, we know there's input sanitization which infers a custom UI
                if ( bool ) {

                    inputElem.value         = smile;
                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';

                    if ( /^range$/.test(inputElemType) &amp;&amp; inputElem.style.WebkitAppearance !== undefined ) {

                      docElement.appendChild(inputElem);
                      defaultView = document.defaultView;

                      // Safari 2-4 allows the smiley as a value, despite making a slider
                      bool =  defaultView.getComputedStyle &amp;&amp;
                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &amp;&amp;
                              // Mobile android web browser has false positive, so must
                              // check the height to see if the widget is actually there.
                              (inputElem.offsetHeight !== 0);

                      docElement.removeChild(inputElem);

                    } else if ( /^(search|tel)$/.test(inputElemType) ){
                      // Spec doesn't define any special parsing or detectable UI
                      //   behaviors so we pass these through as true

                      // Interestingly, opera fails the earlier test, so it doesn't
                      //  even make it here.

                    } else if ( /^(url|email)$/.test(inputElemType) ) {
                      // Real url and email support comes with prebaked validation.
                      bool = inputElem.checkValidity &amp;&amp; inputElem.checkValidity() === false;

                    } else {
                      // If the upgraded input compontent rejects the :) text, we got a winner
                      bool = inputElem.value != smile;
                    }
                }

                inputs[ props[i] ] = !!bool;
            }
            return inputs;
        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));
        /*&gt;&gt;inputtypes*/
    }
    /*&gt;&gt;webforms*/


    // End of test definitions
    // -----------------------



    // Run through all tests and detect their support in the current UA.
    // todo: hypothetically we could be doing an array of tests and use a basic loop here.
    for ( var feature in tests ) {
        if ( hasOwnProp(tests, feature) ) {
            // run the test, throw the return value into the Modernizr,
            //   then based on that boolean, define an appropriate className
            //   and push it into an array of classes we'll join later.
            featureName  = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();

            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
        }
    }

    /*&gt;&gt;webforms*/
    // input tests need to run.
    Modernizr.input || webforms();
    /*&gt;&gt;webforms*/


    /**
     * addTest allows the user to define their own feature tests
     * the result will be added onto the Modernizr object,
     * as well as an appropriate className set on the html element
     *
     * @param feature - String naming the feature
     * @param test - Function returning true if feature is supported, false if not
     */
     Modernizr.addTest = function ( feature, test ) {
       if ( typeof feature == 'object' ) {
         for ( var key in feature ) {
           if ( hasOwnProp( feature, key ) ) {
             Modernizr.addTest( key, feature[ key ] );
           }
         }
       } else {

         feature = feature.toLowerCase();

         if ( Modernizr[feature] !== undefined ) {
           // we're going to quit if you're trying to overwrite an existing test
           // if we were to allow it, we'd do this:
           //   var re = new RegExp("\\b(no-)?" + feature + "\\b");
           //   docElement.className = docElement.className.replace( re, '' );
           // but, no rly, stuff 'em.
           return Modernizr;
         }

         test = typeof test == 'function' ? test() : test;

         if (typeof enableClasses !== "undefined" &amp;&amp; enableClasses) {
           docElement.className += ' ' + (test ? '' : 'no-') + feature;
         }
         Modernizr[feature] = test;

       }

       return Modernizr; // allow chaining.
     };


    // Reset modElem.cssText to nothing to reduce memory footprint.
    setCss('');
    modElem = inputElem = null;

    /*&gt;&gt;shiv*/
    /*! HTML5 Shiv v3.6.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */
    ;(function(window, document) {
    /*jshint evil:true */
      /** Preset options */
      var options = window.html5 || {};

      /** Used to skip problem elements */
      var reSkip = /^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;

      /** Not all elements can be cloned in IE **/
      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;

      /** Detect whether the browser supports default html5 styles */
      var supportsHtml5Styles;

      /** Name of the expando, to work with multiple documents or to re-shiv one document */
      var expando = '_html5shiv';

      /** The id for the the documents expando */
      var expanID = 0;

      /** Cached data for each document */
      var expandoData = {};

      /** Detect whether the browser supports unknown elements */
      var supportsUnknownElements;

      (function() {
        try {
            var a = document.createElement('a');
            a.innerHTML = '&lt;xyz&gt;&lt;/xyz&gt;';
            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
            supportsHtml5Styles = ('hidden' in a);

            supportsUnknownElements = a.childNodes.length == 1 || (function() {
              // assign a false positive if unable to shiv
              (document.createElement)('a');
              var frag = document.createDocumentFragment();
              return (
                typeof frag.cloneNode == 'undefined' ||
                typeof frag.createDocumentFragment == 'undefined' ||
                typeof frag.createElement == 'undefined'
              );
            }());
        } catch(e) {
          supportsHtml5Styles = true;
          supportsUnknownElements = true;
        }

      }());

      /*--------------------------------------------------------------------------*/

      /**
       * Creates a style sheet with the given CSS text and adds it to the document.
       * @private
       * @param {Document} ownerDocument The document.
       * @param {String} cssText The CSS text.
       * @returns {StyleSheet} The style element.
       */
      function addStyleSheet(ownerDocument, cssText) {
        var p = ownerDocument.createElement('p'),
            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

        p.innerHTML = 'x&lt;style&gt;' + cssText + '&lt;/style&gt;';
        return parent.insertBefore(p.lastChild, parent.firstChild);
      }

      /**
       * Returns the value of `html5.elements` as an array.
       * @private
       * @returns {Array} An array of shived element node names.
       */
      function getElements() {
        var elements = html5.elements;
        return typeof elements == 'string' ? elements.split(' ') : elements;
      }

        /**
       * Returns the data associated to the given document
       * @private
       * @param {Document} ownerDocument The document.
       * @returns {Object} An object of data.
       */
      function getExpandoData(ownerDocument) {
        var data = expandoData[ownerDocument[expando]];
        if (!data) {
            data = {};
            expanID++;
            ownerDocument[expando] = expanID;
            expandoData[expanID] = data;
        }
        return data;
      }

      /**
       * returns a shived element for the given nodeName and document
       * @memberOf html5
       * @param {String} nodeName name of the element
       * @param {Document} ownerDocument The context document.
       * @returns {Object} The shived element.
       */
      function createElement(nodeName, ownerDocument, data){
        if (!ownerDocument) {
            ownerDocument = document;
        }
        if(supportsUnknownElements){
            return ownerDocument.createElement(nodeName);
        }
        if (!data) {
            data = getExpandoData(ownerDocument);
        }
        var node;

        if (data.cache[nodeName]) {
            node = data.cache[nodeName].cloneNode();
        } else if (saveClones.test(nodeName)) {
            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
        } else {
            node = data.createElem(nodeName);
        }

        // Avoid adding some elements to fragments in IE &lt; 9 because
        // * Attributes like `name` or `type` cannot be set/changed once an element
        //   is inserted into a document/fragment
        // * Link elements with `src` attributes that are inaccessible, as with
        //   a 403 response, will cause the tab/window to crash
        // * Script elements appended to fragments will execute when their `src`
        //   or `text` property is set
        return node.canHaveChildren &amp;&amp; !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;
      }

      /**
       * returns a shived DocumentFragment for the given document
       * @memberOf html5
       * @param {Document} ownerDocument The context document.
       * @returns {Object} The shived DocumentFragment.
       */
      function createDocumentFragment(ownerDocument, data){
        if (!ownerDocument) {
            ownerDocument = document;
        }
        if(supportsUnknownElements){
            return ownerDocument.createDocumentFragment();
        }
        data = data || getExpandoData(ownerDocument);
        var clone = data.frag.cloneNode(),
            i = 0,
            elems = getElements(),
            l = elems.length;
        for(;i&lt;l;i++){
            clone.createElement(elems[i]);
        }
        return clone;
      }

      /**
       * Shivs the `createElement` and `createDocumentFragment` methods of the document.
       * @private
       * @param {Document|DocumentFragment} ownerDocument The document.
       * @param {Object} data of the document.
       */
      function shivMethods(ownerDocument, data) {
        if (!data.cache) {
            data.cache = {};
            data.createElem = ownerDocument.createElement;
            data.createFrag = ownerDocument.createDocumentFragment;
            data.frag = data.createFrag();
        }


        ownerDocument.createElement = function(nodeName) {
          //abort shiv
          if (!html5.shivMethods) {
              return data.createElem(nodeName);
          }
          return createElement(nodeName, ownerDocument, data);
        };

        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
          'var n=f.cloneNode(),c=n.createElement;' +
          'h.shivMethods&amp;&amp;(' +
            // unroll the `createElement` calls
            getElements().join().replace(/\w+/g, function(nodeName) {
              data.createElem(nodeName);
              data.frag.createElement(nodeName);
              return 'c("' + nodeName + '")';
            }) +
          ');return n}'
        )(html5, data.frag);
      }

      /*--------------------------------------------------------------------------*/

      /**
       * Shivs the given document.
       * @memberOf html5
       * @param {Document} ownerDocument The document to shiv.
       * @returns {Document} The shived document.
       */
      function shivDocument(ownerDocument) {
        if (!ownerDocument) {
            ownerDocument = document;
        }
        var data = getExpandoData(ownerDocument);

        if (html5.shivCSS &amp;&amp; !supportsHtml5Styles &amp;&amp; !data.hasCSS) {
          data.hasCSS = !!addStyleSheet(ownerDocument,
            // corrects block display not defined in IE6/7/8/9
            'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +
            // adds styling not present in IE6/7/8/9
            'mark{background:#FF0;color:#000}'
          );
        }
        if (!supportsUnknownElements) {
          shivMethods(ownerDocument, data);
        }
        return ownerDocument;
      }

      /*--------------------------------------------------------------------------*/

      /**
       * The `html5` object is exposed so that more elements can be shived and
       * existing shiving can be detected on iframes.
       * @type Object
       * @example
       *
       * // options can be changed before the script is included
       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
       */
      var html5 = {

        /**
         * An array or space separated string of node names of the elements to shiv.
         * @memberOf html5
         * @type Array|String
         */
        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',

        /**
         * A flag to indicate that the HTML5 style sheet should be inserted.
         * @memberOf html5
         * @type Boolean
         */
        'shivCSS': (options.shivCSS !== false),

        /**
         * Is equal to true if a browser supports creating unknown/HTML5 elements
         * @memberOf html5
         * @type boolean
         */
        'supportsUnknownElements': supportsUnknownElements,

        /**
         * A flag to indicate that the document's `createElement` and `createDocumentFragment`
         * methods should be overwritten.
         * @memberOf html5
         * @type Boolean
         */
        'shivMethods': (options.shivMethods !== false),

        /**
         * A string to describe the type of `html5` object ("default" or "default print").
         * @memberOf html5
         * @type String
         */
        'type': 'default',

        // shivs the document according to the specified `html5` object options
        'shivDocument': shivDocument,

        //creates a shived element
        createElement: createElement,

        //creates a shived documentFragment
        createDocumentFragment: createDocumentFragment
      };

      /*--------------------------------------------------------------------------*/

      // expose html5
      window.html5 = html5;

      // shiv the document
      shivDocument(document);

    }(this, document));
    /*&gt;&gt;shiv*/

    // Assign private properties to the return object with prefix
    Modernizr._version      = version;

    // expose these for the plugin API. Look in the source for how to join() them against your input
    /*&gt;&gt;prefixes*/
    Modernizr._prefixes     = prefixes;
    /*&gt;&gt;prefixes*/
    /*&gt;&gt;domprefixes*/
    Modernizr._domPrefixes  = domPrefixes;
    Modernizr._cssomPrefixes  = cssomPrefixes;
    /*&gt;&gt;domprefixes*/

    /*&gt;&gt;mq*/
    // Modernizr.mq tests a given media query, live against the current state of the window
    // A few important notes:
    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false
    //   * A max-width or orientation query will be evaluated against the current state, which may change later.
    //   * You must specify values. Eg. If you are testing support for the min-width media query use:
    //       Modernizr.mq('(min-width:0)')
    // usage:
    // Modernizr.mq('only screen and (max-width:768)')
    Modernizr.mq            = testMediaQuery;
    /*&gt;&gt;mq*/

    /*&gt;&gt;hasevent*/
    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on
    // Modernizr.hasEvent('gesturestart', elem)
    Modernizr.hasEvent      = isEventSupported;
    /*&gt;&gt;hasevent*/

    /*&gt;&gt;testprop*/
    // Modernizr.testProp() investigates whether a given style property is recognized
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testProp('pointerEvents')
    Modernizr.testProp      = function(prop){
        return testProps([prop]);
    };
    /*&gt;&gt;testprop*/

    /*&gt;&gt;testallprops*/
    // Modernizr.testAllProps() investigates whether a given style property,
    //   or any of its vendor-prefixed variants, is recognized
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testAllProps('boxSizing')
    Modernizr.testAllProps  = testPropsAll;
    /*&gt;&gt;testallprops*/


    /*&gt;&gt;teststyles*/
    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards
    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })
    Modernizr.testStyles    = injectElementWithStyles;
    /*&gt;&gt;teststyles*/


    /*&gt;&gt;prefixed*/
    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input
    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'

    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.
    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:
    //
    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');

    // If you're trying to ascertain which transition end event to bind to, you might do something like...
    //
    //     var transEndEventNames = {
    //       'WebkitTransition' : 'webkitTransitionEnd',
    //       'MozTransition'    : 'transitionend',
    //       'OTransition'      : 'oTransitionEnd',
    //       'msTransition'     : 'MSTransitionEnd',
    //       'transition'       : 'transitionend'
    //     },
    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];

    Modernizr.prefixed      = function(prop, obj, elem){
      if(!obj) {
        return testPropsAll(prop, 'pfx');
      } else {
        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
        return testPropsAll(prop, obj, elem);
      }
    };
    /*&gt;&gt;prefixed*/


    /*&gt;&gt;cssclasses*/
    // Remove "no-js" class from &lt;html&gt; element, if it exists:
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +

                            // Add the new classes to the &lt;html&gt; element.
                            (enableClasses ? ' js ' + classes.join(' ') : '');
    /*&gt;&gt;cssclasses*/

    return Modernizr;

})(this, this.document);




Scripts/q.js


// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    // Turn off strict mode for this function so we can assign to global.Q
    /* jshint strict: false */

    // This file will function properly as a &lt;script&gt; tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple &lt;script&gt;, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" &amp;&amp; define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // &lt;script&gt;
    } else {
        Q = definition();
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;

    function flush() {
        /* jshint loopfunc: true */

        while (head.next) {
            head = head.next;
            var task = head.task;
            head.task = void 0;
            var domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }

            try {
                task();

            } catch (e) {
                if (isNodeJS) {
                    // In node, uncaught exceptions are considered fatal errors.
                    // Re-throw them synchronously to interrupt flushing!

                    // Ensure continuation if the uncaught exception is suppressed
                    // listening "uncaughtException" events (as domains does).
                    // Continue in next event to avoid tick recursion.
                    if (domain) {
                        domain.exit();
                    }
                    setTimeout(flush, 0);
                    if (domain) {
                        domain.enter();
                    }

                    throw e;

                } else {
                    // In browsers, uncaught exceptions are not fatal.
                    // Re-throw them asynchronously to avoid slow-downs.
                    setTimeout(function() {
                       throw e;
                    }, 0);
                }
            }

            if (domain) {
                domain.exit();
            }
        }

        flushing = false;
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS &amp;&amp; process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process !== "undefined" &amp;&amp; process.nextTick) {
        // Node.js before 0.9. Note that some fake-Node environments, like the
        // Mocha test runner, introduce a `process` global without a `nextTick`.
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }

    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you dont need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Millers explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index &gt;= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index &lt; length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i &lt; this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &amp;&amp;
        promise.stack &amp;&amp;
        typeof error === "object" &amp;&amp;
        error !== null &amp;&amp;
        error.stack &amp;&amp;
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i &lt; lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) &amp;&amp; !isNodeFrame(line) &amp;&amp; line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &amp;&amp;
        lineNumber &gt;= qStartingLine &amp;&amp;
        lineNumber &lt;= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") &gt; 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &amp;&amp;
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (isPromise(value)) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" &amp;&amp; operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport &amp;&amp; hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length &gt; 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become fulfilled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be fulfilled
 */
Q.race = race;
function race(answerPs) {
    return promise(function(resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function(answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i &lt; len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If its a fulfilled promise, the fulfillment value is nearer.
 * If its a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return isObject(object) &amp;&amp;
        typeof object.promiseDispatch === "function" &amp;&amp;
        typeof object.inspect === "function";
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) &amp;&amp; typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) &amp;&amp; object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) &amp;&amp; object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }

    unhandledRejections.push(promise);
    if (reason &amp;&amp; typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return result.value;
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return exception.value;
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&amp;rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var countDown = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &amp;&amp;
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++countDown;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--countDown === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (countDown === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" &amp;&amp; process &amp;&amp; process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {String} custom error message (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, message) {
    return Q(object).timeout(ms, message);
};

Promise.prototype.timeout = function (ms, message) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        deferred.reject(new Error(message || "Timed out after " + ms + " ms"));
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});




Scripts/q.min.js


/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
(function(n){if(typeof bootstrap=="function")bootstrap("promise",n);else if(typeof exports=="object")module.exports=n();else if(typeof define=="function"&amp;&amp;define.amd)define(n);else if(typeof ses!="undefined")if(ses.ok())ses.makeQ=n;else return;else Q=n()})(function(){"use strict";function h(n){return function(){return wt.apply(n,arguments)}}function rt(n){return n===Object(n)}function ni(n){return gt(n)==="[object StopIteration]"||n instanceof k}function ut(n,t){var r,i,u;if(v&amp;&amp;t.stack&amp;&amp;typeof n=="object"&amp;&amp;n!==null&amp;&amp;n.stack&amp;&amp;n.stack.indexOf(d)===-1){for(r=[],i=t;!!i;i=i.source)i.stack&amp;&amp;r.unshift(i.stack);r.unshift(n.stack);u=r.join("\n"+d+"\n");n.stack=ti(u)}}function ti(n){for(var t,r=n.split("\n"),u=[],i=0;i&lt;r.length;++i)t=r[i],ri(t)||ii(t)||!t||u.push(t);return u.join("\n")}function ii(n){return n.indexOf("(module.js:")!==-1||n.indexOf("(node.js:")!==-1}function ft(n){var r=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(n),t,i;return r?[r[1],Number(r[2])]:(t=/at ([^ ]+):(\d+):(?:\d+)$/.exec(n),t)?[t[1],Number(t[2])]:(i=/.*@(.+):(\d+)$/.exec(n),i?[i[1],Number(i[2])]:void 0)}function ri(n){var t=ft(n),r,i;return t?(r=t[0],i=t[1],r===tt&amp;&amp;i&gt;=pt&amp;&amp;i&lt;=vt):!1}function et(){if(v)try{throw new Error;}catch(i){var n=i.stack.split("\n"),r=n[0].indexOf("@")&gt;0?n[1]:n[2],t=ft(r);return t?(tt=t[0],t[1]):void 0}}function ui(n,t,i){return function(){return typeof console!="undefined"&amp;&amp;typeof console.warn=="function"&amp;&amp;console.warn(t+" is deprecated, use "+i+" instead.",new Error("").stack),n.apply(n,arguments)}}function n(n){return o(n)?n:ht(n)?ci(n):nt(n)}function r(){function a(n){e=n;s.source=n;y(c,function(t,i){u(function(){n.promiseDispatch.apply(n,i)})},void 0);c=void 0;l=void 0}var c=[],l=[],e,h=b(r.prototype),s=b(t.prototype);if(s.promiseDispatch=function(n,t,r){var f=i(arguments);c?(c.push(f),t==="when"&amp;&amp;r[1]&amp;&amp;l.push(r[1])):u(function(){e.promiseDispatch.apply(e,f)})},s.valueOf=function(){if(c)return s;var n=st(e);return o(n)&amp;&amp;(e=n),n},s.inspect=function(){return e?e.inspect():{state:"pending"}},n.longStackSupport&amp;&amp;v)try{throw new Error;}catch(p){s.stack=p.stack.substring(p.stack.indexOf("\n")+1)}return h.promise=s,h.resolve=function(t){e||a(n(t))},h.fulfill=function(n){e||a(nt(n))},h.reject=function(n){e||a(f(n))},h.notify=function(n){e||y(l,function(t,i){u(function(){i(n)})},void 0)},h}function s(n){if(typeof n!="function")throw new TypeError("resolver must be a function.");var t=r();try{n(t.resolve,t.reject,t.notify)}catch(i){t.reject(i)}return t.promise}function ot(t){return s(function(i,r){for(var u=0,f=t.length;u&lt;f;u++)n(t[u]).then(i,r)})}function t(n,i,r){var u,e;return i===void 0&amp;&amp;(i=function(n){return f(new Error("Promise does not support operation: "+n))}),r===void 0&amp;&amp;(r=function(){return{state:"unknown"}}),u=b(t.prototype),u.promiseDispatch=function(t,r,e){var o;try{o=n[r]?n[r].apply(u,e):i.call(u,r,e)}catch(s){o=f(s)}t&amp;&amp;t(o)},u.inspect=r,r&amp;&amp;(e=r(),e.state==="rejected"&amp;&amp;(u.exception=e.reason),u.valueOf=function(){var n=r();return n.state==="pending"||n.state==="rejected"?u:n.value}),u}function e(t,i,r,u){return n(t).then(i,r,u)}function st(n){if(o(n)){var t=n.inspect();if(t.state==="fulfilled")return t.value}return n}function o(n){return rt(n)&amp;&amp;typeof n.promiseDispatch=="function"&amp;&amp;typeof n.inspect=="function"}function ht(n){return rt(n)&amp;&amp;typeof n.then=="function"}function fi(n){return o(n)&amp;&amp;n.inspect().state==="pending"}function ei(n){return!o(n)||n.inspect().state==="fulfilled"}function oi(n){return o(n)&amp;&amp;n.inspect().state==="rejected"}function g(){l.length=0;p.length=0;a||(a=!0)}function si(n,t){a&amp;&amp;(p.push(n),t&amp;&amp;typeof t.stack!="undefined"?l.push(t.stack):l.push("(no stack) "+t))}function hi(n){if(a){var t=bt(p,n);t!==-1&amp;&amp;(p.splice(t,1),l.splice(t,1))}}function f(n){var i=t({when:function(t){return t&amp;&amp;hi(this),t?t(n):this}},function(){return this},function(){return{state:"rejected",reason:n}});return si(i,n),i}function nt(n){return t({when:function(){return n},get:function(t){return n[t]},set:function(t,i){n[t]=i},"delete":function(t){delete n[t]},post:function(t,i){return t===null||t===void 0?n.apply(void 0,i):n[t].apply(n,i)},apply:function(t,i){return n.apply(t,i)},keys:function(){return dt(n)}},void 0,function(){return{state:"fulfilled",value:n}})}function ci(n){var t=r();return u(function(){try{n.then(t.resolve,t.reject,t.notify)}catch(i){t.reject(i)}}),t.promise}function li(i){return t({isDef:function(){}},function(n,t){return lt(i,n,t)},function(){return n(i).inspect()})}function ct(t,i,r){return n(t).spread(i,r)}function ai(n){return function(){function t(n,t){var o;if(typeof StopIteration=="undefined"){try{o=r[n](t)}catch(s){return f(s)}return o.done?o.value:e(o.value,i,u)}try{o=r[n](t)}catch(s){return ni(s)?s.value:f(s)}return e(o,i,u)}var r=n.apply(this,arguments),i=t.bind(t,"next"),u=t.bind(t,"throw");return i()}}function vi(t){n.done(n.async(t)())}function yi(n){throw new k(n);}function pi(n){return function(){return ct([this,c(arguments)],function(t,i){return n.apply(t,i)})}}function lt(t,i,r){return n(t).dispatch(i,r)}function c(n){return e(n,function(n){var i=0,t=r();return y(n,function(r,u,f){var s;o(u)&amp;&amp;(s=u.inspect()).state==="fulfilled"?n[f]=s.value:(++i,e(u,function(r){n[f]=r;--i==0&amp;&amp;t.resolve(n)},t.reject,function(n){t.notify({index:f,value:n})}))},void 0),i===0&amp;&amp;t.resolve(n),t.promise})}function at(t){return e(t,function(t){return t=w(t,n),e(c(w(t,function(n){return e(n,it,it)})),function(){return t})})}function wi(t){return n(t).allSettled()}function bi(t,i){return n(t).then(void 0,void 0,i)}function ki(t,i){return n(t).nodeify(i)}var v=!1,k,d,vt;try{throw new Error;}catch(yt){v=!!yt.stack}var pt=et(),tt,it=function(){},u=function(){function t(){for(var r,i;n.next;){n=n.next;r=n.task;n.task=void 0;i=n.domain;i&amp;&amp;(n.domain=void 0,i.enter());try{r()}catch(u){if(e){i&amp;&amp;i.exit();setTimeout(t,0);i&amp;&amp;i.enter();throw u;}else setTimeout(function(){throw u;},0)}i&amp;&amp;i.exit()}f=!1}var n={task:void 0,next:null},s=n,f=!1,i=void 0,e=!1,r,o;return u=function(n){s=s.next={task:n,domain:e&amp;&amp;process.domain,next:null};f||(f=!0,i())},typeof process!="undefined"&amp;&amp;process.nextTick?(e=!0,i=function(){process.nextTick(t)}):typeof setImmediate=="function"?i=typeof window!="undefined"?setImmediate.bind(window,t):function(){setImmediate(t)}:typeof MessageChannel!="undefined"?(r=new MessageChannel,r.port1.onmessage=function(){i=o;r.port1.onmessage=t;t()},o=function(){r.port2.postMessage(0)},i=function(){setTimeout(t,0);o()}):i=function(){setTimeout(t,0)},u}(),wt=Function.call;var i=h(Array.prototype.slice),y=h(Array.prototype.reduce||function(n,t){var i=0,r=this.length;if(arguments.length===1)do{if(i in this){t=this[i++];break}if(++i&gt;=r)throw new TypeError;}while(1);for(;i&lt;r;i++)i in this&amp;&amp;(t=n(t,this[i],i));return t}),bt=h(Array.prototype.indexOf||function(n){for(var t=0;t&lt;this.length;t++)if(this[t]===n)return t;return-1}),w=h(Array.prototype.map||function(n,t){var i=this,r=[];return y(i,function(u,f,e){r.push(n.call(t,f,e,i))},void 0),r}),b=Object.create||function(n){function t(){}return t.prototype=n,new t},kt=h(Object.prototype.hasOwnProperty),dt=Object.keys||function(n){var t=[];for(var i in n)kt(n,i)&amp;&amp;t.push(i);return t},gt=h(Object.prototype.toString);k=typeof ReturnValue!="undefined"?ReturnValue:function(n){this.value=n};d="From previous event:";n.resolve=n;n.nextTick=u;n.longStackSupport=!1;n.defer=r;r.prototype.makeNodeResolver=function(){var n=this;return function(t,r){t?n.reject(t):arguments.length&gt;2?n.resolve(i(arguments,1)):n.resolve(r)}};n.Promise=s;n.promise=s;s.race=ot;s.all=c;s.reject=f;s.resolve=n;n.passByCopy=function(n){return n};t.prototype.passByCopy=function(){return this};n.join=function(t,i){return n(t).join(i)};t.prototype.join=function(t){return n([this,t]).spread(function(n,t){if(n===t)return n;throw new Error("Can't join: not the same: "+n+" "+t);})};n.race=ot;t.prototype.race=function(){return this.then(n.race)};n.makePromise=t;t.prototype.toString=function(){return"[object Promise]"};t.prototype.then=function(t,i,e){function c(n){try{return typeof t=="function"?t(n):n}catch(i){return f(i)}}function l(n){if(typeof i=="function"){ut(n,h);try{return i(n)}catch(t){return f(t)}}return f(n)}function a(n){return typeof e=="function"?e(n):n}var h=this,o=r(),s=!1;return u(function(){h.promiseDispatch(function(n){s||(s=!0,o.resolve(c(n)))},"when",[function(n){s||(s=!0,o.resolve(l(n)))}])}),h.promiseDispatch(void 0,"when",[void 0,function(t){var i,r=!1;try{i=a(t)}catch(u){if(r=!0,n.onerror)n.onerror(u);else throw u;}r||o.notify(i)}]),o.promise};n.when=e;t.prototype.thenResolve=function(n){return this.then(function(){return n})};n.thenResolve=function(t,i){return n(t).thenResolve(i)};t.prototype.thenReject=function(n){return this.then(function(){throw n;})};n.thenReject=function(t,i){return n(t).thenReject(i)};n.nearer=st;n.isPromise=o;n.isPromiseAlike=ht;n.isPending=fi;t.prototype.isPending=function(){return this.inspect().state==="pending"};n.isFulfilled=ei;t.prototype.isFulfilled=function(){return this.inspect().state==="fulfilled"};n.isRejected=oi;t.prototype.isRejected=function(){return this.inspect().state==="rejected"};var l=[],p=[],a=!0;return n.resetUnhandledRejections=g,n.getUnhandledReasons=function(){return l.slice()},n.stopUnhandledRejectionTracking=function(){g();a=!1},g(),n.reject=f,n.fulfill=nt,n.master=li,n.spread=ct,t.prototype.spread=function(n,t){return this.all().then(function(t){return n.apply(void 0,t)},t)},n.async=ai,n.spawn=vi,n["return"]=yi,n.promised=pi,n.dispatch=lt,t.prototype.dispatch=function(n,t){var f=this,i=r();return u(function(){f.promiseDispatch(i.resolve,n,t)}),i.promise},n.get=function(t,i){return n(t).dispatch("get",[i])},t.prototype.get=function(n){return this.dispatch("get",[n])},n.set=function(t,i,r){return n(t).dispatch("set",[i,r])},t.prototype.set=function(n,t){return this.dispatch("set",[n,t])},n.del=n["delete"]=function(t,i){return n(t).dispatch("delete",[i])},t.prototype.del=t.prototype["delete"]=function(n){return this.dispatch("delete",[n])},n.mapply=n.post=function(t,i,r){return n(t).dispatch("post",[i,r])},t.prototype.mapply=t.prototype.post=function(n,t){return this.dispatch("post",[n,t])},n.send=n.mcall=n.invoke=function(t,r){return n(t).dispatch("post",[r,i(arguments,2)])},t.prototype.send=t.prototype.mcall=t.prototype.invoke=function(n){return this.dispatch("post",[n,i(arguments,1)])},n.fapply=function(t,i){return n(t).dispatch("apply",[void 0,i])},t.prototype.fapply=function(n){return this.dispatch("apply",[void 0,n])},n["try"]=n.fcall=function(t){return n(t).dispatch("apply",[void 0,i(arguments,1)])},t.prototype.fcall=function(){return this.dispatch("apply",[void 0,i(arguments)])},n.fbind=function(t){var r=n(t),u=i(arguments,1);return function(){return r.dispatch("apply",[this,u.concat(i(arguments))])}},t.prototype.fbind=function(){var n=this,t=i(arguments);return function(){return n.dispatch("apply",[this,t.concat(i(arguments))])}},n.keys=function(t){return n(t).dispatch("keys",[])},t.prototype.keys=function(){return this.dispatch("keys",[])},n.all=c,t.prototype.all=function(){return c(this)},n.allResolved=ui(at,"allResolved","allSettled"),t.prototype.allResolved=function(){return at(this)},n.allSettled=wi,t.prototype.allSettled=function(){return this.then(function(t){return c(w(t,function(t){function i(){return t.inspect()}return t=n(t),t.then(i,i)}))})},n.fail=n["catch"]=function(t,i){return n(t).then(void 0,i)},t.prototype.fail=t.prototype["catch"]=function(n){return this.then(void 0,n)},n.progress=bi,t.prototype.progress=function(n){return this.then(void 0,void 0,n)},n.fin=n["finally"]=function(t,i){return n(t)["finally"](i)},t.prototype.fin=t.prototype["finally"]=function(t){return t=n(t),this.then(function(n){return t.fcall().then(function(){return n})},function(n){return t.fcall().then(function(){throw n;})})},n.done=function(t,i,r,u){return n(t).done(i,r,u)},t.prototype.done=function(t,i,r){var f=function(t){u(function(){if(ut(t,e),n.onerror)n.onerror(t);else throw t;})},e=t||i||r?this.then(t,i,r):this;typeof process=="object"&amp;&amp;process&amp;&amp;process.domain&amp;&amp;(f=process.domain.bind(f));e.then(void 0,f)},n.timeout=function(t,i,r){return n(t).timeout(i,r)},t.prototype.timeout=function(n,t){var i=r(),u=setTimeout(function(){i.reject(new Error(t||"Timed out after "+n+" ms"))},n);return this.then(function(n){clearTimeout(u);i.resolve(n)},function(n){clearTimeout(u);i.reject(n)},i.notify),i.promise},n.delay=function(t,i){return i===void 0&amp;&amp;(i=t,t=void 0),n(t).delay(i)},t.prototype.delay=function(n){return this.then(function(t){var i=r();return setTimeout(function(){i.resolve(t)},n),i.promise})},n.nfapply=function(t,i){return n(t).nfapply(i)},t.prototype.nfapply=function(n){var t=r(),u=i(n);return u.push(t.makeNodeResolver()),this.fapply(u).fail(t.reject),t.promise},n.nfcall=function(t){var r=i(arguments,1);return n(t).nfapply(r)},t.prototype.nfcall=function(){var t=i(arguments),n=r();return t.push(n.makeNodeResolver()),this.fapply(t).fail(n.reject),n.promise},n.nfbind=n.denodeify=function(t){var u=i(arguments,1);return function(){var e=u.concat(i(arguments)),f=r();return e.push(f.makeNodeResolver()),n(t).fapply(e).fail(f.reject),f.promise}},t.prototype.nfbind=t.prototype.denodeify=function(){var t=i(arguments);return t.unshift(this),n.denodeify.apply(void 0,t)},n.nbind=function(t,u){var f=i(arguments,2);return function(){function s(){return t.apply(u,arguments)}var o=f.concat(i(arguments)),e=r();return o.push(e.makeNodeResolver()),n(s).fapply(o).fail(e.reject),e.promise}},t.prototype.nbind=function(){var t=i(arguments,0);return t.unshift(this),n.nbind.apply(void 0,t)},n.nmapply=n.npost=function(t,i,r){return n(t).npost(i,r)},t.prototype.nmapply=t.prototype.npost=function(n,t){var f=i(t||[]),u=r();return f.push(u.makeNodeResolver()),this.dispatch("post",[n,f]).fail(u.reject),u.promise},n.nsend=n.nmcall=n.ninvoke=function(t,u){var e=i(arguments,2),f=r();return e.push(f.makeNodeResolver()),n(t).dispatch("post",[u,e]).fail(f.reject),f.promise},t.prototype.nsend=t.prototype.nmcall=t.prototype.ninvoke=function(n){var u=i(arguments,1),t=r();return u.push(t.makeNodeResolver()),this.dispatch("post",[n,u]).fail(t.reject),t.promise},n.nodeify=ki,t.prototype.nodeify=function(n){if(n)this.then(function(t){u(function(){n(null,t)})},function(t){u(function(){n(t)})});else return this},vt=et(),n});
/*
//# sourceMappingURL=q.min.js.map
*/



Scripts/_references.js


/// &lt;reference path="jquery-1.8.2.js" /&gt;
/// &lt;reference path="jquery-ui-1.8.24.js" /&gt;
/// &lt;reference path="jquery.validate.js" /&gt;
/// &lt;reference path="jquery.validate.unobtrusive.js" /&gt;
/// &lt;reference path="knockout-2.2.0.debug.js" /&gt;
/// &lt;reference path="modernizr-2.6.2.js" /&gt;




Views/Shared/Error.cshtml


@{
    Layout = null;
}

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta name="viewport" content="width=device-width" /&gt;
    &lt;title&gt;Error&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;hgroup&gt;
        &lt;h1&gt;Error.&lt;/h1&gt;
        &lt;h2&gt;An error occurred while processing your request.&lt;/h2&gt;
    &lt;/hgroup&gt;
&lt;/body&gt;
&lt;/html&gt;



Views/Shared/_Layout.cshtml


width=device-width
@ViewBag.Title
@Styles.Render("~/Content/css") @Scripts.Render("~/bundles/modernizr") @RenderBody() @Scripts.Render("~/bundles/jquery") @RenderSection("scripts", required: false) 



Views/Web.config





  
    
       
       
    

  


  
     
    
      
         
         
         
         
         
      

    

  


  
     
  


  
    
       
    


    
    
      
         
      

    

  


  
     

    
       
       
    

  







Views/_ViewStart.cshtml


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}



Global.asax


&lt;%@ Application Codebehind="Global.asax.cs" Inherits="kCura.IntegrationPoints.Web.MvcApplication" Language="C#" %&gt;




packages.config




   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   





Web.config





  
    
     
  

  
    
    
  

  
     
     
     
     
     
  

  
  
     
    
       
    

    
      
         
         
         
         
         
         
         
      

    

    
    
    
    
    
  

  
     
     
    
       
       
       
       
       
       
    

  

  
    
      
         
         
      

      
         
         
      

      
         
         
      

      
         
         
      

      
         
         
      

    

  

  
     
  






Web.Debug.config






 
  
  
    
  






Web.Release.config






 
  
  
     
    
  






</FileText>
      <Keywords />
      <Notes />
    </CustomPage>
  </CustomPages>
  <AgentTypes />
  <IsRelativityApplication>true</IsRelativityApplication>
  <InstallEventHandlers />
  <RelativityScriptIds />
  <ViewIds>
    <Id>1039496</Id>
    <Id>1039540</Id>
  </ViewIds>
  <LayoutIds>
    <Id>1039522</Id>
    <Id>1039541</Id>
  </LayoutIds>
  <FieldIds>
    <Id>1039495</Id>
    <Id>1039511</Id>
    <Id>1039512</Id>
    <Id>1039513</Id>
    <Id>1039514</Id>
    <Id>1039515</Id>
    <Id>1039516</Id>
    <Id>1039520</Id>
    <Id>1039521</Id>
    <Id>1039538</Id>
    <Id>1039539</Id>
    <Id>1039543</Id>
    <Id>1039544</Id>
  </FieldIds>
  <ChoiceIds>
    <Id>1039517</Id>
    <Id>1039518</Id>
    <Id>1039519</Id>
  </ChoiceIds>
  <ObjectTypeIds>
    <Id>1039498</Id>
    <Id>1039542</Id>
  </ObjectTypeIds>
  <TabIds>
    <Id>1039499</Id>
  </TabIds>
  <CustomPageIds>
    <Id>1039501</Id>
  </CustomPageIds>
  <Locked>true</Locked>
</Application>