<?xml version="1.0"?>
<doc>
<assembly>
<name>
kCura.Data.RowDataGateway
</name>
</assembly>
<members>
<member name="M:kCura.Data.RowDataGateway.SqlBulkCopyParameters.#ctor(System.String)">
	<summary>
 BE CAREFUL! This adds brackets around the table name you pass in. If you're passing in a fully qualified name (database.schema.table) set the DestinationTableName property manually!!
 This should get fixed.
 </summary>
	<param name="destinationTableName">Name of the destination table.</param>
</member><member name="M:kCura.Data.RowDataGateway.BaseContext.ExecuteSqlStatementAsDbDataReader(System.String)">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.BaseContext.ExecuteSqlStatementAsDbDataReader(System.String,System.Int32)">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<param name="timeoutValue">A timeout value in seconds for the query</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.BaseContext.ExecuteSqlStatementAsDbDataReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<param name="params">Any parameters for the statement to run</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.BaseContext.ExecuteSqlStatementAsDbDataReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Int32)">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<param name="params">Any parameters for the statement to run</param>
	<param name="timeoutValue">A timeout value in seconds for the query</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.Helper.CloseSqlDataReader(System.Data.SqlClient.SqlDataReader)">
	<remarks>TODO: Remove and replace all calls with calls to CloseDataReader</remarks>
</member><member name="M:kCura.Data.RowDataGateway.Helper.FillDataAdapterWaitForDeadlocks(System.Data.SqlClient.SqlDataAdapter,System.Data.DataTable)">
	<summary>
 Attempts to execute the specified command to fill the provided
 <paramref name="dataTable"/> with the provided <paramref name="dataAdapter"/>
 and retries up to <see cref="P:kCura.Data.RowDataGateway.Config.NumberOfTriesOnDeadlock"/>
 times if the command errors out with a deadlock error. Note that this
 data adapter should not be used for any command used in the scope of a transaction
 as the transaction is abandoned after a deadlock is encountered.
 </summary>
	<param name="dataAdapter">The data adapter to fill. This adapter's
 command should not be in the scope of a transaction.</param>
	<param name="dataTable">The data table to fill with the results from
 the data adapter.</param>
	<remarks>
 TODO: This should throw an exception if given a data adapter that
 has a transaction.
 </remarks>
</member><member name="M:kCura.Data.RowDataGateway.Helper.FillDataAdapterWaitForDeadlocks(System.Data.SqlClient.SqlDataAdapter,System.Data.DataSet)">
	<summary>
 Attempts to execute the specified command to fill the provided
 <paramref name="dataSet"/> with the provided <paramref name="dataAdapter"/>
 and retries up to <see cref="P:kCura.Data.RowDataGateway.Config.NumberOfTriesOnDeadlock"/>
 times if the command errors out with a deadlock error. Note that this
 data adapter should not be used for any command used in the scope of a transaction
 as the transaction is abandoned after a deadlock is encountered.
 </summary>
	<param name="dataAdapter">The data adapter to fill. This adapter's
 command should not be in the scope of a transaction.</param>
	<param name="dataSet">The data set to fill with the results from
 the data adapter</param>
	<remarks>
 TODO: This should throw an exception if given a data adapter that
 has a transaction.
 </remarks>
</member><member name="M:kCura.Data.RowDataGateway.Helper.ExecuteNonQueryWaitForDeadlocks(System.Data.SqlClient.SqlCommand)">
	<summary>
 Attempts to execute the specified command and retries up to <see cref="P:kCura.Data.RowDataGateway.Config.NumberOfTriesOnDeadlock"/>
 times if the command errors out with a deadlock error. Note that this
 method should not be used for any command used in the scope of a transaction
 as the transaction is abandoned after a deadlock is encountered.
 </summary>
	<param name="command">The command to run. This command should not
 be in the scope of a transaction.</param>
	<returns>The scalar result of the query</returns>
	<remarks>
 TODO: This should throw an exception if given a command that
 has a transaction.
 </remarks>
</member><member name="M:kCura.Data.RowDataGateway.Helper.CombineExceptions(System.Exception,System.Collections.Generic.List{System.Exception})">
	<summary>
 Creates a deadlock exception based on the final exception and the other
 exceptions that occurred while retrying the deadlock.
 </summary>
	<param name="finalException">The last exception that was returned</param>
	<param name="otherExceptions">Any other exceptions that were encountered</param>
	<returns>An exception that contains all of the exceptions that were
 encountered</returns>
</member><member name="M:kCura.Data.RowDataGateway.Context.CommitTransaction">
	<summary>
 Commit the transaction
 </summary>
	<code>
 'The recommended way to use CommitTransaction() is:
 context.BeginTransaction()
 Try
     'Do SQL operations
     context.CommitTransaction()
 Catch
     context.RollbackTransaction()
     Throw
 End Try
 </code>
</member><member name="M:kCura.Data.RowDataGateway.Context.RollbackTransaction">
	<summary>
 This method attempts to rollback the current transaction and close the current connection.
 If rollback fails, it still tries to close the connection.
 This method will never throw an exception.
 </summary>
	<remarks>The reason the method does not throw an exception is, RollbackTransaction()
 is almost always called within the Catch() clause of a Try-Catch block.  Hiding any exceptions
 means that callers do not need to wrap the call to RollbackTransaction in the Catch block.</remarks>
</member><member name="M:kCura.Data.RowDataGateway.Context.RollbackTransaction(System.Exception)">
	<summary>
 This method attempts to rollback the current transaction and close the current connection.
 If rollback fails, it still tries to close the connection.
 This method will never throw an exception.
 </summary>
	<param name="originatingException">The original exception which caused the rollback attempt</param>
	<remarks>In the original implementation, this method would throw the originating exception
 if RollbackTransaction threw an exception.  But now, RollbackTransaction has been changed
 to never throw an exception.  Therefore, the originatingException is never used.</remarks>
</member><member name="M:kCura.Data.RowDataGateway.Context.ExecuteSqlStatementAsDbDataReader(System.String)">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.Context.ExecuteSqlStatementAsDbDataReader(System.String,System.Int32)">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<param name="timeoutValue">A timeout value in seconds for the query</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.Context.ExecuteSqlStatementAsDbDataReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<param name="params">Any parameters for the statement to run</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="M:kCura.Data.RowDataGateway.Context.ExecuteSqlStatementAsDbDataReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Int32)">
	<summary>
 Executes the specified SQL statement as a Data Reader. If executed
 in a transaction, the connection will not be closed when the data
 reader is closed. Otherwise, when the data reader is closed, the
 connection is closed.
 </summary>
	<param name="sqlStatement">The statement to run</param>
	<param name="params">Any parameters for the statement to run</param>
	<param name="timeoutValue">A timeout value in seconds for the query</param>
	<returns>A <see cref="T:System.Data.Common.DbDataReader"/> ready to
 return the data from the query</returns>
</member><member name="P:kCura.Data.RowDataGateway.Config.ConnectionFormatString">
	<summary>
 {0} = data Source, {1} = initial catalog
 </summary>
	<value>
 The connection format string.
 </value>
	<returns></returns>
</member><member name="M:kCura.Data.RowDataGateway.Config.MockConfigurationValue(System.String,System.Object)">
	<summary>
 This should only be called for mocking purposes and not to set values in production code.
 If you call this method in production code you will be shamed.  This will only work if you call
 it before the Settings property is called.
 </summary>
	<param name="configValue">The configuration value.</param>
	<param name="value">The value.</param>
</member>
</members>
</doc>