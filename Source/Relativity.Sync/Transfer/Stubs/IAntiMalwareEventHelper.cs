using System.Threading.Tasks;

namespace Relativity.AntiMalware.SDK
{
    /// <summary>
    /// Helper for reporting anti-malware events in RelativityOne.
    /// 
    /// <remarks>See <see cref="M:Relativity.AntiMalware.SDK.ExceptionExtensions.ContainsAntiMalwareEvent(System.Exception)" /> for information on properly catching anti-malware events.</remarks>
    /// </summary>
    public interface IAntiMalwareEventHelper
    {
        /// <summary>Reports an anti-malware event in RelativityOne.</summary>
        /// <remarks>This method will perform de-duplication so that a single event will be recorded for each unique <see cref="P:Relativity.AntiMalware.SDK.AntiMalwareEvent.UncOrUri" /> over the life of the process. Implementations of this method are thread-safe.</remarks>
        /// <param name="antiMalwareEvent">The anti-malware event to report.</param>
        /// <returns>The ArtifactID of the error record, or -1 if no event needs to be recorded.</returns>
        /// <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="antiMalwareEvent" /> is null.</exception>
        /// <exception cref="T:Relativity.Services.Exceptions.ServiceException">Thrown if underlying Kepler services are unresponsive.</exception>
        Task ReportAntiMalwareEventAsync(AntiMalwareEvent antiMalwareEvent);
    }
}
