using System;
using System.Threading.Tasks;
using Relativity.AntiMalware.SDK;
using Relativity.API;
using Relativity.Sync.Configuration;
using Relativity.Sync.Toggles;
using Relativity.Sync.Toggles.Service;
using Relativity.Sync.Transfer.StreamWrappers;

namespace Relativity.Sync.Transfer
{
    internal class AntiMalwareHandler : IAntiMalwareHandler
    {
        private readonly SyncJobParameters _parameters;
        private readonly IAntiMalwareEventHelper _antiMalwareEventHelper;
        private readonly IAntiMalwareConfiguration _configuration;
        private readonly ISyncToggles _toggles;
        private readonly IFileStreamBuilder _fileStreamBuilder;
        private readonly IAPILog _log;

        public AntiMalwareHandler(
            SyncJobParameters parameters,
            IAntiMalwareEventHelper antiMalwareEventHelper,
            IAntiMalwareConfiguration configuration,
            ISyncToggles toggles,
            IFileStreamBuilder fileStreamBuilder,
            IAPILog log)
        {
            _parameters = parameters;
            _antiMalwareEventHelper = antiMalwareEventHelper;
            _configuration = configuration;
            _toggles = toggles;
            _fileStreamBuilder = fileStreamBuilder;
            _log = log;
        }

        public async Task<bool> ContainsMalwareAsync(IFile file)
        {
            if (_toggles.IsEnabled<EnableMalwareDetectionToggle>() && _configuration.IsPhysicalFileCopyMode)
            {
                try
                {
                    _fileStreamBuilder.Create(file);
                }
                catch (Exception e)
                {
                    if (e.ContainsAntiMalwareEvent())
                    {
                        await HandleEventAsync(e, file).ConfigureAwait(false);

                        return true;
                    }

                    _log.LogError(e, "Error occurred in AntiMalware validation.");
                }
            }

            return false;
        }

        private async Task HandleEventAsync(Exception ex, IFile file)
        {
            try
            {
                _log.LogWarning(ex, "AntiMalware detected for document {documentId} in file {filePath}", file.DocumentArtifactId, file.Location);

                AntiMalwareEvent antiMalwareEvent = new AntiMalwareEvent
                {
                    UncOrUri = file.Location,
                    WorkspaceID = _parameters.WorkspaceId,
                    ArtifactID = file.DocumentArtifactId,
                    Exception = ex
                };

                await _antiMalwareEventHelper.ReportAntiMalwareEventAsync(antiMalwareEvent).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                _log.LogError(e, "Error occurred in AntiMalware Event Report.");
            }
        }
    }
}
