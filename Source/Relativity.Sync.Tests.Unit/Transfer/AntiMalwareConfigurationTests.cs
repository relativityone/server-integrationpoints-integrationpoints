using FluentAssertions;
using NUnit.Framework;
using Relativity.Sync.Configuration;
using Relativity.Sync.Tests.Unit.Storage;
using Relativity.Sync.Transfer;

namespace Relativity.Sync.Tests.Unit.Transfer
{
    internal class AntiMalwareConfigurationTests : ConfigurationTestBase
    {
        private AntiMalwareConfiguration _sut;

        [SetUp]
        public void SetUp()
        {
            _sut = new AntiMalwareConfiguration(_configuration);
        }

        [TestCase(ImportNativeFileCopyMode.DoNotImportNativeFiles, false)]
        [TestCase(ImportNativeFileCopyMode.SetFileLinks, false)]
        [TestCase(ImportNativeFileCopyMode.CopyFiles, true)]
        public void IsPhysicalFileCopyMode_ShouldReturnTrue_WhenNativeFilesAreConfiguredToBeCopied(
            ImportNativeFileCopyMode fileCopyMode, bool expectedIsPhysicalFileCopyMode)
        {
            // Arrange
            _configurationRdo.NativesBehavior = fileCopyMode;

            // Act
            bool result = _sut.IsPhysicalFileCopyMode;

            // Assert
            result.Should().Be(expectedIsPhysicalFileCopyMode);
        }

        [TestCase(ImportImageFileCopyMode.DoNotImportImageFiles, false)]
        [TestCase(ImportImageFileCopyMode.SetFileLinks, false)]
        [TestCase(ImportImageFileCopyMode.CopyFiles, true)]
        public void IsPhysicalFileCopyMode_ShouldReturnTrue_WhenImageFilesAreConfiguredToBeCopied(
            ImportImageFileCopyMode fileCopyMode, bool expectedIsPhysicalFileCopyMode)
        {
            // Arrange
            _configurationRdo.ImageFileCopyMode = fileCopyMode;

            // Act
            bool result = _sut.IsPhysicalFileCopyMode;

            // Assert
            result.Should().Be(expectedIsPhysicalFileCopyMode);
        }
    }
}
