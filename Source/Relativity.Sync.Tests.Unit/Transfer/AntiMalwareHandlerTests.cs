using System.Threading.Tasks;
using FluentAssertions;
using Moq;
using NUnit.Framework;
using Relativity.AntiMalware.SDK;
using Relativity.API;
using Relativity.Sync.Configuration;
using Relativity.Sync.Logging;
using Relativity.Sync.Tests.Common;
using Relativity.Sync.Toggles;
using Relativity.Sync.Toggles.Service;
using Relativity.Sync.Transfer;
using Relativity.Sync.Transfer.StreamWrappers;

namespace Relativity.Sync.Tests.Unit.Transfer
{
    [TestFixture]
    internal class AntiMalwareHandlerTests
    {
        private const int _WORKSPACE_ID = 100;

        private Mock<IAntiMalwareEventHelper> _antiMalwareEventHelperMock;
        private Mock<IAntiMalwareConfiguration> _antiMalwareConfigurationFake;
        private Mock<ISyncToggles> _syncTogglesFake;
        private Mock<IFileStreamBuilder> _fileStreamBuilderMock;

        [Test]
        public async Task ContainsMalwareAsync_ShouldNotCheckMalware_WhenToggleIsDisabled()
        {
            // Arrange
            IFile file = EmptyFile();

            AntiMalwareHandler sut = PrepareSut();

            _syncTogglesFake.Setup(x => x.IsEnabled<EnableMalwareDetectionToggle>()).Returns(false);

            // Act
            bool result = await sut.ContainsMalwareAsync(file).ConfigureAwait(false);

            // Assert
            result.Should().Be(false);

            _fileStreamBuilderMock.Verify(x => x.Create(file), Times.Never());
        }

        [Test]
        public async Task ContainsMalwareAsync_ShouldNotCheckMalware_WhenConfigurationIsNotPhysicalFileCopyMode()
        {
            // Arrange
            IFile file = EmptyFile();

            AntiMalwareHandler sut = PrepareSut();

            _antiMalwareConfigurationFake.SetupGet(x => x.IsPhysicalFileCopyMode).Returns(false);

            // Act
            bool result = await sut.ContainsMalwareAsync(file).ConfigureAwait(false);

            // Assert
            result.Should().Be(false);

            _fileStreamBuilderMock.Verify(x => x.Create(file), Times.Never());
        }

        [Test]
        public async Task ContainsMalwareAsync_ShouldNotReportMalware_WhenFileIsSafe()
        {
            // Arrange
            IFile file = EmptyFile();

            AntiMalwareHandler sut = PrepareSut();

            // Act
            bool result = await sut.ContainsMalwareAsync(file).ConfigureAwait(false);

            // Assert
            result.Should().Be(false);
        }

        private AntiMalwareHandler PrepareSut()
        {
            _antiMalwareEventHelperMock = new Mock<IAntiMalwareEventHelper>();

            _antiMalwareConfigurationFake = new Mock<IAntiMalwareConfiguration>();
            _antiMalwareConfigurationFake.Setup(x => x.IsPhysicalFileCopyMode).Returns(true);

            _syncTogglesFake = new Mock<ISyncToggles>();
            _syncTogglesFake.Setup(x => x.IsEnabled<EnableMalwareDetectionToggle>()).Returns(true);

            _fileStreamBuilderMock = new Mock<IFileStreamBuilder>();

            Mock<IAPILog> log = new Mock<IAPILog>();

            SyncJobParameters parameters = FakeHelper.CreateSyncJobParameters(workspaceId: _WORKSPACE_ID);

            return new AntiMalwareHandler(
                parameters,
                _antiMalwareEventHelperMock.Object,
                _antiMalwareConfigurationFake.Object,
                _syncTogglesFake.Object,
                _fileStreamBuilderMock.Object,
                log.Object);
        }

        private IFile EmptyFile()
        {
            return new Mock<IFile>().Object;
        }
    }
}
