<#@ template language="C#" hostspecific="true" debug="true"#>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ assembly name="C:\SourceCode\IntegrationPoints\source\Dependencies\Milyli.Relativity.CodeGen\GeneratorHelper.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="GeneratorHelper" #>
using System;
using System.Collections.Generic;  
using System.Text;
using kCura.Relativity.Client;
using kCura.IntegrationPoints.Data.Attributes;

namespace kCura.IntegrationPoints.Data
{
<#
var templateFile = Path.GetDirectoryName(Host.TemplateFile);
var schemaFile = @"..\source\application\application.xml"; 
var fullPathSchemaFile = Path.Combine(Path.GetDirectoryName(templateFile), schemaFile);
var objTypes = SchemaHelper.GetObjectTypes(fullPathSchemaFile);
foreach  (ObjectTypeDTO objType in objTypes)
{
#>
 
	[DynamicObject(ObjectTypes.<#=objType.Name.ToPascalCase()#>, ObjectTypes.<#=objType.ParentArtifactTypeName.ToPascalCase()#>, "", ObjectTypeGuids.<#=objType.Name.ToPascalCase()#>)]
	public partial class <#=objType.Name.ToPascalCase()#> : BaseRdo
	{
<#
foreach(var field in objType.UserFields)
{
var lengthStr = "";
if (!(string.IsNullOrEmpty(field.MaxLength)))
	{
		lengthStr = ", "+ field.MaxLength;
		#>
		public const int <#=field.DisplayName.ToPascalCase()#>FieldLength = <#=field.MaxLength#>;
<#
	}
#>
		[DynamicField(<#=objType.Name.ToPascalCase()#>Fields.<#=field.DisplayName.ToPascalCase()#>, <#=objType.Name.ToPascalCase()#>FieldGuids.<#=field.DisplayName.ToPascalCase()#>, FieldTypes.<#=((FieldTypeHelper.RSFieldType)field.FieldTypeId).ToString()#><#=lengthStr#>)]
		public <#=FieldTypeHelper.CSType(field.FieldTypeId)#> <#=field.DisplayName.ToPascalCase()#>
		{
			get
			{
				return GetField<<#=FieldTypeHelper.CSType(field.FieldTypeId)#>>(new System.Guid(<#=objType.Name.ToPascalCase()#>FieldGuids.<#=field.DisplayName.ToPascalCase()#>));
			}
			set
			{
				SetField<<#=FieldTypeHelper.CSType(field.FieldTypeId)#>>(new System.Guid(<#=objType.Name.ToPascalCase()#>FieldGuids.<#=field.DisplayName.ToPascalCase()#>), value);
			}
		}
<#
}
foreach(var field in objType.SystemFields)
{
	var lengthStr = "";
	if (field.AssociativeArtifactTypeId > 0)
	{
		if (!(string.IsNullOrEmpty(field.MaxLength)))
			lengthStr = ", "+ field.MaxLength;
#>
		[DynamicField(<#=objType.Name.ToPascalCase()#>Fields.<#=field.DisplayName.ToPascalCase()#>, <#=objType.Name.ToPascalCase()#>FieldGuids.<#=field.DisplayName.ToPascalCase()#>, FieldTypes.<#=((FieldTypeHelper.RSFieldType)field.FieldTypeId).ToString()#><#=lengthStr#>)]
		public <#=FieldTypeHelper.CSType(field.FieldTypeId)#> <#=field.DisplayName.ToPascalCase()#>
		{
			get
			{
				return GetField<<#=FieldTypeHelper.CSType(field.FieldTypeId)#>>(new System.Guid(<#=objType.Name.ToPascalCase()#>FieldGuids.<#=field.DisplayName.ToPascalCase()#>));
			}
			set
			{
				SetField<<#=FieldTypeHelper.CSType(field.FieldTypeId)#>>(new System.Guid(<#=objType.Name.ToPascalCase()#>FieldGuids.<#=field.DisplayName.ToPascalCase()#>), value);
			}
		}
<#
	}
}
#>
		private static System.Collections.Generic.Dictionary<Guid, DynamicFieldAttribute> _fieldMetadata;
		public override System.Collections.Generic.Dictionary<Guid, DynamicFieldAttribute> FieldMetadata
		{
			get
			{
				if (!(_fieldMetadata == null))
					return _fieldMetadata;
				_fieldMetadata = GetFieldMetadata(typeof(<#=objType.Name.ToPascalCase()#>));
				return _fieldMetadata;
			}
		}
		private static DynamicObjectAttribute _objectMetadata;
		public override DynamicObjectAttribute ObjectMetadata
		{
			get
			{
				if (!(_objectMetadata == null))
					return _objectMetadata;
				_objectMetadata = GetObjectMetadata(typeof(<#=objType.Name.ToPascalCase()#>));
				return _objectMetadata;
			}
		}
	}
<#
}
#>

}