<#@ template language="C#" hostspecific="true" debug="true"#>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ assembly name="C:\SourceCode\IntegrationPoints\source\Dependencies\Milyli.Relativity.CodeGen\GeneratorHelper.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="GeneratorHelper" #>
<#
var templateFile = Path.GetDirectoryName(Host.TemplateFile); 
var schemaFile = @"..\ApplicationsXML\application.xml"; 
var fullPathSchemaFile = Path.Combine(Path.GetDirectoryName(templateFile), schemaFile);
var objTypes = SchemaHelper.GetObjectTypes(fullPathSchemaFile);
var tabTypes = SchemaHelper.GetObjectTypes(fullPathSchemaFile);
string nameSpaceName = "kCura.IntegrationPoints.Data"; 
#>
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using Relativity.API;

namespace kCura.IntegrationPoints.Data
{
	public partial class RSAPIService : IRSAPIService
	{
		private readonly IDictionary<Type, object> _genericLibraries;
		private readonly IHelper _helper;
		private readonly int _workspaceArtifactId;

	<#
	foreach  (ObjectTypeDTO objType in objTypes)
	{
	#>
	public IGenericLibrary<<#=objType.Name.ToPascalCase()#>> <#=objType.Name.ToPascalCase()#>Library => GetGenericLibrary<<#=objType.Name.ToPascalCase()#>>();
	<#
	}
	#>

		public IGenericLibrary<T> GetGenericLibrary<T>() where T : BaseRdo, new()
		{
			if (!_genericLibraries.ContainsKey(typeof(T)))
			{
				_genericLibraries.Add(typeof(T), new RsapiClientLibrary<T>(_helper, _workspaceArtifactId));
			}
			return (IGenericLibrary<T>) _genericLibraries[typeof(T)];
		}

		public RSAPIService(IHelper helper, int workspaceArtifactId)
		{
			_genericLibraries = new ConcurrentDictionary<Type, object>();
			_helper = helper;
			_workspaceArtifactId = workspaceArtifactId;
		}
	}
}
