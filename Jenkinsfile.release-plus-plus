
//region Job Parameters
type = BUILD_TYPE
installIntegrationPointFromRapFile = INSTALL_RIP_FROM_RAP
relativity_branch = REL_BRANCH
runSmokeTestsOnly = SMOKE_ONLY
ripBranch = RIP_BRANCH
slackChannel = SLACK_CHANNEL
//endregion

//region main scope variables
build = "NULL"
invariantbuild = "NULL"
installing_relativity = true
knife = "C:\\Python27\\Lib\\site-packages\\jeeves\\knife.rb"
username = "testing\\Administrator"
password = "P@ssw0rd@1"
hasErrors = false
//endregion

//region GlobalVariables
def profile = "profile_rel"
def run_list = "role-ci::install_relativity,role-ci::update_config,license::default"

def automation_branch = 'develop'
def invariant_branch = 'develop'

def passed = false
def status = "FAIL"
def ip_address = ""
def random_server = ""
def server_name = ""
def domain = ""

def names_of_slaves = []
def number_of_slaves = '2'
def session_id = System.currentTimeMillis().toString()
def s = relativity_branch + env.JOB_NAME
def event_hash = java.security.MessageDigest.getInstance("MD5").digest(s.bytes).encodeHex().toString()
//endregion
  
   
def getIpAddress(serverName) {
   def ip_address_raw = String.format('python -m vmware.create_ci_environment --platform get_ip_address_of_vm -s %1$s', serverName)
   def ip_address = bat returnStdout: true, script: ip_address_raw
   return ip_address.trim().split('\r\n')[2]
}

def sendSlackMessage(recipients_list, message, color="E8E8E8") {
    for (recipient in recipients_list) {
        slackSend channel: "${recipient}", color: "${color}", message: "${message}", teamDomain: 'kcura-pd', token: 'nd9zSTCysTjKA7Ky5mMCCA5b'
        sleep(1) // Slack has a rate limit of 1 msg / second
    }
}
  
def execute_nunit_tests(String test_dll, String tests_filter, String session_id, String phase){
	println String.format('execute_nunit_tests(%1$s,%2$s,%3$s,%4$s)', test_dll, tests_filter, session_id, phase)
	
	def where_clause = "_SKIPREASON !~ .+"
	if(tests_filter != ''){
		where_clause = where_clause + ' && ' + tests_filter
	}
	
	dir('c:/SourceCode/integrationpoints'){
		try {			
			def testsHavePassed = bat (script: String.format('"C:\\Program Files (x86)\\NUnit.org\\nunit-console\\nunit3-console.exe" C:\\SourceCode\\integrationpoints\\lib\\UnitTests\\%1$s --where "%2$s" --inprocess --result=C:\\SourceCode\\integrationpoints\\nunit-result.xml;format=nunit2', "$test_dll", "$where_clause"), 
			returnStatus: true) == 0
						
			hasErrors = hasErrors || !testsHavePassed			
			println 'DEBUG: hasErrors = ' + hasErrors
		
			//To provide compatibility with 'nunit_curiosity_listener' script we need to remove 'Properties' node from TestCase
			def commandString =  """Get-ChildItem .\\nunit-result.xml | %% {; 	[Xml]\$xml = Get-Content \$_.FullName;    \$xml | Select-Xml -XPath '//*[local-name() = ''properties'']' | ForEach-Object{\$_.Node.ParentNode.RemoveChild(\$_.Node)};    \$xml.OuterXml | Out-File .\\result.xml -encoding 'UTF8'; }"""
			bat String.format('powershell.exe "%s"', commandString)
					
			//And also ensure there is no Skipped test as 'nunit_curiosity_listener' doesn't handle 'Skipped; state
			commandString =  """Get-ChildItem .\\result.xml | %% {; 	[Xml]\$xml = Get-Content \$_.FullName; 	\$xml | Select-Xml -XPath '//*[@result = ''Skipped'']' | ForEach-Object{echo \$_.Node.LocalName; if(\$_.Node.LocalName -eq 'test-case'){\$_.Node.ParentNode.RemoveChild(\$_.Node)}}; \$xml.OuterXml | Out-File .\\result.xml -encoding 'UTF8'; }"""
					bat String.format('powershell.exe "%s"', commandString)
			
			//Finally we can run 'nunit_curiosity_listener' as we're almost certain there will be no problems
			bat String.format('python C:\\Python27\\Talos\\bin\\listeners\\nunit_curiosity_listener.py --phase %2$s -p C:\\SourceCode\\integrationpoints\\result.xml --session_id %1$s', session_id, phase)
			
			bat 'powershell.exe Remove-Item C:\\SourceCode\\integrationpoints\\nunit-result.xml'
		
		} catch(Exception e){  		
			hasErrors = true
		}
	}
}

// Java has a 64kb limit for any function that it runs and this means that the number of steps that we can run is limited. https://issues.jenkins-ci.org/browse/JENKINS-37984
def run_tests(String session_id) {
		println String.format('run_tests(%1$s)', session_id)
		
		def tests_filter = ''
		if (runSmokeTestsOnly == 'true')
			tests_filter = "cat == SmokeTest"
				
		//Integration tests
		execute_nunit_tests("kCura.IntegrationPoints.Agent.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.Core.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.Data.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.DocumentTransferProvider.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.EventHandlers.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.FilesDestinationProvider.Tests.Integration.dll", tests_filter, session_id, "production")		
		execute_nunit_tests("kCura.IntegrationPoints.ImportProvider.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.Services.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.Synchronizers.RDO.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.IntegrationPoints.Web.Tests.Integration.dll", tests_filter, session_id, "production")
		execute_nunit_tests("kCura.ScheduleQueue.Core.Tests.Integration.dll", tests_filter, session_id, "production")		
		
}
//endregion


stage('Get Server') {
	
	echo "\n*************************************************" + 
	"\n type = BUILD_TYPE = " + type +
	"\n relativity_branch = REL_BRANCH = " + relativity_branch +
	"\n ripBranch = RIP_BRANCH = " + ripBranch +
	"\n runSmokeTestsOnly = SMOKE_ONLY = " + runSmokeTestsOnly +	
	"\n installIntegrationPointFromRapFile = INSTALL_RIP_FROM_RAP = " + installIntegrationPointFromRapFile + 
	"\n*************************************************" 	
	
    def file_name = UUID.randomUUID().toString() + ".txt"
	def windows_path = "\\\\dv-file-01.testing.corp\\Testing\\TestingData\\PooledServers\\" + file_name
	def linux_path = "/mnt/dv-file-01.testing.corp/TestingData/PooledServers/" + file_name

	build job: 'Provision.VMware.GetServerFromPool', parameters: [
        [$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
        string(name: 'temp_file', value: windows_path),
        string(name: 'pool_name', value: 'cook')]
					
	def file = new File(linux_path)
	random_server = file.text

	def file_deleted = file.delete()
		
	echo "*************************************************" +
	"\nProfile:" + profile + 
	"\nRun list:" + run_list +
	"\nInstalling Relativity to " + random_server +
	"\nBranch:" + relativity_branch +
	"\nBuild:" + build +
	"\nType:" + type +
	"\nsession_id: " + session_id +
	"\nevent_hash: " + event_hash +
	"\n*************************************************"
		
	def tokens = random_server.tokenize(".")
	server_name = tokens[0]
	domain = tokens[1] + '.' + tokens[2]
	
	for (i = 0; i < number_of_slaves.toInteger(); i++) {
        names_of_slaves.add("JNK-" + server_name +  "-" + i)
    }
	
    node ('chef') {
        ip_address = getIpAddress(server_name)
        echo ip_address
    }
}


try {
	node('buildslave') {
		stage('Get & Build Tests') {						
			dir('C:/SourceCode') {
				bat 'powershell.exe "taskkill /f /im msbuild.exe /T /fi \'IMAGENAME eq msbuild.exe\'"'
								
				checkout([
							$class : 'GitSCM', 
							branches : [[name : ripBranch]], 
							doGenerateSubmoduleConfigurations : false,
							extensions :
							[	
								[$class : 'CleanBeforeCheckout'],
								[$class : 'RelativeTargetDirectory', relativeTargetDir : 'integrationpoints']	
							],
							submoduleCfg : [],
							userRemoteConfigs :
							[
								[credentialsId : 'TalosCI (bitbucket)', url : 'ssh://git@git.kcura.com:7999/in/integrationpoints.git']
							]
						])
			}		
			
			dir('C:/SourceCode/integrationpoints') {
				bat 'powershell.exe "& {./build.ps1 release; exit $lastexitcode}"'
			}			
			
			dir('C:/SourceCode/integrationpoints') {
				stash includes: 'lib/UnitTests/*', name: 'testdlls'				
				stash includes: 'lib/UnitTests/TestData/*', name: 'testdata'				
				stash includes: 'lib/UnitTests/TestData/IMAGES/*', name: 'testdata_images'				
				stash includes: 'lib/UnitTests/TestData/NATIVES/*', name: 'testdata_natives'		
				stash includes: 'lib/UnitTests/oi/*', name: 'outside_in'		
				stash includes: 'lib/UnitTests/TestDataForImport/*', name: 'testdataforimport'
				stash includes: 'lib/UnitTests/TestDataForImport/et-files/*', name: 'testdataforimport_et'
				stash includes: 'lib/UnitTests/TestDataForImport/img/*', name: 'testdataforimport_img'
				stash includes: 'lib/UnitTests/TestDataForImport/native-files/*', name: 'testdataforimport_native'
				stash includes: 'DynamicallyLoadedDLLs/Search-Standard/*', name: 'DynamicallyLoadedDLLs'
				stash includes: 'Applications/RelativityIntegrationPoints.Auto.rap', name: 'integrationPointsRap'	
			}
		}
	}
	
	stage('Install Relativity') {
    	parallel Deploy: {
    		build job: "Reporting.RegisterEvent", parameters: [
                [$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
                string(name: 'action', value: '-c'),
                string(name: 'session_id', value: session_id),
                string(name: 'deployment_step', value: 'Talos_Provision_test_CD'),
                string(name: 'host', value: random_server),
                string(name: 'profile', value: profile),
                string(name: 'event_hash', value: event_hash),
                string(name: 'exclude_verification_steps', value: 'true')]
    						
    		build job: 'Provision.Chef.UploadEnvironmentFile', parameters: [
				string(name: 'type', value: type),
				string(name: 'build', value: build),
				string(name: 'branch', value: relativity_branch),				
				string(name: 'invariantbuild', value: invariantbuild),
				string(name: 'invariantbranch', value: invariant_branch),
				string(name: 'template', value: "V2"),
				string(name: 'server', value: server_name),
				string(name: 'knife', value: "$knife"),
				string(name: 'session_id', value: session_id),
				string(name: 'username', value: username),
				string(name: 'password', value: password),
				[$class: 'NodeParameterValue', name: 'node_label', labels: [server_name + ' || chef'], nodeEligibility: [$class: 'AllNodeEligibility']]]
    			
    		node ('chef') {
			try {
				bat String.format('knife node run_list add %1$s %3$s -c %2$s', server_name, "$knife", run_list)
				bat String.format('python -m jeeves.register_event --session_id %1$s -ds chef_setup --status PASS -u --host %2$s --profile %3$s --event_hash %4$s --component relativity --job_link unknown', session_id, random_server, profile, event_hash)
				} catch(Exception ex)  {
					echo 'DEBUG: Previous value of hasErrors = ' + hasErrors
					hasErrors = true
					bat String.format('python -m jeeves.register_event --session_id %1$s -ds chef_setup --status FAIL -u --host %2$s --profile %3$s --event_hash %4$s --component relativity --job_link unknown', session_id, random_server, profile, event_hash)
					echo 'DEBUG: hasErrors = ' + hasErrors
					}
				try {
				  bat String.format('python -m jeeves.chef_functions -f run_chef_client -n %1$s -r %2$s -un %3$s -up %4$s', ip_address, "$knife", "$username", "$password")
				}catch(Exception ex)  {					
					echo 'DEBUG: Previous value of hasErrors = ' + hasErrors
					hasErrors = true
					echo 'DEBUG: Something failed in the installation'
					echo 'DEBUG: hasErrors = ' + hasErrors
				}
			}
    		
    		if (installing_relativity) {
				build job: 'Provision.Chef.WaitForTags', parameters: [
					string(name: 'node', value: server_name),
					string(name: 'tags', value: '-t relativityInstalled'),
					string(name: 'session_id', value: session_id),
					string(name: 'deployment_step', value: 'Relativity_Installation'),
					string(name: 'component', value: 'relativity'),
					string(name: 'timeout', value: '300'),
					string(name: 'knife', value: knife),
					[$class: 'NodeParameterValue', name: 'node_label', labels: [server_name], nodeEligibility: [$class: 'AllNodeEligibility']]]
			}				 
			
			node(server_name)
			{
				def database = server_name + "\\EDDSINSTANCE001"
				bat String.format('python -m jeeves.validation -f check_workspace_upgrade -e %1$s', database)
			}
		 
		}, ProvisionNodes: {
			build job: "Provision.VMware.ExpiryAttribute", parameters: [
				[$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
				string(name: 'node', value: random_server),
				string(name: 'hours', value: '12')]
				 
			build job: "vCenter.create_jenkins_slaves", parameters: [
			[$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
				string(name: 'TemplateName', value: 'TT-Win7-IE10-Robot3'),
				string(name: 'VMNames', value: names_of_slaves.toString()),
				string(name: 'StartSequence', value: '1'),
				string(name: 'NumberOfSlaves', value: number_of_slaves),
				string(name: 'JenkinsServer', value: 'POLAND'),
				string(name: 'Label', value: server_name)]
		 
			for (name_of_slave in names_of_slaves){
				build job: 'test.Nodes.PullTestDependencies', parameters: [
					[$class: 'NodeParameterValue', name: 'node_label', labels: [name_of_slave], nodeEligibility: [$class: 'AllNodeEligibility']],
					string(name: 'RelativityBuild', value: build),
					string(name: 'RelativityType', value: type),
					string(name: 'branch', value: relativity_branch),
					string(name: 'automation', value: automation_branch)],
					wait: false
			}
		}, failFast: true
    }

	node(server_name) {
		stage('Run Integration & Smoke Tests') {
			
			bat 'mkdir "C:\\SourceCode\\integrationpoints"'
			bat "powershell.exe setx JenkinsBuildHost " + random_server + " /m"			
			bat "powershell.exe setx JenkinsUseIPRapFile " + installIntegrationPointFromRapFile + " /m"
						
			dir('C:/SourceCode/integrationpoints') {
				unstash 'testdlls'
				unstash 'testdata'
				unstash 'testdata_images'
				unstash 'testdata_natives'
				unstash 'integrationPointsRap'
				unstash 'outside_in'
				unstash 'testdataforimport'
				unstash 'testdataforimport_et'
				unstash 'testdataforimport_img'
				unstash 'testdataforimport_native'				
				unstash 'DynamicallyLoadedDLLs'
				
				run_tests(session_id)
			}	
		}
	}
	
	passed = true
	if (!hasErrors)
		status = "PASS"
	
	println 'DEBUG: hasErrors: ' + hasErrors + ' , status: ' + status
}
finally {
    try {
		stage('Report Results') {
		    if (passed) {
				build job: "Provision.VMware.DeleteVM", parameters: [
					[$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
					string(name: 'vm_name', value: server_name),
					string(name: 'knife', value: knife)]
			} else {
    			
    			build job: "vCenter.shutdown_vms", parameters: [
    				[$class: 'NodeParameterValue', name: 'node_label', labels: [server_name + ' || chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
    				string(name: 'VMs', value: "-v " + server_name)]
		    }
							
			build job: "Reporting.RegisterEvent", parameters: [
				[$class: 'NodeParameterValue', name: 'node_label', labels: [server_name], nodeEligibility: [$class: 'AllNodeEligibility']],
				string(name: 'action', value: '-ps'),
				string(name: 'session_id', value: session_id),
				string(name: 'status', value: status),
				string(name: 'deployment_step', value: 'Pipeline_Status'),
				string(name: 'host', value: random_server),
				string(name: 'event_hash', value: event_hash),
				string(name: 'job', value: env.BUILD_URL)]
										
			build job: "Reporting.AutomationReport", parameters: [
				[$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
				string(name: 'branch', value: relativity_branch),
				string(name: 'session_id', value: session_id),
				string(name: 'slack_recipients', value: slackChannel),
				string(name: 'notify', value: ''),
				string(name: 'event_hash', value: event_hash),
				string(name: 'report_health', value: 'report_health'),
				string(name: 'exclude_post_install_steps', value: 'true')]
						
			// Customized Jenkins Slack notification:	
			def slackCommits = "\n *Commits:*"
			def slackNoCommits = "\n There weren't any changes."
			def slackMessage = slackCommits
			for (changelog in currentBuild.changeSets)
			{
				for (commit in changelog.items)
				{
					slackMessage += "\n\n*${commit.author}:* ${commit.msg}"
				}
			}		
			if (slackMessage == slackCommits)
				slackMessage = slackNoCommits
						
			def message = "*${status}*: <${env.BUILD_URL}|Build #${env.BUILD_NUMBER}> from <${env.JOB_URL}|${env.JOB_NAME}> \n${slackMessage}"
			if (hasErrors)
				message = "@here --> " + message
			
			sendSlackMessage([slackChannel], message, (hasErrors) ? 'ff0000' : '00ff00')				
		}
	}
    finally {
	stage('Jenkins Slave Cleanup') {
		for (name_of_slave in names_of_slaves){
			build job: 'Provision.VMware.DeleteVM', parameters: [[$class: 'NodeParameterValue', name: 'node_label', labels: ['chef'], nodeEligibility: [$class: 'AllNodeEligibility']],
				string(name: 'vm_name', value: name_of_slave)],
				wait: false
			}
		}
	}
	
	//this part is crucial to return the error. Otherwise Jenkins returns SUCCESS.
	if (hasErrors)
		error "The build has errors."
}